{"pages":[{"title":"关于我","text":"QQ435956653 微信Justin_disco","link":"/about/index.html"}],"posts":[{"title":"CSS-day05","text":"第01阶段.前端基础.页面制作 实战|demo目标 理解 能够说写单页面我们基本的流程 能说出常见的css初始化语句 能说出我们CSS属性书写顺序 应用 能利用ps切图 能引入外部样式表 能把psd文件转换为html页面 学成在线的目的就是为了串联前面的所有知识。来一个春晚大联欢。 pink老师： 取义学有所成，为师之期望，君等成才者也，故曰学成网是也~~ 前期准备素材 学成在线PSD源文件 https://itfool.cn/前端笔记/css-day05/学成网首页.psd 开发工具 = PS（切图） + sublime（代码） + chrome（测试） 前期准备工作欲先善其事，必先利其器。 先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。 创建 study 目录文件夹 (用于存放我们这个页面的相关内容) study目录内新建images 文件夹 用于保存图片。 新建index.html 首页html 文件（以后我们的网站首页统一规定为index.html) 新建style.css 样式文件。 我们本次采用外链样式表。 将样式引入到我们HTML页面文件中。 样式表写入 清除内外边距样式，来检测样式表是否引入成功。 CSS属性书写顺序(重点)建议遵循以下顺序： 布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式） 自身属性：width / height / margin / padding / border / background 文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word 其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient … 1234567891011121314151617.jdc { display: block; position: relative; float: left; width: 100px; height: 100px; margin: 0 10px; padding: 20px 0; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #333; background: rgba(0,0,0,.5); -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px; border-radius: 10px;} 布局流程为了提高网页制作的效率，布局时通常有以下的布局流程，具体如下： 1、必须确定页面的版心（可视区）， 我们测量可得知。 2、分析页面中的行模块，以及每个行模块中的列模块。其实页面布局，就是一行行罗列而成 3、制作HTML结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。 4、然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。 页面制作这个页面的版心是 1200像素 每个版心都要水平居中对齐，所以，我们干脆把版心定义为： 1234.w { width: 1200px; margin: auto;} 头部制作结构图如下： 1号是版心盒子header 1200 * 42 的盒子水平居中对齐, 上下给一个margin值就好了。 版心盒子 里面包含 2号盒子 logo 版心盒子 里面包含 3号盒子 nav导航栏 版心盒子 里面包含 4号盒子 search搜索框 版心盒子 里面包含 5号盒子 user个人信息 注意，要求里面的 4个盒子 必须都浮动 banner制作结构图如下： 1号盒子是通栏的大盒子banner， 不给宽度，给高度，给一个蓝色背景。 2号盒子是版心， 要水平居中对齐。 3号盒子版心内，左对齐 subnav侧导航栏。 4号盒子版心内，右对齐 course 课程。 课程表模块结构图如下： 1号盒子 是 228 * 300 的盒子 右浮动 注意 浮动的元素 不会有外边距塌陷的问题 1号盒子内 分为 上下 两个 子盒子 2号子盒子是 上部分 我们命名为 course-hd (hd 是 head 的简写 头部的意思，我们经常用) 3号子盒子是 下部分 我们命名为 course-bd (bd 是 body 的简写 主体的意思，我们经常用) 精品推荐小模块结构图如下： 复习点： 因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font- line- text- color 大盒子水平居中 goods 精品 ，注意此处有个盒子阴影 1号盒子是标题 H3 左侧浮动 2号盒子 里面放链接 左侧浮动 goods-item 距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距） 3号盒子 右浮动 mod 修改 精品推荐大模块结构图如下： 1号盒子为最大的盒子 box 版心水平居中对齐 2号盒子为上面部分 box-hd – 里面 左侧标题H3 左浮动 右侧 链接 a 右浮动 3号盒子为底下部分 box-bd — 里面是无序列表 有 10个 小li 组成 小li 外边距的问题， 这里有个小技巧。 给box-hd 宽度为 1215 就可以一行装开5个 li了 复习点： 我们用到清除浮动 因为 box-hd 里面的盒子个数不一定多少，我们就不给高度了，但是里面的盒子浮动了， 影响下面的布局，此时需要浮动 底部模块制作结构图如下： 1号盒子通栏大盒子 底部 footer 给高度 底色是白色 2号盒子版心水平居中 3号盒子版权 copyright 左对齐 4号盒子 链接组 links 右对齐 chrome调试工具“工欲善其事，必先利其器” Chrome浏览器不仅可以调试页面、JS、请求、资源、cookie，还可以模拟手机进行调试。我们现在只是使用html和css，我们先讲一下现在常用的调试。 怎样打开Chrome的开发者工具？直接在页面上点击右键，然后选择 “检查” 快捷键 F12 或者 ctrl+shift+i 基本的结构布局是左边html 右边是 css chrome调试数值可以鼠标点击后面的数值， 按下键盘 上箭头 是 调大 数值， 下箭头是 调小数值 快速定位css所在行数 Chrome提示的常见布局错误css单词书写错误提示用下图所示的黑色箭头，点击我们需要的 html 元素。 css无显示声明类名和html调用名不一致 或者 css文件引入不对 或者 这个样式的前面 多余了一些符号影响的 html 结构不匹配(重要)左侧 展开可以看到html 标签是否匹配 通过颜色判断盒子蓝色是 盒子的 宽度高度 青色是 内边距 橙色 是外边距 通过这个很方便的看到盒子给的范围 看看你有如下错误吗","link":"/前端笔记/css-day05/"},{"title":"HTML-Day01","text":"第01阶段.前端基础.认识WEB 课程安排 HTML 第一天目标 能够写出基本的html页面（里面包含图片、链接、文字等网页元素标签） 认识WEB1. 认识网页1网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。 思考： 网页是如何形成的呢? 总结网页有图片、链接、文字等元素组成，我们后面的任务就是要把这部分网页元素用代码写出来。。。 2. 浏览器（显示代码） 1浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。 可能你最熟悉的是 IE浏览器，但是。。。 2.1 查看浏览器占有的市场份额查看网站： http://tongji.baidu.com/data/browser 2008年，大名鼎鼎的互联网巨头Google公司发布了它的首款浏览器Chrome浏览器。 跟王思聪一样，没办法，生下来人家就是富二代官二代啊，后台太强，而且确实先天能力得天独厚。 pink老师 一句话说出他们: 出自谷歌，唯我不败；一统江湖，千秋万代。 2.2 常见浏览器内核（了解）首先解释一下浏览器内核是什么东西。英文叫做：Rendering Engine，中文翻译很多，排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核. 1负责读取网页内容，整理讯息，计算网页的显示方式并显示页面. 因为浏览器太多啦， 但是现在主要流行的就是下面几个： 浏览器 内核 备注 IE Trident IE、猎豹安全、360极速浏览器、百度浏览器 firefox Gecko 可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。 Safari webkit 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。 chrome Chromium/Blink 在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发 Opera blink 现在跟随chrome用blink内核。 拓展阅读： 12345移动端的浏览器内核主要说的是系统内置浏览器的内核。Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的 3. Web标准（重点）目标 记忆 能说出网页 中 web 标准三层组成 理解 能结合人来表述web标准三层 Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。 W3C 万维网联盟是国际最著名的标准化组织。1994年成立后，至今已发布近百项相关万维网的标准，对万维网发展做出了杰出的贡献。 w3c就类似于现实世界中的联合国。 3.1 为什么要遵循WEB标准呢？ 通过以上浏览器不同内核不同，我们知道他们显示页面或者排版就有些许差异。 3.2 Web 标准的好处遵循web标准可以让不同我们写的页面更标准更统一外，还有许多优点 1、让Web的发展前景更广阔2、内容能被更广泛的设备访问3、更容易被搜寻引擎搜索4、降低网站流量费用5、使网站更易于维护6、提高页面浏览速度 3.3 Web 标准构成构成： 主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。 标准 说明 备注 结构 结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 表现 表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS 行为 行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript 理想状态我们的源码： .HTML .css .js 结合人来记忆web标准： 结构标准： 是你天然的身体 表现标准： 决定你是否打扮的美丽外观(衣服？化妆？) 行为标准： 决定你是否有吸引人的行为(动作) web标准小结 web标准有三层结构，分别是结构（html）、表现（css）和行为（javascript） 结构类似人的身体， 表现类似人的着装， 行为类似人的行为动作 理想状态下，他们三层都是独立的， 放到不同的文件里面 4. 拓展@ 介绍一下你对浏览器内核的理解？常见的浏览器内核有哪些？ 浏览器内核包括两部分，渲染引擎和js引擎。渲染引擎负责读取网页内容，整理讯息，计算网页的显示方式并显示页面，js引擎是解析执行js获取网页的动态效果。 后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。IE：Tridentfirefox：Geckochrom、safari：webkitOpera：PrestoMicrosoft Edge：EdgeHTML 深度阅读：五大主流浏览器内核的源起以及国内各大浏览器内核总结","link":"/前端笔记/html-day01/"},{"title":"HTML-Day04","text":"第01阶段.前端基础.表格 HTML 第二天目标 能够利用表格、列表和表单完成注册页面的综合案例 能出说表格用来做什么的 能说出列表用来做什么的 能说出表单用来做什么的 为了让我们页面显示的更加整齐，我们需要学习三个表（表格、表单、列表） 表格 table(会使用)目标： 理解： 能说出表格用来做什么的 表格的基本结构组成 应用： 能够熟练写出n行n列的表格 能简单的合并单元格​ 表格作用： 存在即是合理的。 表格的现在还是较为常用的一种标签，但不是用来布局，常见显示、展示表格式数据。 因为它可以让数据显示的非常的规整，可读性非常好。 特别是后台展示数据的时候表格运用是否熟练就显得很重要，一个清爽简约的表格能够把繁杂的数据表现得很有条理，虽然 div 布局也可以做到，但是总没有表格来得方便。 ps: 这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说 PPAP i hava a pen 1. 创建表格在HTML网页中，要想创建表格，就需要使用表格相关的标签。 创建表格的基本语法： 1234567&lt;table&gt; &lt;tr&gt; &lt;td&gt;单元格内的文字&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; 要深刻体会表格、行、单元格他们的构成。 在上面的语法中包含基本的三对HTML标签，分别为 table、tr、td，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释 table用于定义一个表格标签。 tr标签 用于定义表格中的行，必须嵌套在 table标签中。 td 用于定义表格中的单元格，必须嵌套在标签中。 字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。 *总结： * 表格的主要目的是用来显示特殊数据的 一个完整的表格有表格标签（table），行标签（tr），单元格标签（td）组成，没有列的标签 中只能嵌套 类的单元格 标签，他就像一个容器，可以容纳所有的元素 2. 表格属性表格有部分属性我们不常用，这里重点记住 cellspacing 、 cellpadding。 我们经常有个说法，是三参为0， 平时开发的我们这三个参数 border cellpadding cellspacing 为 0 案例1： 12345678&lt;table width=\"500\" height=\"300\" border=\"1\" cellpadding=\"20\" cellspacing=\"0\" align=\"center\"&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;刘德华&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;55&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;郭富城&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;52&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;张学友&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;58&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;黎明&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;18&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;刘晓庆&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;td&gt;63&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 3. 表头单元格标签th 作用： 一般表头单元格位于表格的第一行或第一列，并且文本加粗居中 语法： 只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。 案例2： ​ 效果图 ​ 代码： 1234567891011121314151617&lt;table width=\"500\" border=\"1\" align=\"center\" cellspacing=\"0\" cellpadding=\"0\"&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;电话&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;小王&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;td&gt;110&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;小明&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;120&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; pink老师 一句话说出他们: th 也是一个单元格 只不过和普通的 td单元格不一样，它会让自己里面的文字居中且加粗 4. 表格标题caption定义和用法 123&lt;table&gt; &lt;caption&gt;我是表格标题&lt;/caption&gt;&lt;/table&gt; *注意： * caption 元素定义表格标题，通常这个标题会被居中且显示于表格之上。 caption 标签必须紧随 table 标签之后。 这个标签只存在 表格里面才有意义。你是风儿我是沙 案例3： 根据要求完成以下案例： 5. 合并单元格(难点)合并单元格是我们比较常用的一个操作，但是不会合并的很复杂。 5.1 合并单元格2种方式 跨行合并：rowspan=”合并单元格的个数” 跨列合并：colspan=”合并单元格的个数” 5.2 合并单元格顺序 *合并的顺序我们按照 先上 后下 先左 后右 的顺序 * 跟我们以前学习汉字的书写顺序完全一致。 5.3 合并单元格三步曲 先确定是跨行还是跨列合并 根据 先上 后下 先左 后右的原则找到目标单元格 然后写上 合并方式 还有 要合并的单元格数量 比如 ： 删除多余的单元格 单元格 6. 总结表格 标签名 定义 说明 表格标签 就是一个四方的盒子 表格行标签 行标签要再table标签内部才有意义 单元格标签 单元格标签是个容器级元素，可以放任何东西 表头单元格标签 它还是一个单元格，但是里面的文字会居中且加粗 表格标题标签 表格的标题，跟着表格一起走，和表格居中对齐 clospan 和 rowspan 合并属性 用来合并单元格的 表格提供了HTML 中定义表格式数据的方法。 表格中由行中的单元格组成。 表格中没有列元素，列的个数取决于行的单元格个数。 表格不要纠结于外观，那是CSS 的作用。 表格的学习要求： 能手写表格结构，并且能简单合并单元格。 7. 拓展阅读@表格划分结构（了解）1对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构 注意： ：用于定义表格的头部。用来放标题之类的东西。 内部必须拥有 标签！ ：用于定义表格的主体。放数据本体 。 放表格的脚注之类。 以上标签都是放到table标签中。","link":"/前端笔记/html-day04/"},{"title":"HTML5+CSS3-Day02","text":"第02阶段.移动Web网页开发.CSS3属性 HTML5 第二天rotate 2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转 使用步骤： 给元素添加转换属性 transform 属性值为 rotate(角度) 如 transform:rotate(30deg) 顺时针方向旋转30度 123div{ transform: rotate(0deg);} 三角 代码演示 设置元素旋转中心点(transform-origin) transform-origin 基础语法 1transform-origin: x y; 重要知识点 注意后面的参数 x 和 y 用空格隔开 x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 center center 还可以给 x y 设置像素或者方位名词(top、bottom、left、right、center) 旋转中心案例 代码演示 2D 转换之 scale scale 的作用 用来控制元素的放大与缩小 语法 1transform: scale(x, y) 知识要点 注意，x 与 y 之间使用逗号进行分隔 transform: scale(1, 1): 宽高都放大一倍，相当于没有放大 transform: scale(2, 2): 宽和高都放大了二倍 transform: scale(2): 如果只写了一个参数，第二个参数就和第一个参数一致 transform:scale(0.5, 0.5): 缩小 scale 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子 代码演示 12345678910div:hover { /* 注意，数字是倍数的含义，所以不需要加单位 */ /* transform: scale(2, 2) */ /* 实现等比缩放，同时修改宽与高 */ /* transform: scale(2) */ /* 小于 1 就等于缩放*/ transform: scale(0.5, 0.5)} 图片放大案例 代码演示 分页按钮案例 代码演示 2D 转换综合写法以及顺序问题 知识要点 同时使用多个转换，其格式为 transform: translate() rotate() scale() 顺序会影响到转换的效果(先旋转会改变坐标轴方向) 但我们同时有位置或者其他属性的时候，要将位移放到最前面 代码演示 123div:hover { transform: translate(200px, 0) rotate(360deg) scale(1.2)} 动画(animation) 什么是动画 动画是 CSS3 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果 动画的基本使用 先定义动画 在调用定义好的动画 语法格式(定义动画) 12345678@keyframes 动画名称 { 0% { width: 100px; } 100% { width: 200px }} 语法格式(使用动画) 123456div { /* 调用动画 */ animation-name: 动画名称; /* 持续时间 */ animation-duration: 持续时间；} 动画序列 0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列 在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果 动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数 用百分比来规定变化发生的时间，或用 from 和 to，等同于 0% 和 100% 代码演示 123456789101112131415161718&lt;style&gt; div { width: 100px; height: 100px; background-color: aquamarine; animation-name: move; animation-duration: 0.5s; } @keyframes move{ 0% { transform: translate(0px) } 100% { transform: translate(500px, 0) } } &lt;/style&gt; 动画序列 代码演示 动画常见属性 常见的属性 代码演示 123456789101112131415161718192021222324div { width: 100px; height: 100px; background-color: aquamarine; /* 动画名称 */ animation-name: move; /* 动画花费时长 */ animation-duration: 2s; /* 动画速度曲线 */ animation-timing-function: ease-in-out; /* 动画等待多长时间执行 */ animation-delay: 2s; /* 规定动画播放次数 infinite: 无限循环 */ animation-iteration-count: infinite; /* 是否逆行播放 */ animation-direction: alternate; /* 动画结束之后的状态 */ animation-fill-mode: forwards;}div:hover { /* 规定动画是否暂停或者播放 */ animation-play-state: paused;} 动画简写方式 动画简写方式 12/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */animation: name duration timing-function delay iteration-count direction fill-mode 知识要点 简写属性里面不包含 animation-paly-state 暂停动画 animation-paly-state: paused; 经常和鼠标经过等其他配合使用 要想动画走回来，而不是直接调回来：animation-direction: alternate 盒子动画结束后，停在结束位置：animation-fill-mode: forwards 代码演示 1animation: move 2s linear 1s infinite alternate forwards; 速度曲线细节 速度曲线细节 animation-timing-function: 规定动画的速度曲线，默认是ease 代码演示 12345678910111213141516171819div { width: 0px; height: 50px; line-height: 50px; white-space: nowrap; overflow: hidden; background-color: aquamarine; animation: move 4s steps(24) forwards;}@keyframes move { 0% { width: 0px; } 100% { width: 480px; }} 奔跑的熊大 代码演示 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; body { background-color: #ccc; } div { position: absolute; width: 200px; height: 100px; background: url(media/bear.png) no-repeat; /* 我们元素可以添加多个动画， 用逗号分隔 */ animation: bear .4s steps(8) infinite, move 3s forwards; } @keyframes bear { 0% { background-position: 0 0; } 100% { background-position: -1600px 0; } } @keyframes move { 0% { left: 0; } 100% { left: 50%; /* margin-left: -100px; */ transform: translateX(-50%); } } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","link":"/前端笔记/html5-css3-day02/"},{"title":"HTML5+CSS3-Day03","text":"第02阶段.移动Web网页开发.3D转换 HTML5 第三天一、 认识 3D 转换 3D 的特点 近大远小 物体和面遮挡不可见 三维坐标系 x 轴：水平向右 – 注意：x 轴右边是正值，左边是负值 y 轴：垂直向下 – 注意：y 轴下面是正值，上面是负值 z 轴：垂直屏幕 – 注意：往外边的是正值，往里面的是负值 ​ 二、3D 转换 3D 转换知识要点 3D 位移：translate3d(x, y, z) 3D 旋转：rotate3d(x, y, z) 透视：perspctive 3D呈现 transfrom-style 3D 移动 translate3d 3D 移动就是在 2D 移动的基础上多加了一个可以移动的方向，就是 z 轴方向 transform: translateX(100px)：仅仅是在 x 轴上移动 transform: translateY(100px)：仅仅是在 y 轴上移动 transform: translateZ(100px)：仅仅是在 z 轴上移动 transform: translate3d(x, y, z)：其中x、y、z 分别指要移动的轴的方向的距离 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 语法 1transform: translate3d(x, y, z) 代码演示 123transform: translate3d(100px, 100px, 100px)/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */transform: translate3d(100px, 100px, 0) 三、透视 perspective 知识点讲解 如果想要网页产生 3D 效果需要透视(理解成 3D 物体投影的 2D 平面上) 实际上模仿人类的视觉位置，可视为安排一直眼睛去看 透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离 距离视觉点越近的在电脑平面成像越大，越远成像越小 透视的单位是像素 知识要点 透视需要写在被视察元素的父盒子上面 注意下方图片 d：就是视距，视距就是指人的眼睛到屏幕的距离 z：就是 z 轴，z 轴越大(正值)，我们看到的物体就越大 ​ 代码演示 123body { perspective: 1000px;} 四、 translateZ translateZ 与 perspecitve 的区别 perspecitve 给父级进行设置，translateZ 给 子元素进行设置不同的大小 五、3D 旋转rotateX 3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转 语法 transform: rotateX(45deg) – 沿着 x 轴正方向旋转 45 度 transform: rotateY(45deg) – 沿着 y 轴正方向旋转 45 度 transform: rotateZ(45deg) – 沿着 z 轴正方向旋转 45 度 transform: rotate3d(x, y, z, 45deg) – 沿着自定义轴旋转 45 deg 为角度 代码案例 12345678910111213div { perspective: 300px;}img { display: block; margin: 100px auto; transition: all 1s;}img:hover { transform: rotateX(-45deg)} 左手准则 左手的手拇指指向 x 轴的正方向 其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向 ​ 六、3D 旋转 rotateY 代码演示 12345678910111213div { perspective: 500px;}img { display: block; margin: 100px auto; transition: all 1s;}img:hover { transform: rotateY(180deg)} 左手准则 左手的拇指指向 y 轴的正方向 其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值) 七、 3D 旋转 rotateZ 代码演示 12345678910111213div { perspective: 500px;}img { display: block; margin: 100px auto; transition: all 1s;}img:hover { transform: rotateZ(180deg)} rotate3d transform: rotate3d(x, y, z, deg) – 沿着自定义轴旋转 deg 为角度 x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度 transform: rotate3d(1, 1, 0, 180deg) – 沿着对角线旋转 45deg transform: rotate3d(1, 0, 0, 180deg) – 沿着 x 轴旋转 45deg 代码演示 12345678910111213div { perspective: 500px;}img { display: block; margin: 100px auto; transition: all 1s;}img:hover { transform: rotate3d(1, 1, 0, 180deg)} 八、3D 呈现 transform-style transform-style ☆☆☆☆☆ 控制子元素是否开启三维立体环境 transform-style: flat 代表子元素不开启 3D 立体空间，默认的 transform-style: preserve-3d 子元素开启立体空间 代码写给父级，但是影响的是子盒子 代码演示 12345678910111213141516171819202122232425262728 #div1 { position: relative; height: 200px; width: 200px; margin: 100px; padding:10px; border: 1px solid black; } #div2 { padding:50px; position: absolute; border: 1px solid black; background-color: red; transform: rotateY(60deg); transform-style: preserve-3d; -webkit-transform: rotateY(60deg); /* Safari and Chrome */ -webkit-transform-style: preserve-3d; /* Safari and Chrome */ } #div3 {padding:40px;position: absolute;border: 1px solid black;background-color: yellow;transform: rotateY(-60deg);-webkit-transform: rotateY(-60deg); /* Safari and Chrome */}","link":"/前端笔记/html5-css3-day03/"},{"title":"JavaScript-Day03","text":"第03阶段.JavaScript基础.循环 JavaScript基础第03天笔记循环for循环 语法结构 123for(初始化变量; 条件表达式; 操作表达式 ){ //循环体} 名称 作用 初始化变量 通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。 条件表达式 用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。 操作表达式 用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。 执行过程： 初始化变量，初始化操作在整个 for 循环只会执行一次。 执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。 执行操作表达式，此时第一轮结束。 第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。 继续执行操作表达式，第二轮结束。 后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。 断点调试： 1断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程 1234断点调试的流程：1、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。 for 循环重复相同的代码 比如输出10句“媳妇我错了” 123456789// 基本写法for(var i = 1; i &lt;= 10; i++){ console.log('媳妇我错了~');}// 用户输入次数var num = prompt('请输入次数:')；for ( var i = 1 ; i &lt;= num; i++) { console.log('媳妇我错了~');} for 循环重复不相同的代码 例如，求输出1到100岁： 1234// 基本写法for (var i = 1; i &lt;= 100; i++) { console.log('这个人今年' + i + '岁了');} 例如，求输出1到100岁，并提示出生、死亡 12345678910// for 里面是可以添加其他语句的 for (var i = 1; i &lt;= 100; i++) { if (i == 1) { console.log('这个人今年1岁了， 它出生了'); } else if (i == 100) { console.log('这个人今年100岁了，它死了'); } else { console.log('这个人今年' + i + '岁了'); }} for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。 双重for循环 双重 for 循环概述 循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。 双重 for 循环语法 12345for (外循环的初始; 外循环的条件; 外循环的操作表达式) { for (内循环的初始; 内循环的条件; 内循环的操作表达式) { 需执行的代码; }} 内层循环可以看做外层循环的循环体语句 内层循环执行的顺序也要遵循 for 循环的执行顺序 外层循环执行一次，内层循环要执行全部次数 打印五行五列星星 123456789var star = '';for (var j = 1; j &lt;= 3; j++) { for (var i = 1; i &lt;= 3; i++) { star += '☆' } // 每次满 5个星星 就 加一次换行 star += '\\n'}console.log(star); 核心逻辑： 1.内层循环负责一行打印五个星星 2.外层循环负责打印五行 for 循环小结 for 循环可以重复执行某些相同代码 for 循环可以重复执行些许不同的代码，因为我们有计数器 for 循环可以重复执行某些操作，比如算术运算符加法操作 随着需求增加，双重for循环可以做更多、更好看的效果 双重 for 循环，外层循环一次，内层 for 循环全部执行 for 循环是循环条件和数字直接相关的循环 while循环while语句的语法结构如下： 123while (条件表达式) { // 循环体代码 } 执行思路： 1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码 2 执行循环体代码 3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束 注意： 使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环 do-while循环do… while 语句的语法结构如下： 123do { // 循环体代码 - 条件表达式为 true 时重复执行循环体代码} while(条件表达式); 执行思路 1 先执行一次循环体代码 2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码 注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码 continue、breakcontinue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。 例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下： 1234567for (var i = 1; i &lt;= 5; i++) { if (i == 3) { console.log('这个包子有虫子，扔掉'); continue; // 跳出本次循环，跳出的是第3次循环 } console.log('我正在吃第' + i + '个包子呢');} 运行结果： break 关键字用于立即跳出整个循环（循环结束）。 例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下： 123456for (var i = 1; i &lt;= 5; i++) { if (i == 3) { break; // 直接退出整个for 循环，跳到整个for下面的语句 } console.log('我正在吃第' + i + '个包子呢'); } 运行结果： 代码规范标识符命名规范 变量、函数的命名必须要有意义 变量的名称一般用名词 函数的名称一般用动词 操作符规范1234567// 操作符的左右两侧各保留一个空格for (var i = 1; i &lt;= 5; i++) { if (i == 3) { break; // 直接退出整个 for 循环，跳到整个for循环下面的语句 } console.log('我正在吃第' + i + '个包子呢');} 单行注释规范123456for (var i = 1; i &lt;= 5; i++) { if (i == 3) { break; // 单行注释前面注意有个空格 } console.log('我正在吃第' + i + '个包子呢');} 其他规范关键词、操作符之间后加空格","link":"/前端笔记/javascript-day03/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/JavaScript/hello-world/"},{"title":"flex布局","text":"第02阶段.移动Web网页开发.flex布局 移动web开发——flex布局传统布局和flex布局对比传统布局 兼容性好 布局繁琐 局限性，不能再移动端很好的布局 flex布局 操作方便，布局极其简单，移动端使用比较广泛 pc端浏览器支持情况比较差 IE11或更低版本不支持flex或仅支持部分 建议 如果是pc端页面布局，还是采用传统方式 如果是移动端或者是不考虑兼容的pc则采用flex flex布局原理 flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。 当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。 flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flexitem），简称”项目”。 总结：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式 父项常见属性 flex-direction：设置主轴的方向 justify-content：设置主轴上的子元素排列方式 flex-wrap：设置子元素是否换行 align-content：设置侧轴上的子元素的排列方式（多行） align-items：设置侧轴上的子元素排列方式（单行） flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap flex-direction设置主轴的方向 在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴 默认主轴方向就是 x 轴方向，水平向右 默认侧轴方向就是 y 轴方向，水平向下 注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的 justify-content 设置主轴上的子元素排列方式 flex-wrap设置是否换行 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。 nowrap 不换行 wrap 换行 align-items 设置侧轴上的子元素排列方式（单行 ） 该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（单行）的时候使用 flex-start 从头部开始 flex-end 从尾部开始 center 居中显示 stretch 拉伸 align-content 设置侧轴上的子元素的排列方式（多行）设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。 align-content 和align-items区别 align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸 align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 总结就是单行找align-items 多行找 align-content flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性1flex-flow:row wrap; flex布局子项常见属性 flex子项目占的份数 align-self控制子项自己在侧轴的排列方式 order属性定义子项的排列顺序（前后顺序） flex 属性flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。 123.item { flex: &lt;number&gt;; /* 默认值 0 */} align-self控制子项自己在侧轴上的排列方式align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。 默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。 1234span:nth-child(2) { /* 设置自己在侧轴上的排列方式 */ align-self: flex-end;} order 属性定义项目的排列顺序数值越小，排列越靠前，默认为0。 注意：和 z-index 不一样。 123.item { order: &lt;number&gt;;} 携程网首页案例制作携程网链接：http://m.ctrip.com 1.技术选型 方案：我们采取单独制作移动页面方案 技术：布局采取flex布局 2.搭建相关文件夹 3.设置视口标签以及引入初始化样式 1234&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt; 4.常用初始化样式 12345678910body { max-width: 540px; min-width: 320px; margin: 0 auto; font: normal 14px/1.5 Tahoma,&quot;Lucida Grande&quot;,Verdana,&quot;Microsoft Yahei&quot;,STXihei,hei; color: #000; background: #f2f2f2; overflow-x: hidden; -webkit-tap-highlight-color: transparent;} 5.模块名字划分","link":"/前端笔记/flex布局/"},{"title":"响应式布局","text":"第02阶段.移动Web网页开发.响应式布局 移动端WEB开发之响应式布局响应式开发原理响应式开发原理就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。 设备的划分情况： 小于768的为超小屏幕（手机） 768~992之间的为小屏设备（平板） 992~1200的中等屏幕（桌面显示器） 大于1200的宽屏设备（大桌面显示器） 响应式布局容器 响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。 原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。 父容器版心的尺寸划分 超小屏幕（手机，小于 768px）：设置宽度为 100% 小屏幕（平板，大于等于 768px）：设置宽度为 750px 中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px 大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px 但是我们也可以根据实际情况自己定义划分 bootstrap的介绍Bootstrap简介Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。 中文网 官网 推荐网站 框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。 bootstrap优点 标准化的html+css编码规范 提供了一套简洁、直观、强悍的组件 有自己的生态圈，不断的更新迭代 让开发更简单，提高了开发的效率 版本简介2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。 3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。 4.x.x：最新版，目前还不是很流行 bootstrap基本使用在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。 Bootstrap 使用四步曲： 创建文件夹结构 创建 html 骨架结构 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt; &lt;title&gt;Bootstrap 101 Template&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt; &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;你好，世界！&lt;/h1&gt; &lt;!-- jQuery (necessary for Bootstrap&apos;s JavaScript plugins) --&gt; &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 引入相关样式文件 12&lt;!-- Bootstrap 核心样式--&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot;&gt; 书写内容 直接拿Bootstrap 预先定义好的样式来使用 修改Bootstrap 原来的样式，注意权重问题 学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果 bootstrap布局容器Bootstrap 需要为页面内容和栅格系统包裹一个 .container 或者.container-fluid 容器，它提供了两个作此用处的类。 .container 响应式布局的容器 固定宽度 大屏 ( &gt;=1200px) 宽度定为 1170px 中屏 ( &gt;=992px) 宽度定为 970px 小屏 ( &gt;=768px) 宽度定为 750px 超小屏 (100%) .container-fluid 流式布局容器 百分百宽度 占据全部视口（viewport）的容器。 Bootstrap栅格系统Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。 栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。 按照不同屏幕划分为1~12 等份 行（row） 可以去除父容器作用15px的边距 xs-extra small：超小； sm-small：小； md-medium：中等； lg-large：大； 列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列 每一列默认有左右15像素的 padding 可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class=”col-md-4 col-sm-6” 栅格嵌套 栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*元素内。 1234567&lt;!-- 列嵌套 --&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-6&quot;&gt;小列&lt;/div&gt; &lt;div class=&quot;col-sm-6&quot;&gt;小列&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 列偏移 使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。 12345&lt;!-- 列偏移 --&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-lg-4&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;col-lg-4 col-lg-offset-4&quot;&gt;2&lt;/div&gt; &lt;/div&gt; 列排序 通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。 12345&lt;!-- 列排序 --&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-lg-4 col-lg-push-8&quot;&gt;左侧&lt;/div&gt; &lt;div class=&quot;col-lg-8 col-lg-pull-4&quot;&gt;右侧&lt;/div&gt; &lt;/div&gt; 响应式工具 为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。 阿里百秀案例制作技术选型方案：我们采取响应式页面开发方案 技术：bootstrap框架 设计图： 本设计图采用 1280px 设计尺寸 项目结构搭建 Bootstrap 使用四步曲： 创建文件夹结构 创建 html 骨架结构 引入相关样式文件 书写内容 container宽度修改 因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度 123456/* 利用媒体查询修改 container宽度适合效果图宽度 */ @media (min-width: 1280px) { .container { width: 1280px; } }","link":"/前端笔记/响应式布局/"},{"title":"流式布局","text":"第02阶段.移动Web网页开发.流式布局 移动web开发——流式布局移动端基础浏览器现状 PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。 移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。 国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。 总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。 手机屏幕的现状 移动端设备屏幕尺寸非常多，碎片化严重。 Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。 近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。 作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。 常见移动端屏幕尺寸 移动端调试方法 Chrome DevTools（谷歌浏览器）的模拟手机调试 搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器 使用外网服务器，直接IP或域名访问 视口视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口 布局视口 layout viewport一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。 iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。 视觉视口 visual viewport字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。 我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。 理想视口 ideal viewport为了使网站在移动端有最理想的浏览和阅读宽度而设定 理想视口，对设备来讲，是最理想的视口尺寸 需要手动添写meta视口标签通知浏览器操作 meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽 总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口 meta标签 最标准的viewport设置 视口宽度和设备保持一致 视口的默认缩放比例1.0 不允许用户自行缩放 最大允许的缩放比例1.0 最小允许的缩放比例1.0 二倍图物理像素&amp;物理像素比物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是 750* 1334 我们开发时候的1px 不是一定等于1个物理像素的 一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比 如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放 lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。 对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊 在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题 通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题 背景缩放background-sizebackground-size 属性规定背景图像的尺寸 1background-size: 背景图片宽度 背景图片高度; 单位： 长度|百分比|cover|contain; cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。 contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域 移动开发选择和技术解决方案移动端主流方案1.单独制作移动端页面（主流） 通常情况下，网址域名前面加 m(mobile)可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。 也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站 京东pc端： 京东移动端： 2.响应式页面兼容移动端（其次） 响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配 移动端技术解决方案1.移动端浏览器兼容问题 移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。 我们可以放心使用 H5 标签和 CSS3 样式。 同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可 2.移动端公共样式 移动端 CSS 初始化推荐使用 normalize.css/ Normalize.css：保护了有价值的默认值 Normalize.css：修复了浏览器的bug Normalize.css：是模块化的 Normalize.css：拥有详细的文档 官网地址： http://necolas.github.io/normalize.css/ 移动端大量使用 CSS3盒子模型box-sizin传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding CSS3盒子模型： 盒子的宽度= CSS中设置的宽度width 里面包含了 border 和 padding 也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了 1234/*CSS3盒子模型*/box-sizing: border-box;/*传统盒子模型*/box-sizing: content-box; 移动端可以全部CSS3 盒子模型 PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型 移动端特殊样式123456789/*CSS3盒子模型*/box-sizing: border-box;-webkit-box-sizing: border-box;/*点击高亮我们需要清除清除 设置为transparent 完成透明*/-webkit-tap-highlight-color: transparent;/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/-webkit-appearance: none;/*禁用长按页面时的弹出菜单*/img,a { -webkit-touch-callout: none; } 移动端常见布局移动端单独制作 流式布局（百分比布局） flex 弹性布局（强烈推荐） less+rem+媒体查询布局 混合布局 响应式 媒体查询 bootstarp 流式布局： 流式布局，就是百分比布局，也称非固定像素布局。 通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。 流式布局方式是移动web开发使用的比较常见的布局方式。","link":"/前端笔记/流式布局/"},{"title":"CSS-Day04","text":"第01阶段.前端基础.浮动 浮动(float)目标 记忆 能够说出 CSS 的布局的三种机制 理解 能够说出普通流在布局中的特点 能够说出我们为什么用浮动 能够说出我们为什么要清除浮动 应用 能够利用浮动完成导航栏案例 能够清除浮动 能够使用PS切图工具 CSS 布局的三种机制 网页布局的核心——就是用 CSS 来摆放盒子。 CSS 提供了 3 种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中： 普通流（标准流） 块级元素会独占一行，从上向下顺序排列； 常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行； 常用元素：span、a、i、em等 浮动 让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。 定位 将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。 为什么需要浮动？思考题： 我们首先要思考以下2个布局中最常见的问题？ 如何让多个盒子(div)水平排列成一行？ 如何实现盒子的左右对齐？ 虽然我们前面学过行内块（inline-block） 但是他却有自己的缺陷： 它可以实现多个元素一行显示，但是中间会有空白缝隙，不能满足以上第一个问题。 它不能实现以上第二个问题，盒子左右对齐 pink老师一句话总结他们 因为一些网页布局要求，标准流不能满足我们的需要了，因此我们需要浮动来完成网页布局。 什么是浮动(float)概念：元素的浮动是指设置了浮动属性的元素会 脱离标准普通流的控制 移动到指定位置。 作用 让多个盒子(div)水平排列成一行，使得浮动成为布局的重要手段。 可以实现盒子的左右对齐等等.. 浮动最早是用来控制图片，实现文字环绕图片的效果。 语法在 CSS 中，通过 float 中文， 浮 漏 特 属性定义浮动，语法如下： 1选择器 { float: 属性值; } 属性值 描述 none 元素不浮动（默认值） left 元素向左浮动 right 元素向右浮动 pink老师教你学浮动口诀。通过 float —– 浮 漏 特 浮动口诀之 浮浮动——浮浮浮脱离标准流。 俗称 “脱标” 1234567891011121314151617181920212223242526272829303132333435363738 ![](CSS-Day04/23%E6%B5%AE%E5%8A%A8%E8%84%B1%E6%A0%87.png)```css.box1 { width: 200px; height: 200px; background-color: rgba(255, 0, 0, 0.5); float: left;}.box2 { width: 150px; height: 300px; background-color: skyblue;}```**小结**：- `float` 属性会让盒子漂浮在标准流的上面，所以第二个标准流的盒子跑到浮动盒子的底下了。#### 浮动口诀之 漏浮动——漏~漏~漏~ 浮动的盒子，把自己原来的位置漏给下面标准流的盒子，就是不占有原来位置，是脱离标准流的，我们俗称 “脱标”。~~~css.box1 { width: 200px; height: 200px; background-color: rgba(255, 0, 0, 0.5); /* 让第 1 个盒子漂浮起来，不占位置 */ float: left;}.box2 { width: 150px; height: 300px; background-color: skyblue;} 所以，box2下面的其实就是跑到box1盒子下面了， 被box1给压住了，遮挡起来了 来来来，我们看个立体图 浮动口诀之 特浮动——特性 float属性会改变元素display属性。 任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。 体验案例——div 水平排列 12345678910111213141516171819202122div { width: 200px; height: 200px; background-color: pink; /* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */ /* display: inline-block; */ /* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */ float: left;}.two { background-color: hotpink;} 注意： 浮动的元素互相贴靠一起的，但是如果父级宽度装不下这些浮动的盒子， 多出的盒子会另起一行对齐 浮动(float)小结 我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式 float —— 浮漏特 特点 说明 浮 加了浮动的盒子是浮起来的，漂浮在其他标准流盒子的上面。 漏 加了浮动的盒子是不占位置的，它原来的位置漏给了标准流的盒子。 特 特别注意：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙 浮动(float)的应用（重要）浮动和标准流的父盒子搭配我们知道，浮动是脱标的，会影响下面的标准流元素，此时，我们需要给浮动的元素添加一个标准流的父亲，这样，最大化的减小了对其他标准流的影响。 pink老师说： 一个完整的网页，是 标准流 + 浮动 + 我们后面要讲的定位 一起完成的。 浮动应用案例 导航栏案例 注意，实际重要的导航栏中，我们不会直接用链接a 而是用 li 包含链接(li+a)的做法。 li+a 语义更清晰，一看这就是有条理的列表型内容。 如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名 浮动(float)的扩展浮动元素与父盒子的关系 子盒子的浮动参照父盒子对齐 不会与父盒子的边框重叠，也不会超过父盒子的内边距​ 浮动元素与兄弟盒子的关系在一个父级盒子中，如果前一个兄弟盒子是： 浮动的，那么当前盒子会与前一个盒子的顶部对齐； 普通流的，那么当前盒子会显示在前一个兄弟盒子的下方。 pink老师 要你记住： 浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。 建议 如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题 清除浮动为什么要清除浮动因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。 总结： 由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响 准确地说，并不是清除浮动，而是清除浮动后造成的影响 清除浮动本质听pink老师说清除浮动本质： ​ 清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了 清除浮动的方法在CSS中，clear属性用于清除浮动，在这里，我们先记住清除浮动的方法，具体的原理，等我们学完css会再回头分析。 语法： 1选择器{clear:属性值;} clear 清除 属性值 描述 left 不允许左侧有浮动元素（清除左侧浮动的影响） right 不允许右侧有浮动元素（清除右侧浮动的影响） both 同时清除左右两侧浮动的影响 但是我们实际工作中， 几乎只用 clear: both; 额外标签法(隔墙法)1是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 &lt;div style=”clear:both”&gt;&lt;/div&gt;，或则其他标签br等亦可。 优点： 通俗易懂，书写方便 缺点： 添加许多无意义的标签，结构化较差。 父级添加overflow属性方法1可以给父级添加： overflow为 hidden| auto| scroll 都可以实现。 优点： 代码简洁 缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。 使用after伪元素清除浮动:after 方式为空元素额外标签法的升级版，好处是不用单独加标签了 使用方法： 123.clearfix:after { content: \"\"; display: block; height: 0; clear: both; visibility: hidden; } .clearfix {*zoom: 1;} /* IE6、7 专有 */ 优点： 符合闭合浮动思想 结构语义化正确 缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。 代表网站： 百度、淘宝网、网易等 使用双伪元素清除浮动使用方法： 12345678910.clearfix:before,.clearfix:after { content:\"\"; display:table; }.clearfix:after { clear:both;}.clearfix { *zoom:1;} 优点： 代码更简洁 缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。 代表网站： 小米、腾讯等 清除浮动总结pink老师告诉你我们以后什么时候用清除浮动呢？ 父级没高度 子盒子浮动了 影响下面布局了，我们就应该清除浮动了。 清除浮动的方式 优点 缺点 额外标签法（隔墙法） 通俗易懂，书写方便 添加许多无意义的标签，结构化较差。 父级overflow:hidden; 书写简单 溢出隐藏 父级after伪元素 结构语义化正确 由于IE6-7不支持:after，兼容性问题 父级双伪元素 结构语义化正确 由于IE6-7不支持:after，兼容性问题 后面两种伪元素清除浮动，大家暂且会使用就好， 深入原理，我们后面学完伪元素再讲。 Photoshop 切图常见的图片格式 123456781. jpg图像格式： JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们产品类的图片经常用jpg格式的2. gif图像格式：GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果3. png图像格式是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景4. PSD图像格式PSD格式是Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计草稿。 PS切图 可以 分为 利用切片工具切图 以及 利用PS的插件快速切图。 切片工具 ps切图片，分两大步： 1). 用切片选中图片 利用切片工具手动划出 图层菜单—新建基于图层的切片 利用辅助线 来切图 – 基于参考线的切片 2). 导出切片 文件菜单 – 存储为web设备所用格式 —- 选择 我们要的图片格式 —- 点存储 — 别忘了选中的切片 辅助线和切片使用及清除视图菜单– 清除 辅助线/ 清除切片 切图插件Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。 官网: http://www.cutterman.cn/zh/cutterman 注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。","link":"/前端笔记/css-day04/"},{"title":"CSS-Day06","text":"第01阶段.前端基础.定位(position) 定位(position)目标 理解 能说出为什么要用定位 能说出定位的4种分类 能说出四种定位的各自特点 能说出我们为什么常用子绝父相布局 应用 能写出淘宝轮播图布局 CSS 布局的三种机制 网页布局的核心 —— 就是用 CSS 来摆放盒子位置。 CSS 提供了 3 种机制来设置盒子的摆放位置，分别是普通流、浮动和定位，其中： 普通流（标准流） 浮动 让盒子从普通流中浮起来 —— 让多个盒子(div)水平排列成一行。 定位 将盒子定在某一个位置 自由的漂浮在其他盒子的上面 —— CSS 离不开定位，特别是后面的 js 特效。 为什么使用定位 我们先来看一个效果，同时思考一下用标准流或浮动能否实现类似的效果？ 1. 小黄色块在图片上移动，吸引用户的眼球。 2. 当我们滚动窗口的时候，盒子是固定屏幕某个位置的 结论：要实现以上效果，标准流或浮动都无法快速实现 pink老师一句话说出定位： 将盒子定在某一个位置 自由的漂浮在其他盒子(包括标准流和浮动)的上面 所以，我们脑海应该有三种布局机制的上下顺序 标准流在最底层 (海底) ——- 浮动 的盒子 在 中间层 (海面) ——- 定位的盒子 在 最上层 （天空） 定位详解定位也是用来布局的，它有两部分组成： 定位 = 定位模式 + 边偏移 边偏移简单说， 我们定位的盒子，是通过边偏移来移动位置的。 在 CSS 中，通过 top、bottom、left 和 right 属性定义元素的边偏移：（方位名词） 边偏移属性 示例 描述 top top: 80px 顶端偏移量，定义元素相对于其父元素上边线的距离。 bottom bottom: 80px 底部偏移量，定义元素相对于其父元素下边线的距离。 left left: 80px 左侧偏移量，定义元素相对于其父元素左边线的距离。 right right: 80px 右侧偏移量，定义元素相对于其父元素右边线的距离 定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。 定位模式 (position)在 CSS 中，通过 position 属性定义元素的定位模式，语法如下： 1选择器 { position: 属性值; } 定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。 值 语义 static 静态定位 relative 相对定位 absolute 绝对定位 fixed 固定定位 静态定位(static) - 了解 静态定位是元素的默认定位方式，无定位的意思。它相当于 border 里面的none， 不要定位的时候用。 静态定位 按照标准流特性摆放位置，它没有边偏移。 静态定位在布局时我们几乎不用的 相对定位(relative) - 重要 相对定位是元素相对于它 原来在标准流中的位置 来说的。（自恋型） 效果图： 相对定位的特点：（务必记住） 相对于 自己原来在标准流中位置来移动的 原来在标准流的区域继续占有，后面的盒子仍然以标准流的方式对待它。 绝对定位(absolute) - 重要绝对定位是元素以带有定位的父级元素来移动位置 （拼爹型） 完全脱标 —— 完全不占位置； 父元素没有定位，则以浏览器为准定位（Document 文档）。 父元素要有定位 将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 绝对定位的特点：（务必记住） 绝对是以带有定位的父级元素来移动位置 （拼爹型） 如果父级都没有定位，则以浏览器文档为准移动位置 不保留原来的位置，完全是脱标的。 因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。 定位口诀 —— 子绝父相刚才咱们说过，绝对定位，要和带有定位的父级搭配使用，那么父级要用什么定位呢？ 子绝父相 —— 子级是绝对定位，父级要用相对定位。 子绝父相是使用绝对定位的口诀，要牢牢记住！ 疑问：为什么在布局时，子级元素使用绝对定位时，父级元素就要用相对定位呢？ 观察下图，思考一下在布局时，左右两个方向的箭头图片以及父级盒子的定位方式。 分析： 方向箭头叠加在其他图片上方，应该使用绝对定位，因为绝对定位完全脱标，完全不占位置。 父级盒子应该使用相对定位，因为相对定位不脱标，后续盒子仍然以标准流的方式对待它。 如果父级盒子也使用绝对定位，会完全脱标，那么下方的广告盒子会上移，这显然不是我们想要的。 结论：父级要占有位置，子级要任意摆放，这就是子绝父相的由来。 固定定位(fixed) - 重要固定定位是绝对定位的一种特殊形式： （认死理型） 如果说绝对定位是一个矩形 那么 固定定位就类似于正方形 完全脱标 —— 完全不占位置； 只认浏览器的可视窗口 —— 浏览器可视窗口 + 边偏移属性 来设置元素的位置； 跟父元素没有任何关系；单独使用的 不随滚动条滚动。 案例演练：固定定位案例。 提示：IE 6 等低版本浏览器不支持固定定位。 定位(position)的案例哈根达斯案例截图： 哈根达斯分析 一个大的 div 中包含 3 张图片； 大的 div 水平居中； 2 张小图片重叠在广告图片上方 —— 脱标，不占位置，需要使用绝对定位； 2 张小图片分别显示在左上角和右下角 —— 需要使用边偏移确定准确位置。 案例小结： 子绝父相 —— 子元素使用绝对定位，父元素使用相对定位； 与浮动的对比： 绝对定位：脱标，利用边偏移指定准确位置； 浮动：脱标，不能指定准确位置，让多个块级元素在一行显示。 课堂练习：模拟老师的随堂案例完成哈根达斯案例（5 分钟）。 仿新浪头部和广告 新浪案例分析 顶部图片固定在浏览器可视窗口顶部，不会随窗口一起滚动； 左右两侧的广告图片固定在浏览器可视窗口的左右两侧，不会随窗口一起滚动； 注意：底部的内容图片初始显示在顶部图片的下方，如何解决？ 步骤 1 —— 顶部图片和底部内容123456789101112131415.top { /* 注意：使用固定定位时，如果盒子中没有内容，需要指定宽度 */ width: 100%; height: 44px; background: url(images/top.png) no-repeat top center; position: fixed; left: 0px; top: 0px;}.box { width: 1002px; /* 顶部的 44px 的 margin 可以让 box 显示在顶部图片下方 */ margin: 44px auto;} 注意： 在使用固定定位时，如果盒子中没有内容，需要指定宽度 设置底部内容图片的顶部 margin，可以让底部盒子初始显示在顶部图片的下方。 步骤 2 —— 左右两侧广告12345678910111213.ad-left,.ad-right { position: fixed; top: 100px;}.ad-left { left: 0px;}.ad-right { right: 0px;} 注意：不要同时使用 left 和 right 和边偏移属性。 案例小结： 固定定位的应用场景：固定在浏览器可视窗口某个位置的布局； 在使用固定和绝对定位时，如果盒子中没有内容，需要指定宽度（稍后就讲）。 课堂练习：模拟老师的随堂案例完成仿新浪头部和广告案例（5 分钟）。 定位(position)的扩展绝对定位的盒子居中 注意：绝对定位/固定定位的盒子不能通过设置 margin: auto 设置水平居中。 在使用绝对定位时要想实现水平居中，可以按照下图的方法： left: 50%;：让盒子的左侧移动到父级元素的水平中心位置； margin-left: -100px;：让盒子向左移动自身宽度的一半。 案例演示：相对定位案例。 盒子居中定位示意图 课堂练习：实现盒子左中、右中、中上、中下、中中定位（5 分钟）。 堆叠顺序（z-index）在使用定位布局时，可能会出现盒子重叠的情况。 加了定位的盒子，默认后来者居上， 后面的盒子会压住前面的盒子。 应用 z-index 层叠等级属性可以调整盒子的堆叠顺序。如下图所示： z-index 的特性如下： 属性值：正整数、负整数或 0，默认值是 0，数值越大，盒子越靠上； 如果属性值相同，则按照书写顺序，后来居上； 数字后面不能加单位。 注意：z-index 只能应用于相对定位、绝对定位和固定定位的元素，其他标准流、浮动和静态定位无效。 案例演示：堆叠顺序。 定位改变display属性 前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式: 可以用inline-block 转换为行内块 可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的） 绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。 所以说， 一个行内的盒子，如果加了浮动、固定定位和绝对定位，不用转换，就可以给这个盒子直接设置宽度和高度等。 完善新浪导航案例 同时注意： 浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的） 也就是说，我们给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题了。 综合演练 - 淘宝轮播图 圆角矩形设置4个角圆角矩形可以为4个角分别设置圆度， 但是是有顺序的 1234border-top-left-radius:20px;border-top-right-radius:20px;border-bottom-right-radius:20px;border-bottom-left-radius:20px; 如果4个角，数值相同 1border-radius: 15px; 里面数值不同，我们也可以按照简写的形式，具体格式如下: 1border-radius: 左上角 右上角 右下角 左下角; 还是遵循的顺时针。 定位小结 定位模式 是否脱标占有位置 移动位置基准 模式转换（行内块） 使用情况 静态static 不脱标，正常模式 正常模式 不能 几乎不用 相对定位relative 不脱标，占有位置 相对自身位置移动 不能 基本单独使用 绝对定位absolute 完全脱标，不占有位置 相对于定位父级移动位置 能 要和定位父级元素搭配使用 固定定位fixed 完全脱标，不占有位置 相对于浏览器移动位置 能 单独使用，不需要父级 注意： 边偏移需要和定位模式联合使用，单独使用无效； top 和 bottom 不要同时使用； left 和 right 不要同时使用。 学成网定位总结添加一个小技巧: 网页布局总结一个完整的网页，有标准流 、 浮动 、 定位 一起完成布局的。每个都有自己的专门用法。 标准流可以让盒子上下排列 或者 左右排列的 浮动可以让多个块级元素一行显示 或者 左右对齐盒子 浮动的盒子就是按照顺序左右排列 定位定位最大的特点是有层叠的概念，就是可以让多个盒子 前后 叠压来显示。 但是每个盒子需要测量数值。","link":"/前端笔记/css-day06/"},{"title":"HTML-Day02","text":"第01阶段.前端基础.认识HTML 学习目标 理解 HTML标签的概念 HTML标签的分类 HTML标签的关系 HTML标签的语义化 应用 HTML骨架格式 sublime基本使用 1. HTML 初识 HTML 指的是超文本标记语言 (Hyper Text Markup Language)是用来描述网页的一种语言。 H（很）T（甜）M（蜜）L（啦） HTML 不是一种编程语言，而是一种标记语言 (markup language) 标记语言是一套标记标签 (markup tag) 所谓超文本，有2层含义： 因为它可以加入图片、声音、动画、多媒体等内容（*超越文本限制 *） 不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（*超级链接文本 *）。 1&lt;h1&gt; 我是一个大标题 &lt;/h1&gt; pink老师 一句话说出他们: 网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。 门外汉眼中的效果页面 我们要做的html页面 1.1 HTML骨架格式日常生活的书信，我们要遵循共同的约定。 同理：HTML 有自己的语言语法骨架格式：（要遵循，要专业） 要求务必非常流畅的默写下来。。 1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; html骨架标签总结 标签名 定义 说明 HTML标签 页面中最大的标签，我们成为 根标签 文档的头部 注意在head标签中我们必须要设置的标签是title 文档的标题 让页面拥有一个属于自己的网页标题 文档的主体 元素包含文档的所有内容，页面内容 基本都是放到body里面的 文档的标题 让页面拥有一个属于自己的网页标题 *课堂练习1： * 书写我们的第一个HTML 页面。 新建一个demo 的 TXT 文件。 里面写入刚才的HTML 骨架。 把后缀名改为 .HTML。 右击–谷歌浏览器打开。 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;我的第一个页面&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 黑马洗练 一飞冲天 月薪过万 你我之间 &lt;/body&gt;&lt;/html&gt; 为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为 猪八戒记忆法 团队约定大小写HTML标签名、类名、标签属性和大部分属性值统一用小写 推荐： 123&lt;head&gt; &lt;title&gt;我的第一个页面&lt;/title&gt; &lt;/head&gt; 不推荐： 123&lt;HEAD&gt; &lt;TITLE&gt;我的第一个页面&lt;/TITLE&gt;&lt;/HEAD&gt; 1.2 HTML元素标签分类标签： 在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;html&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。 分类： 常规元素（双标签） 1&lt;标签名&gt; 内容 &lt;/标签名&gt; 比如 &lt;body&gt; 我是文字 &lt;/body&gt; 该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。 和开始标签相比，结束标签只是在前面加了一个关闭符“/”。 我们以后接触的基本都是双标签 空元素（单标签） 1&lt;标签名 /&gt; 比如 &lt;br /&gt; 空元素 用单标签来表示， 简单点说，就是里面不需要包含内容， 只有一个开始标签不需要关闭。 这种单身狗标签非常少，一共没多少，我们多记忆就好 pink老师 一句话说出他们: 世界上单身狗毕竟是少数的， 大部分还是喜欢成双成对，不要拉下你的另外一半，对待一个双标签要有始有终。 1.3 HTML标签关系主要针对于双标签 的相互关系分为两种： 请大家务必熟悉记住这种标签关系，因为后面我们标签嵌套特别多，很容易弄混他们的关系。 嵌套关系 123&lt;head&gt; &lt;title&gt; &lt;/title&gt; &lt;/head&gt; 2.并列关系 12&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; 倡议： 12&gt; 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。&gt; pink老师 一句话说出他们: html双标签 可以分为 有 一种是 父子级 包含关系的标签 一种是 兄弟级 并列关系的标签 1.4 课堂一练*请问下列哪组标签关系是错误的？ * 2. 代码开发工具（书写代码） 为了提高我们的开发效率 减少代码的出错我们不提倡用记事本开发，我们有更好的犀利哥。 Dreamweaver SublimeText WebStorm HBuilder VScode 有人说： 普通青年 Dreamweaver 文艺青年 sublime 高手和傻子 用记事本 其实。。。。 感觉： 这个feel 倍儿爽 feel feel倍儿爽 爽爽爽爽！ sublime有非常多的优点， 最开心的就是非常轻量级，打开速度超快，后面更高的功能，后面再接触。 sublime生成html骨架小技巧 双击打开软件 新建文件（ctrl+n） 保存（ctrl+s）,保存为：文件名.html （ 注意 后缀名必须是 .html ) 放大缩小代码 ctrl+ 加号 键 和 ctrl + 减号键 或者 按住 ctrl 在 滚动鼠标滚轮 生成页面骨架结构 html: 5 按下tab键 或者 ! 按下tab键 在浏览器中预览页面 右键在 浏览器中打开 3. 文档类型&lt;!DOCTYPE&gt;同学你用啥手机？你咋回答？ 用法： 1&lt;!DOCTYPE html&gt; 作用： 声明位于文档中的最前面的位置，处于 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。 *注意： * 一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。 pink老师 一句话说出他们: 就是告诉浏览器按照HTML5 规范解析页面. 团队约定： 12&gt; HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明&gt; 4. 页面语言lang1&lt;html lang=\"en\"&gt; 指定html 语言种类 最常见的2个： en定义语言为英语 zh-CN定义语言为中文 pink老师 一句话说出他们: 指定该html标签 内容 所用的语言为中文 团队约定： 12&gt; 考虑浏览器和操作系统的兼容性，目前仍然使用 zh-CN 属性值&gt; @拓展阅读： 简单来说，可能对于程序来说没有太大的作用，但是它可以告诉浏览器，搜索引擎，一些处理Html的程序对页面语言内容来做一些对应的处理或者事情。比如可以 根据根据lang属性来设定不同语言的css样式，或者字体 告诉搜索引擎做精确的识别 让语法检查程序做语言识别 帮助翻译工具做识别 帮助网页阅读程序做识别等等 5. 字符集1&lt;meta charset=\"UTF-8\" /&gt; 123字符集(Character set)是多个字符的集合。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。 utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。 gb2312 简单中文 包括6763个汉字 BIG5 繁体中文 港澳台等用 GBK包含全部中文字符 是GB2312的扩展，加入对繁体字的支持，兼容GB2312 UTF-8则基本包含全世界所有国家需要用到的字符 这句代码非常关键， 是必须要写的代码，否则可能引起乱码的情况。 pink老师 一句话说出他们: 这句话是让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。 团队约定： 12&gt; 一般情况下统一使用 &quot;UTF-8&quot; 编码, 请尽量统一写成标准的 &quot;UTF-8&quot;，不要写成 &quot;utf-8&quot; 或 &quot;utf8&quot; 或 &quot;UTF8&quot;。&gt; 6. HTML标签的语义化白话： 所谓标签语义化，就是指标签的含义。 方便代码的阅读和维护 同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 使用语义化标签会具有更好地搜索引擎优化 pink老师 一句话说出他们: 根据标签的语义，在合适的地方给一个最为合理的标签。 语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。( 裸奔起来一样好看 ) 遵循的原则：先确定语义的HTML ，再选合适的CSS。所以，我们接下来学习html标签，要根据语义去记忆。 HTML网页中任何元素的实现都要依靠HTML标签。 7. 拓展阅读@单身狗的由来单身狗一词最早是出自网络社区，起源与大话西游有关。 大话西游之大圣娶亲最后一幕“他好像一条狗”由来。","link":"/前端笔记/html-day02/"},{"title":"HTML-Day05","text":"第01阶段.前端基础.列表和表单 1. 列表标签（重点）学习目标 理解 无序列表的应用场景 自定义列表的应用场景 应用 无序列表语法 自定义列表语法 问？ 前面我们知道表格一般用于数据展示的，但是网页中还是有很多跟表格类似的布局，如下图~~ 我们用什么做呢？ 答： 答案是列表， 那什么是列表？ 表格是用来显示数据的，那么列表就是用来布局的。 因为非常整齐和自由 概念： 容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表 特点： 列表最大的特点就是 整齐 、整洁、 有序，跟表格类似，但是他可组合自由度会更高。 1.1 无序列表 ul （重点）无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下： 123456&lt;ul&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ......&lt;/ul&gt; 比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。 脚下留心： 1231. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！ 1.2 有序列表 ol （了解） 有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下： 123456&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ......&lt;/ol&gt; 所有特性基本与ul 一致。 但是实际中比 无序列表 用的少很多。 1.3 自定义列表（理解）定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下： 12345678910&lt;dl&gt; &lt;dt&gt;名词1&lt;/dt&gt; &lt;dd&gt;名词1解释1&lt;/dd&gt; &lt;dd&gt;名词1解释2&lt;/dd&gt; ... &lt;dt&gt;名词2&lt;/dt&gt; &lt;dd&gt;名词2解释1&lt;/dd&gt; &lt;dd&gt;名词2解释2&lt;/dd&gt; ...&lt;/dl&gt; 用的还可以： 1.4 列表总结 标签名 定义 说明 无序标签 里面只能包含li 没有顺序，我们以后布局中最常用的列表 有序标签 里面只能包含li 有顺序， 使用情况较少 自定义列表 里面有2个兄弟， dt 和 dd 我们现在还没有学布局，现在只要保证2个点： 学会什么时候用无序列表， 学会什么时候用自定义列表 无序列表和自定义列表代码怎么写？ 具体的我们刚才看的布局，等我们学了css 在来全面布局。 2. 表单标签(掌握)目标： 能写出最常用的注册类表单 能说出input表单常见属性 现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图 *作用： * 表单目的是为了收集用户信息。 在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。 在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。 *表单控件： * ​ 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。 提示信息： ​ 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。 表单域： ​ 他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。 2.1 input 控件(重点) 语法： 1&lt;input type=\"属性值\" value=\"你好\"&gt; input 输入的意思 &lt;input /&gt;标签为单标签 type属性设置不同的属性值用来指定不同的控件类型 除了type属性还有别的属性 常用属性： 1. type 属性 这个属性通过改变值，可以决定了你属于那种input表单。 比如 type = ‘text’ 就表示 文本框 可以做 用户名， 昵称等。 比如 type = ‘password’ 就是表示密码框 用户输入的内容 是不可见的。 12用户名: &lt;input type=\"text\" /&gt; 密 码：&lt;input type=\"password\" /&gt; 2. value属性 值1用户名:&lt;input type=\"text\" name=\"username\" value=\"请输入用户名\"&gt; value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。 3. name属性1用户名:&lt;input type=\"text\" name=“username” /&gt; name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。 name属性后面的值，是我们自己定义的。 radio 如果是一组，我们必须给他们命名相同的名字 name 这样就可以多个选其中的一个啦 12&lt;input type=\"radio\" name=\"sex\" /&gt;男&lt;input type=\"radio\" name=\"sex\" /&gt;女 name属性，我们现在用的较少， 但是，当我们学ajax 和后台的时候，是必须的。 4. checked属性 表示默认选中状态。 较常见于 单选按钮和复选按钮。 123性 别:&lt;input type=\"radio\" name=\"sex\" value=\"男\" checked=\"checked\" /&gt;男&lt;input type=\"radio\" name=\"sex\" value=\"女\" /&gt;女 上面这个，表示就默认选中了 男 这个单选按钮 5. input 属性小结 属性 说明 作用 type 表单类型 用来指定不同的控件类型 value 表单值 表单里面默认显示的文本 name 表单名字 页面中的表单很多，name主要作用就是用于区别不同的表单。 checked 默认选中 表示那个单选或者复选按钮一开始就被选中了 2.2 label标签(理解)目标： label标签主要目的是为了提高用户体验。 为用户提高最优秀的服务。 概念： label 标签为 input 元素定义标注（标签）。 作用： 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。 如何绑定元素呢？ 第一种用法就是用label直接包括input表单。 1&lt;label&gt; 用户名： &lt;input type=\"radio\" name=\"usename\" value=\"请输入用户名\"&gt; &lt;/label&gt; 适合单个表单选择 第二种用法 for 属性规定 label 与哪个表单元素绑定。 12&lt;label for=\"sex\"&gt;男&lt;/label&gt;&lt;input type=\"radio\" name=\"sex\" id=\"sex\"&gt; pink老师 一句话说出他们: 当我们鼠标点击 label标签里面的文字时， 光标会定位到指定的表单里面 2.3 textarea控件(文本域) 语法： 123&lt;textarea &gt; 文本内容&lt;/textarea&gt; 作用： 通过textarea控件可以轻松地创建多行文本输入框. cols=”每行中的字符数” rows=”显示的行数” 我们实际开发不用 文本框和文本域区别 表单 名称 区别 默认值显示 用于场景 input type=”text” 文本框 只能显示一行文本 单标签，通过value显示默认值 用户名、昵称、密码等 textarea 文本域 可以显示多行文本 双标签，默认值写到标签中间 留言板 2.4 select下拉列表目的： 如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表. 语法： 123456&lt;select&gt; &lt;option&gt;选项1&lt;/option&gt; &lt;option&gt;选项2&lt;/option&gt; &lt;option&gt;选项3&lt;/option&gt; ...&lt;/select&gt; 注意： &lt;select&gt; 中至少包含一对 option 在option 中定义selected =” selected “时，当前项即为默认选中项。 但是我们实际开发会用的比较少 3. form表单域 收集的用户信息怎么传递给服务器？ 通过form表单域 目的： 在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。 *语法: * 123&lt;form action=\"url地址\" method=\"提交方式\" name=\"表单名称\"&gt; 各种表单控件&lt;/form&gt; 常用属性： 属性 属性值 作用 action url地址 用于指定接收并处理表单数据的服务器程序的url地址。 method get/post 用于设置表单数据的提交方式，其取值为get或post。 name 名称 用于指定表单的名称，以区分同一个页面中的多个表单。 注意: 每个表单都应该有自己表单域。我们现在做页面，不写看不到效果，但是 如果后面学 ajax 后台交互的时候，必须需要 form表单域。 2.6 团队约定元素属性 元素属性值使用双引号语法 元素属性值可以写上的都写上 推荐： 12&lt;input type=\"text\" /&gt; &lt;input type=\"radio\" name=\"name\" checked=\"checked\" /&gt; 不推荐： 123&lt;input type=text /&gt; &lt;input type='text' /&gt; &lt;input type=\"radio\" name=\"name\" checked /&gt; 4.综合案例（注册页面） 5. 查文档经常查阅文档是一个非常好的学习习惯。 W3C : http://www.w3school.com.cn/ MDN: https://developer.mozilla.org/zh-CN/","link":"/前端笔记/html-day05/"},{"title":"HTML5+CSS3-Day01","text":"第02阶段.移动Web网页开发.HTML5标签 HTML5 第一天什么是 HTML5 HTML5 的概念与定义 定义：HTML5 定义了 HTML 标准的最新版本，是对 HTML 的第五次重大修改，号称下一代的 HTML 两个概念： 是一个新版本的 HTML 语言，定义了新的标签、特性和属性 拥有一个强大的技术集，这些技术集是指： HTML5 、CSS3 、javascript, 这也是广义上的 HTML5 HTML5 拓展了哪些内容 语义化标签 本地存储 兼容特性 2D、3D 动画、过渡 CSS3 特性 性能与集成 HTML5 的现状 绝对多数新的属性，都已经被浏览器所支持，最新版本的浏览器已经开始陆续支持最新的特性， 总的来说：HTML5 已经是大势所趋 HTML5 新增标签 什么是语义化 新增了那些语义化标签 header — 头部标签 nav — 导航标签 article — 内容标签 section — 块级标签 aside — 侧边栏标签 footer — 尾部标签 ![](HTML5-CSS3-Day01/yuyibq.png) 使用语义化标签的注意 语义化标签主要针对搜索引擎 新标签可以使用一次或者多次 在 IE9 浏览器中，需要把语义化标签都转换为块级元素 语义化标签，在移动端支持比较友好， 另外，HTML5 新增的了很多的语义化标签，随着课程深入，还会学习到其他的 三、多媒体音频标签 多媒体标签有两个，分别是 音频 – audio 视频 – video audio 标签说明 可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放， 但是：播放格式是有限的 audio 支持的音频格式 audio 目前支持三种格式 audio 的参数 5、audio 代码演示 1234567891011&lt;body&gt; &lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt; &lt;!-- &lt;audio src=\"./media/snow.mp3\" controls autoplay&gt;&lt;/audio&gt; --&gt; &lt;!-- 因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 --&gt; &lt;audio controls&gt; &lt;source src=\"./media/snow.mp3\" type=\"audio/mpeg\" /&gt; &lt;/audio&gt;&lt;/body&gt; 多媒体视频标签 video 视频标签 目前支持三种格式 语法格式 1&lt;video src=\"./media/video.mp4\" controls=\"controls\"&gt;&lt;/video&gt; video 参数 video 代码演示 123456789&lt;body&gt; &lt;!-- &lt;video src=\"./media/video.mp4\" controls=\"controls\"&gt;&lt;/video&gt; --&gt; &lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt; &lt;video controls=\"controls\" autoplay muted loop poster=\"./media/pig.jpg\"&gt; &lt;source src=\"./media/video.mp4\" type=\"video/mp4\"&gt; &lt;source src=\"./media/video.ogg\" type=\"video/ogg\"&gt; &lt;/video&gt;&lt;/body&gt; 多媒体标签总结 音频标签与视频标签使用基本一致 多媒体标签在不同浏览器下情况不同，存在兼容性问题 谷歌浏览器把音频和视频标签的自动播放都禁止了 谷歌浏览器中视频添加 muted 标签可以自己播放 注意：重点记住使用方法以及自动播放即可，其他属性可以在使用时查找对应的手册 新增 input 标签 新增表单属性 CSS3 属性选择器(上) 什么是 CSS3 在 CSS2 的基础上拓展、新增的样式 CSS3 发展现状 移动端支持优于 PC 端 CSS3 目前还草案，在不断改进中 CSS3 相对 H5，应用非常广泛 属性选择器列表 属性选择器代码演示 123456button { cursor: pointer;}button[disabled] { cursor: default} CSS3 属性选择器(下) 代码演示 123456789101112131415input[type=search] { color: skyblue;}span[class^=black] { color: lightgreen;}span[class$=black] { color: lightsalmon;}span[class*=black] { color: lightseagreen;} 结构伪类选择器 属性列表 代码演示 1234567891011ul li:first-child { background-color: lightseagreen;}ul li:last-child { background-color: lightcoral;}ul li:nth-child(3) { background-color: aqua;} nth-child 参数详解 nth-child 详解 注意：本质上就是选中第几个子元素 n 可以是数字、关键字、公式 n 如果是数字，就是选中第几个 常见的关键字有 even 偶数、odd 奇数 常见的公式如下(如果 n 是公式，则从 0 开始计算) 但是第 0 个元素或者超出了元素的个数会被忽略 代码演示 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;style&gt; /* 偶数 */ ul li:nth-child(even) { background-color: aquamarine; } /* 奇数 */ ul li:nth-child(odd) { background-color: blueviolet; } /*n 是公式，从 0 开始计算 */ ul li:nth-child(n) { background-color: lightcoral; } /* 偶数 */ ul li:nth-child(2n) { background-color: lightskyblue; } /* 奇数 */ ul li:nth-child(2n + 1) { background-color: lightsalmon; } /* 选择第 0 5 10 15, 应该怎么选 */ ul li:nth-child(5n) { background-color: orangered; } /* n + 5 就是从第5个开始往后选择 */ ul li:nth-child(n + 5) { background-color: peru; } /* -n + 5 前五个 */ ul li:nth-child(-n + 5) { background-color: tan; }&lt;/style&gt; nth-child 和 nt-of-type 的区别 代码演示 1234567891011121314151617&lt;style&gt; div :nth-child(1) { background-color: lightblue; } div :nth-child(2) { background-color: lightpink; } div span:nth-of-type(2) { background-color: lightseagreen; } div span:nth-of-type(3) { background-color: #fff; }&lt;/style&gt; 区别 nth-child 选择父元素里面的第几个子元素，不管是第几个类型 nt-of-type 选择指定类型的元素 十二、伪元素选择器 伪类选择器 伪类选择器注意事项 before 和 after 必须有 content 属性 before 在内容前面，after 在内容后面 before 和 after 创建的是一个元素，但是属于行内元素 创建出来的元素在 Dom 中查找不到，所以称为伪元素 伪元素和标签选择器一样，权重为 1 代码演示 123456789101112131415161718192021222324&lt;style&gt; div { width: 100px; height: 100px; border: 1px solid lightcoral; } div::after, div::before { width: 20px; height: 50px; text-align: center; display: inline-block; } div::after { content: '德'; background-color: lightskyblue; } div::before { content: '道'; background-color: mediumaquamarine; } &lt;/style&gt; 伪元素的案例 添加字体图标 1234567891011121314p { width: 220px; height: 22px; border: 1px solid lightseagreen; margin: 60px; position: relative;}p::after { content: '\\ea50'; font-family: 'icomoon'; position: absolute; top: -1px; right: 10px;} 2D 转换之 translate 2D 转换 2D 转换是改变标签在二维平面上的位置和形状 移动： translate 旋转： rotate 缩放： scale translate 语法 x 就是 x 轴上水平移动 y 就是 y 轴上水平移动 123transform: translate(x, y)transform: translateX(n)transfrom: translateY(n) 重点知识点 2D 的移动主要是指 水平、垂直方向上的移动 translate 最大的优点就是不影响其他元素的位置 translate 中的100%单位，是相对于本身的宽度和高度来进行计算的 行内标签没有效果 代码演示 1234567891011121314151617181920div { background-color: lightseagreen; width: 200px; height: 100px; /* 平移 */ /* 水平垂直移动 100px */ /* transform: translate(100px, 100px); */ /* 水平移动 100px */ /* transform: translate(100px, 0) */ /* 垂直移动 100px */ /* transform: translate(0, 100px) */ /* 水平移动 100px */ /* transform: translateX(100px); */ /* 垂直移动 100px */ transform: translateY(100px)} 让一个盒子水平垂直居中 看代码 2D 转换 rotate rotate 旋转 2D 旋转指的是让元素在二维平面内顺时针或者逆时针旋转 rotate 语法 12/* 单位是：deg */transform: rotate(度数) 重点知识点 rotate 里面跟度数，单位是 deg 角度为正时，顺时针，角度为负时，逆时针 默认旋转的中心点是元素的中心点 代码演示 123img:hover { transform: rotate(360deg)}","link":"/前端笔记/html5-css3-day01/"},{"title":"JavaScript-Day04","text":"第03阶段.JavaScript基础.数组 JavaScript基础第04天笔记数组数组的概念 数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。 数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。 创建数组 JS 中创建数组有两种方式： 利用 new 创建数组 12var 数组名 = new Array() ；var arr = new Array(); // 创建一个新的空数组 注意 Array () ，A 要大写 利用数组字面量创建数组 1234//1. 使用数组字面量方式创建空的数组var 数组名 = []；//2. 使用数组字面量方式创建带初始值的数组var 数组名 = ['小白','小黑','大黄','瑞奇']; 数组的字面量是方括号 [ ] 声明数组并赋值称为数组的初始化 这种字面量方式也是我们以后最多使用的方式 数组元素的类型 数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。 1var arrStus = ['小白',12,true,28.9]; 获取数组中的元素​ 索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。 ​ 数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。 1234// 定义数组var arrStus = [1,2,3];// 获取数组中的第2个元素alert(arrStus[1]); 注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined 遍历数组 数组遍历 ​ 把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项 1234var arr = ['red','green', 'blue'];for(var i = 0; i &lt; arr.length; i++){ console.log(arrStus[i]);} 数组的长度 数组的长度：默认情况下表示数组中元素的个数 使用“数组名.length”可以访问数组元素的数量（数组长度）。 12var arrStus = [1,2,3];alert(arrStus.length); // 3 注意： 此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。 当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化 数组的length属性可以被修改： 如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素； 如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除 数组中新增元素​ 数组中可以通过以下方式在数组的末尾插入新元素： 1数组[ 数组.length ] = 新数据; 函数函数的概念​ 在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。 ​ 函数：就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。 函数的使用声明函数1234// 声明函数function 函数名() { //函数体代码} function 是声明函数的关键字,必须小写 由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum 调用函数12// 调用函数函数名(); // 通过调用函数名来执行函数体代码 调用的时候千万不要忘记添加小括号 口诀：函数不调用，自己不执行 注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。 函数的封装 函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口 简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包） 例子：封装计算1-100累加和 12345678910111213/* 计算1-100之间值的函数*/// 声明函数function getSum(){ var sumNum = 0;// 准备一个变量，保存数字和 for (var i = 1; i &lt;= 100; i++) { sumNum += i;// 把每个数值 都累加 到变量中 } alert(sumNum);}// 调用函数getSum(); 函数的参数函数参数语法 形参：函数定义时设置接收调用时传入 实参：函数调用时传入小括号内的真实数据 ​ 参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。 函数参数的运用： 123456// 带参数的函数声明function 函数名(形参1, 形参2 , 形参3...) { // 可以定义任意多的参数，用逗号分隔 // 函数体}// 带参数的函数调用函数名(实参1, 实参2, 实参3...); 调用的时候实参值是传递给形参的 形参简单理解为：不用声明的变量 实参和形参的多个参数之间用逗号（,）分隔 函数形参和实参数量不匹配时 注意：在JavaScript中，形参的默认值是undefined。小结： 函数可以带参数也可以不带参数 声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined 调用函数的时候，函数名括号里面的是实参 多个参数中间用逗号分隔 形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配 函数的返回值return 语句返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。1234567// 声明函数function 函数名（）{ ... return 需要返回的值；}// 调用函数函数名(); // 此时调用函数就可以得到函数体内return 后面的值 在使用 return 语句时，函数会停止执行，并返回指定的值 如果函数没有 return ，返回的值是 undefined break ,continue ,return 的区别 break ：结束当前的循环体（如 for、while） continue ：跳出本次循环，继续执行下次循环（如 for、while） return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码 arguments的使用​ 当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点： 具有 length 属性 按索引方式储存数据 不具有数组的 push , pop 等方法 注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。 函数案例函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。函数的两种声明方式 自定义函数方式(命名函数) 利用函数关键字 function 自定义函数方式 1234// 声明定义方式function fn() {...}// 调用 fn(); 因为有名字，所以也被称为命名函数 调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面 函数表达式方式(匿名函数） 利用函数表达式方式的写法如下： 1234// 这是函数表达式写法，匿名函数后面跟分号结束var fn = function(){...}；// 调用的方式，函数调用必须写到函数体下面fn(); 因为函数没有名字，所以也被称为匿名函数 这个fn 里面存储的是一个函数 函数表达式方式原理跟声明变量方式是一致的 函数调用的代码必须写到函数体后面","link":"/前端笔记/javascript-day04/"},{"title":"JavaScript-Day02","text":"第03阶段.JavaScript基础.运算符 JavaScript基础第02天运算符（操作符）运算符的分类运算符（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。 JavaScript中常用的运算符有： 算数运算符 递增和递减运算符 比较运算符 逻辑运算符 赋值运算符 算数运算符 算术运算符概述 概念：算术运算使用的符号，用于执行两个变量或值的算术运算。 浮点数的精度问题 浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。 12var result = 0.1 + 0.2; // 结果不是 0.3，而是：0.30000000000000004console.log(0.07 * 100); // 结果不是 7， 而是：7.000000000000001 所以：不要直接判断两个浮点数是否相等 ! 表达式和返回值 表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合 简单理解：是由数字、运算符、变量等组成的式子 表达式最终都会有一个结果，返回给开发者，称为返回值 递增和递减运算符 递增和递减运算符概述 如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。 在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。 注意：递增和递减运算符必须和变量配合使用。 递增运算符 前置递增运算符 ++num 前置递增，就是自加1，类似于 num = num + 1，但是 ++num 写起来更简单。 使用口诀：先自加，后返回值 12var num = 10;alert(++num + 10); // 21 后置递增运算符 num++ 后置递增，就是自加1，类似于 num = num + 1 ，但是 num++ 写起来更简单。 使用口诀：先返回原值，后自加 12var num = 10;alert(10 + num++); // 20 比较运算符 比较运算符概述 概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。 等号比较 12console.log(18 == '18');console.log(18 === '18'); 逻辑运算符 逻辑运算符概述 概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断 逻辑与&amp;&amp; 两边都是 true才返回 true，否则返回 false ​ ​ 逻辑或 || 两边都是 true才返回 true，否则返回 false ​ ​ 逻辑非 ！ 逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false 12var isOk = !true;console.log(isOk); // false 短路运算（逻辑中断） 短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值; 逻辑与 语法： 表达式1 &amp;&amp; 表达式2 - 如果第一个表达式的值为真，则返回表达式2 - 如果第一个表达式的值为假，则返回表达式1123console.log( 123 &amp;&amp; 456 ); // 456console.log( 0 &amp;&amp; 456 ); // 0console.log( 123 &amp;&amp; 456&amp;&amp; 789 ); // 789 逻辑或 语法： 表达式1 || 表达式2 - 如果第一个表达式的值为真，则返回表达式1 - 如果第一个表达式的值为假，则返回表达式2 123console.log( 123 || 456 ); // 123console.log( 0 || 456 ); // 456console.log( 123 || 456 || 789 ); // 123 赋值运算符概念：用来把数据赋值给变量的运算符。 1234var age = 10;age += 5; // 相当于 age = age + 5;age -= 5; // 相当于 age = age - 5;age *= 10; // 相当于 age = age * 10; 运算符优先级 一元运算符里面的逻辑非优先级很高 逻辑与比逻辑或优先级高 流程控制流程控制概念在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。 简单理解：**流程控制就是来控制代码按照一定结构顺序来执行** 流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。 顺序流程控制​ ​ 顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。​ 分支流程控制 分支结构 由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果 ![](JavaScript-Day02/%E5%9B%BE%E7%89%8713.png) JS 语言提供了两种分支结构语句：if 语句、switch 语句 if 语句 语法结构 1234// 条件成立执行代码，否则什么也不做if (条件表达式) { // 条件成立执行的代码语句} 语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。 执行流程 if else语句（双分支语句） 语法结构 123456// 条件成立 执行 if 里面代码，否则执行else 里面的代码if (条件表达式) { // [如果] 条件成立执行的代码} else { // [否则] 执行的代码} 执行流程 if else if 语句(多分支语句) 语法结构 1234567891011// 适合于检查多重条件。if (条件表达式1) { 语句1；} else if (条件表达式2) { 语句2；} else if (条件表达式3) { 语句3； ....} else { // 上述条件都不成立执行此处代码} 执行逻辑 三元表达式 语法结构 1表达式1 ? 表达式2 : 表达式3; 执行思路 如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值 简单理解： 就类似于 if else （双分支） 的简写 switch分支流程控制 语法结构 switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。 12345678910switch( 表达式 ){ case value1: // 表达式 等于 value1 时要执行的代码 break; case value2: // 表达式 等于 value2 时要执行的代码 break; default: // 表达式 不等于任何一个 value 时要执行的代码} switch ：开关 转换 ， case ：小例子 选项 关键字 switch 后面括号内可以是表达式或值， 通常是一个变量 关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号 switch 表达式的值会与结构中的 case 的值做比较 如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束 如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码 注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。 switch 语句和 if else if 语句的区别 一般情况下，它们两个语句可以相互替换 switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围) switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。 当分支比较少时，if… else语句的执行效率比 switch语句高。 当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。","link":"/前端笔记/javascript-day02/"},{"title":"JavaScript-Day05","text":"第03阶段.JavaScript基础.作用域 JavaScript基础第05天笔记作用域作用域概述通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。JavaScript（es6前）中的作用域有两种： 全局作用域 局部作用域（函数作用域） 全局作用域 作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。 局部作用域作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。JS没有块级作用域 块作用域由 { } 包括。 在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码： java有块级作用域： 12345if(true){ int num = 123; system.out.print(num); // 123}system.out.print(num); // 报错 以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用； 而与之类似的JavaScript代码，则不会报错： Js中没有块级作用域（在ES6之前） 12345if(true){ var num = 123; console.log(123); //123}console.log(123); //123 变量的作用域在JavaScript中，根据作用域的不同，变量可以分为两种： 全局变量 局部变量 全局变量在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。 全局变量在代码的任何位置都可以使用 在全局作用域下 var 声明的变量 是全局变量 特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用） 局部变量在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量） 局部变量只能在该函数内部使用 在函数内部 var 声明的变量是局部变量 函数的形参实际上就是局部变量 全局变量和局部变量的区别 全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存 局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间 作用域链只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链 案例分析1：123456789function f1() { var num = 123; function f2() { console.log( num ); } f2();}var num = 456;f1(); 作用域链：采取就近原则的方式来查找变量最终的值。12345678910111213141516var a = 1;function fn1() { var a = 2; var b = '22'; fn2(); function fn2() { var a = 3; fn3(); function fn3() { var a = 4; console.log(a); //a的值 ? console.log(b); //b的值 ? } }}fn1(); 预解析预解析的相关概念JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。 预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。 代码执行： 从上到下执行JS语句。 预解析会把变量和函数的声明在代码执行之前执行完成。 变量预解析预解析也叫做变量、函数提升。 变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。12console.log(num); // 结果是多少？var num = 10; // ？ 结果：undefined 注意：**变量提升只提升声明，不提升赋值**函数预解析函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。1234fn();function fn() { console.log('打印');} 结果：控制台打印字符串 --- ”打印“ 注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！ 函数表达式声明函数问题函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用：1234fn();var fn = function() { console.log('想不到吧');} 结果：报错提示 ”fn is not a function&quot; 解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用对象对象的相关概念 什么是对象？ 在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。 对象是由属性和方法组成的。 属性：事物的特征，在对象中用属性来表示（常用名词） 方法：事物的行为，在对象中用方法来表示（常用动词） 为什么需要对象？ 保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。 如果要保存一个人的完整信息呢？ 例如，将“张三疯”的个人的信息保存在数组中的方式为：1var arr = [‘张三疯’, ‘男&apos;, 128,154]; 上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。 为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。 使用对象记录上组数据为：123456var obj = { \"name\":\"张三疯\", \"sex\":\"男\", \"age\":128, \"height\":154} JS中的对象表达结构更清晰，更强大。 创建对象的三种方式 利用字面量创建对象 使用对象字面量创建对象：就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示 键：相当于属性名 值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等） 代码如下： 12345678var star = { name : 'pink', age : 18, sex : '男', sayHi : function(){ alert('大家好啊~'); }}; 上述代码中 star即是创建的对象。 对象的使用 对象的属性 对象中存储具体数据的 “键值对”中的 “键”称为对象的属性，即对象中存储具体数据的项 对象的方法 对象中存储函数的 “键值对”中的 “键”称为对象的方法，即对象中存储函数的项 访问对象的属性 对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ” 对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号 示例代码如下： 12console.log(star.name) // 调用名字属性console.log(star['name']) // 调用名字属性 调用对象的方法 对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 示例代码如下： 1star.sayHi(); // 调用 sayHi 方法,注意，一定不要忘记带后面的括号 变量、属性、函数、方法总结 属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器 变量：单独声明赋值，单独存在 属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征 方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器 - 函数：单独存在的，通过“函数名()”的方式就可以调用 - 方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。 利用 new Object 创建对象 创建空对象 1var andy = new Obect(); 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象 给空对象添加属性和方法 通过对象操作属性和方法的方式，来为对象增加属性和方法 示例代码如下： 123456andy.name = 'pink';andy.age = 18;andy.sex = '男';andy.sayHi = function(){ alert('大家好啊~');} 注意： Object() ：第一个字母大写 new Object() ：需要 new 关键字 使用的格式：对象.属性 = 值; 利用构造函数创建对象 构造函数 构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。 构造函数的封装格式： 123456function 构造函数名(形参1,形参2,形参3) { this.属性名1 = 参数1; this.属性名2 = 参数2; this.属性名3 = 参数3; this.方法名 = 函数体;} 构造函数的调用格式 1var obj = new 构造函数名(实参1，实参2，实参3) 以上代码中，obj即接收到构造函数创建出来的对象。 注意事项 构造函数约定首字母大写。 函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。 构造函数中不需要 return 返回结果。 当我们创建对象的时候，必须用 new 来调用构造函数。 其他 构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化 new关键字的作用 在构造函数代码开始执行之前，创建一个空对象； 修改this的指向，把this指向创建出来的空对象； 执行函数的代码 在函数完成之后，返回this—即创建出来的对象 遍历对象for...in 语句用于对数组或者对象的属性进行循环操作。 其语法如下：123for (变量 in 对象名字) { // 在此执行代码} 语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。1234for (var k in obj) { console.log(k); // 这里的 k 是属性名 console.log(obj[k]); // 这里的 obj[k] 是属性值}","link":"/前端笔记/javascript-day05/"},{"title":"JavaScript-Day06","text":"第03阶段.JavaScript基础.内置对象 JavaScript基础第06天笔记内置对象内置对象​ JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象​ 前面两种对象是JS 基础 内容，属于 ECMAScript； 第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法），内置对象最大的优点就是帮助我们快速开发 ​ JavaScript 提供了多个内置对象：Math、 Date 、Array、String等 查文档​ 查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。​ Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。​ MDN:https://developer.mozilla.org/zh-CN/ Math对象​ Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。 属性、方法名 功能 Math.PI 圆周率 Math.floor() 向下取整 Math.ceil() 向上取整 Math.round() 四舍五入版 就近取整 注意 -3.5 结果是 -3 Math.abs() 绝对值 Math.max()/Math.min() 求最大和最小值 Math.random() 获取范围在[0,1)内的随机值 ​ 注意：上面的方法使用时必须带括号 ​ 获取指定范围内的随机整数： 123function getRandom(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; } 日期对象​ Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间 使用Date实例化日期对象 获取当前时间必须实例化： 1var now = new Date(); 获取指定时间的日期对象 1var future = new Date('2019/5/1'); 注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象 使用Date实例的方法和属性 通过Date实例获取总毫米数 总毫秒数的含义 ​ 基于1970年1月1日（世界标准时间）起的毫秒数 获取总毫秒数 123456789// 实例化Date对象var now = new Date();// 1. 用于获取对象的原始值console.log(date.valueOf()) console.log(date.getTime()) // 2. 简单写可以这么做var now = + new Date(); // 3. HTML5中提供的方法，有兼容性问题var now = Date.now(); 数组对象创建数组的两种方式 字面量方式 示例代码如下： 1var arr = [1,\"test\",true]; new Array() 示例代码如下： 1var arr = new Array(); ​ 注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数 ​ 参数传递规则如下： 如果只传入一个参数，则参数规定了数组的长度 如果传入了多个参数，则参数称为数组的元素 检测是否为数组 instanceof 运算符 instanceof 可以判断一个对象是否是某个构造函数的实例 1234var arr = [1, 23];var obj = {};console.log(arr instanceof Array); // trueconsole.log(obj instanceof Array); // false Array.isArray() Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法 1234var arr = [1, 23];var obj = {};console.log(Array.isArray(arr)); // trueconsole.log(Array.isArray(obj)); // false 添加删除数组元素的方法 数组中有进行增加、删除元素的方法，部分方法如下表 注意：push、unshift为增加元素方法；pop、shift为删除元素的方法 数组排序 数组中有对数组本身排序的方法，部分方法如下表 注意：sort方法需要传入参数来设置升序、降序排序 如果传入“function(a,b){ return a-b;}”，则为升序 如果传入“function(a,b){ return b-a;}”，则为降序 数组索引方法 数组中有获取数组指定元素索引值的方法，部分方法如下表 数组转换为字符串 数组中有把数组转化为字符串的方法，部分方法如下表 注意：join方法如果不传入参数，则按照 “ , ”拼接元素 其他方法 数组中还有其他操作方法，同学们可以在课下自行查阅学习 字符串对象基本包装类型​ 为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。 ​ 基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。 123// 下面代码有什么问题？var str = 'andy';console.log(str.length); ​ 按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 ​ js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ： 123456// 1. 生成临时变量，把简单类型包装为复杂数据类型var temp = new String('andy');// 2. 赋值给我们声明的字符变量str = temp;// 3. 销毁临时变量temp = null; 字符串的不可变​ 指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。 ​ 当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。​ 由于字符串的不可变，在大量拼接字符串的时候会有效率问题 根据字符返回位置​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法： ​ 案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数 先查找第一个o出现的位置 然后 只要indexOf 返回的结果不是 -1 就继续往后查找 因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找 根据位置返回字符​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符： ​ 在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下： ​ 案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数 核心算法：利用 charAt(） 遍历这个字符串 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1 遍历对象，得到最大值和该字符 ​ 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数 字符串操作方法​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法： replace()方法​ replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下： 1字符串.replace(被替换的字符串， 要替换为的字符串)； split()方法​ split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。 ​ 其使用格式如下： 1字符串.split(&quot;分割字符&quot;) 简单数据类型和复杂数据类型简单数据类型​ 简单类型（基本数据类型、值类型）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null 复杂数据类型​ 复杂数据类型（引用类型）：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等； 堆栈 堆栈空间分配区别： 1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈； 简单数据类型存放到栈里面 2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。 简单数据类型的存储方式 ​ 值类型变量的数据直接存放在变量（栈空间）中 复杂数据类型的存储方式 ​ 引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中 简单类型传参​ 函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。 1234567function fn(a) { a++; console.log(a); }var x = 10;fn(x);console.log(x)； ​ 运行结果如下： 复杂数据类型传参​ 函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。 123456789101112function Person(name) { this.name = name;}function f1(x) { // x = p console.log(x.name); // 2. 这个输出什么 ? x.name = \"张学友\"; console.log(x.name); // 3. 这个输出什么 ? }var p = new Person(\"刘德华\");console.log(p.name); // 1. 这个输出什么 ? f1(p);console.log(p.name); // 4. 这个输出什么 ? ​ 运行结果如下：","link":"/前端笔记/javascript-day06/"},{"title":"rem布局","text":"第02阶段.移动Web网页开发.rem布局 移动web开发之rem布局rem基础rem单位rem (root em)是一个相对单位，类似于em，em是父元素字体大小。 不同的是rem的基准是相对于html元素的字体大小。 比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。 12345678/* 根html 为 12px */html { font-size: 12px;}/* 此时 div 的字体大小就是 24px */ div { font-size: 2rem;} rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。 媒体查询什么是媒体查询媒体查询（Media Query）是CSS3新语法。 使用 @media查询，可以针对不同的媒体类型定义不同的样式 @media 可以针对不同的屏幕尺寸设置不同的样式 当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面 目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询 媒体查询语法规范 用 @media开头 注意@符号 mediatype 媒体类型 关键字 and not only media feature 媒体特性必须有小括号包含 123@media mediatype and|not|only (media feature) { CSS-Code;} mediatype 查询类型 ​ 将不同的终端设备划分成不同的类型，称为媒体类型 关键字 ​ 关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。 and：可以将多个媒体特性连接到一起，相当于“且”的意思。 not：排除某个媒体类型，相当于“非”的意思，可以省略。 only：指定某个特定的媒体类型，可以省略。 媒体特性 每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。 注意他们要加小括号包含 媒体查询书写规则 注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁 less 基础维护css弊端CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。 CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。 不方便维护及扩展，不利于复用。 CSS 没有很好的计算能力 非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。 Less 介绍Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。 做为 CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。 它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。 Less中文网址：http://lesscss.cn/ 常见的CSS预处理器：Sass、Less、Stylus 一句话：Less是一门 CSS 预处理语言，它扩展了CSS的动态特性。 Less安装 ①安装nodejs，可选择版本(8.0)，网址：http://nodejs.cn/download/ ②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd） —输入“node –v”查看版本即可 ③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可 ④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可 Less 使用之变量 变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。 1@变量名:值; 必须有@为前缀 不能包含特殊字符 不能以数字开头 大小写敏感 1@color: pink; Less 编译 vocode Less 插件 Easy LESS 插件用来把less文件编译为css文件 安装完毕插件，重新加载下 vscode。 只要保存一下Less文件，会自动生成CSS文件。 Less 嵌套 12345678910// 将css改为less#header .logo { width: 300px;}#header { .logo { width: 300px; }} 如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接 12345678a:hover{ color:red;}a{ &amp;:hover{ color:red; }} Less 运算 任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。 1234567891011/*Less 里面写*/@witdh: 10px + 5;div { border: @witdh solid red;}/*生成的css*/div { border: 15px solid red;}/*Less 甚至还可以这样 */width: (@width + 5) * 2; 乘号（*）和除号（/）的写法 运算符中间左右有个空格隔开 1px + 5 对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 如果两个值之间只有一个值有单位，则运算结果就取该单位 rem适配方案1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。 2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。 技术方案： 1.less+rem+媒体查询 2.lflexible.js+rem 总结： 两种方案现在都存在。 方案2 更简单，现阶段大家无需了解里面的js代码。 rem实际开发适配方案1①假设设计稿是750px ②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份） ③每一份作为html字体大小，这里就是50px ④那么在320px设备的时候，字体大小为320/15就是 21.33px ⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的 ⑥比如我们以750为标准设计稿 ⑦一个100100像素的页面元素在 750屏幕下， 就是 100/ 50 转换为rem 是 2rem2rem 比例是1比1 ⑧320屏幕下， html字体大小为21.33 则 2rem= 42.66px 此时宽和高都是 42.66 但是宽和高的比例还是 1比1 ⑨但是已经能实现不同屏幕下 页面元素盒子等比例缩放的效果 总结： ①最后的公式：页面元素的rem值 = 页面元素值（px） / （屏幕宽度 / 划分的份数） ②屏幕宽度/划分的份数就是 htmlfont-size 的大小 ③或者：页面元素的rem值 = 页面元素值（px） / html font-size 字体大小 苏宁首页苏宁首页地址 ：苏宁首页 1、 技术选型 方案：我们采取单独制作移动页面方案 技术：布局采取rem适配布局（less + rem + 媒体查询） 设计图： 本设计图采用 750px 设计尺寸 2、搭建文件结构 3、设置视口标签以及引入初始化样式 123&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt; 4、设置公共common.less文件 新建common.less 设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要 我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px 划分的份数我们定为 15等份 因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面 rem 适配方案2手机淘宝团队出的简洁高效 移动端适配库 我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理 它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。 我们要做的，就是确定好我们当前设备的html 文字大小就可以了 比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以 里面页面元素rem值： 页面元素的px 值 / 75 剩余的，让flexible.js来去算 github地址：https://github.com/amfe/lib-flexible 总结： 因为flexible是默认将屏幕分为10等分 但是当屏幕大于750的时候希望不要再去重置html字体了 所以要自己通过媒体查询设置一下 并且要把权重提到最高 VSCode px 转换rem 插件 cssrem 因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置","link":"/前端笔记/rem布局/"},{"title":"CSS-Day07","text":"第01阶段.前端基础.CSS高级技巧 CSS高级技巧目标 理解 能说出元素显示隐藏最常见的写法 能说出精灵图产生的目的 能说出去除图片底侧空白缝隙的方法 应用 能写出最常见的鼠标样式 能使用精灵图技术 能用滑动门做导航栏案例 元素的显示与隐藏 目的 让一个元素在页面中消失或者显示出来 场景 类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！ display 显示（重点） display 设置或检索对象是否及如何显示。 123display: none 隐藏对象display：block 除了转换为块级元素之外，同时还有显示元素的意思。 特点： 隐藏之后，不再保留位置。 实际开发场景： 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛 visibility 可见性 (了解) 设置或检索是否显示对象。 123visibility：visible ; 对象可视visibility：hidden; 对象隐藏 特点： 隐藏之后，继续保留原有位置。（停职留薪） overflow 溢出(重点) 检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。 属性值 描述 visible 不剪切内容也不添加滚动条 hidden 不显示超过对象尺寸的内容，超出的部分隐藏掉 scroll 不管超出内容否，总是显示滚动条 auto 超出自动显示滚动条，不超出不显示滚动条 实际开发场景： 清除浮动 隐藏超出内容，隐藏掉, 不允许内容超过父盒子。 显示与隐藏总结 属性 区别 用途 display 隐藏对象，不保留位置 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛 visibility 隐藏对象，保留位置 使用较少 overflow 只是隐藏超出大小的部分 1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围 CSS用户界面样式 所谓的界面样式， 就是更改一些用户操作样式，以便提高更好的用户体验。 更改用户的鼠标样式 (滚动条因为兼容性非常差，我们不研究) 表单轮廓等。 防止表单域拖拽 鼠标样式cursor 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 属性值 描述 default 小白 默认 pointer 小手 move 移动 text 文本 not-allowed 禁止 鼠标放我身上查看效果哦： 1234567&lt;ul&gt; &lt;li style=\"cursor:default\"&gt;我是小白&lt;/li&gt; &lt;li style=\"cursor:pointer\"&gt;我是小手&lt;/li&gt; &lt;li style=\"cursor:move\"&gt;我是移动&lt;/li&gt; &lt;li style=\"cursor:text\"&gt;我是文本&lt;/li&gt; &lt;li style=\"cursor:not-allowed\"&gt;我是文本&lt;/li&gt;&lt;/ul&gt; 轮廓线 outline 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 1outline : outline-color ||outline-style || outline-width 但是我们都不关心可以设置多少，我们平时都是去掉的。 li 最直接的写法是 ： outline: 0; 或者 outline: none; 1&lt;input type=\"text\" style=\"outline: 0;\"/&gt; 防止拖拽文本域resize 实际开发中，我们文本域右下角是不可以拖拽： 1&lt;textarea style=\"resize: none;\"&gt;&lt;/textarea&gt; 用户界面样式总结 属性 用途 用途 鼠标样式 更改鼠标样式cursor 样式很多，重点记住 pointer 轮廓线 表单默认outline outline 轮廓线，我们一般直接去掉，border是边框，我们会经常用 防止拖拽 主要针对文本域resize 防止用户随意拖拽文本域，造成页面布局混乱，我们resize:none vertical-align 垂直对齐 有宽度的块级元素居中对齐，是margin: 0 auto; 让文字居中对齐，是 text-align: center; 但是我们从来没有讲过有垂直居中的属性。 vertical-align 垂直对齐，它只针对于行内元素或者行内块元素， 1vertical-align : baseline |top |middle |bottom 设置或检索对象内容的垂直对其方式。 注意： vertical-align 不影响块级元素中的内容对齐，它只针对于行内元素或者行内块元素， 特别是行内块元素， 通常用来控制图片/表单与文字的对齐。 图片、表单和文字对齐所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。 去除图片底侧空白缝隙 原因： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。 就是图片底侧会有一个空白缝隙。 解决的方法就是： 给img vertical-align:middle | top| bottom等等。 让图片不要和基线对齐。 给img 添加 display：block; 转换为块级元素就不会存在问题了。 溢出的文字省略号显示white-space white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 123white-space:normal ；默认处理方式white-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。 text-overflow 文字溢出 设置或检索是否使用一个省略标记（…）标示对象内文本的溢出 123text-overflow : clip ；不显示省略标记（...），而是简单的裁切 text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...） 注意： 一定要首先强制一行内显示，再次和overflow属性 搭配使用 总结三步曲123456/*1. 先强制一行内显示文本*/ white-space: nowrap;/*2. 超出的部分隐藏*/ overflow: hidden;/*3. 文字用省略号替代超出的部分*/ text-overflow: ellipsis; CSS精灵技术（sprite) 重点为什么需要精灵技术 图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。 然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。 pink老师告诉你我们为什么需要精灵技术： 为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。 出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。 精灵技术讲解CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。 这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。 我们需要使用CSS的 background-image、 background-repeat background-position属性进行背景定位， 其中最关键的是使用background-position 属性精确地定位。 精灵技术使用的核心总结首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。 精确测量，每个小背景图片的大小和 位置。 给盒子指定小背景图片时， 背景定位基本都是 负值。 制作精灵图(了解)CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。 大部分情况下，精灵图都是网页美工做。 123我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。我们可以横向摆放也可以纵向摆放，但是每个图片之间留有适当的空隙在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。 结束语： 小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。 滑动门先来体会下现实中的滑动门,或者你可以叫做推拉门： 滑动门出现的背景制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？ 为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。 http://weixin.qq.com/ 核心技术核心技术就是利用CSS精灵（主要是背景位置）和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。 一般的经典布局都是这样的： 12345&lt;li&gt; &lt;a href=\"#\"&gt; &lt;span&gt;导航栏内容&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; css样式 12345678910111213141516171819202122232425262728293031* { padding:0; margin:0; } body{ background: url(images/wx.jpg) repeat-x; } .father { padding-top:20px; } li { padding-left: 16px; height: 33px; float: left; line-height: 33px; margin:0 10px; background: url(./images/to.png) no-repeat left ; } a { padding-right: 16px; height: 33px; display: inline-block; color:#fff; background: url(./images/to.png) no-repeat right ; text-decoration: none; } li:hover, li:hover a { background-image:url(./images/ao.png); } 总结： a 设置 背景左侧，padding撑开合适宽度。 span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。 之所以a包含span就是因为 整个导航都是可以点击的。 拓展@margin负值之美负边距+定位：水平垂直居中咱们前面讲过， 一个绝对定位的盒子， 利用 父级盒子的 50%， 然后 往左(上) 走 自己宽度的一半 ，可以实现盒子水平垂直居中。 压住盒子相邻边框 CSS三角形之美12345678910111213141516div { width: 0; height: 0; line-height:0； font-size: 0;border-top: 10px solid red;border-right: 10px solid green;border-bottom: 10px solid blue;border-left: 10px solid #000; } 一张图， 你就知道 css 三角是怎么来的了, 做法如下： 我们用css 边框可以模拟三角效果 宽度高度为0 我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了 为了照顾兼容性 低版本的浏览器，加上 font-size: 0; line-height: 0;","link":"/前端笔记/css-day07/"},{"title":"CSS-Day02","text":"第01阶段.前端基础.CSS选择器 今天我们围绕一个 导航栏案例进行学习知识点。 CSS复合选择器今日重点： 复合选择器 后代选择器 并集选择器 标签显示模式 CSS背景 背景位置 CSS三大特性 优先级 目标 理解 理解css复合选择器分别的应用场景 应用 使用后代选择器给元素添加样式 使用并集选择器给元素添加样式 使用伪类选择器 为什么要学习css复合选择器 CSS选择器分为 基础选择器 和 复合选择器 ，但是基础选择器不能满足我们实际开发中，快速高效的选择标签。 目的是为了可以选择更准确更精细的目标元素标签。 复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的 后代选择器（重点） 概念： 后代选择器又称为包含选择器 作用： 用来选择元素或元素组的子孙后代 其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，先写父亲爷爷，在写儿子孙子。 1父级 子级{属性:属性值;属性:属性值;} 语法： 1.class h3{color:red;font-size:16px;} 当标签发生嵌套时，内层标签就成为外层标签的后代。 子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 子元素选择器 作用： 子元素选择器只能选择作为某元素子元素(亲儿子)的元素。 其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接 语法： 1.class&gt;h3{color:red;font-size:14px;} pink老师一句话说出他们 这里的子 指的是 亲儿子 不包含孙子 重孙子之类。 白话： 1比如： .demo &gt; h3 {color: red;} 说明 h3 一定是demo 亲儿子。 demo 元素包含着h3。 交集选择器 条件 交集选择器由两个选择器构成，找到的标签必须满足：既有标签一的特点，也有标签二的特点。 语法： 其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。 记忆技巧： 交集选择器 是 并且的意思。 即…又…的意思 1比如： p.one 选择的是： 类名为 .one 的 段落标签。 用的相对来说比较少，不太建议使用。 并集选择器（重点） 应用： 如果某些选择器定义的相同样式，就可以利用并集选择器，可以让代码更简洁。 并集选择器（CSS选择器分组）是各个选择器通过,连接而成的，通常用于集体声明。 语法： 任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。 记忆技巧： 并集选择器通常用于集体声明 ，逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为 和的意思。 123比如 .one, p , #test {color: #F00;} 表示 .one 和 p 和 #test 这三个选择器都会执行颜色为红色。 通常用于集体声明。 他和他，在一起， 在一起 一起的意思 测试题1234567891011121314 &lt;!-- 主导航栏 --&gt;&lt;div class=\"nav\"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;公司首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;公司简介&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;公司产品&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;!-- 侧导航栏 --&gt;&lt;div class=\"sitenav\"&gt; &lt;div class=\"site-l\"&gt;左侧侧导航栏&lt;/div&gt; &lt;div class=\"site-r\"&gt;&lt;a href=\"#\"&gt;登录&lt;/a&gt;&lt;/div&gt;&lt;/div&gt; 在不修改以上结构代码的前提下，完成以下任务： 链接 登录 的颜色为红色 主导航栏里面的所有的链接改为橙色 主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。 链接伪类选择器（重点） 伪类选择器： 为了和我们刚才学的类选择器相区别类选择器是一个点 比如 .demo {}而我们的伪类 用 2个点 就是 冒号 比如 :link{} 伪娘 作用： 用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。 因为伪类选择器很多，比如链接伪类，结构伪类等等。我们这里先给大家讲解链接伪类选择器。 a:link /* 未访问的链接 */ a:visited /* 已访问的链接 */ a:hover /* 鼠标移动到链接上 */ a:active /* 选定的链接 */ 注意 写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。否则可能引起错误。 记忆法 love hate 爱上了讨厌 lv *包包 非常 *hao 因为叫链接伪类，所以都是 利用交集选择器 a:link a:hover 因为a链接浏览器具有默认样式，所以我们实际工作中都需要给链接单独指定样式。 实际工作开发中，我们很少写全四个状态，一般我们写法如下： 12345678a { /* a是标签选择器 所有的链接 */ font-weight: 700; font-size: 16px; color: gray;}a:hover { /* :hover 是链接伪类选择器 鼠标经过 */ color: red; /* 鼠标经过的时候，由原来的 灰色 变成了红色 */} 复合选择器总结 选择器 作用 特征 使用情况 隔开符号及用法 后代选择器 用来选择元素后代 是选择所有的子孙后代 较多 符号是空格 .nav a 子代选择器 选择 最近一级元素 只选亲儿子 较少 符号是&gt; .nav&gt;p 交集选择器 选择两个标签交集的部分 既是 又是 较少 没有符号 p.one 并集选择器 选择某些相同样式的选择器 可以用于集体声明 较多 符号是逗号 .nav, .header 链接伪类选择器 给链接更改状态 较多 重点记住 a{} 和 a:hover 实际开发的写法 标签显示模式（display）重点目标： 理解 标签的三种显示模式 三种显示模式的特点以及区别 理解三种显示模式的相互转化 应用 实现三种显示模式的相互转化 什么是标签显示模式 什么是标签的显示模式？ 标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个 作用： 我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。 标签的类型(分类) HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。 块级元素(block-level) 例： 1常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。 块级元素的特点 （1）比较霸道，自己独占一行 （2）高度，宽度、外边距以及内边距都可以控制。 （3）宽度默认是容器（父级宽度）的100% （4）是一个容器及盒子，里面可以放行内或者块级元素。 注意： 只有 文字才 能组成段落 因此 p 里面不能放块级元素，特别是 p 不能放div 同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。 行内元素(inline-level) 例： 1常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素 行内元素的特点： （1）相邻行内元素在一行上，一行可以显示多个。 （2）高、宽直接设置是无效的。 （3）默认宽度就是它本身内容的宽度。 （4）行内元素只能容纳文本或则其他行内元素。 注意： 链接里面不能再放链接。 特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。 行内块元素（inline-block） 例： 1在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。 行内块元素的特点： （1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个（2）默认宽度就是它本身内容的宽度。（3）高度，行高、外边距以及内边距都可以控制。 三种模式总结区别 元素模式 元素排列 设置样式 默认宽度 包含 块级元素 一行只能放一个块级元素 可以设置宽度高度 容器的100% 容器级可以包含任何标签 行内元素 一行可以放多个行内元素 不可以直接设置宽度高度 它本身内容的宽度 容纳文本或则其他行内元素 行内块元素 一行放多个行内块元素 可以设置宽度和高度 它本身内容的宽度 标签显示模式转换 display 块转行内：display:inline; 行内转块：display:block; 块、行内元素转换为行内块： display: inline-block; 此阶段，我们只需关心这三个，其他的是我们后面的工作。 行高那些事（line-height）目标 理解 能说出 行高 和 高度 三种关系 能简单理解为什么行高等于高度单行文字会垂直居中 应用 使用行高实现单行文字垂直居中 能会测量行高 行高测量行高的测量方法： 单行文本垂直居中 行高我们利用最多的一个地方是： 可以让单行文本在盒子中垂直居中对齐。 文字的行高等于盒子的高度。 这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。 行高 = 上距离 + 内容高度 + 下距离 上距离和下距离总是相等的，因此文字看上去是垂直居中的。 行高和高度的三种关系 如果 行高 等 高度 文字会 垂直居中 如果行高 大于 高度 文字会 偏下 如果行高小于高度 文字会 偏上 CSS 背景(background)目标 理解 背景的作用 css背景图片和插入图片的区别 应用 通过css背景属性，给页面元素添加背景样式 能设置不同的背景图片位置 背景颜色(color) 语法： 1background-color:颜色值; 默认的值是 transparent 透明的 背景图片(image) 语法： 1background-image : none | url (url) 参数 作用 none 无背景图（默认的） url 使用绝对或相对地址指定背景图像 1background-image : url(images/demo.png); 小技巧： 我们提倡 背景图片后面的地址，url不要加引号。 背景平铺（repeat） 语法： 1background-repeat : repeat | no-repeat | repeat-x | repeat-y 参数 作用 repeat 背景图像在纵向和横向上平铺（默认的） no-repeat 背景图像不平铺 repeat-x 背景图像在横向上平铺 repeat-y 背景图像在纵向平铺 背景位置(position) 重点 语法： 123background-position : length || lengthbackground-position : position || position 参数 值 length 百分数 | 由浮点数字和单位标识符组成的长度值 position top | center | bottom | left | center | right 方位名词 注意： 必须先指定background-image属性 position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。 如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left top和top left效果一致 如果只指定了一个方位名词，另一个值默认居中对齐。 如果position 后面是精确坐标， 那么第一个，肯定是 x 第二的一定是y 如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中 如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标 实际工作用的最多的，就是背景图片居中对齐了。 练习1： 背景大图 练习2： 小图片在盒子左侧垂直居中 背景附着 背景附着就是解释背景是滚动的还是固定的 语法： 1background-attachment : scroll | fixed 参数 作用 scroll 背景图像是随对象内容滚动 fixed 背景图像固定 背景简写 background：属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写： background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置; 语法： 1background: transparent url(image.jpg) repeat-y scroll center top ; 案例： 导航栏案例 背景透明(CSS3) 语法： 1background: rgba(0, 0, 0, 0.3); 最后一个参数是alpha 透明度 取值范围 0~1之间 我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3); 注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不受影响 因为是CSS3 ，所以 低于 ie9 的版本是不支持的。 背景总结 属性 作用 值 background-color 背景颜色 预定义的颜色值/十六进制/RGB代码 background-image 背景图片 url(图片路径) background-repeat 是否平铺 repeat/no-repeat/repeat-x/repeat-y background-position 背景位置 length/position 分别是x 和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法 background-attachment 背景固定还是滚动 scroll/fixed 背景简写 更简单 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置; 他们没有顺序 背景透明 让盒子半透明 background: rgba(0,0,0,0.3); 后面必须是 4个值 CSS 三大特性目标： 理解 能说出css样式冲突采取的原则 能说出那些常见的样式会有继承 应用 能写出CSS优先级的算法 能会计算常见选择器的叠加值 CSS层叠性 概念： 所谓层叠性是指多种CSS样式的叠加。 是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉 原则： 样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。 样式不冲突，不会层叠 1CSS层叠性最后的执行口诀： 长江后浪推前浪，前浪死在沙滩上。 5.2 CSS继承性 概念： 子标签会继承父标签的某些样式，如文本颜色和字号。 想要设置一个可继承的属性，只需将它应用于父元素即可。 简单的理解就是： 子承父业。 注意： 恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。 子元素可以继承父元素的样式（text-，font-，line-这些元素开头的可以继承，以及color属性） 1CSS继承性口诀： 龙生龙，凤生凤，老鼠生的孩子会打洞。 CSS优先级（重点） 概念： 定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时， 选择器相同，则执行层叠性 选择器不同，就会出现优先级的问题。 权重计算公式关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性） 标签选择器 计算权重公式 继承或者 * 0,0,0,0 每个元素（标签选择器） 0,0,0,1 每个类，伪类 0,0,1,0 每个ID 0,1,0,0 每个行内样式 style=”” 1,0,0,0 每个!important 重要的 ∞ 无穷大 值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性） div {color: pink!important; } 权重叠加我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。 就是一个简单的加法计算 div ul li ——&gt; 0,0,0,3 .nav ul li ——&gt; 0,0,1,2 a:hover —–—&gt; 0,0,1,1 .nav a ——&gt; 0,0,1,1 注意： 数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。 继承的权重是0这个不难，但是忽略很容易绕晕。其实，我们修改样式，一定要看该标签有没有被选中。 1） 如果选中了，那么以上面的公式来计权重。谁大听谁的。2） 如果没有选中，那么权重是0，因为继承的权重为0. CSS注释CSS注释规则： 1/* 需要注释的内容 */ 进行注释的，即在需要注释的内容前使用 &quot;/*&quot; 标记开始注释，在内容的结尾使用 &quot;*/&quot;结束。 例如： 1234p { /* 所有的字体是14像素大小*/ font-size: 14px; }","link":"/前端笔记/css-day02/"},{"title":"CSS-Day03","text":"第01阶段.前端基础.盒子模型 盒子模型（CSS重点）css学习三大重点： css 盒子模型 、 浮动 、 定位 主题思路： 目标： 理解： 能说出盒子模型有那四部分组成 能说出内边距的作用以及对盒子的影响 能说出padding设置不同数值个数分别代表的意思 能说出块级盒子居中对齐需要的2个条件 能说出外边距合并的解决方法 应用： 能利用边框复合写法给元素添加边框 能计算盒子的实际大小 能利用盒子模型布局模块案例 看透网页布局的本质网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？ 看透网页布局的本质： 首先利用CSS设置好盒子的大小，然后摆放盒子的位置。 最后把网页元素比如文字图片等等，放入盒子里面。 以上两步 就是网页布局的本质 我们明白了，盒子是网页布局的关键点，所以我们更应该弄明白 这个盒子有什么特点。 盒子模型（Box Model） 所谓盒子模型： 就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。 pink老师总结： 盒子模型有元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。 盒子里面的文字和图片等元素是 内容区域 盒子的厚度 我们成为 盒子的边框 盒子内容与边框的距离是内边距（类似单元格的 cellpadding) 盒子与盒子之间的距离是外边距（类似单元格的 cellspacing） 标准盒子模型 盒子边框（border）​ 语法： 1border : border-width || border-style || border-color 属性 作用 border-width 定义边框粗细，单位是px border-style 边框的样式 border-color 边框颜色 边框的样式： none：没有边框即忽略所有边框的宽度（默认值） solid：边框为单实线(最为常用的) dashed：边框为虚线 dotted：边框为点线 边框综合设置1border : border-width || border-style || border-color 例如： 1border: 1px solid red; 没有顺序 盒子边框写法总结表很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。 上边框 下边框 左边框 右边框 border-top-style:样式; border-bottom-style:样式; border-left-style:样式; border-right-style:样式; border-top-width:宽度; border- bottom-width:宽度; border-left-width:宽度; border-right-width:宽度; border-top-color:颜色; border- bottom-color:颜色; border-left-color:颜色; border-right-color:颜色; border-top:宽度 样式 颜色; border-bottom:宽度 样式 颜色; border-left:宽度 样式 颜色; border-right:宽度 样式 颜色; 表格的细线边框 通过表格的cellspacing=&quot;0&quot;,将单元格与单元格之间的距离设置为0， 但是两个单元格之间的边框会出现重叠，从而使边框变粗 通过css属性： 1table{ border-collapse:collapse; } collapse 单词是合并的意思 border-collapse:collapse; 表示相邻边框合并在一起。 1234567891011121314&lt;style&gt; table { width: 500px; height: 300px; border: 1px solid red; } td { border: 1px solid red; text-align: center; } table, td { border-collapse: collapse; /*合并相邻边框*/ }&lt;/style&gt; 内边距（padding） 内边距：​ padding属性用于设置内边距。 是指 边框与内容之间的距离。 设置 属性 作用 padding-left 左内边距 padding-right 右内边距 padding-top 上内边距 padding-bottom 下内边距 当我们给盒子指定padding值之后， 发生了2件事情： 内容和边框 有了距离，添加了内边距。 盒子会变大了。 注意： 后面跟几个数值表示的意思是不一样的。 我们分开写有点麻烦，我们可以不可以简写呢？ 值的个数 表达意思 1个值 padding：上下左右内边距; 2个值 padding: 上下内边距 左右内边距 ； 3个值 padding：上内边距 左右内边距 下内边距； 4个值 padding: 上内边距 右内边距 下内边距 左内边距 ； 课堂一练： 请写出如下内边距： 要求盒子有一个左边内边距是 5像素 要求简写的形式写出 一个盒子上下是 25像素 左右是15像素。 要求简写的形式写出 一个盒子 上内边距是 12像素 下内边距是 0 左内边距是 25像素 右内边距是 10像素 课堂案例： 新浪导航新浪导航栏的核心就是因为里面的字数不一样多，所以我们不方便给宽度，还是给padding ，撑开盒子的。 内盒尺寸计算（元素实际大小） 宽度 Element Height = content height + padding + border （Height为内容高度） 高度 Element Width = content width + padding + border （Width为内容宽度） 盒子的实际的大小 = 内容的宽度和高度 + 内边距 + 边框 内边距产生的问题 问题 会撑大原来的盒子 解决： 通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小 课堂一练 一个盒子宽度为100， padding为 10， 边框为5像素，问这个盒子实际的宽度的是（） (A) 130 (B) 135 (C) 125 (D) 115 100 + 20 + 10 关于根据下列代码计算 盒子宽高下列说法正确的是（） 123456789101112131415div { width: 200px; height: 200px; border: 1px solid #000000; border-top: 5px solid blue; padding: 50px; padding-left: 100px; } (A) 宽度为200px 高度为200px (B) 宽度为352px 高度为306px (C) 宽度为302px 高度为307px (D) 宽度为302px 高度为252px w 200 + 150 + 2 = 352 h 200 + 100 + 6 = 306 padding不影响盒子大小情况 如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。 外边距（margin） 外边距​ margin属性用于设置外边距。 margin就是控制盒子和盒子之间的距离 设置： 属性 作用 margin-left 左外边距 margin-right 右外边距 margin-top 上外边距 margin-bottom 下外边距 margin值的简写 （复合写法）代表意思 跟 padding 完全相同。 块级盒子水平居中 可以让一个块级盒子实现水平居中必须： 盒子必须指定了宽度（width） 然后就给左右的外边距都设置为auto， 实际工作中常用这种方式进行网页布局，示例代码如下： 1.header{ width:960px; margin:0 auto;} 常见的写法，以下下三种都可以。 margin-left: auto; margin-right: auto; margin: auto; margin: 0 auto; 文字居中和盒子居中区别 盒子内的文字水平居中是 text-align: center, 而且还可以让 行内元素和行内块居中对齐 块级盒子水平居中 左右margin 改为 auto 12text-align: center; /* 文字 行内元素 行内块元素水平居中 */margin: 10px auto; /* 块级盒子水平居中 左右margin 改为 auto 就阔以了 上下margin都可以 */ 插入图片和背景图片区别 插入图片 我们用的最多 比如产品展示类 移动位置只能靠盒模型 padding margin 背景图片我们一般用于小图标背景 或者 超大背景图片 背景图片 只能通过 background-position 1234567891011121314img { width: 200px;/* 插入图片更改大小 width 和 height */ height: 210px; margin-top: 30px; /* 插入图片更改位置 可以用margin 或padding 盒模型 */ margin-left: 50px; /* 插入当图片也是一个盒子 */}div { width: 400px; height: 400px; border: 1px solid purple; background: #fff url(images/sun.jpg) no-repeat; background-position: 30px 50px; /* 背景图片更改位置 我用 background-position */} 清除元素的默认内外边距(重要) 为了更灵活方便地控制网页中的元素，制作网页时，我们需要将元素的默认内外边距清除 代码： 1234* { padding:0; /* 清除内边距 */ margin:0; /* 清除外边距 */} 注意： 行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。 外边距合并使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。 相邻块元素垂直外边距的合并 当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom 下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和 取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。 解决方案：尽量给只给一个盒子添加margin值。 嵌套块元素垂直外边距的合并（塌陷） 对于两个嵌套关系的块元素，如果父元素没有上内边距及边框 父元素的上外边距会与子元素的上外边距发生合并 合并后的外边距为两者中的较大者 解决方案： 可以为父元素定义上边框。 可以为父元素定义上内边距 可以为父元素添加overflow:hidden。 还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。 盒子模型布局稳定性 学习完盒子模型，内边距和外边距，什么情况下用内边距，什么情况下用外边距？ 大部分情况下是可以混用的。 就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。 我们根据稳定性来分，建议如下： 按照 优先使用 宽度 （width） 其次 使用内边距（padding） 再次 外边距（margin）。 1width &gt; padding &gt; margin 原因： margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。 padding 会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。 width 没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。 ps基本操作以及常用快捷键：因为网页美工大部分效果图都是利用ps 来做的，所以，以后我们大部分切图工作都是在ps里面完成。 文件–打开 – 可以打开 我们要测量的图片 ctrl+r 可以打开标尺 或者 视图 – 标尺 右击标尺， 把里面的单位改为 像素 ctrl+ 加号 键 可以 放大 视图 ctrl+ 减号 缩小视图 按住空格键， 鼠标可以 变成小手 ，拖动 ps 视图 用选区 拖动 可以 测量 大小 ctrl+ d 可以取消选区 或者旁边空白处点击一下也可以取消选区 综合案例 去掉列表默认的样式无序和有序列表前面默认的列表样式，在不同浏览器显示效果不一样，而且也比较难看，所以，我们一般上来就直接去掉这些列表样式就行了。 代码如下 1li { list-style: none; } 拓展@以下我们讲的CSS3部分新属性， 但是我们遵循的原则是，以下内容，不会影响我们页面布局， 只是样式更好看了而已。 圆角边框(CSS3) 语法： 1border-radius:length; 其中每一个值可以为 数值或百分比的形式。 技巧： 让一个正方形 变成圆圈 1border-radius: 50%; 以上效果图矩形的圆角， 就不要用 百分比了，因为百分比会是表示高度和宽度的一半。 而我们这里矩形就只用 用 高度的一半就好了。精确单位。 盒子阴影(CSS3) 语法: 1box-shadow:水平阴影 垂直阴影 模糊距离（虚实） 阴影尺寸（影子大小） 阴影颜色 内/外阴影； 前两个属性是必须写的。其余的可以省略。 外阴影 (outset) 是默认的 但是不能写 想要内阴影可以写 inset 123456789div { width: 200px; height: 200px; border: 10px solid red; /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4); */ /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色 内/外阴影； */ box-shadow: 0 15px 30px rgba(0, 0, 0, .4); } CSS书写规范开始就形成良好的书写规范，是你专业的开始。 空格规范【强制】 选择器 与 { 之间必须包含空格。 示例： 12.selector {} 【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。 示例： 1font-size: 12px; 选择器规范【强制】 并集选择器，每个选择器声明必须独占一行。 示例： 123456789101112/* good */.post,.page,.comment { line-height: 1.5;}/* bad */.post, .page, .comment { line-height: 1.5;} 【建议】 一般情况情况下，选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。 示例： 1234567/* good */#username input {}.comment .avatar {}/* bad */.page .header .login input {}.comment div * {} 属性规范【强制】 属性定义必须另起一行。 示例： 12345678/* good */.selector { margin: 0; padding: 0;}/* bad */.selector { margin: 0; padding: 0; } 【强制】 属性定义后必须以分号结尾。 示例： 123456789/* good */.selector { margin: 0;}/* bad */.selector { margin: 0}","link":"/前端笔记/css-day03/"},{"title":"HTML-Day03","text":"第01阶段.前端基础.HTML常用标签 学习目标 理解： 相对路径三种形式 应用 排版标签 文本格式化标签 图像标签 链接 相对路径，绝对路径的使用 1. HTML常用标签 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。 HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 1.1 排版标签排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。 1）标题标签h (熟记) 单词缩写： head 头部. 标题 title 文档标题 为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即 标题标签语义： 作为标题使用，并且依据重要性递减 其基本语法格式如下： 123456&lt;h1&gt; 标题文本 &lt;/h1&gt;&lt;h2&gt; 标题文本 &lt;/h2&gt;&lt;h3&gt; 标题文本 &lt;/h3&gt;&lt;h4&gt; 标题文本 &lt;/h4&gt;&lt;h5&gt; 标题文本 &lt;/h5&gt;&lt;h6&gt; 标题文本 &lt;/h6&gt; 显示效果如下： 小结 : 加了标题的文字会变的加粗，字号也会依次变大 一行是只能放一个标题的 1234567传智播客学前端， 前端入门亦简单。 简单知识简单看， 重点勤练写三遍。 标题一共六级选， 具体效果刷新见。 ------pink老师 2）段落标签p ( 熟记)单词缩写： paragraph 段落 [ˈpærəgræf] 无须记这个单词 作用语义： 可以把 HTML 文档分割为若干段落 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是 1&lt;p&gt; 文本内容 &lt;/p&gt; 是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。 3）水平线标签hr(认识)单词缩写： horizontal 横线 [ˌhɔrəˈzɑntl] 同上 在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，就是创建横跨网页水平线的标签。其基本语法格式如下： 1&lt;hr /&gt;是单标签 在网页中显示默认样式的水平线。 课堂练习:新闻页面 4）换行标签br (熟记)单词缩写： break 打断 ,换行 在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 1&lt;br /&gt; 这时如果还像在word中直接敲回车键换行就不起作用了。 此处有练习题 5）div 和 span标签(重点)div span 是没有语义的 是我们网页布局主要的2个盒子 想必你听过 css+div div 就是 division 的缩写 分割， 分区的意思 其实有很多div 来组合网页。 span 跨度，跨距；范围 语法格式： 1&lt;div&gt; 这是头部 &lt;/div&gt; &lt;span&gt;今日价格&lt;/span&gt; 他们两个都是盒子，用来装我们网页元素的， 只不过他们有区别，现在我们记住 div标签 用来布局的，但是现在一行只能放一个div span标签 用来布局的，一行上可以放好多个span 后面后面讲显示模式的时候，会告诉大家 排版标签总结 标签名 定义 说明 标题标签 作为标题使用，并且依据重要性递减 段落标签 可以把 HTML 文档分割为若干段落 水平线标签 没啥可说的，就是一条线 换行标签 div标签 用来布局的，但是现在一行只能放一个div span标签 用来布局的，一行上可以放好多个span 1.2 文本格式化标签(熟记)在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。 区别： b 只是加粗 strong 除了可以加粗还有 强调的意思， 语义更强烈。 剩下的同理… 请同学们重点记住 前两组 加粗 和 倾斜 后面两组没记住回来查 1.3 标签属性 所谓属性就是外在特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。 手机的颜色是黑色 手机的尺寸是 8寸 水平线的长度是 200 图片的宽度 是 300 使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下： 12&lt;标签名 属性1=\"属性值1\" 属性2=\"属性值2\" …&gt; 内容 &lt;/标签名&gt;&lt;手机 颜色=\"红色\" 大小=\"5寸\"&gt; &lt;/手机&gt; 提倡： 尽量不使用 样式属性。 1.4 图像标签img (重点)单词缩写： image 图像 要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签以及和他相关的属性。（它是一个单身狗） 语法如下： 1&lt;img src=\"图像URL\" /&gt; 该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。 border 后面我们会用css来做，这里童鞋们就记住这个border 单词就好了 *注意: * 标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。 任何标签的属性都有默认值，省略该属性则取默认值。 采取 键值对 的格式 key=”value” 的格式 比如: 12345678正常的&lt;br /&gt; &lt;img src=\"cz.jpg\" width=\"300\" height=\"300\" /&gt;&lt;br /&gt; 带有边框的&lt;br /&gt; &lt;img src=\"cz.jpg\" width=\"300\" height=\"300\" border=\"3\" /&gt;&lt;br /&gt;有提示文本的&lt;br /&gt;&lt;img src=\"cz.jpg\" width=\"300\" height=\"300\" border=\"3\" title=\"这是个小蒲公英\" /&gt;&lt;br /&gt;有替换文本的&lt;br /&gt;&lt;img src=\"cz.jpg\" width=\"300\" height=\"300\" border=\"3\" alt=\"图片不存在\" /&gt; 此处有练习题 重点掌握点： 请说出 图像标签那个属性是必须要写的？ img src 图片的路径 请说出 图像标签中 alt 和 title 属性区别？ alt 图片显示不出，文字就显示 title 鼠标经过图片的时候显示文字 1.5 链接标签(重点)单词缩写： anchor 的缩写 [ˈæŋkə(r)] 。基本解释 锚, 铁锚 的 在HTML中创建超链接非常简单，只需用标签把文字包括起来就好。 语法格式： 1&lt;a href=\"跳转目标\" target=\"目标窗口的弹出方式\"&gt;文本或图像&lt;/a&gt; 属性 作用 href 用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能 target 用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。 注意： 外部链接 需要添加 http:// www.baidu.com 内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。 不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。 重点掌握点： 请说出 链接标签那个属性是必须要写的？ href 请说出 如何新窗口打开这个一个链接网页的？ target=“_blank” 1.6 注释标签在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。 简单解释： 注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。 语法格式： 1&lt;!-- 注释语句 --&gt; 快捷键是： ctrl + / 或者 ctrl +shift + / 注释重要性： pink老师 一句话说出他们: 注释是给人看的，目的是为了更好的解释这部分代码是干啥的， 程序是不执行这个代码的 团队约定一般用于简单的描述，如某些状态描述、属性描述等 注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行 推荐： 12&lt;!-- Comment Text --&gt;&lt;div&gt;...&lt;/div&gt; 不推荐： 12345&lt;div&gt;...&lt;/div&gt;&lt;!-- Comment Text --&gt; &lt;div&gt;&lt;!-- Comment Text --&gt; ...&lt;/div&gt; 2. 路径(重点、难点) 实际工作中，我们的文件不能随便乱放，否则用起来很难快速的找到他们，因此我们需要一个文件夹来管理他们。 *目录文件夹： * 就是普通文件夹，里面只不过存放了我们做页面所需要的 相关素材，比如 html文件， 图片 等等。 *根目录 * 打开目录文件夹的第一层 就是 根目录 页面中的图片会非常多， 通常我们再新建一个文件夹专门用于存放图像文件（images），这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。路径可以分为： 相对路径和绝对路径 相对路径以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。 路径分类 符号 说明 同一级路径 只需输入图像文件的名称即可，如&lt;img src=”baidu.gif” /&gt;。 下一级路径 “/” 图像文件位于HTML文件同级文件夹下（例如文件夹名称为：images） 如&lt;img src=”images/baidu.gif” /&gt;。 上一级路径 “../” 在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推， 如&lt;img src=”../baidu.gif” /&gt;。 *pink老师 一句话说出他们: * 相对路径，是从代码所在的这个文件出发， 去寻找我们的目标文件的，而 我们所说的 上一级 下一级 同一级 简单说，就是 图片 位于 HTML 页面的位置 绝对路径绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。 “D:\\web\\img\\logo.gif”，或完整的网络地址，例如“http://www.itcast.cn/images/logo.gif”。 注意： 绝对路径用的较少，我们理解下就可以了。 但是要注意，它的写法 特别是符号 \\ 并不是 相对路径的 / 3. 今日总结 每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt; 能用常用标签，写出最简单的页面 学HTML 之前 觉得 很神秘 等你学完之后忽然发现 5. @拓展阅读5.1 锚点定位 （难点）通过创建锚点链接，用户能够快速定位到目标内容。 创建锚点链接分为两步： 123451. 使用相应的id名标注跳转目标的位置。 (找目标) &lt;h3 id=\"two\"&gt;第2集&lt;/h3&gt; 2. 使用&lt;a href=\"#id名\"&gt;链接文本&lt;/a&gt;创建链接文本（被点击的） （拉关系） 我也有一个姓毕的姥爷.. &lt;a href=\"#two\"&gt; 快速记忆法： 好比找个人办事， 首先找到他，然后拉关系，最后看效果。 5.2 base 标签语法： 1&lt;base target=\"_blank\" /&gt; *总结： * base 可以设置整体链接的打开状态 base 写到 之间 把所有的连接 都默认添加 target=”_blank” pink老师 一句话说出他们: 全体链接~ 到 ~ 全体集合 所有链接 以新窗口打开页面 ~ 是 5.3 预格式化文本pre标签 标签可定义预格式化的文本。 被包围在 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 123456789&lt;pre&gt; 此例演示如何使用 pre 标签 对空行和 空格 进行控制&lt;/pre&gt; **pink老师 一句话说出他们:** > 所谓的预格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。 有了这个标签，里面的文字，会按照我们书写的模式显示，不需要段落和换行标签了。但是，比较少用，因为不好整体控制。 #### 5.4 特殊字符 （理解） 一些特殊的符号，我们再html 里面很难或者 不方便直接 使用， 我们此时可以使用下面的替代代码。 ![](HTML-Day03/zifu.png) **虽然有很多，但是我们平时用的比较较少， 大家重点记住 空格 大于号 小于号 就可以了，剩下的回来查阅。** **总结：** 1. 是以**运算符**`&`开头,以**分号运算符**`;`结尾。 2. 他们不是标签，而是符号。 3. HTML 中不能使用小于号 “”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体 **团队约定** *推荐：* 1&lt;a href=&quot;#&quot;&gt;more &amp;gt;&amp;gt;&lt;/a&gt; *不推荐：* 1&lt;a href=&quot;#&quot;&gt;more &gt;&gt; &lt;/a&gt; #### 5.5 html5发展之路 ![](HTML-Day03/html5.png) #### 5.6 什么是XHTML XHTML 是更严格更纯净的 HTML 代码。 - XHTML 指**可扩展超文本标签语言**（EXtensible HyperText Markup Language）。 - XHTML 的目标是取代 HTML。 - XHTML 与 HTML 4.01 几乎是相同的。 - XHTML 是更严格更纯净的 HTML 版本。 - XHTML 是作为一种 XML 应用被重新定义的 HTML。 - XHTML 是一个 W3C 标准。 #### 5.7 HTML和 XHTML之间有什么区别? - XHTML 指的是可扩展超文本标记语言 - XHTML 与 HTML 4.01 几乎是相同的 - XHTML 是更严格更纯净的 HTML 版本 - XHTML 是以 XML 应用的方式定义的 HTML - XHTML 是 2001 年 1 月发布的 W3C 推荐标准 - XHTML 得到所有主流浏览器的支持 - XHTML 元素是以 XML 格式编写的 HTML 元素。XHTML是严格版本的HTML，例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。 # 6. @深入阅读 [HTML5的崛起之路](http://www.chinaz.com/manage/2015/0720/424831.shtml) # 7. 预习内容 - 表格标签 - 能够通过表格标签能够写出一个简版表格数据展示 例如： ![](HTML-Day03/qq.png) 可以把你今天学习的内容放在表格内，再次作为总结","link":"/前端笔记/html-day03/"},{"title":"javascript-Day0","text":"第03阶段.JavaScript基础.变量 JavaScript基础第01天编程语言编程 编程： 就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。 计算机程序： 就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。 计算机语言 计算机语言指用于人与计算机之间通讯的语言，它是人与计算机之间传递信息的媒介。 计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。 实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。 编程语言12编程语言： 可以通过类似于人类语言的“语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。如今通用的编程语言有两种形式：汇编语言和高级语言。 语言类型 说明 汇编语言 汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。 高级语言 高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。 翻译器高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。 编程语言和标记语言区别 语言 说明 编程语言 编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。 标记语言 标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。 总结 计算机可以帮助人类解决某些问题 程序员利用编程语言编写程序发出指令控制计算机来实现这些任务 编程语言有机器语言、汇编语言、高级语言 高级语言需要一个翻译器转换为计算机识别的机器语言 编程语言是主动的有很强的逻辑性 计算机基础计算机组成 数据存储 计算机内部使用二进制 0 和 1来表示数据。 所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。 所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。 硬盘、内存都是保存的二进制数据。 数据存储单位1大小关系：bit &lt; byte &lt; kb &lt; GB &lt; TB&lt;..... 位(bit)： 1bit 可以保存一个 0 或者 1 （最小的存储单位） 字节(Byte)：1B = 8b 千字节(KB)：1KB = 1024B 兆字节(MB)：1MB = 1024KB 吉字节(GB): 1GB = 1024MB 太字节(TB): 1TB = 1024GB 程序运行 计算机运行软件的过程： 1. 打开某个程序时，先从硬盘中把程序的代码加载到内存中 2. CPU执行内存中的代码 注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）初始JavaScriptJavaScript 是什么 JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思） 脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行 现在也可以基于 Node.js 技术进行服务器端编程 JavaScript的作用 表单动态校验（密码强度检测） （ JS 产生最初的目的 ） 网页特效 服务端开发(Node.js) 桌面程序(Electron) App(Cordova) 控制硬件-物联网(Ruff) 游戏开发(cocos2d-js) HTML/CSS/JS 的关系 浏览器执行 JS 简介浏览器分成两部分：渲染引擎和 JS 引擎 浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。 JS 的组成 ECMAScript​ ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。 ​ ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。 更多参看MDN: MDN手册 DOM——文档对象模型​ 文档对象模型（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等） BOM——浏览器对象模型​ 浏览器对象模型(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。 JS 初体验JS 有3种书写位置，分别为行内、内嵌和外部。 行内式 1&lt;input type=\"button\" value=\"点我试试\" onclick=\"alert('Hello World')\" /&gt; 可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick 注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号 可读性差， 在html中编写JS大量代码时，不方便阅读； 引号易错，引号多层嵌套匹配时，非常容易弄混； 特殊情况下使用 内嵌式 123&lt;script&gt; alert('Hello World~!');&lt;/script&gt; 可以将多行JS代码写到 script 标签中 内嵌 JS 是学习时常用的方式 外部JS文件 1&lt;script src=\"my.js\"&gt;&lt;/script&gt; 利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用 引用外部 JS文件的 script 标签中间不可以写代码 适合于JS 代码量比较大的情况 JavaScript注释 flex子项目占的份数 align-self控制子项自己在侧轴的排列方式 order属性定义子项的排列顺序（前后顺序） 单行注释为了提高代码的可读性，JS与CSS一样，也提供了注释功能。 JS中的注释主要有两种，分别是 单行注释 和 多行注释。单行注释的注释方式如下： 1// 我是一行文字，不想被 JS引擎 执行，所以 注释起来 // 用来注释单行文字（ 快捷键 ctrl + / ）多行注释多行注释的注释方式如下： 1234/* 获取用户年龄和姓名 并通过提示框显示出来*/ 1/* */ 用来注释多行文字（ 默认快捷键 alt + shift + a ） 快捷键修改为： ctrl + shift + / vscode → 首选项按钮 → 键盘快捷方式 → 查找 原来的快捷键 → 修改为新的快捷键 → 回车确认 JavaScript输入输出语句为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下： 方法 说明 归属 alert(msg) 浏览器弹出警示框 浏览器 console.log(msg) 浏览器控制台打印输出信息 浏览器 prompt(info) 浏览器弹出输入框，用户可以输入 浏览器 注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。 变量的概念什么是变量白话：变量就是一个装东西的盒子。 通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。 变量在内存中的存储本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。 变量的使用 变量的声明 变量的赋值 声明变量12// 声明变量 var age; // 声明一个 名称为age 的变量 var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管 age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间 赋值1age = 10; // 给 age 这个变量赋值为 10 = 用来把右边的值赋给左边的变量空间中 此处代表赋值的意思 变量值是程序员保存到变量空间里的值 变量的初始化12var age = 18; // 声明变量同时赋值为 18// 声明一个变量并赋值， 我们称之为变量的初始化。 变量语法扩展 更新变量 ​ 一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。 123var age = 18;age = 81; // 最后的结果就是81因为18 被覆盖掉了 同时声明多个变量 ​ 同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。 1var age = 10, name = 'zs', sex = 2; 声明变量特殊情况 情况 说明 结果 var age ; console.log (age); 只声明 不赋值 undefined console.log(age) 不声明 不赋值 直接使用 报错 age = 10; console.log (age); 不声明 只赋值 10 变量命名规范规则： 由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name 严格区分大小写。var app; 和 var App; 是两个变量 不能 以数字开头。 18age 是错误的 不能 是关键字、保留字。例如：var、for、while 变量名必须有意义。 MMD BBD nl → age 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName 推荐翻译网站： 有道 爱词霸 数据类型数据类型简介 为什么需要数据类型 ​ 在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。 简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。 变量的数据类型 ​ 变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定： 12var age = 10; // 这是一个数字型var areYouOk = '是的'; // 这是一个字符串 ​ 在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型： 12var x = 6; // x 为数字var x = \"Bill\"; // x 为字符串 数据类型的分类 JS 把数据类型分为两类： 简单数据类型 （Number,String,Boolean,Undefined,Null） 复杂数据类型 （object) 简单数据类型简单数据类型（基本数据类型） JavaScript 中的简单数据类型及其说明如下： 数字型 Number ​ JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。 12var age = 21; // 整数var Age = 21.3747; // 小数 数字型进制 最常见的进制有二进制、八进制、十进制、十六进制。 123456 // 1.八进制数字序列范围：0~7var num1 = 07; // 对应十进制的7var num2 = 019; // 对应十进制的19var num3 = 08; // 对应十进制的8 // 2.十六进制数字序列范围：0~9以及A~Fvar num = 0xA; 现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x 数字型范围 JavaScript中数值的最大和最小值 最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308 最小值：Number.MIN_VALUE，这个值为：5e-32 数字型三个特殊值 Infinity ，代表无穷大，大于任何数值 -Infinity ，代表无穷小，小于任何数值 NaN ，Not a number，代表一个非数值 isNaN 用来判断一个变量是否为非数字的类型，返回 true 或者 false 12345 var usrAge = 21;var isOk = isNaN(userAge); console.log(isNum); // false ，21 不是一个非数字var usrName = \"andy\"; console.log(isNaN(userName));// true ，\"andy\"是一个非数字 字符串型 String ​ 字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’ 1234var strMsg = \"我爱北京天安门~\"; // 使用双引号表示字符串var strMsg2 = '我爱吃猪蹄~'; // 使用单引号表示字符串// 常见错误var strMsg3 = 我爱大肘子; // 报错，没使用引号，会被认为是js代码，但js没有这些语法 ​ 因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。 字符串引号嵌套 ​ JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双) 1234var strMsg = '我是\"高帅富\"程序猿'; // 可以用''包含\"\"var strMsg2 = \"我是'高帅富'程序猿\"; // 也可以用\"\" 包含''// 常见错误var badQuotes = 'What on earth?\"; // 报错，不能 单双引号搭配 字符串转义符 ​ 类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。 ​ 转义符都是 \\ 开头的，常用的转义符及其说明如下： 转义符 解释说明 \\n 换行符，n 是 newline 的意思 \\ \\ 斜杠 \\ ' ‘ 单引号 &quot; ”双引号 \\t tab 缩进 \\b 空格 ，b 是 blank 的意思 字符串长度 ​ 字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。 12var strMsg = \"我是帅气多金的程序猿！\";alert(strMsg.length); // 显示 11 字符串拼接 多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串 拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串 123456//1.1 字符串 \"相加\"alert('hello' + ' ' + 'world'); // hello world//1.2 数值字符串 \"相加\"alert('100' + '100'); // 100100//1.3 数值字符串 + 数值alert('11' + 12); // 1112 + 号总结口诀：数值相加 ，字符相连 字符串拼接加强 12345console.log('pink老师' + 18); // 只要有字符就会相连 var age = 18;console.log('pink老师age岁啦'); // 这样不行哦console.log('pink老师' + age); // pink老师18console.log('pink老师' + age + '岁啦'); // pink老师18岁啦 经常会将字符串和变量来拼接，变量可以很方便地修改里面的值 变量是不能添加引号的，因为加引号的变量会变成字符串 如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间 布尔型Boolean ​ 布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。 ​ 布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。 12console.log(true + 1); // 2console.log(false + 1); // 1 Undefined和 Null ​ 一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果） 12345var variable;console.log(variable); // undefinedconsole.log('你好' + variable); // 你好undefinedconsole.log(11 + variable); // NaNconsole.log(true + variable); // NaN ​ 一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null) 1234var vari = null;console.log('你好' + vari); // 你好nullconsole.log(11 + vari); // 11console.log(true + vari); // 1 获取变量数据类型 获取检测变量的数据类型 ​ typeof 可用来获取检测变量的数据类型 12var num = 18;console.log(typeof num) // 结果 number ​ 不同类型的返回值 字面量 ​ 字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。 数字字面量：8, 9, 10 字符串字面量：’黑马程序员’, “大前端” 布尔字面量：true，false 数据类型转换​ 什么是数据类型转换？ ​ 使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换： 123转换为字符串类型转换为数字型转换为布尔型 转换为字符串 toString() 和 String() 使用方式不一样。 三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。 转换为数字型（重点） 注意 parseInt 和 parseFloat 单词的大小写，这2个是重点 隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型 转换为布尔型 代表空、否定的值会被转换为 false ，如 ‘’、0、NaN、null、undefined 其余值都会被转换为 true 1234567console.log(Boolean('')); // falseconsole.log(Boolean(0)); // falseconsole.log(Boolean(NaN)); // falseconsole.log(Boolean(null)); // falseconsole.log(Boolean(undefined)); // falseconsole.log(Boolean('小白')); // trueconsole.log(Boolean(12)); // true 解释型语言和编译型语言概述计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。 翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同 编译器是在代码执行之前进行编译，生成中间代码文件 解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器) 执行过程 类似于请客吃饭： 编译语言：首先把所有菜做好，才能上桌吃饭 解释语言：好比吃火锅，边吃边涮，同时进行关键字和保留字标识符标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。 标识符不能是关键字或保留字。关键字关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。 包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。保留字保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。 包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。 注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。","link":"/前端笔记/javascript-day0/"},{"title":"CSS-Day01","text":"第01阶段.前端基础.CSS初识 CSS层叠样式表 目标 理解 css的目的作用 css的三种引入方式 应用 css三种引用方式的书写 通过样式规则给标签添加简单的样式 HTML的局限性说起HTML，这其实是个非常单纯的家伙， 他只关注内容的语义， 很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点： 丑。 这个是一个外国比较早的购物网站 有些人就忍受不了了，你就不能把自己打扮得漂亮一点吗？ HTML说，我试试… 如果要改变下 高度或者变一个颜色，就需要大量重复操作 总结： HTML满足不了设计者的需求 操作html属性不方便 HTML里面添加样式带来的是无尽的臃肿和繁琐 CSS 网页的美容师 让我们的网页更加丰富多彩，布局更加灵活自如。 CSS的最大贡献就是： 让 HTML 从样式中脱离， 实现了 HTML 专注去做 结构呈现，样式交给css 我们理想中的结果： 结构(html)与样式(css)相分离 这句话要记住 而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看: CSS初识 概念： ​ CSS(Cascading Style Sheets) ，通常称为CSS样式表或层叠样式表（级联样式表） 作用： 主要用于设置 HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。 CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。 引入CSS样式表（书写位置）1要书写css样式，那css样式书写的位置在哪呢？ 行内式（内联样式） 概念： ​ 称行内样式、行间样式. ​ 是通过标签的style属性来设置元素的样式 其基本语法格式如下： 1&lt;标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"&gt; 内容 &lt;/标签名&gt; 实际上任何HTML标签都拥有style属性，用来设置行内式。 案例： 1&lt;div style=\"color: red; font-size: 12px;\"&gt;青春不常在，抓紧谈恋爱&lt;/div&gt; 注意： style其实就是标签的属性 样式属性和值中间是: 多组属性值之间用;隔开。 只能控制当前的标签和以及嵌套在其中的字标签，造成代码冗余 缺点： 没有实现样式和结构相分离 内部样式表（内嵌样式表） 概念： ​ 称内嵌式 ​ 是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义 其基本语法格式如下： 123456789&lt;head&gt;&lt;style type=\"text/CSS\"&gt; 选择器（选择的标签） { 属性1: 属性值1; 属性2: 属性值2; 属性3: 属性值3; }&lt;/style&gt;&lt;/head&gt; 123456&lt;style&gt; div { color: red; font-size: 12px; }&lt;/style&gt; 注意： style标签一般位于head标签中，当然理论上他可以放在HTML文档的任何地方。 type=”text/css” 在html5中可以省略。 只能控制当前的页面 缺点： 没有彻底分离 综合案例1234567891011121314151617&lt;style&gt; /*选择器{属性:值；}*/ p { color:#06C; font-size:14px; } /*文字的颜色是 蓝色*/ h4 { color:#900; } h1 { color:#090; font-size:16px; } body { background:url(bg2.jpg); }&lt;/style&gt; 展示 123思考： 1. 如何实现结构与样式完全分离？ 2. 如何实现css样式共享？ 外部样式表（外链式） 概念： ​ 称链入式 ​ 是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中， ​ 通过link标签将外部样式表文件链接到HTML文档中 其基本语法格式如下： 123&lt;head&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css文件路径\"&gt;&lt;/head&gt; 注意： link 是个单标签 link标签需要放在head头部标签中，并且指定link标签的三个属性 属性 作用 rel 定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。 type 定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。我们都可以省略 href 定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。 三种样式表总结（位置） 样式表 优点 缺点 使用情况 控制范围 行内样式表 书写方便，权重高 没有实现样式和结构相分离 较少 控制一个标签（少） 内部样式表 部分结构和样式相分离 没有彻底分离 较多 控制一个页面（中） 外部样式表 完全实现结构和样式相分离 需要引入 最多，强烈推荐 控制整个站点（多） 团队约定-代码风格样式书写一般有两种： 一种是紧凑格式 (Compact) 1h3 { color: deeppink;font-size: 20px;} 一种是展开格式（推荐） 1234h3 { color: deeppink; font-size: 20px; } 团队约定-代码大小写样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。 123456789/* 推荐 */h3{ color: pink;} /* 不推荐 */H3{ COLOR: PINK;} 总结CSS样式规则使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则， 具体格式如下： 总结： 选择器用于指定CSS样式作用的HTML标签，花括号内是对该对象设置的具体样式。 属性和属性值以“键值对”的形式出现。 属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。 属性和属性值之间用英文“:”连接。 多个“键值对”之间用英文“;”进行区分。 @拓展阅读CSS的发展史 第01阶段.前端基础.CSS基础选择器 CSS选择器（重点） 学习目标： 理解 能说出选择器的作用 id选择器和类选择器的区别 应用 能够使用基础选择器给页面元素添加样式 CSS选择器作用（重点） 如上图所以，要把里面的小黄人分为2组，最快的方法怎办？ 很多， 比如 一只眼睛的一组，剩下的一组 选择器的作用​ 找到特定的HTML页面元素 pink老师一句话说出他们： ※※※※ *CSS选择器干啥的？ 选择标签用的， 把我们想要的标签选择出来 * 必须记住的 css 就是 分两件事， 选对人， 做对事。 123h3 { color: red;} 这段代码就是2件事， 把 h3选出来， 然后 把它变成了 红色。 以后我们都这么干。 选择器分为基础选择器和 复合选择器，我们这里先讲解一下 基础选择器。 CSS基础选择器标签选择器 概念： 标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 语法： 1标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; } 作用： 标签选择器 可以把某一类标签全部选择出来 比如所有的div标签 和 所有的 span标签 优点： 是能快速为页面中同类型的标签统一样式 缺点： 不能设计差异化样式。 总结 口诀： 标签选择器， 页面同选起。 直接写标签， 全部不放弃。 1思考： 如果想要差异化选择不同的标签，怎么办呢？ 就是说 我想单独选一个或者某几个标签呢？ 类选择器类选择器使用“.”（英文点号）进行标识，后面紧跟类名. 语法： 类名选择器 12345.类名 { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; } 标签 1&lt;p class=&apos;类名&apos;&gt;&lt;/p&gt; 优点： 可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 注意 类选择器使用“.”（英文点号）进行标识，后面紧跟类名(自定义，我们自己命名的) 长名称或词组可以使用中横线来为选择器命名。 不要纯数字、中文等命名， 尽量使用英文字母来表示。 命名规范： 见附件（Web前端开发规范手册.doc） 命名是我们通俗约定的，但是没有规定必须用这些常用的命名。 记忆口诀 差异化选择一个或多个上面点定义类名别写错谁用谁调用class来做。 嘿嘿，工作类最多。 课堂案例： 123456789101112131415161718192021222324252627282930&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;style&gt; .blue { color: blue; font-size: 100px; } .red { color: red; font-size: 100px; } .orange { color: orange; font-size: 100px; } .green { color: green; font-size: 100px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;span class=\"blue\"&gt;G&lt;/span&gt; &lt;span class=\"red\"&gt;o&lt;/span&gt; &lt;span class=\"orange\"&gt;o&lt;/span&gt; &lt;span class=\"blue\"&gt;g&lt;/span&gt; &lt;span class=\"green\"&gt;l&lt;/span&gt; &lt;span class=\"red\"&gt;e&lt;/span&gt; &lt;/body&gt; 类选择器特殊用法- 多类名我们可以给标签指定多个类名，从而达到更多的选择目的。 注意： 各个类名中间用空格隔开。 多类名选择器在后期布局比较复杂的情况下，还是较多使用的。 1234&lt;div class=\"pink fontWeight font20\"&gt;亚瑟&lt;/div&gt;&lt;div class=\"font20\"&gt;刘备&lt;/div&gt;&lt;div class=\"font14 pink\"&gt;安其拉&lt;/div&gt;&lt;div class=\"font14\"&gt;貂蝉&lt;/div&gt; id选择器id选择器使用#进行标识，后面紧跟id名 其基本语法格式如下： id选择器 1#id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; } 标签 1&lt;p id=&quot;id名&quot;&gt;&lt;/p&gt; 元素的id值是唯一的，只能对应于文档中某一个具体的元素。 用法基本和类选择器相同。 id选择器和类选择器区别 W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。 类选择器（class） 好比人的名字， 是可以多次重复使用的， 比如 张伟 王伟 李伟 李娜 id选择器 好比人的身份证号码， 全中国是唯一的， 不得重复。 只能使用一次。 id选择器和类选择器最大的不同在于 使用次数上。 pink老师 总结他们 类选择器我们在修改样式中，用的最多。 id选择器一般用于页面唯一性的元素身上，经常和我们后面学习的javascript 搭配使用。 通配符选择器 概念 通配符选择器用*号表示， * 就是 选择所有的标签 他是所有选择器中作用范围最广的，能匹配页面中所有的元素。 其基本语法格式如下： 1* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; } 例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。 1234* { margin: 0; /* 定义外边距*/ padding: 0; /* 定义内边距*/} 注意： 会匹配页面所有的元素，降低页面响应速度，不建议随便使用 基础选择器总结 选择器 作用 缺点 使用情况 用法 标签选择器 可以选出所有相同的标签，比如p 不能差异化选择 较多 p { color：red;} 类选择器 可以选出1个或者多个标签 可以根据需求选择 非常多 .nav { color: red; } id选择器 一次只能选择器1个标签 只能使用一次 不推荐使用 #nav {color: red;} 通配符选择器 选择所有的标签 选择的太多，有部分不需要 不推荐使用 * {color: red;} 基础选择器我们一共学了4个， 每个都有自己的价值， 可能再某个地方都能用到。但是如果说，一定要找个最常用的，那么，肯定是类选择器。 团队约定选择器 尽量少用通用选择器 * 尽量少用 ID 选择器 不使用无具体语义定义的标签选择器 div span 123456789/* 推荐 */.jdc {}li {}p{}/* 不推荐 */*{}#jdc {}div{} 因为div 没有语义，我们尽量少用 第01阶段.前端基础.CSS字体样式 CSS字体样式属性调试工具 目标 应用 使用css字体样式完成对字体的设置 使用css外观属性给页面元素添加样式 使用常用的emment语法 能够使用开发人员工具代码调试 1.font字体font-size:大小 作用： font-size属性用于设置字号 123p { font-size:20px; } 单位： 可以使用相对长度单位，也可以使用绝对长度单位。 相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。 注意： 我们文字大小以后，基本就用px了，其他单位很少使用 谷歌浏览器默认的文字大小为16px 但是不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小 font-family:字体 作用： font-family属性用于设置哪一种字体。 1p{ font-family:&quot;微软雅黑&quot;;} 网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑 可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体， 如果都没有，则以我们电脑默认的字体为准。 1p{font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;} 常用技巧： 12341. 各种字体之间必须使用英文状态下的逗号隔开。2. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。3. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。4. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。 CSS Unicode字体 为什么使用 Unicode字体 在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。 xp 系统不支持 类似微软雅黑的中文。 解决： 方案一： 你可以使用英文来替代。 比如font-family:&quot;Microsoft Yahei&quot;。 方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。 1font-family: &quot;\\5FAE\\8F6F\\96C5\\9ED1&quot;; 表示设置字体为“微软雅黑”。 字体名称 英文名称 Unicode 编码 宋体 SimSun \\5B8B\\4F53 新宋体 NSimSun \\65B0\\5B8B\\4F53 黑体 SimHei \\9ED1\\4F53 微软雅黑 Microsoft YaHei \\5FAE\\8F6F\\96C5\\9ED1 楷体_GB2312 KaiTi_GB2312 \\6977\\4F53_GB2312 隶书 LiSu \\96B6\\4E66 幼园 YouYuan \\5E7C\\5706 华文细黑 STXihei \\534E\\6587\\7EC6\\9ED1 细明体 MingLiU \\7EC6\\660E\\4F53 新细明体 PMingLiU \\65B0\\7EC6\\660E\\4F53 为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体 font-weight:字体粗细 在html中如何将字体加粗我们可以用标签来实现 使用 b 和 strong 标签是文本加粗。 可以使用CSS 来实现，但是CSS 是没有语义的。 属性值 描述 normal 默认值（不加粗的） bold 定义粗体（加粗的） 100~900 400 等同于 normal，而 700 等同于 bold 我们重点记住这句话 提倡： 我们平时更喜欢用数字来表示加粗和不加粗。 font-style:字体风格 在html中如何将字体倾斜我们可以用标签来实现 字体倾斜除了用 i 和 em 标签， 可以使用CSS 来实现，但是CSS 是没有语义的 font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下： 属性 作用 normal 默认值，浏览器会显示标准的字体样式 font-style: normal; italic 浏览器会显示斜体的字体样式。 小技巧： 1平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。 font:综合设置字体样式 (重点)font属性用于对字体样式进行综合设置 基本语法格式如下： 1选择器 { font: font-style font-weight font-size/line-height font-family;} 注意： 使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。 其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。 font总结 属性 表示 注意点 font-size 字号 我们通常用的单位是px 像素，一定要跟上单位 font-family 字体 实际工作中按照团队约定来写字体 font-weight 字体粗细 记住加粗是 700 或者 bold 不加粗 是 normal 或者 400 记住数字不要跟单位 font-style 字体样式 记住倾斜是 italic 不倾斜 是 normal 工作中我们最常用 normal font 字体连写 1. 字体连写是有顺序的 不能随意换位置 2. 其中字号 和 字体 必须同时出现 CSS外观属性color:文本颜色 作用： color属性用于定义文本的颜色， 其取值方式有如下3种： 表示表示 属性值 预定义的颜色值 red，green，blue，还有我们的御用色 pink 十六进制 #FF0000，#FF6600，#29D794 RGB代码 rgb(255,0,0)或rgb(100%,0%,0%) 注意 我们实际工作中， 用 16进制的写法是最多的，而且我们更喜欢简写方式比如 #f00 代表红色 text-align:文本水平对齐方式 作用： text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性 其可用属性值如下： 属性 解释 left 左对齐（默认值） right 右对齐 center 居中对齐 注意： 是让盒子里面的内容水平居中， 而不是让盒子居中对齐 line-height:行间距 作用： line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。 单位： line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px 技巧： 12一般情况下，行距比字号大7.8像素左右就可以了。line-height: 24px; text-indent:首行缩进 作用： text-indent属性用于设置首行文本的缩进， 属性值 其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。 1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度 123456p { /*行间距*/ line-height: 25px; /*首行缩进2个字 em 1个em 就是1个字的大小*/ text-indent: 2em; } text-decoration 文本的装饰text-decoration 通常我们用于给链接修改装饰效果 值 描述 none 默认。定义标准的文本。 取消下划线（最常用） underline 定义文本下的一条线。下划线 也是我们链接自带的（常用） overline 定义文本上的一条线。（不用） line-through 定义穿过文本下的一条线。（不常用） CSS外观属性总结 属性 表示 注意点 color 颜色 我们通常用 十六进制 比如 而且是简写形式 #fff line-height 行高 控制行与行之间的距离 text-align 水平对齐 可以设定文字水平的对齐方式 text-indent 首行缩进 通常我们用于段落首行缩进2个字的距离 text-indent: 2em; text-decoration 文本修饰 记住 添加 下划线 underline 取消下划线 none 开发者工具（chrome）此工具是我们的必备工具，以后代码出了问题 我们首先第一反应就是： “按F12”或者是 “shift+ctrl+i” 打开 开发者工具。 菜单： 右击网页空白出—检查 通过开发人员工具小指针工具，查找页面元素 左侧是html页面结构，右侧是css样式 小技巧： ctrl+滚轮 可以 放大开发者工具代码大小。 左边是HTML元素结构 右边是CSS样式。 右边CSS样式可以改动数值和颜色查看更改后效果。 ctrl + 0 复原浏览器大小 sublime快捷操作emmet语法Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。 生成标签 直接输入标签名 按tab键即可 比如 div 然后tab 键， 就可以生成 如果想要生成多个相同标签 加上 * 就可以了 比如 div*3 就可以快速生成3个div 如果有父子级关系的标签，可以用 &gt; 比如 ul &gt; li就可以了 如果有兄弟关系的标签，用 + 就可以了 比如 div+p 如果生成带有类名或者id名字的， 直接写 .demo 或者 #two tab 键就可以了 如果生成的div 类名是有顺序的， 可以用 自增符号 $ 1234.demo$*3 &lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt; 综合案例 拓展阅读@emment语法","link":"/前端笔记/css-day01/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"HTML5+CSS3","slug":"HTML5-CSS3","link":"/tags/HTML5-CSS3/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"布局","slug":"布局","link":"/tags/布局/"}],"categories":[{"name":"前端笔记","slug":"前端笔记","link":"/categories/前端笔记/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"}]}