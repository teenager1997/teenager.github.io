<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>It Fool - 董冬懂冻</title>
  
  <subtitle>前端blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itfool.cn/"/>
  <updated>2020-05-26T08:01:28.682Z</updated>
  <id>http://www.itfool.cn/</id>
  
  <author>
    <name>董冬懂冻</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/vue-day06/"/>
    <id>http://www.itfool.cn/前端笔记/vue-day06/</id>
    <published>2020-05-26T07:11:07.000Z</published>
    <updated>2020-05-26T08:01:28.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第05阶段.Vue.js项目实战开发.Vue前端工程化</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够了解模块化的相关规范 </li><li>了解webpack</li><li>了解使用Vue单文件组件</li><li>能够搭建Vue脚手架</li><li>掌握Element-UI的使用 </li></ul><a id="more"></a><h2 id="模块化的分类"><a href="#模块化的分类" class="headerlink" title="模块化的分类"></a>模块化的分类</h2><h3 id="浏览器端的模块化"><a href="#浏览器端的模块化" class="headerlink" title="浏览器端的模块化"></a>浏览器端的模块化</h3><ul><li>AMD(Asynchronous Module Definition,异步模块定义)，代表产品为：Require.js</li><li>CMD(Common Module Definition,通用模块定义)，代表产品为：Sea.js</li></ul><h3 id="服务器端的模块化"><a href="#服务器端的模块化" class="headerlink" title="服务器端的模块化"></a>服务器端的模块化</h3><ul><li><p>服务器端的模块化规范是使用CommonJS规范：</p><ul><li><p>使用require引入其他模块或者包</p></li><li><p>使用exports或者module.exports导出模块成员</p></li><li><p>一个文件就是一个模块，都拥有独立的作用域</p></li></ul></li></ul><h3 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h3><ul><li>ES6模块化规范中定义：<ul><li>每一个js文件都是独立的模块</li><li>导入模块成员使用import关键字</li><li>暴露模块成员使用export关键字</li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。</li><li>ES6模块化是浏览器端和服务器端通用的规范.</li></ul><h2 id="在NodeJS中安装babel"><a href="#在NodeJS中安装babel" class="headerlink" title="在NodeJS中安装babel"></a>在NodeJS中安装babel</h2><h3 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h3><ul><li>打开终端，输入命令：<strong>npm install –save-dev @babel/core @babel/cli @babel/preset-env @babel/node</strong></li><li>安装完毕之后，再次输入命令安装：<strong>npm install –save @babel/polyfill</strong><h3 id="创建babel-config-js"><a href="#创建babel-config-js" class="headerlink" title="创建babel.config.js"></a>创建babel.config.js</h3></li><li>在项目目录中创建babel.config.js文件。</li><li>编辑js文件中的代码如下：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const presets = [</span><br><span class="line">    [&quot;@babel/env&quot;,&#123;</span><br><span class="line">        targets:&#123;            edge:&quot;17&quot;,</span><br><span class="line">            firefox:&quot;60&quot;,</span><br><span class="line">            chrome:&quot;67&quot;,</span><br><span class="line">            safari:&quot;11.1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">]</span><br><span class="line">//暴露</span><br><span class="line">module.exports = &#123; presets &#125;</span><br></pre></td></tr></table></figure><h3 id="创建index-js文件"><a href="#创建index-js文件" class="headerlink" title="创建index.js文件"></a>创建index.js文件</h3><ul><li>在项目目录中创建index.js文件作为入口文件</li><li>在index.js中输入需要执行的js代码，例如：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;ok&quot;);</span><br></pre></td></tr></table></figure><h3 id="使用npx执行文件"><a href="#使用npx执行文件" class="headerlink" title="使用npx执行文件"></a>使用npx执行文件</h3><ul><li>打开终端，输入命令：<strong>npx babel-node ./index.js</strong></li></ul><h2 id="设置默认导入-导出"><a href="#设置默认导入-导出" class="headerlink" title="设置默认导入/导出"></a>设置默认导入/导出</h2><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">     成员A,</span><br><span class="line">     成员B,</span><br><span class="line">     .......</span><br><span class="line"> &#125;,如下：</span><br><span class="line"> let num = 100;</span><br><span class="line"> export default&#123;</span><br><span class="line">     num</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h3><ul><li><p>import 接收名称 from “模块标识符”，如下：</p></li><li><p><strong>import test from “./test.js”</strong></p></li><li><p>注意：在一个模块中，只允许使用export default向外默认暴露一次成员，千万不要写多个export default。<br>如果在一个模块中没有向外暴露成员，其他模块引入该模块时将会得到一个空对象 </p></li></ul><h3 id="设置按需导入-导出"><a href="#设置按需导入-导出" class="headerlink" title="设置按需导入/导出"></a>设置按需导入/导出</h3><h4 id="按需导出"><a href="#按需导出" class="headerlink" title="按需导出"></a>按需导出</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export let num = 998;</span><br><span class="line">export let myName = &quot;jack&quot;;</span><br><span class="line">export function fn = function()&#123; console.log(&quot;fn&quot;) &#125;</span><br></pre></td></tr></table></figure><h4 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; num,fn as printFn ,myName &#125; from &quot;./test.js&quot;</span><br><span class="line"></span><br><span class="line">//同时导入默认导出的成员以及按需导入的成员</span><br><span class="line"></span><br><span class="line">import test,&#123; num,fn as printFn ,myName &#125; from &quot;./test.js&quot;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>一个模块中既可以按需导入也可以默认导入，一个模块中既可以按需导出也可以默认导出</p><h3 id="直接导入并执行代码"><a href="#直接导入并执行代码" class="headerlink" title="直接导入并执行代码"></a>直接导入并执行代码</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;./test2.js&quot;;</span><br></pre></td></tr></table></figure><h2 id="webpack的概念"><a href="#webpack的概念" class="headerlink" title="webpack的概念"></a>webpack的概念</h2><p>webpack是一个流行的前端项目构建工具，可以解决目前web开发的困境。<br>webpack提供了模块化支持，代码压缩混淆，解决js兼容问题，性能优化等特性，提高了开发效率和项目的可维护性</p><h3 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a>webpack的基本使用</h3><h4 id="创建项目目录并初始化"><a href="#创建项目目录并初始化" class="headerlink" title="创建项目目录并初始化"></a>创建项目目录并初始化</h4><ul><li>创建项目，并打开项目所在目录的终端，输入命令：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h4 id="创建首页及js文件"><a href="#创建首页及js文件" class="headerlink" title="创建首页及js文件"></a>创建首页及js文件</h4><ul><li>在项目目录中创建index.html页面，并初始化页面结构：在页面中摆放一个ul，ul里面放置几个li</li><li>在项目目录中创建js文件夹，并在文件夹中创建index.js文件</li></ul><h4 id="安装jQuery"><a href="#安装jQuery" class="headerlink" title="安装jQuery"></a>安装jQuery</h4><ul><li>打开项目目录终端，输入命令:</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jQuery -S</span><br></pre></td></tr></table></figure><h4 id="导入jQuery"><a href="#导入jQuery" class="headerlink" title="导入jQuery"></a>导入jQuery</h4><ul><li>打开index.js文件，编写代码导入jQuery并实现功能：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import $ from &quot;jquery&quot;;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;cyan&quot;);</span><br><span class="line">    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;pink&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>此时项目运行会有错误，因为import $ from “jquery”;这句代码属于ES6的新语法代码，在浏览器中可能会存在兼容性问题。<br><strong>所以我们需要webpack来帮助我们解决这个问题。</strong></p><h4 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h4><ul><li><p>打开项目目录终端，输入命令:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></li><li><p>然后在项目根目录中，创建一个 webpack.config.js 的配置文件用来配置webpack。<br>在 webpack.config.js 文件中编写代码进行webpack配置，如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    mode:&quot;development&quot;//可以设置为development(开发模式)，production(发布模式)</span><br><span class="line">&#125;</span><br><span class="line">// 补充：mode设置的是项目的编译模式。</span><br><span class="line">// 如果设置为development则表示项目处于开发阶段，不会进行压缩和混淆，打包速度会快一些</span><br><span class="line"> //如果设置为production则表示项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些</span><br></pre></td></tr></table></figure></li><li><p>修改项目中的package.json文件添加运行脚本dev，如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  注意：scripts节点下的脚本，可以通过 npm run 运行，如：<br>  运行终端命令：<strong>npm run dev</strong><br>  将会启动webpack进行项目打包</p><ul><li>运行dev命令进行项目打包，并在页面中引入项目打包生成的js文件<br>打开项目目录终端，输入命令:<br><strong>npm run dev</strong><br>等待webpack打包完毕之后，找到默认的dist路径中生成的main.js文件，将其引入到html页面中。<br>浏览页面查看效果。</li></ul><h3 id="设置webpack的打包入口-出口"><a href="#设置webpack的打包入口-出口" class="headerlink" title="设置webpack的打包入口/出口"></a>设置webpack的打包入口/出口</h3><p>在webpack 4.x中，默认会将src/index.js 作为默认的打包入口js文件<br>默认会将dist/main.js 作为默认的打包输出js文件<br>如果不想使用默认的入口/出口js文件，我们可以通过改变 webpack.config.js 来设置入口/出口的js文件，如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode:&quot;development&quot;,</span><br><span class="line">    //设置入口文件路径</span><br><span class="line">    entry: path.join(__dirname,&quot;./src/xx.js&quot;),</span><br><span class="line">    //设置出口文件</span><br><span class="line">    output:&#123;</span><br><span class="line">        //设置路径</span><br><span class="line">        path:path.join(__dirname,&quot;./dist&quot;),</span><br><span class="line">        //设置文件名</span><br><span class="line">        filename:&quot;res.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置webpack的自动打包"><a href="#设置webpack的自动打包" class="headerlink" title="设置webpack的自动打包"></a>设置webpack的自动打包</h3><p>默认情况下，我们更改入口js文件的代码，需要重新运行命令打包webpack，才能生成出口的js文件<br>那么每次都要重新执行命令打包，这是一个非常繁琐的事情，那么，自动打包可以解决这样繁琐的操作。</p><p><strong>实现自动打包功能的步骤如下：</strong></p><ul><li><p>安装自动打包功能的包:webpack-dev-server</p></li><li><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure></li></ul><ul><li>修改package.json中的dev指令如下：        <ul><li><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack-dev-server&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>将引入的js文件路径更改为：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行<strong>npm run dev</strong>，进行打包</p></li><li><p>打开网址查看效果：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p></li></ul><p><strong>注意：</strong>webpack-dev-server自动打包的输出文件，默认放到了服务器的根目录中.</p><p><strong>补充：</strong><br>在自动打包完毕之后，默认打开服务器网页，实现方式就是打开package.json文件，修改dev命令：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --open --host 127.0.0.1 --port 9999&quot;</span><br></pre></td></tr></table></figure><h3 id="配置html-webpack-plugin"><a href="#配置html-webpack-plugin" class="headerlink" title="配置html-webpack-plugin"></a>配置html-webpack-plugin</h3><p>使用<strong>html-webpack-plugin</strong> 可以生成一个预览页面。</p><p>因为当我们访问默认的 <a href="http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面" target="_blank" rel="noopener">http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面</a><br>还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。</p><p><strong>实现默认预览页面功能的步骤如下：</strong></p><ul><li><p>安装默认预览功能的包:html-webpack-plugin</p><ul><li><strong>npm install html-webpack-plugin -D</strong></li></ul></li><li><p>修改webpack.config.js文件，如下：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//导入包</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">//创建对象</span><br><span class="line">const htmlPlugin = new HtmlWebpackPlugin(&#123;</span><br><span class="line">    //设置生成预览页面的模板文件</span><br><span class="line">    template:&quot;./src/index.html&quot;,</span><br><span class="line">          //设置生成的预览页面名称</span><br><span class="line">          filename:&quot;index.html&quot;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>​        </p><ul><li><p>继续修改webpack.config.js文件，添加plugins信息：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">                ......</span><br><span class="line">                plugins:[ htmlPlugin ]</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="webpack中的加载器"><a href="#webpack中的加载器" class="headerlink" title="webpack中的加载器"></a>webpack中的加载器</h3><p>通过loader打包非js模块：默认情况下，webpack只能打包js文件，如果想要打包非js文件，需要调用loader加载器才能打包。</p><p><strong>loader加载器包含：</strong></p><ul><li><p>less-loader</p></li><li><p>sass-loader</p></li><li><p>url-loader:打包处理css中与url路径有关的文件</p></li><li><p>babel-loader:处理高级js语法的加载器</p></li><li><p>postcss-loader</p></li><li><p>css-loader,style-loader</p></li></ul><p><strong>注意：</strong>指定多个loader时的顺序是固定的，而调用loader的顺序是从后向前进行调用</p><p><strong>A. 安装style-loader,css-loader来处理样式文件</strong><br> 1).安装包<br>            <strong>npm install style-loader css-loader -D</strong><br> 2).配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">           ......</span><br><span class="line">           plugins:[ htmlPlugin ],</span><br><span class="line">           module : &#123;</span><br><span class="line">               rules:[</span><br><span class="line">                   &#123;</span><br><span class="line">                       //test设置需要匹配的文件类型，支持正则</span><br><span class="line">                       test:/\.css$/,</span><br><span class="line">                       //use表示该文件类型需要调用的loader</span><br><span class="line">                       use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">                   &#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>B. 安装less,less-loader处理less文件</strong><br>1).安装包<br>            <strong>npm install less-loader less -D</strong><br>2).配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">            ......</span><br><span class="line">            plugins:[ htmlPlugin ],</span><br><span class="line">            module : &#123;</span><br><span class="line">                rules:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        //test设置需要匹配的文件类型，支持正则</span><br><span class="line">                        test:/\.css$/,</span><br><span class="line">                        //use表示该文件类型需要调用的loader</span><br><span class="line">                        use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.less$/,</span><br><span class="line">                        use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>C.安装sass-loader,node-sass处理less文件</strong><br>1).安装包<br>            <strong>npm install sass-loader node-sass -D</strong><br>2).配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">            ......</span><br><span class="line">            plugins:[ htmlPlugin ],</span><br><span class="line">            module : &#123;</span><br><span class="line">                rules:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        //test设置需要匹配的文件类型，支持正则</span><br><span class="line">                        test:/\.css$/,</span><br><span class="line">                        //use表示该文件类型需要调用的loader</span><br><span class="line">                        use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.less$/,</span><br><span class="line">                        use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.scss$/,</span><br><span class="line">                        use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>D.安装post-css自动添加css的兼容性前缀（-ie-,-webkit-）</strong><br>1).安装包<br>    <strong>npm install postcss-loader autoprefixer -D</strong><br>2).在项目根目录创建并配置postcss.config.js文件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const autoprefixer = require(&quot;autoprefixer&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    plugins:[ autoprefixer ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3).配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                //test设置需要匹配的文件类型，支持正则</span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                //use表示该文件类型需要调用的loader</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;postcss-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.scss$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>E.打包样式表中的图片以及字体文件</strong><br>在样式表css中有时候会设置背景图片和设置字体文件，一样需要loader进行处理<br>使用url-loader和file-loader来处理打包图片文件以及字体文件<br>1).安装包<br>    <strong>npm install url-loader file-loader -D</strong><br>2).配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                //test设置需要匹配的文件类型，支持正则</span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                //use表示该文件类型需要调用的loader</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.scss$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test:/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,</span><br><span class="line">                //limit用来设置字节数，只有小于limit值的图片，才会转换</span><br><span class="line">                //为base64图片</span><br><span class="line">                use:&quot;url-loader?limit=16940&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>F.打包js文件中的高级语法</strong>：在编写js的时候，有时候我们会使用高版本的js语法<br>有可能这些高版本的语法不被兼容，我们需要将之打包为兼容性的js代码<br>我们需要安装babel系列的包<br>A.安装babel转换器<br>    <strong>npm install babel-loader @babel/core @babel/runtime -D</strong></p><p>B.安装babel语法插件包<br>    <strong>npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</strong></p><p>C.在项目根目录创建并配置babel.config.js文件</p><pre><code>module.exports = {    presets:[&quot;@babel/preset-env&quot;],    plugins:[ &quot;@babel/plugin-transform-runtime&quot;, &quot;@babel/plugin-proposal-class-properties&quot; ]}</code></pre><p>D.配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                //test设置需要匹配的文件类型，支持正则</span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                //use表示该文件类型需要调用的loader</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.scss$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test:/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,</span><br><span class="line">                //limit用来设置字节数，只有小于limit值的图片，才会转换</span><br><span class="line">                //为base64图片</span><br><span class="line">                use:&quot;url-loader?limit=16940&quot;</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                use:&quot;babel-loader&quot;,</span><br><span class="line">                //exclude为排除项，意思是不要处理node_modules中的js文件</span><br><span class="line">                exclude:/node_modules/</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue单文件组件"><a href="#Vue单文件组件" class="headerlink" title="Vue单文件组件"></a>Vue单文件组件</h2><h3 id="传统Vue组件的缺陷："><a href="#传统Vue组件的缺陷：" class="headerlink" title="传统Vue组件的缺陷："></a>传统Vue组件的缺陷：</h3><p>全局定义的组件不能重名，字符串模板缺乏语法高亮，不支持css(当html和js组件化时，css没有参与其中)<br>没有构建步骤限制，只能使用H5和ES5，不能使用预处理器（babel）</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>使用Vue单文件组件，每个单文件组件的后缀名都是.vue</li><li>每一个Vue单文件组件都由三部分组成<ul><li>template组件组成的模板区域</li><li>script组成的业务逻辑区域</li><li>style样式区域</li></ul></li></ul><p>代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">    组件代码区域</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    js代码区域</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">    样式代码区域</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>安装Vetur插件可以使得.vue文件中的代码高亮</p><h3 id="配置-vue文件的加载器"><a href="#配置-vue文件的加载器" class="headerlink" title="配置.vue文件的加载器"></a>配置.vue文件的加载器</h3><p>A. 安装vue组件的加载器<br>    <strong>npm install vue-loader vue-template-compiler -D</strong></p><p>B. 配置规则：更改webpack.config.js的module中的rules数组</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    const VueLoaderPlugin = require(&quot;vue-loader/lib/plugin&quot;);</span><br><span class="line">    const vuePlugin = new VueLoaderPlugin();</span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        ......</span><br><span class="line">        plugins:[ htmlPlugin, vuePlugin  ],</span><br><span class="line">        module : &#123;</span><br><span class="line">            rules:[</span><br><span class="line">                ...//其他规则</span><br><span class="line">                &#123; </span><br><span class="line">                    test:/\.vue$/,</span><br><span class="line">                    loader:&quot;vue-loader&quot;,</span><br><span class="line">                                &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在webpack中使用vue"><a href="#在webpack中使用vue" class="headerlink" title="在webpack中使用vue"></a>在webpack中使用vue</h2><p>上一节我们安装处理了vue单文件组件的加载器，想要让vue单文件组件能够使用，我们必须要安装vue<br>并使用vue来引用vue单文件组件。</p><p>A.安装Vue<br>    <strong>npm install vue -S</strong></p><p>B.在index.js中引入vue：<strong>import Vue from “vue”</strong></p><p>C.创建Vue实例对象并指定el，最后使用render函数渲染单文件组件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#first&quot;,</span><br><span class="line">    render:h=&gt;h(app)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用webpack打包发布项目"><a href="#使用webpack打包发布项目" class="headerlink" title="使用webpack打包发布项目"></a>使用webpack打包发布项目</h2><p>在项目上线之前，我们需要将整个项目打包并发布。<br>A.配置package.json</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    &quot;dev&quot;:&quot;webpack-dev-server&quot;,</span><br><span class="line">    &quot;build&quot;:&quot;webpack -p&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B.在项目打包之前，可以将dist目录删除，生成全新的dist目录</p><h2 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h2><p><strong>Vue脚手架可以快速生成Vue项目基础的架构。</strong><br>A.安装3.x版本的Vue脚手架：<br>    <strong>npm install -g @vue/cli</strong><br>B.基于3.x版本的脚手架创建Vue项目：<br>    1).使用命令创建Vue项目<br>        命令：<strong>vue create my-project</strong><br>        选择Manually select features(选择特性以创建项目)<br>        勾选特性可以用空格进行勾选。<br>        是否选用历史模式的路由：n<br>        ESLint选择：<strong>ESLint + Standard config</strong><br>        何时进行ESLint语法校验：Lint on save<br>        babel，postcss等配置文件如何放置：In dedicated config files(单独使用文件进行配置)<br>        是否保存为模板：n<br>        使用哪个工具安装包：npm<br>    2).基于ui界面创建Vue项目<br>        命令：vue ui<br>        在自动打开的创建项目网页中配置项目信息。<br>    3).基于2.x的旧模板，创建Vue项目<br>        <strong>npm install -g @vue/cli-init</strong><br>        <strong>vue init webpack my-project</strong></p><p>C.分析Vue脚手架生成的项目结构<br>    node_modules:依赖包目录<br>    public：静态资源目录<br>    src：源码目录<br>    src/assets:资源目录<br>    src/components：组件目录<br>    src/views:视图组件目录<br>    src/App.vue:根组件<br>    src/main.js:入口js<br>    src/router.js:路由js<br>    babel.config.js:babel配置文件<br>    .eslintrc.js:</p><h2 id="Vue脚手架的自定义配置"><a href="#Vue脚手架的自定义配置" class="headerlink" title="Vue脚手架的自定义配置"></a>Vue脚手架的自定义配置</h2><p>A.通过 package.json 进行配置 [不推荐使用]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;vue&quot;:&#123;</span><br><span class="line">        &quot;devServer&quot;:&#123;</span><br><span class="line">            &quot;port&quot;:&quot;9990&quot;,</span><br><span class="line">            &quot;open&quot;:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>B.通过单独的配置文件进行配置，创建vue.config.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">        devServer:&#123;</span><br><span class="line">            port:8888,</span><br><span class="line">            open:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Element-UI的基本使用"><a href="#Element-UI的基本使用" class="headerlink" title="Element-UI的基本使用"></a>Element-UI的基本使用</h2><p>Element-UI:一套基于2.0的桌面端组件库<br>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a><br>A.安装：<br>    <strong>npm install element-ui -S</strong><br>B.导入使用：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from &quot;element-ui&quot;;</span><br><span class="line">import &quot;element-ui/lib/theme-chalk/index.css&quot;;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第05阶段.Vue.js项目实战开发.Vue前端工程化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够了解模块化的相关规范 &lt;/li&gt;
&lt;li&gt;了解webpack&lt;/li&gt;
&lt;li&gt;了解使用Vue单文件组件&lt;/li&gt;
&lt;li&gt;能够搭建Vue脚手架&lt;/li&gt;
&lt;li&gt;掌握Element-UI的使用 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://www.itfool.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/vue-day05/"/>
    <id>http://www.itfool.cn/前端笔记/vue-day05/</id>
    <published>2020-05-26T07:01:57.000Z</published>
    <updated>2020-05-26T07:10:00.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第05阶段.Vue.js项目实战开发.Vue路由</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出什么是路由 </li><li>能够说出前端路由的实现原理</li><li>能够使用Vue-Router实现前端路由</li><li>能够实现嵌套路由，动态路由</li><li>能够实现命名路由以及编程式导航 </li><li>理解并实现后台管理案例</li></ul><a id="more"></a><h2 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h2><p>路由的本质就是一种对应关系，比如说我们在url地址中输入我们要访问的url地址之后，浏览器要去请求这个url地址对应的资源。<br>那么url地址和真实的资源之间就有一种对应的关系，就是路由。</p><p>路由分为前端路由和后端路由<br>1).后端路由是由服务器端进行实现，并完成资源的分发<br>2).前端路由是依靠hash值(锚链接)的变化进行实现 </p><p>后端路由性能相对前端路由来说较低，所以，我们接下来主要学习的是前端路由<br>前端路由的基本概念：根据不同的事件来显示不同的页面内容，即事件与事件处理函数之间的对应关系<br>前端路由主要做的事情就是监听事件并分发执行事件处理函数</p><h2 id="前端路由的初体验"><a href="#前端路由的初体验" class="headerlink" title="前端路由的初体验"></a>前端路由的初体验</h2><p>前端路由是基于hash值的变化进行实现的（比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换）<br>核心实现依靠一个事件，即监听hash值变化的事件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.onhashchange = function()&#123;</span><br><span class="line">    //location.hash可以获取到最新的hash值</span><br><span class="line">    location.hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端路由实现tab栏切换：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;!-- 导入 vue 文件 --&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue_2.5.22.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 切换组件的超链接 --&gt;</span><br><span class="line">    &lt;a href=&quot;#/zhuye&quot;&gt;主页&lt;/a&gt; </span><br><span class="line">    &lt;a href=&quot;#/keji&quot;&gt;科技&lt;/a&gt; </span><br><span class="line">    &lt;a href=&quot;#/caijing&quot;&gt;财经&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#/yule&quot;&gt;娱乐&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --&gt;</span><br><span class="line">    &lt;!-- 可以把 component 标签当做是【组件的占位符】 --&gt;</span><br><span class="line">    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    // #region 定义需要被切换的 4 个组件</span><br><span class="line">    // 主页组件</span><br><span class="line">    const zhuye = &#123;</span><br><span class="line">        template: &apos;&lt;h1&gt;主页信息&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 科技组件</span><br><span class="line">    const keji = &#123;</span><br><span class="line">        template: &apos;&lt;h1&gt;科技信息&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 财经组件</span><br><span class="line">    const caijing = &#123;</span><br><span class="line">        template: &apos;&lt;h1&gt;财经信息&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 娱乐组件</span><br><span class="line">    const yule = &#123;</span><br><span class="line">        template: &apos;&lt;h1&gt;娱乐信息&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    // #endregion</span><br><span class="line"></span><br><span class="line">    // #region vue 实例对象</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        comName: &apos;zhuye&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 注册私有组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        zhuye,</span><br><span class="line">        keji,</span><br><span class="line">        caijing,</span><br><span class="line">        yule</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // #endregion</span><br><span class="line"></span><br><span class="line">    // 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span><br><span class="line">    window.onhashchange = function() &#123;</span><br><span class="line">        // 通过 location.hash 获取到最新的 hash 值</span><br><span class="line">        console.log(location.hash);</span><br><span class="line">        switch(location.hash.slice(1))&#123;</span><br><span class="line">        case &apos;/zhuye&apos;:</span><br><span class="line">            vm.comName = &apos;zhuye&apos;</span><br><span class="line">        break</span><br><span class="line">        case &apos;/keji&apos;:</span><br><span class="line">            vm.comName = &apos;keji&apos;</span><br><span class="line">        break</span><br><span class="line">        case &apos;/caijing&apos;:</span><br><span class="line">            vm.comName = &apos;caijing&apos;</span><br><span class="line">        break</span><br><span class="line">        case &apos;/yule&apos;:</span><br><span class="line">            vm.comName = &apos;yule&apos;</span><br><span class="line">        break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>案例效果图：</p><p><img src="F:/BaiduNetdiskDownload/%25E9%25BB%2591%25E9%25A9%25AC/www.fxw.la_%2520WEB%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25A7%2586%25E9%25A2%2591%25E6%2595%2599%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/17-21%2520Vue.js%25E9%25A1%25B9%25E7%259B%25AE%25E5%25AE%259E%25E6%2588%2598%25E5%25BC%2580%25E5%258F%2591_9fxw.com/17-21%2520Vue.js%25E9%25A1%25B9%25E7%259B%25AE%25E5%25AE%259E%25E6%2588%2598%25E5%25BC%2580%25E5%258F%2591/20-21vue%25E7%2594%25B5%25E5%2595%2586/1.vue-%25E8%25B7%25AF%25E7%2594%25B1/%25E7%25AC%2594%25E8%25AE%25B0/images/01%25E5%2589%258D%25E7%25AB%25AF%25E8%25B7%25AF%25E7%2594%25B1.png" alt></p><p>点击每个超链接之后，会进行相应的内容切换，如下：</p><p><img src="/前端笔记/vue-day05/01%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><p>核心思路：<br>在页面中有一个vue实例对象，vue实例对象中有四个组件，分别是tab栏切换需要显示的组件内容<br>在页面中有四个超链接，如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#/zhuye&quot;&gt;主页&lt;/a&gt; </span><br><span class="line">&lt;a href=&quot;#/keji&quot;&gt;科技&lt;/a&gt; </span><br><span class="line">&lt;a href=&quot;#/caijing&quot;&gt;财经&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#/yule&quot;&gt;娱乐&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>当我们点击这些超链接的时候，就会改变url地址中的hash值，当hash值被改变时，就会触发onhashchange事件<br>在触发onhashchange事件的时候，我们根据hash值来让不同的组件进行显示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">window.onhashchange = function() &#123;</span><br><span class="line">    // 通过 location.hash 获取到最新的 hash 值</span><br><span class="line">    console.log(location.hash);</span><br><span class="line">    switch(location.hash.slice(1))&#123;</span><br><span class="line">        case &apos;/zhuye&apos;:</span><br><span class="line">        //通过更改数据comName来指定显示的组件</span><br><span class="line">        //因为 &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt; ，组件已经绑定了comName</span><br><span class="line">        vm.comName = &apos;zhuye&apos;</span><br><span class="line">        break</span><br><span class="line">        case &apos;/keji&apos;:</span><br><span class="line">        vm.comName = &apos;keji&apos;</span><br><span class="line">        break</span><br><span class="line">        case &apos;/caijing&apos;:</span><br><span class="line">        vm.comName = &apos;caijing&apos;</span><br><span class="line">        break</span><br><span class="line">        case &apos;/yule&apos;:</span><br><span class="line">        vm.comName = &apos;yule&apos;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-Router简介"><a href="#Vue-Router简介" class="headerlink" title="Vue Router简介"></a>Vue Router简介</h2><p>它是一个Vue.js官方提供的路由管理器。是一个功能更加强大的前端路由器，推荐使用。<br>Vue Router和Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)应用程序的开发。<br>Vue Router依赖于Vue，所以需要先引入Vue，再引入Vue Router</p><p>Vue Router的特性：<br>支持H5历史模式或者hash模式<br>支持嵌套路由<br>支持路由参数<br>支持编程式路由<br>支持命名路由<br>支持路由导航守卫<br>支持路由过渡动画特效<br>支持路由懒加载<br>支持路由滚动行为</p><h2 id="Vue-Router的使用步骤-★★★"><a href="#Vue-Router的使用步骤-★★★" class="headerlink" title="Vue Router的使用步骤(★★★)"></a>Vue Router的使用步骤(★★★)</h2><p>A.导入js文件</p><script src="lib/vue_2.5.22.js"></script><script src="lib/vue-router_3.0.2.js"></script><p>B.添加路由链接:<router-link>是路由中提供的标签，默认会被渲染为a标签，to属性默认被渲染为href属性，<br>to属性的值会被渲染为#开头的hash地址<br><router-link to="/user">User</router-link><br><router-link to="/login">Login</router-link><br>C.添加路由填充位（路由占位符）<br><router-view></router-view><br>D.定义路由组件<br>var User = { template:”<div>This is User</div>“ }<br>var Login = { template:”<div>This is Login</div>“ }<br>E.配置路由规则并创建路由实例<br>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes:[<br>        //每一个路由规则都是一个对象，对象中至少包含path和component两个属性<br>        //path表示  路由匹配的hash地址，component表示路由规则对应要展示的组件对象<br>        {path:”/user”,component:User},<br>        {path:”/login”,component:Login}<br>    ]<br>})<br>F.将路由挂载到Vue实例中<br>new Vue({<br>    el:”#app”,<br>    //通过router属性挂载路由对象<br>    router:myRouter<br>})</router-link></p><p>小结：<br>Vue Router的使用步骤还是比较清晰的，按照步骤一步一步就能完成路由操作<br>A.导入js文件<br>B.添加路由链接<br>C.添加路由占位符(最后路由展示的组件就会在占位符的位置显示)<br>D.定义路由组件<br>E.配置路由规则并创建路由实例<br>F.将路由挂载到Vue实例中</p><p>补充：<br>路由重定向：可以通过路由重定向为页面设置默认展示的组件<br>在路由规则中添加一条路由规则即可，如下：<br>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //path设置为/表示页面最初始的地址 / ,redirect表示要被重定向的新地址，设置为一个路由即可<br>        { path:”/“,redirect:”/user”},<br>        { path: “/user”, component: User },<br>        { path: “/login”, component: Login }<br>    ]<br>})</p><h3 id="嵌套路由，动态路由的实现方式"><a href="#嵌套路由，动态路由的实现方式" class="headerlink" title="嵌套路由，动态路由的实现方式"></a>嵌套路由，动态路由的实现方式</h3><h3 id="嵌套路由的概念-★★★"><a href="#嵌套路由的概念-★★★" class="headerlink" title="嵌套路由的概念(★★★)"></a>嵌套路由的概念(★★★)</h3><p>当我们进行路由的时候显示的组件中还有新的子级路由链接以及内容。</p><p>嵌套路由最关键的代码在于理解子级路由的概念：<br>比如我们有一个/login的路由<br>那么/login下面还可以添加子级路由，如:<br>/login/account<br>/login/phone</p><p>参考代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var User = &#123; template: &quot;&lt;div&gt;This is User&lt;/div&gt;&quot; &#125;</span><br><span class="line">//Login组件中的模板代码里面包含了子级路由链接以及子级路由的占位符</span><br><span class="line">    var Login = &#123; template: `&lt;div&gt;</span><br><span class="line">        &lt;h1&gt;This is Login&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;router-link to=&quot;/login/account&quot;&gt;账号密码登录&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/login/phone&quot;&gt;扫码登录&lt;/router-link&gt;</span><br><span class="line">        &lt;!-- 子路由组件将会在router-view中显示 --&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;` &#125;</span><br><span class="line"></span><br><span class="line">    //定义两个子级路由组件</span><br><span class="line">    var account = &#123; template:&quot;&lt;div&gt;账号：&lt;input&gt;&lt;br&gt;密码：&lt;input&gt;&lt;/div&gt;&quot;&#125;;</span><br><span class="line">    var phone = &#123; template:&quot;&lt;h1&gt;扫我二维码&lt;/h1&gt;&quot;&#125;;</span><br><span class="line">    var myRouter = new VueRouter(&#123;</span><br><span class="line">        //routes是路由规则数组</span><br><span class="line">        routes: [</span><br><span class="line">            &#123; path:&quot;/&quot;,redirect:&quot;/user&quot;&#125;,</span><br><span class="line">            &#123; path: &quot;/user&quot;, component: User &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">                path: &quot;/login&quot;, </span><br><span class="line">                component: Login,</span><br><span class="line">                //通过children属性为/login添加子路由规则</span><br><span class="line">                children:[</span><br><span class="line">                    &#123; path: &quot;/login/account&quot;, component: account &#125;,</span><br><span class="line">                    &#123; path: &quot;/login/phone&quot;, component: phone &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        router:myRouter</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>页面效果大致如下：</p><p><img src="/前端笔记/vue-day05/03%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1.png" alt></p><h3 id="动态路由匹配-★★★"><a href="#动态路由匹配-★★★" class="headerlink" title="动态路由匹配(★★★)"></a>动态路由匹配(★★★)</h3><p>var User = { template:”<div>用户：</div>“}</p><p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        { path: “/user/:id”, component: User },</p><pre><code>]</code></pre><p>})</p><p>补充：<br>如果使用$route.params.id来获取路径传参的数据不够灵活。<br>1.我们可以通过props来接收参数<br>var User = {<br>    props:[“id”],<br>    template:”<div>用户：{{id}}</div>“<br>    }</p><p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        //如果props设置为true，route.params将会被设置为组件属性<br>        { path: “/user/:id”, component: User,props:true },</p><pre><code>]</code></pre><p>})</p><p>2.还有一种情况，我们可以将props设置为对象，那么就直接将对象的数据传递给<br>组件进行使用<br>var User = {<br>    props:[“username”,”pwd”],<br>    template:”<div>用户：—</div>“<br>    }</p><p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        //如果props设置为对象，则传递的是对象中的数据给组件<br>        { path: “/user/:id”, component: User,props:{username:”jack”,pwd:123} },</p><pre><code>]</code></pre><p>})</p><p>3.如果想要获取传递的参数值还想要获取传递的对象数据，那么props应该设置为<br>函数形式。<br>var User = {<br>    props:[“username”,”pwd”,”id”],<br>    template:”<div>用户：{{id}} -&gt; {{username}}—{{pwd}}</div>“<br>    }</p><p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        //如果props设置为函数，则通过函数的第一个参数获取路由对象<br>        //并可以通过路由对象的params属性获取传递的参数<br>        //<br>        { path: “/user/:id”, component: User,props:(route)=&gt;{<br>            return {username:”jack”,pwd:123,id:route.params.id}<br>            }<br>        },</p><pre><code>]</code></pre><p>})</p><h2 id="命名路由以及编程式导航"><a href="#命名路由以及编程式导航" class="headerlink" title="命名路由以及编程式导航"></a>命名路由以及编程式导航</h2><h3 id="命名路由：给路由取别名"><a href="#命名路由：给路由取别名" class="headerlink" title="命名路由：给路由取别名"></a>命名路由：给路由取别名</h3><p>案例：</p><p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过name属性为路由添加一个别名<br>        { path: “/user/:id”, component: User, name:”user”},</p><pre><code>]</code></pre><p>})</p><p>//添加了别名之后，可以使用别名进行跳转<br><router-link to="/user">User</router-link><br><router-link :to="{ name:'user' , params: {id:123} }">User</router-link></p><p>//还可以编程式导航<br>myRouter.push( { name:’user’ , params: {id:123} } )</p><h3 id="编程式导航-★★★"><a href="#编程式导航-★★★" class="headerlink" title="编程式导航(★★★)"></a>编程式导航(★★★)</h3><p>页面导航的两种方式：<br>A.声明式导航：通过点击链接的方式实现的导航<br>B.编程式导航：调用js的api方法实现导航</p><p>Vue-Router中常见的导航方式：<br>this.$router.push(“hash地址”);<br>this.$router.push(“/login”);<br>this.$router.push({ name:’user’ , params: {id:123} });<br>this.$router.push({ path:”/login” });<br>this.$router.push({ path:”/login”,query:{username:”jack”} });</p><p>this.$router.go( n );//n为数字，参考history.go<br>this.$router.go( -1 );</p><h2 id="实现后台管理案例-★★★"><a href="#实现后台管理案例-★★★" class="headerlink" title="实现后台管理案例(★★★)"></a>实现后台管理案例(★★★)</h2><p>案例效果：</p><p><img src="/前端笔记/vue-day05/02%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.png" alt></p><p>点击左侧的”用户管理”,”权限管理”,”商品管理”,”订单管理”,”系统设置”都会出现对应的组件并展示内容</p><p>其中”用户管理”组件展示的效果如上图所示，在用户管理区域中的详情链接也是可以点击的，点击之后将会显示用户详情信息。</p><p>案例思路：<br>1).先将素材文件夹中的11.基于vue-router的案例.html复制到我们自己的文件夹中。<br>看一下这个文件中的代码编写了一些什么内容，<br>这个页面已经把后台管理页面的基本布局实现了<br>2).在页面中引入vue，vue-router<br>3).创建Vue实例对象，准备开始编写代码实现功能<br>4).希望是通过组件的形式展示页面的主体内容，而不是写死页面结构，所以我们可以定义一个根组件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//只需要把原本页面中的html代码设置为组件中的模板内容即可</span><br><span class="line">const app = &#123;</span><br><span class="line">    template:`&lt;div&gt;</span><br><span class="line">        &lt;!-- 头部区域 --&gt;</span><br><span class="line">        &lt;header class=&quot;header&quot;&gt;传智后台管理系统&lt;/header&gt;</span><br><span class="line">        &lt;!-- 中间主体区域 --&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class="line">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;用户管理&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;权限管理&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;商品管理&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;订单管理&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;系统设置&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class="line">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;main-content&quot;&gt;添加用户表单&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 尾部区域 --&gt;</span><br><span class="line">        &lt;footer class=&quot;footer&quot;&gt;版权信息&lt;/footer&gt;</span><br><span class="line">      &lt;/div&gt;`</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>5).当我们访问页面的时候，默认需要展示刚刚创建的app根组件，我们可以<br>创建一个路由对象来完成这个事情,然后将路由挂载到Vue实例对象中即可</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const myRouter = new VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;path:&quot;/&quot;,component:app&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;&#125;,</span><br><span class="line">    router:myRouter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>补充：到此为止，基本的js代码都处理完毕了，我们还需要设置一个路由占位符</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>6).此时我们打开页面应该就可以得到一个VueRouter路由出来的根组件了<br>我们需要在这个根组件中继续路由实现其他的功能子组件<br>先让我们更改根组件中的模板：更改左侧li为子级路由链接，并在右侧内容区域添加子级组件占位符</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const app = &#123;</span><br><span class="line">    template:`&lt;div&gt;</span><br><span class="line">        ........</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class="line">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;!-- 注意：我们把所有li都修改为了路由链接 --&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt;用户管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/accesses&quot;&gt;权限管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt;商品管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt;订单管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/systems&quot;&gt;系统设置&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class="line">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">                &lt;!-- 在 --&gt;</span><br><span class="line">                &lt;router-view&gt;&lt;/router-view&gt; </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        .......</span><br><span class="line">      &lt;/div&gt;`</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后，我们要为子级路由创建并设置需要显示的子级组件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//建议创建的组件首字母大写，和其他内容区分</span><br><span class="line">const Users = &#123;template:`&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;`&#125;</span><br><span class="line">const Access = &#123;template:`&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;权限管理&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;`&#125;</span><br><span class="line">const Goods = &#123;template:`&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;商品管理&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;`&#125;</span><br><span class="line">const Orders = &#123;template:`&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;订单管理&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;`&#125;</span><br><span class="line">const Systems = &#123;template:`&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;系统管理&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;`&#125;</span><br><span class="line"></span><br><span class="line">//添加子组件的路由规则</span><br><span class="line">const myRouter = new VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;path:&quot;/&quot;,component:app , children:[</span><br><span class="line">            &#123; path:&quot;/users&quot;,component:Users &#125;,</span><br><span class="line">            &#123; path:&quot;/accesses&quot;,component:Access &#125;,</span><br><span class="line">            &#123; path:&quot;/goods&quot;,component:Goods &#125;,</span><br><span class="line">            &#123; path:&quot;/orders&quot;,component:Orders &#125;,</span><br><span class="line">            &#123; path:&quot;/systems&quot;,component:Systems &#125;,</span><br><span class="line">        ]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;&#125;,</span><br><span class="line">    router:myRouter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>7).展示用户信息列表：<br>    A.为Users组件添加私有数据,并在模板中循环展示私有数据<br>    ​<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const Users = &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        userList:[</span><br><span class="line">            &#123;id:1,name:&quot;zs&quot;,age:18&#125;,</span><br><span class="line">            &#123;id:2,name:&quot;ls&quot;,age:19&#125;,</span><br><span class="line">            &#123;id:3,name:&quot;wang&quot;,age:20&#125;,</span><br><span class="line">            &#123;id:4,name:&quot;jack&quot;,age:21&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href=&quot;javascript:;&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;`&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>8.当用户列表展示完毕之后，我们可以点击列表中的详情来显示用户详情信息，首先我们需要创建一个组件，用来展示详情信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const UserInfo = &#123;</span><br><span class="line">    props:[&quot;id&quot;],</span><br><span class="line">    template:`&lt;div&gt;</span><br><span class="line">      &lt;h5&gt;用户详情&lt;/h5&gt;</span><br><span class="line">      &lt;p&gt;查看 &#123;&#123;id&#125;&#125; 号用户信息&lt;/p&gt;</span><br><span class="line">      &lt;button @click=&quot;goBack&quot;&gt;返回用户详情页&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt; `,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      goBack()&#123;</span><br><span class="line">        //当用户点击按钮，后退一页</span><br><span class="line">        this.$router.go(-1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后我们需要设置这个组件的路由规则</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const myRouter = new VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;path:&quot;/&quot;,component:app , children:[</span><br><span class="line">            &#123; path:&quot;/users&quot;,component:Users &#125;,</span><br><span class="line">            //添加一个/userinfo的路由规则</span><br><span class="line">            &#123; path:&quot;/userinfo/:id&quot;,component:UserInfo,props:true&#125;,</span><br><span class="line">            &#123; path:&quot;/accesses&quot;,component:Access &#125;,</span><br><span class="line">            &#123; path:&quot;/goods&quot;,component:Goods &#125;,</span><br><span class="line">            &#123; path:&quot;/orders&quot;,component:Orders &#125;,</span><br><span class="line">            &#123; path:&quot;/systems&quot;,component:Systems &#125;,</span><br><span class="line">        ]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;&#125;,</span><br><span class="line">    router:myRouter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再接着给用户列表中的详情a连接添加事件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const Users = &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            userList:[</span><br><span class="line">                &#123;id:1,name:&quot;zs&quot;,age:18&#125;,</span><br><span class="line">                &#123;id:2,name:&quot;ls&quot;,age:19&#125;,</span><br><span class="line">                &#123;id:3,name:&quot;wang&quot;,age:20&#125;,</span><br><span class="line">                &#123;id:4,name:&quot;jack&quot;,age:21&#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;`,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        goDetail(id)&#123;</span><br><span class="line">            this.$router.push(&quot;/userinfo/&quot;+id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第05阶段.Vue.js项目实战开发.Vue路由&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够说出什么是路由 &lt;/li&gt;
&lt;li&gt;能够说出前端路由的实现原理&lt;/li&gt;
&lt;li&gt;能够使用Vue-Router实现前端路由&lt;/li&gt;
&lt;li&gt;能够实现嵌套路由，动态路由&lt;/li&gt;
&lt;li&gt;能够实现命名路由以及编程式导航 &lt;/li&gt;
&lt;li&gt;理解并实现后台管理案例&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://www.itfool.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/vue-day04/"/>
    <id>http://www.itfool.cn/前端笔记/vue-day04/</id>
    <published>2020-05-26T06:55:32.000Z</published>
    <updated>2020-05-26T07:03:50.290Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第05阶段.Vue.js项目实战开发.Vue接口调用方式</p></blockquote><h2 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h2><ul><li>原生ajax</li><li>基于jQuery的ajax</li><li>fetch</li><li>axios<a id="more"></a></li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul><li>JavaScript的执行环境是「单线程」</li><li>所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程</li><li>异步模式可以一起执行<strong>多个任务</strong></li><li>JS中常见的异步调用<ul><li>定时任何</li><li>ajax</li><li>事件函数</li></ul></li></ul><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><ul><li>主要解决异步深层嵌套的问题</li><li>promise 提供了简洁的API  使得异步操作更加容易</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-number">1.</span> <span class="hljs-built_in">Promise</span>基本使用</span></span><br><span class="line"><span class="hljs-javascript">         我们使用<span class="hljs-keyword">new</span>来构建一个<span class="hljs-built_in">Promise</span>  <span class="hljs-built_in">Promise</span>的构造函数接收一个参数，是函数，并且传入两个参数：   resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</span></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">//2. 这里用于实现异步任务  setTimeout</span></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//3. 正常情况</span></span></span><br><span class="line"><span class="hljs-javascript">        resolve(<span class="hljs-string">'hello'</span>);</span></span><br><span class="line"><span class="hljs-javascript">      &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//4. 异常情况</span></span></span><br><span class="line"><span class="hljs-javascript">        reject(<span class="hljs-string">'出错了'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 100);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数 </span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了  </span></span></span><br><span class="line"><span class="hljs-javascript">  p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line"><span class="hljs-javascript">  &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">info</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(info)</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line"><span class="hljs-javascript">     基于<span class="hljs-built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">   */</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryData</span>(<span class="hljs-params">url</span>) </span>&#123;</span></span><br><span class="line">    #   1.1 创建一个Promise实例</span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="hljs-javascript">       xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">if</span>(xhr.readyState != <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span>;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;</span></span><br><span class="line">           # 1.2 处理正常的情况</span><br><span class="line">           resolve(xhr.responseText);</span><br><span class="line"><span class="hljs-javascript">         &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="line">           # 1.3 处理异常情况</span><br><span class="line"><span class="hljs-javascript">           reject(<span class="hljs-string">'服务器错误'</span>);</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"><span class="hljs-javascript">       xhr.open(<span class="hljs-string">'get'</span>, url);</span></span><br><span class="line"><span class="hljs-javascript">       xhr.send(<span class="hljs-literal">null</span>);</span></span><br><span class="line">     &#125;);</span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-keyword">return</span> p;</span></span><br><span class="line">   &#125;</span><br><span class="line"># 注意：  这里需要开启一个服务 </span><br><span class="line">   # 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span><br><span class="line"><span class="hljs-javascript">   queryData(<span class="hljs-string">'http://localhost:3000/data'</span>)</span></span><br><span class="line"><span class="hljs-javascript">     .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">       #  1.4 想要继续链式编程下去 需要 return  </span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> queryData(<span class="hljs-string">'http://localhost:3000/data1'</span>);</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="hljs-javascript">     .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(data);</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> queryData(<span class="hljs-string">'http://localhost:3000/data2'</span>);</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="hljs-javascript">     .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">     &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise  基本API"></a>Promise  基本API</h3><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><ul><li>得到异步任务正确的结果</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul><li>获取异常信息</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul><li>成功与否都会执行（不是正式标准） </li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">Promise</span>常用API-实例方法</span></span><br><span class="line">  */</span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// console.dir(Promise);</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// resolve(123);</span></span></span><br><span class="line"><span class="hljs-javascript">        reject(<span class="hljs-string">'error'</span>);</span></span><br><span class="line">      &#125;, 100);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// foo()</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//   .then(function(data)&#123;</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//     console.log(data)</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//   &#125;)</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//   .catch(function(data)&#123;</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//     console.log(data)</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//   &#125;)</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//   .finally(function()&#123;</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//     console.log('finished')</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">//   &#125;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// --------------------------</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// 两种写法是等效的</span></span></span><br><span class="line">  foo()</span><br><span class="line"><span class="hljs-javascript">    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line">      # 得到异步任务正确的结果</span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line">      # 获取异常信息</span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    # 成功与否都会执行（不是正式标准） </span><br><span class="line"><span class="hljs-javascript">    .finally(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'finished'</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><ul><li><code>Promise.all</code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的状态由这三个promise实例决定</li></ul><h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><ul><li><code>Promise.race</code>方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</li></ul><p>​    </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">Promise</span>常用API-对象方法</span></span><br><span class="line">  */</span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// console.dir(Promise)</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryData</span>(<span class="hljs-params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="hljs-javascript">      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">if</span>(xhr.readyState != <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span>;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 处理正常的情况</span></span></span><br><span class="line">          resolve(xhr.responseText);</span><br><span class="line"><span class="hljs-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 处理异常情况</span></span></span><br><span class="line"><span class="hljs-javascript">          reject(<span class="hljs-string">'服务器错误'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="hljs-javascript">      xhr.open(<span class="hljs-string">'get'</span>, url);</span></span><br><span class="line"><span class="hljs-javascript">      xhr.send(<span class="hljs-literal">null</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">var</span> p1 = queryData(<span class="hljs-string">'http://localhost:3000/a1'</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">var</span> p2 = queryData(<span class="hljs-string">'http://localhost:3000/a2'</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">var</span> p3 = queryData(<span class="hljs-string">'http://localhost:3000/a3'</span>);</span></span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-built_in">Promise</span>.all([p1,p2,p3]).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span></span></span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">//["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">Promise</span>.race([p1,p2,p3]).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// 由于p1执行较快，Promise的then()将获得结果'P1'。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// "HELLO TOM"</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li>Fetch API是新的ajax解决方案 Fetch会返回Promise</li><li><strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</li><li>fetch(url, options).then(）</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">    Fetch API 基本用法</span><br><span class="line">    fetch(url).then()</span><br><span class="line"><span class="hljs-javascript">   第一个参数请求的路径   Fetch会返回<span class="hljs-built_in">Promise</span>   所以我们可以使用then 拿到请求成功的结果 </span></span><br><span class="line">  */</span><br><span class="line"><span class="hljs-javascript">  fetch(<span class="hljs-string">'http://localhost:3000/fdata'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">//   在这个then里面我们能拿到最终的数据  </span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(data);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API  中的 HTTP  请求"></a>fetch API  中的 HTTP  请求</h4><ul><li>fetch(url, options).then(）</li><li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul><li>默认的是 GET 请求</li><li>需要在 options 对象中 指定对应的 method       method:请求使用的方法 </li><li>post 和 普通 请求的时候 需要在options 中 设置  请求头 headers   和  body</li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">     /*</span><br><span class="line">           Fetch API 调用接口传递参数</span><br><span class="line">     */</span><br><span class="line">    #1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参 </span><br><span class="line"><span class="hljs-javascript">     fetch(<span class="hljs-string">'http://localhost:3000/books?id=123'</span>, &#123;</span></span><br><span class="line">         # get 请求可以省略不写 默认的是GET </span><br><span class="line"><span class="hljs-javascript">             method: <span class="hljs-string">'get'</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="hljs-javascript">         .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line">         # 它返回一个Promise实例对象，用于获取后台返回的数据</span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">         &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line">         # 在这个then里面我们能拿到最终的数据  </span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">   #1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关   </span><br><span class="line"><span class="hljs-javascript">     fetch(<span class="hljs-string">'http://localhost:3000/books/456'</span>, &#123;</span></span><br><span class="line">         # get 请求可以省略不写 默认的是GET </span><br><span class="line"><span class="hljs-javascript">             method: <span class="hljs-string">'get'</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="hljs-javascript">         .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">         &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #2.1  DELETE请求方式参数传递      删除id  是  id=789</span><br><span class="line"><span class="hljs-javascript">     fetch(<span class="hljs-string">'http://localhost:3000/books/789'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">             method: <span class="hljs-string">'delete'</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="hljs-javascript">         .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">         &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #3 POST请求传参</span><br><span class="line"><span class="hljs-javascript">     fetch(<span class="hljs-string">'http://localhost:3000/books'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">             method: <span class="hljs-string">'post'</span>,</span></span><br><span class="line">         # 3.1  传递数据 </span><br><span class="line"><span class="hljs-javascript">             body: <span class="hljs-string">'uname=lisi&amp;pwd=123'</span>,</span></span><br><span class="line">         #  3.2  设置请求头 </span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="hljs-javascript">                 <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="hljs-javascript">         .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">         &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    # POST请求传参</span><br><span class="line"><span class="hljs-javascript">     fetch(<span class="hljs-string">'http://localhost:3000/books'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">             method: <span class="hljs-string">'post'</span>,</span></span><br><span class="line"><span class="hljs-javascript">             body: <span class="hljs-built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="hljs-javascript">                 uname: <span class="hljs-string">'张三'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                 pwd: <span class="hljs-string">'456'</span></span></span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="hljs-javascript">                 <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/json'</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="hljs-javascript">         .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">         &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     # PUT请求传参     修改id 是 123 的 </span><br><span class="line"><span class="hljs-javascript">     fetch(<span class="hljs-string">'http://localhost:3000/books/123'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">             method: <span class="hljs-string">'put'</span>,</span></span><br><span class="line"><span class="hljs-javascript">             body: <span class="hljs-built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="hljs-javascript">                 uname: <span class="hljs-string">'张三'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                 pwd: <span class="hljs-string">'789'</span></span></span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="hljs-javascript">                 <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/json'</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="hljs-javascript">         .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> data.text();</span></span><br><span class="line"><span class="hljs-javascript">         &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h4><ul><li>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如<code>JSON</code>，<code>BLOB</code>或者<code>TEXT</code>等等</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  Fetch响应结果的数据格式</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">fetch(<span class="hljs-string">'http://localhost:3000/json'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">// return data.json();   //  将获取到的数据使用 json 转换对象</span></span><br><span class="line">  <span class="hljs-keyword">return</span> data.text(); <span class="hljs-comment">//  //  将获取到的数据 转换成字符串 </span></span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">// console.log(data.uname)</span></span><br><span class="line">  <span class="hljs-comment">// console.log(typeof data)</span></span><br><span class="line">  <span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(data);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(obj.uname,obj.age,obj.gender)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>基于promise用于浏览器和node.js的http客户端</li><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>自动转换JSON数据</li><li>能转换请求和响应数据</li></ul><h4 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h4><ul><li>get和 delete请求传递参数<ul><li>通过传统的url  以 ? 的形式传递参数</li><li>restful 形式传递参数 </li><li>通过params  形式传递参数 </li></ul></li><li>post  和 put  请求传递参数<ul><li>通过选项传递参数</li><li>通过 URLSearchParams  传递参数 </li></ul></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">   # 1. 发送get 请求 </span><br><span class="line">axios.get(<span class="hljs-string">'http://localhost:3000/adata'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123; </span><br><span class="line">     #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面</span><br><span class="line">     <span class="hljs-comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span></span><br><span class="line">     <span class="hljs-comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret)</span><br><span class="line">   &#125;)</span><br><span class="line"># 2.  get 请求传递参数</span><br><span class="line">   # 2.1  通过传统的url  以 ? 的形式传递参数</span><br><span class="line">axios.get(<span class="hljs-string">'http://localhost:3000/axios?id=123'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line">   # 2.2  restful 形式传递参数 </span><br><span class="line">   axios.get(<span class="hljs-string">'http://localhost:3000/axios/123'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"># 2.3  通过params  形式传递参数 </span><br><span class="line">   axios.get(<span class="hljs-string">'http://localhost:3000/axios'</span>, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">       id: <span class="hljs-number">789</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line">#3 axios delete 请求传参     传参的形式和 get 请求一样</span><br><span class="line">   axios.delete(<span class="hljs-string">'http://localhost:3000/axios'</span>, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">       id: <span class="hljs-number">111</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"># 4  axios 的 post 请求</span><br><span class="line">   # 4.1  通过选项传递参数</span><br><span class="line">   axios.post(<span class="hljs-string">'http://localhost:3000/axios'</span>, &#123;</span><br><span class="line">     uname: <span class="hljs-string">'lisi'</span>,</span><br><span class="line">     pwd: <span class="hljs-number">123</span></span><br><span class="line">   &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"># 4.2  通过 URLSearchParams  传递参数 </span><br><span class="line">   <span class="hljs-keyword">var</span> params = <span class="hljs-keyword">new</span> URLSearchParams();</span><br><span class="line">   params.append(<span class="hljs-string">'uname'</span>, <span class="hljs-string">'zhangsan'</span>);</span><br><span class="line">   params.append(<span class="hljs-string">'pwd'</span>, <span class="hljs-string">'111'</span>);</span><br><span class="line">   axios.post(<span class="hljs-string">'http://localhost:3000/axios'</span>, params).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#5  axios put 请求传参   和 post 请求一样 </span><br><span class="line">   axios.put(<span class="hljs-string">'http://localhost:3000/axios/123'</span>, &#123;</span><br><span class="line">     uname: <span class="hljs-string">'lisi'</span>,</span><br><span class="line">     pwd: <span class="hljs-number">123</span></span><br><span class="line">   &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  配置公共的请求头 </span><br><span class="line">axios.defaults.baseURL = <span class="hljs-string">'https://api.example.com'</span>;</span><br><span class="line">#  配置 超时时间</span><br><span class="line">axios.defaults.timeout = <span class="hljs-number">2500</span>;</span><br><span class="line">#  配置公共的请求头</span><br><span class="line">axios.defaults.headers.common[<span class="hljs-string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line"># 配置公共的 post 的 Content-Type</span><br><span class="line">axios.defaults.headers.post[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure><h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul><li>请求拦截器<ul><li>请求拦截器的作用是在请求发送前进行一些操作<ul><li>例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易</li></ul></li></ul></li><li>响应拦截器<ul><li>响应拦截器的作用是在接收到响应后进行一些操作<ul><li>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</li></ul></li></ul></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 1. 请求拦截器 </span><br><span class="line">axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(config.url)</span><br><span class="line">     # 1.1  任何请求都会经过这一步   在发送请求之前做些什么   </span><br><span class="line">     config.headers.mytoken = <span class="hljs-string">'nihao'</span>;</span><br><span class="line">     # 1.2  这里一定要return   否则配置不成功  </span><br><span class="line">     <span class="hljs-keyword">return</span> config;</span><br><span class="line">   &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="line">      #1.3 对请求错误做点什么    </span><br><span class="line">     <span class="hljs-built_in">console</span>.log(err)</span><br><span class="line">   &#125;)</span><br><span class="line">#2. 响应拦截器 </span><br><span class="line">   axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;</span><br><span class="line">     #2.1  在接收响应做些什么  </span><br><span class="line">     <span class="hljs-keyword">var</span> data = res.data;</span><br><span class="line">     <span class="hljs-keyword">return</span> data;</span><br><span class="line">   &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="line">     #2.2 对响应错误做点什么  </span><br><span class="line">     <span class="hljs-built_in">console</span>.log(err)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async  和 await"></a>async  和 await</h3><ul><li>async作为一个关键字放到函数前面<ul><li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li></ul></li><li><code>await</code>关键字只能在使用<code>async</code>定义的函数中使用<ul><li>​    await后面可以直接跟一个 Promise实例对象</li><li>​     await函数不能单独使用</li></ul></li><li><strong>async/await 让异步代码看起来、表现起来更像同步代码</strong></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 1.  async 基础用法</span><br><span class="line">   # 1.1 async作为一个关键字放到函数前面</span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryData</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     # 1.2 await关键字只能在使用async定义的函数中使用      await后面可以直接跟一个 Promise实例对象</span><br><span class="line">     <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">       setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">         resolve(<span class="hljs-string">'nihao'</span>)</span><br><span class="line">       &#125;,<span class="hljs-number">1000</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="hljs-comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="hljs-keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br><span class="line"># 1.3 任何一个async函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span><br><span class="line">   queryData().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#2.  async    函数处理多个异步函数</span><br><span class="line">   axios.defaults.baseURL = <span class="hljs-string">'http://localhost:3000'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryData</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   </span><br><span class="line">     </span><br><span class="line">     <span class="hljs-keyword">var</span> info = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'async1'</span>);</span><br><span class="line">     #2.2  让异步代码看起来、表现起来更像同步代码</span><br><span class="line">     <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'async2?info='</span> + info.data);</span><br><span class="line">     <span class="hljs-keyword">return</span> ret.data;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   queryData().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="图书列表案例"><a href="#图书列表案例" class="headerlink" title="图书列表案例"></a>图书列表案例</h2><h3 id="基于接口案例-获取图书列表"><a href="#基于接口案例-获取图书列表" class="headerlink" title="基于接口案例-获取图书列表"></a>基于接口案例-获取图书列表</h3><ul><li>导入axios   用来发送ajax </li><li>把获取到的数据渲染到页面上 </li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grid"</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">               <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">                   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">               <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">               <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">                   <span class="hljs-comment">&lt;!-- 5.  把books  中的数据渲染到页面上   --&gt;</span></span><br><span class="line">                   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in books'</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.date &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">                           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">                           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">                       <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">               <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">1.  导入axios   </span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/axios.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">       /*</span><br><span class="line">            图书管理-添加图书</span><br><span class="line">        */</span><br><span class="line">       # 2   配置公共的url地址  简化后面的调用方式</span><br><span class="line"><span class="hljs-javascript">       axios.defaults.baseURL = <span class="hljs-string">'http://localhost:3000/'</span>;</span></span><br><span class="line"><span class="hljs-javascript">       axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">           <span class="hljs-keyword">return</span> res.data;</span></span><br><span class="line"><span class="hljs-javascript">       &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">           <span class="hljs-built_in">console</span>.log(error)</span></span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">           el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="hljs-javascript">               flag: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-javascript">               submitFlag: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-javascript">               id: <span class="hljs-string">''</span>,</span></span><br><span class="line"><span class="hljs-javascript">               name: <span class="hljs-string">''</span>,</span></span><br><span class="line">               books: []</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">               # 3 定义一个方法 用来发送 ajax </span><br><span class="line">               # 3.1  使用 async  来 让异步的代码  以同步的形式书写 </span><br><span class="line"><span class="hljs-javascript">               queryData: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                   <span class="hljs-comment">// 调用后台接口获取图书列表数据</span></span></span><br><span class="line"><span class="hljs-javascript">                   <span class="hljs-comment">// var ret = await axios.get('books');</span></span></span><br><span class="line"><span class="hljs-javascript">                   <span class="hljs-comment">// this.books = ret.data;</span></span></span><br><span class="line"># 3.2  发送ajax请求  把拿到的数据放在books 里面   </span><br><span class="line"><span class="hljs-javascript">                   <span class="hljs-keyword">this</span>.books = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'books'</span>);</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">           mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line">#  4 mounted  里面 DOM已经加载完毕  在这里调用函数  </span><br><span class="line"><span class="hljs-javascript">               <span class="hljs-keyword">this</span>.queryData();</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加图书"><a href="#添加图书" class="headerlink" title="添加图书"></a>添加图书</h3><ul><li>获取用户输入的数据   发送到后台</li><li>渲染最新的数据到页面上</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   handle: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">         <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.flag) &#123;</span><br><span class="line">           <span class="hljs-comment">// 编辑图书</span></span><br><span class="line">           <span class="hljs-comment">// 就是根据当前的ID去更新数组中对应的数据</span></span><br><span class="line">           <span class="hljs-keyword">this</span>.books.some(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="hljs-keyword">if</span>(item.id == <span class="hljs-keyword">this</span>.id) &#123;</span><br><span class="line">               item.name = <span class="hljs-keyword">this</span>.name;</span><br><span class="line">               <span class="hljs-comment">// 完成更新操作之后，需要终止循环</span></span><br><span class="line">               <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="hljs-keyword">this</span>.flag = <span class="hljs-literal">false</span>;</span><br><span class="line">         &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">           # 1.1  在前面封装好的 handle 方法中  发送ajax请求  </span><br><span class="line">           # 1.2  使用async  和 await 简化操作 需要在 function 前面添加 async   </span><br><span class="line">           <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">'books'</span>, &#123;</span><br><span class="line">             name: <span class="hljs-keyword">this</span>.name</span><br><span class="line">           &#125;)</span><br><span class="line">           # 1.3  根据后台返回的状态码判断是否加载数据 </span><br><span class="line">           <span class="hljs-keyword">if</span>(ret.status == <span class="hljs-number">200</span>) &#123;</span><br><span class="line">            # 1.4  调用 queryData 这个方法  渲染最新的数据 </span><br><span class="line">             <span class="hljs-keyword">this</span>.queryData();</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-comment">// 清空表单</span></span><br><span class="line">         <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span><br><span class="line">         <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span><br><span class="line">       &#125;,        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证图书名称是否存在"><a href="#验证图书名称是否存在" class="headerlink" title="验证图书名称是否存在"></a>验证图书名称是否存在</h3><ul><li>添加图书之前发送请求验证图示是否已经存在</li><li>如果不存在 往后台里面添加图书名称<ul><li>图书存在与否只需要修改submitFlag的值即可</li></ul></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> watch: &#123;</span><br><span class="line">        name: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 验证图书名称是否已经存在</span></span><br><span class="line">          <span class="hljs-comment">// var flag = this.books.some(function(item)&#123;</span></span><br><span class="line">          <span class="hljs-comment">//   return item.name == val;</span></span><br><span class="line">          <span class="hljs-comment">// &#125;);</span></span><br><span class="line">          <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'/books/book/'</span> + <span class="hljs-keyword">this</span>.name);</span><br><span class="line">          <span class="hljs-keyword">if</span>(ret.status == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-comment">// 图书名称存在</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.submitFlag = <span class="hljs-literal">true</span>;</span><br><span class="line">          &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 图书名称不存在</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.submitFlag = <span class="hljs-literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="编辑图书"><a href="#编辑图书" class="headerlink" title="编辑图书"></a>编辑图书</h3><ul><li>根据当前书的id 查询需要编辑的书籍</li><li>需要根据状态位判断是添加还是编辑 </li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">       handle: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">         <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.flag) &#123;</span><br><span class="line">           #4.3 编辑图书   把用户输入的信息提交到后台</span><br><span class="line">           <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.put(<span class="hljs-string">'books/'</span> + <span class="hljs-keyword">this</span>.id, &#123;</span><br><span class="line">             name: <span class="hljs-keyword">this</span>.name</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="hljs-keyword">if</span>(ret.status == <span class="hljs-number">200</span>)&#123;</span><br><span class="line">             #4.4  完成添加后 重新加载列表数据</span><br><span class="line">             <span class="hljs-keyword">this</span>.queryData();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="hljs-keyword">this</span>.flag = <span class="hljs-literal">false</span>;</span><br><span class="line">         &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">           <span class="hljs-comment">// 添加图书</span></span><br><span class="line">           <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">'books'</span>, &#123;</span><br><span class="line">             name: <span class="hljs-keyword">this</span>.name</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="hljs-keyword">if</span>(ret.status == <span class="hljs-number">200</span>) &#123;</span><br><span class="line">             <span class="hljs-comment">// 重新加载列表数据</span></span><br><span class="line">             <span class="hljs-keyword">this</span>.queryData();</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-comment">// 清空表单</span></span><br><span class="line">         <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span><br><span class="line">         <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span><br><span class="line">       &#125;,</span><br><span class="line">       toEdit: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span><br><span class="line">         #4.1  flag状态位用于区分编辑和添加操作</span><br><span class="line">         <span class="hljs-keyword">this</span>.flag = <span class="hljs-literal">true</span>;</span><br><span class="line">         #4.2  根据id查询出对应的图书信息  页面中可以加载出来最新的信息</span><br><span class="line">         # 调用接口发送ajax 请求  </span><br><span class="line">         <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'books/'</span> + id);</span><br><span class="line">         <span class="hljs-keyword">this</span>.id = ret.id;</span><br><span class="line">         <span class="hljs-keyword">this</span>.name = ret.name;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><h3 id="删除图书"><a href="#删除图书" class="headerlink" title="删除图书"></a>删除图书</h3><ul><li>把需要删除的id书籍 通过参数的形式传递到后台</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deleteBook: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span><br><span class="line">       <span class="hljs-comment">// 删除图书</span></span><br><span class="line">       <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.delete(<span class="hljs-string">'books/'</span> + id);</span><br><span class="line">       <span class="hljs-keyword">if</span>(ret.status == <span class="hljs-number">200</span>) &#123;</span><br><span class="line">         <span class="hljs-comment">// 重新加载列表数据</span></span><br><span class="line">         <span class="hljs-keyword">this</span>.queryData();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第05阶段.Vue.js项目实战开发.Vue接口调用方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;接口调用方式&quot;&gt;&lt;a href=&quot;#接口调用方式&quot; class=&quot;headerlink&quot; title=&quot;接口调用方式&quot;&gt;&lt;/a&gt;接口调用方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原生ajax&lt;/li&gt;
&lt;li&gt;基于jQuery的ajax&lt;/li&gt;
&lt;li&gt;fetch&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://www.itfool.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/vue-day03/"/>
    <id>http://www.itfool.cn/前端笔记/vue-day03/</id>
    <published>2020-05-26T06:50:17.000Z</published>
    <updated>2020-05-26T06:54:22.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第05阶段.Vue.js项目实战开发.Vue组件</p></blockquote><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>组件 (Component) 是 Vue.js 最强大的功能之一</li><li>组件可以扩展 HTML 元素，封装可重用的代</li></ul><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><ul><li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li><li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li></ul><a id="more"></a><h5 id="组件基础用"><a href="#组件基础用" class="headerlink" title="组件基础用"></a>组件基础用</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"example"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;</span>  </span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">//   注册组件 </span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// 1、 my-component 就是组件中自定义的标签名</span></span></span><br><span class="line"><span class="hljs-javascript">Vue.component(<span class="hljs-string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="hljs-xml">      template: '<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>A custom component!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// 创建根实例</span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#example'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h5><ul><li>组件参数的data值必须是函数同时这个函数要求返回一个对象 </li><li>组件模板必须是单个根元素</li><li>组件模板的内容可以是模板字符串</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">     <span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">4、  组件可以重复使用多次 </span></span><br><span class="line"><span class="hljs-comment">      因为data中返回的是一个对象所以每个组件中的数据是私有的</span></span><br><span class="line"><span class="hljs-comment">  即每个实例可以维护一份被返回对象的独立的拷贝   </span></span><br><span class="line"><span class="hljs-comment">--&gt;</span> </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="hljs-comment">&lt;!-- 8、必须使用短横线的方式使用组件 --&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">hello-world</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span></span></span><br><span class="line"><span class="hljs-javascript">     Vue.component(<span class="hljs-string">'HelloWorld'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">      data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          msg: <span class="hljs-string">'HelloWorld'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="hljs-xml">      template: '<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="hljs-javascript">    Vue.component(<span class="hljs-string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 1、组件参数的data值必须是函数 </span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 同时这个函数要求返回一个对象  </span></span></span><br><span class="line"><span class="hljs-javascript">      data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line">          count: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">//  2、组件模板必须是单个根元素</span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">//  3、组件模板的内容可以是模板字符串  </span></span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handle"</span>&gt;</span>点击了&#123;&#123;count&#125;&#125;次<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>测试123<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">#  6 在字符串模板中可以使用驼峰的方式使用组件</span><br><span class="line"><span class="hljs-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="hljs-javascript">        handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.count += <span class="hljs-number">2</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><ul><li>只能在当前注册它的vue实例中使用</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="hljs-xml">      template: '<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>A custom component!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">//局部注册组件  </span></span></span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'my-component'</span>: Child</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ul><li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li><li>然后子组件用属性props接收</li><li>在props中使用驼峰形式，模板中需要使用短横线的形式字符串形式的模板中没有这个限制</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">title</span>=<span class="hljs-string">'来自父组件的值'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br><span class="line">   <span class="hljs-comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span></span><br><span class="line"><span class="hljs-comment">  传的值可以是数字、对象、数组等等</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">'ptitle'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">'hello'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'menu-item'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'title'</span>, <span class="hljs-string">'content'</span>],</span></span><br><span class="line"><span class="hljs-javascript">     data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">         msg: <span class="hljs-string">'子组件本身的数据'</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="hljs-xml">     template: '<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg + "----" + title + "-----" + content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>'</span></span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="hljs-javascript">       pmsg: <span class="hljs-string">'父组件中内容'</span>,</span></span><br><span class="line"><span class="hljs-javascript">       ptitle: <span class="hljs-string">'动态绑定属性'</span></span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><ul><li>子组件用<code>$emit()</code>触发事件</li><li><code>$emit()</code>  第一个参数为 自定义的事件名称     第二个参数为需要传递的数据</li><li>父组件用v-on 监听子组件的事件</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">'&#123;fontSize: fontSize + "px"&#125;'</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span></span><br><span class="line"><span class="hljs-comment">这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:parr</span>=<span class="hljs-string">'parr'</span> @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">'handle($event)'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     子组件向父组件传值-携带参数</span><br><span class="line">   */</span><br><span class="line">   </span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'menu-item'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'parr'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'index'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item,index) in parr'</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line">###  1、子组件用$emit()触发事件</span><br><span class="line">### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'$emit("enlarge-text", 5)'</span>&gt;</span>扩大父组件中字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'$emit("enlarge-text", 10)'</span>&gt;</span>扩大父组件中字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="hljs-javascript">       pmsg: <span class="hljs-string">'父组件中内容'</span>,</span></span><br><span class="line"><span class="hljs-javascript">       parr: [<span class="hljs-string">'apple'</span>,<span class="hljs-string">'orange'</span>,<span class="hljs-string">'banana'</span>],</span></span><br><span class="line">       fontSize: 10</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 扩大字体大小</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.fontSize += val;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h3><ul><li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据   <ul><li>提供事件中心    var hub = new Vue()</li></ul></li><li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li><li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li><li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'handle'</span>&gt;</span>销毁事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test-tom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test-tom</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test-jerry</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test-jerry</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     兄弟组件之间数据传递</span><br><span class="line">   */</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-comment">//1、 提供事件中心</span></span></span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> hub = <span class="hljs-keyword">new</span> Vue();</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'test-tom'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">     data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line">         num: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TOM:&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'handle'</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span></span><br><span class="line"><span class="hljs-javascript">         hub.$emit(<span class="hljs-string">'jerry-event'</span>, <span class="hljs-number">2</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="hljs-javascript">     mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on(方法名</span></span></span><br><span class="line"><span class="hljs-javascript">       hub.$on(<span class="hljs-string">'tom-event'</span>, (val) =&gt; &#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.num += val;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'test-jerry'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">     data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line">         num: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>JERRY:&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'handle'</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span></span><br><span class="line"><span class="hljs-javascript">         hub.$emit(<span class="hljs-string">'tom-event'</span>, <span class="hljs-number">1</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="hljs-javascript">     mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on()方法名</span></span></span><br><span class="line"><span class="hljs-javascript">       hub.$on(<span class="hljs-string">'jerry-event'</span>, (val) =&gt; &#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.num += val;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line">       </span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//4、销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据  </span></span></span><br><span class="line"><span class="hljs-javascript">         hub.$off(<span class="hljs-string">'tom-event'</span>);</span></span><br><span class="line"><span class="hljs-javascript">         hub.$off(<span class="hljs-string">'jerry-event'</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><ul><li>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</li></ul><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span>  </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有bug发生<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有一个警告<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      组件插槽：父组件向子组件传递内容</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    Vue.component(<span class="hljs-string">'alert-box'</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>ERROR:<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"># 当组件渲染的时候，这个 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span> 元素将会被替换为“组件标签中嵌套的内容”。</span></span><br><span class="line"># 插槽内可以包含任何模板代码，包括 HTML</span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>具有名字的插槽 </li><li>使用 <slot> 中的 “name” 属性绑定元素</slot></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="line">       <span class="hljs-comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span></span><br><span class="line"><span class="hljs-comment">如果没有匹配到 则放到匿名的插槽中   --&gt;</span> </span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">'header'</span>&gt;</span>标题信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">'footer'</span>&gt;</span>底部信息信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="hljs-comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span>  </span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">'header'</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题信息1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题信息2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">'footer'</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部信息信息1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部信息信息2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      具名插槽</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    Vue.component(<span class="hljs-string">'base-layout'</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">###1、 使用 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span> 中的 "name" 属性绑定元素 指定当前插槽的名字</span></span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'header'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span></span><br><span class="line">###  注意点： </span><br><span class="line">###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'footer'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>父组件对子组件加工处理</li><li>既可以复用子组件的slot，又可以使slot内容不一致</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，</span></span><br><span class="line"><span class="hljs-comment">但样式希望不一样 这个时候我们需要使用作用域插槽 </span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">--&gt;</span>  </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">fruit-list</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span>&gt;</span></span><br><span class="line">       <span class="hljs-comment">&lt;!-- 2、 父组件中使用了&lt;template&gt;元素,而且包含scope="slotProps",</span></span><br><span class="line"><span class="hljs-comment">slotProps在这里只是临时变量   </span></span><br><span class="line"><span class="hljs-comment">---&gt;</span> </span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">'slotProps'</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">'slotProps.info.id==3'</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"current"</span>&gt;</span></span><br><span class="line">            &#123;&#123;slotProps.info.name&#125;&#125;         </span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">fruit-list</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      作用域插槽</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    Vue.component(<span class="hljs-string">'fruit-list'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">          &lt;li :key=<span class="hljs-string">'item.id'</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">'item in list'</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">###  3、 在子组件模板中,<span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>元素上有一个类似props传递数据给组件的写法msg="xxx",</span></span><br><span class="line">###   插槽可以提供一个默认内容，如果如果父组件没有为这个插槽提供了内容，会显示默认的内容。</span><br><span class="line">如果父组件为这个插槽提供了内容，则默认的内容会被替换掉</span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:info</span>=<span class="hljs-string">'item'</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'apple'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'orange'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'banana'</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h2><h3 id="实现组件化布局"><a href="#实现组件化布局" class="headerlink" title="实现组件化布局"></a>实现组件化布局</h3><ul><li>把静态页面转换成组件化模式</li><li>把组件渲染到页面上</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">     <span class="hljs-comment">&lt;!-- 2、把组件渲染到页面上 --&gt;</span> </span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">my-cart</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cart</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   # 1、 把静态页面转换成组件化模式</span><br><span class="line">   # 1.1  标题组件 </span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartTitle = &#123;</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"title"</span>&gt;我的商品&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line">   # 1.2  商品列表组件 </span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartList = &#123;</span></span><br><span class="line">     #  注意点 ：  组件模板必须是单个根元素  </span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">         &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/a.jpg"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">             &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> /&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">         &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/b.jpg"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">             &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> /&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">         &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/c.jpg"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">             &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> /&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">         &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/d.jpg"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">             &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> /&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">         &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/e.jpg"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">             &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> /&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line">   # 1.3  商品结算组件 </span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartTotal = &#123;</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"total"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总价：123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line">   ## 1.4  定义一个全局组件 my-cart</span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'my-cart'</span>,&#123;</span></span><br><span class="line">     ##  1.6 引入子组件  </span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">'cart'</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-list</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-total</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-total</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     # 1.5  注册子组件   </span><br><span class="line">     components: &#123;</span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-total'</span>: CartTotal</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现标题和结算功能组件"><a href="#实现标题和结算功能组件" class="headerlink" title="实现标题和结算功能组件"></a>实现标题和结算功能组件</h3><ul><li>标题组件实现动态渲染<ul><li>从父组件把标题数据传递过来 即 父向子组件传值</li><li>把传递过来的数据渲染到页面上  </li></ul></li><li>结算功能组件<ul><li>从父组件把商品列表list 数据传递过来 即 父向子组件传值</li><li>把传递过来的数据计算最终价格渲染到页面上  </li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">my-cart</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cart</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    # 2.2  标题组件     子组件通过props形式接收父组件传递过来的uname数据</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'uname'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"title"</span>&gt;&#123;&#123;uname&#125;&#125;的商品&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line"># 2.3  商品结算组件  子组件通过props形式接收父组件传递过来的list数据   </span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"total"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总价：&#123;&#123;total&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     computed: &#123;</span><br><span class="line">       # 2.4    计算商品的总价  并渲染到页面上 </span><br><span class="line"><span class="hljs-javascript">       total: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.list.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">           t += item.price * item.num;</span><br><span class="line">         &#125;);</span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">return</span> t;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="hljs-javascript">     data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">         uname: <span class="hljs-string">'张三'</span>,</span></span><br><span class="line">         list: [&#123;</span><br><span class="line">           id: 1,</span><br><span class="line"><span class="hljs-javascript">           name: <span class="hljs-string">'TCL彩电'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="hljs-javascript">           img: <span class="hljs-string">'img/a.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 2,</span><br><span class="line"><span class="hljs-javascript">           name: <span class="hljs-string">'机顶盒'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="hljs-javascript">           img: <span class="hljs-string">'img/b.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 3,</span><br><span class="line"><span class="hljs-javascript">           name: <span class="hljs-string">'海尔冰箱'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="hljs-javascript">           img: <span class="hljs-string">'img/c.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 4,</span><br><span class="line"><span class="hljs-javascript">           name: <span class="hljs-string">'小米手机'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="hljs-javascript">           img: <span class="hljs-string">'img/d.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 5,</span><br><span class="line"><span class="hljs-javascript">           name: <span class="hljs-string">'PPTV电视'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 2,</span><br><span class="line"><span class="hljs-javascript">           img: <span class="hljs-string">'img/e.jpg'</span></span></span><br><span class="line">         &#125;]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     #  2.1  父组件向子组件以属性传递的形式 传递数据</span><br><span class="line">     #   向 标题组件传递 uname 属性   向 商品结算组件传递 list  属性  </span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">'cart'</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-title</span> <span class="hljs-attr">:uname</span>=<span class="hljs-string">'uname'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-list</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-total</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-total</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     components: &#123;</span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-total'</span>: CartTotal</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现列表组件删除功能"><a href="#实现列表组件删除功能" class="headerlink" title="实现列表组件删除功能"></a>实现列表组件删除功能</h3><ul><li>从父组件把商品列表list 数据传递过来 即 父向子组件传值</li><li>把传递过来的数据渲染到页面上    </li><li>点击删除按钮的时候删除对应的数据 <ul><li>给按钮添加点击事件把需要删除的id传递过来  <ul><li>子组件中不推荐操作父组件的数据有可能多个子组件使用父组件的数据  我们需要把数据传递给父组件让父组件操作数据 </li><li>父组件删除对应的数据</li></ul></li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">my-cart</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cart</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'uname'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-javascript">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"title"</span>&gt;&#123;&#123;uname&#125;&#125;的商品&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;</span><br><span class="line">    #  3.2 把列表数据动态渲染到页面上  </span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> CartList = &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">          &lt;div :key=<span class="hljs-string">'item.id'</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">'item in list'</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item.img"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">              &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> /&gt;</span></span><br><span class="line"><span class="hljs-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"># 3.3  给按钮添加点击事件把需要删除的id传递过来</span><br><span class="line"><span class="hljs-javascript">            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span> @click=<span class="hljs-string">'del(item.id)'</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="hljs-javascript">        del: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line">           # 3.4 子组件中不推荐操作父组件的数据有可能多个子组件使用父组件的数据 </span><br><span class="line">          #   我们需要把数据传递给父组件 让父组件操作数据 </span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'cart-del'</span>, id);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-javascript">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"total"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总价：&#123;&#123;total&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="hljs-javascript">        total: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.list.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            t += item.price * item.num;</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">return</span> t;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-javascript">    Vue.component(<span class="hljs-string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="hljs-javascript">      data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          uname: <span class="hljs-string">'张三'</span>,</span></span><br><span class="line">          list: [&#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'TCL彩电'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/a.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'机顶盒'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/b.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'海尔冰箱'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/c.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 4,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'小米手机'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/d.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 5,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'PPTV电视'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 2,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/e.jpg'</span></span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      # 3.1 从父组件把商品列表list 数据传递过来 即 父向子组件传值  </span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-javascript">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">'cart'</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cart-title</span> <span class="hljs-attr">:uname</span>=<span class="hljs-string">'uname'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-title</span>&gt;</span></span></span><br><span class="line">  #  3.5  父组件通过事件绑定 接收子组件传递过来的数据 </span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cart-list</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span> @<span class="hljs-attr">cart-del</span>=<span class="hljs-string">'delCart($event)'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-list</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cart-total</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-total</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'cart-total'</span>: CartTotal</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        # 3.6    根据id删除list中对应的数据        </span><br><span class="line"><span class="hljs-javascript">        delCart: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 1、找到id所对应数据的索引</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.list.findIndex(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">return</span> item.id == id;</span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 2、根据索引删除对应数据</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.list.splice(index, <span class="hljs-number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现组件更新数据功能-上"><a href="#实现组件更新数据功能-上" class="headerlink" title="实现组件更新数据功能  上"></a>实现组件更新数据功能  上</h3><ul><li>将输入框中的默认数据动态渲染出来</li><li>输入框失去焦点的时候 更改商品的数量 </li><li>子组件中不推荐操作数据 把这些数据传递给父组件 让父组件处理这些数据</li><li>父组件中接收子组件传递过来的数据并处理 </li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">my-cart</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cart</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'uname'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"title"</span>&gt;&#123;&#123;uname&#125;&#125;的商品&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartList = &#123;</span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">         &lt;div :key=<span class="hljs-string">'item.id'</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">'item in list'</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item.img"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"># 1. 将输入框中的默认数据动态渲染出来</span><br><span class="line"># 2. 输入框失去焦点的时候 更改商品的数量  需要将当前商品的id 传递过来</span><br><span class="line"><span class="hljs-javascript">             &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> :value=<span class="hljs-string">'item.num'</span> @blur=<span class="hljs-string">'changeNum(item.id, $event)'</span>/&gt;</span></span><br><span class="line"><span class="hljs-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span> @click=<span class="hljs-string">'del(item.id)'</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       changeNum: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id, event</span>)</span>&#123;</span></span><br><span class="line">         # 3 子组件中不推荐操作数据  因为别的组件可能也引用了这些数据</span><br><span class="line">         #  把这些数据传递给父组件 让父组件处理这些数据</span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'change-num'</span>, &#123;</span></span><br><span class="line">           id: id,</span><br><span class="line">           num: event.target.value</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;,</span><br><span class="line"><span class="hljs-javascript">       del: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 把id传递给父组件</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'cart-del'</span>, id);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="hljs-javascript">     props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"total"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总价：&#123;&#123;total&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     computed: &#123;</span><br><span class="line"><span class="hljs-javascript">       total: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.list.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">           t += item.price * item.num;</span><br><span class="line">         &#125;);</span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">return</span> t;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="hljs-javascript">   Vue.component(<span class="hljs-string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="hljs-javascript">     data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">         uname: <span class="hljs-string">'张三'</span>,</span></span><br><span class="line">         list: [&#123;</span><br><span class="line">           id: 1,</span><br><span class="line"><span class="hljs-javascript">           name: <span class="hljs-string">'TCL彩电'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="hljs-javascript">           img: <span class="hljs-string">'img/a.jpg'</span></span></span><br><span class="line">         &#125;]</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="hljs-javascript">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">'cart'</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-title</span> <span class="hljs-attr">:uname</span>=<span class="hljs-string">'uname'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-title</span>&gt;</span></span></span><br><span class="line"># 4  父组件中接收子组件传递过来的数据 </span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-list</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span> @<span class="hljs-attr">change-num</span>=<span class="hljs-string">'changeNum($event)'</span> @<span class="hljs-attr">cart-del</span>=<span class="hljs-string">'delCart($event)'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-list</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">cart-total</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-total</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">     `,</span><br><span class="line">     components: &#123;</span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-string">'cart-total'</span>: CartTotal</span></span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       changeNum: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//4.1 根据子组件传递过来的数据，跟新list中对应的数据</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.list.some(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">           <span class="hljs-keyword">if</span>(item.id == val.id) &#123;</span></span><br><span class="line">             item.num = val.num;</span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-comment">// 终止遍历</span></span></span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;,</span><br><span class="line"><span class="hljs-javascript">       delCart: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 根据id删除list中对应的数据</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 1、找到id所对应数据的索引</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.list.findIndex(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">           <span class="hljs-keyword">return</span> item.id == id;</span></span><br><span class="line">         &#125;);</span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 2、根据索引删除对应数据</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.list.splice(index, <span class="hljs-number">1</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现组件更新数据功能-下"><a href="#实现组件更新数据功能-下" class="headerlink" title="实现组件更新数据功能  下"></a>实现组件更新数据功能  下</h3><ul><li>子组件通过一个标识符来标记对用的用户点击  + - 或者输入框输入的内容</li><li>父组件拿到标识符更新对应的组件</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.cart</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.title</span> &#123;</span></span><br><span class="line">      background-color: lightblue;</span><br><span class="line">      height: 40px;</span><br><span class="line">      line-height: 40px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="hljs-css">      <span class="hljs-comment">/*color: #fff;*/</span>  </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.total</span> &#123;</span></span><br><span class="line"><span class="hljs-css">      <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#FFCE46</span>;</span></span><br><span class="line">      height: 50px;</span><br><span class="line">      line-height: 50px;</span><br><span class="line">      text-align: right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.total</span> <span class="hljs-selector-tag">button</span> &#123;</span></span><br><span class="line">      margin: 0 10px;</span><br><span class="line"><span class="hljs-css">      <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#DC4C40</span>;</span></span><br><span class="line">      height: 35px;</span><br><span class="line">      width: 80px;</span><br><span class="line">      border: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.total</span> <span class="hljs-selector-tag">span</span> &#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> &#123;</span></span><br><span class="line">      height: 55px;</span><br><span class="line">      line-height: 55px;</span><br><span class="line">      position: relative;</span><br><span class="line"><span class="hljs-css">      <span class="hljs-selector-tag">border-top</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ADD8E6</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-tag">img</span> &#123;</span></span><br><span class="line">      width: 45px;</span><br><span class="line">      height: 45px;</span><br><span class="line">      margin: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.name</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 90px;</span><br><span class="line">      top: 0;left: 55px;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.change</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.change</span> <span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="line">      font-size: 20px;</span><br><span class="line">      width: 30px;</span><br><span class="line"><span class="hljs-css">      <span class="hljs-selector-tag">text-decoration</span><span class="hljs-selector-pseudo">:none</span>;</span></span><br><span class="line">      background-color: lightgray;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.change</span> <span class="hljs-selector-class">.num</span> &#123;</span></span><br><span class="line">      width: 40px;</span><br><span class="line">      height: 25px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.del</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 0px;</span><br><span class="line">      width: 40px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-size: 40px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.del</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">my-cart</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cart</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'uname'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-javascript">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"title"</span>&gt;&#123;&#123;uname&#125;&#125;的商品&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> CartList = &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">          &lt;div :key=<span class="hljs-string">'item.id'</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">'item in list'</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"item"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item.img"</span>/&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"name"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"change"</span>&gt;</span></span><br><span class="line">  # 1.  + - 按钮绑定事件 </span><br><span class="line"><span class="hljs-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'sub(item.id)'</span>&gt;</span>－<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">              &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"num"</span> :value=<span class="hljs-string">'item.num'</span> @blur=<span class="hljs-string">'changeNum(item.id, $event)'</span>/&gt;</span></span><br><span class="line"><span class="hljs-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'add(item.id)'</span>&gt;</span>＋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"del"</span> @click=<span class="hljs-string">'del(item.id)'</span>&gt;×&lt;<span class="hljs-regexp">/div&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="hljs-javascript">        changeNum: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id, event</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'change-num'</span>, &#123;</span></span><br><span class="line">            id: id,</span><br><span class="line"><span class="hljs-javascript">            type: <span class="hljs-string">'change'</span>,</span></span><br><span class="line">            num: event.target.value</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="hljs-javascript">        sub: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line">          # 2 数量的增加和减少通过父组件来计算   每次都是加1 和 减1 不需要传递数量   父组件需要一个类型来判断 是 加一 还是减1  以及是输入框输入的数据  我们通过type 标识符来标记 不同的操作   </span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'change-num'</span>, &#123;</span></span><br><span class="line">            id: id,</span><br><span class="line"><span class="hljs-javascript">            type: <span class="hljs-string">'sub'</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="hljs-javascript">        add: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line">         # 2 数量的增加和减少通过父组件来计算   每次都是加1 和 减1 不需要传递数量   父组件需要一个类型来判断 是 加一 还是减1  以及是输入框输入的数据  我们通过type 标识符来标记 不同的操作</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'change-num'</span>, &#123;</span></span><br><span class="line">            id: id,</span><br><span class="line"><span class="hljs-javascript">            type: <span class="hljs-string">'add'</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="hljs-javascript">        del: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 把id传递给父组件</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'cart-del'</span>, id);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="hljs-javascript">      props: [<span class="hljs-string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-javascript">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"total"</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总价：&#123;&#123;total&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="hljs-javascript">        total: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.list.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            t += item.price * item.num;</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">return</span> t;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-javascript">    Vue.component(<span class="hljs-string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="hljs-javascript">      data: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          uname: <span class="hljs-string">'张三'</span>,</span></span><br><span class="line">          list: [&#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'TCL彩电'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/a.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'机顶盒'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/b.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'海尔冰箱'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/c.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 4,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'小米手机'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/d.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 5,</span><br><span class="line"><span class="hljs-javascript">            name: <span class="hljs-string">'PPTV电视'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 2,</span><br><span class="line"><span class="hljs-javascript">            img: <span class="hljs-string">'img/e.jpg'</span></span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: `</span><br><span class="line"><span class="hljs-javascript">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">'cart'</span>&gt;</span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cart-title</span> <span class="hljs-attr">:uname</span>=<span class="hljs-string">'uname'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-title</span>&gt;</span></span></span><br><span class="line"># 3 父组件通过事件监听   接收子组件的数据  </span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cart-list</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span> @<span class="hljs-attr">change-num</span>=<span class="hljs-string">'changeNum($event)'</span> @<span class="hljs-attr">cart-del</span>=<span class="hljs-string">'delCart($event)'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-list</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cart-total</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">'list'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-total</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      `,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-string">'cart-total'</span>: CartTotal</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="hljs-javascript">        changeNum: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span></span><br><span class="line">          #4 分为三种情况：输入框变更、加号变更、减号变更</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">if</span>(val.type==<span class="hljs-string">'change'</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">// 根据子组件传递过来的数据，跟新list中对应的数据</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">this</span>.list.some(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-keyword">if</span>(item.id == val.id) &#123;</span></span><br><span class="line">                item.num = val.num;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 终止遍历</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="hljs-javascript">          &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val.type==<span class="hljs-string">'sub'</span>)&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">// 减一操作</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">this</span>.list.some(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-keyword">if</span>(item.id == val.id) &#123;</span></span><br><span class="line">                item.num -= 1;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 终止遍历</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="hljs-javascript">          &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val.type==<span class="hljs-string">'add'</span>)&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">// 加一操作</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">this</span>.list.some(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-keyword">if</span>(item.id == val.id) &#123;</span></span><br><span class="line">                item.num += 1;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 终止遍历</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第05阶段.Vue.js项目实战开发.Vue组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;组件 (Component) 是 Vue.js 最强大的功能之一&lt;/li&gt;
&lt;li&gt;组件可以扩展 HTML 元素，封装可重用的代&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;组件注册&quot;&gt;&lt;a href=&quot;#组件注册&quot; class=&quot;headerlink&quot; title=&quot;组件注册&quot;&gt;&lt;/a&gt;组件注册&lt;/h3&gt;&lt;h4 id=&quot;全局注册&quot;&gt;&lt;a href=&quot;#全局注册&quot; class=&quot;headerlink&quot; title=&quot;全局注册&quot;&gt;&lt;/a&gt;全局注册&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局组件&lt;/strong&gt;注册后，任何&lt;strong&gt;vue实例&lt;/strong&gt;都可以用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://www.itfool.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/vue-day02/"/>
    <id>http://www.itfool.cn/前端笔记/vue-day02/</id>
    <published>2020-05-26T06:10:47.000Z</published>
    <updated>2020-05-26T06:19:44.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第05阶段.Vue.js项目实战开发.Vue常用特性</p></blockquote><h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><h3 id="表单基本操作"><a href="#表单基本操作" class="headerlink" title="表单基本操作"></a>表单基本操作</h3><ul><li><p>获取单选框中的值</p><ul><li>通过v-model</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">1、 两个单选框需要同时通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="hljs-comment">        2、 每一个单选框必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="hljs-comment">3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">gender 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"male"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'gender'</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"male"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"female"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'gender'</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"female"</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="hljs-javascript">             <span class="hljs-comment">// 默认会让当前的 value 值为 2 的单选框选中</span></span></span><br><span class="line">                gender: 2,  </span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>获取复选框中的值</p><ul><li>通过v-model</li><li>和获取单选框中的值一样 </li><li>复选框 <code>checkbox</code> 这种的组合时   data 中的 hobby 我们要定义成数组 否则无法实现多选</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">1、 复选框需要同时通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="hljs-comment">        2、 每一个复选框必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="hljs-comment">3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">hobby 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ball"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'hobby'</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"ball"</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sing"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'hobby'</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sing"</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"code"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'hobby'</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"code"</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 默认会让当前的 value 值为 2 和 3 的复选框选中</span></span></span><br><span class="line"><span class="hljs-javascript">                hobby: [<span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>],</span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取下拉框和文本框中的值</p><ul><li>通过v-model</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>职业：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">       <span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">1、 需要给select  通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="hljs-comment">            2、 每一个option  必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="hljs-comment">    3、 当某一个option选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="hljs-comment">     occupation 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line">       <span class="hljs-comment">&lt;!-- multiple  多选 --&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'occupation'</span> <span class="hljs-attr">multiple</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span>请选择职业...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span>教师<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>&gt;</span>软件工程师<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3"</span>&gt;</span>律师<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">         <span class="hljs-comment">&lt;!-- textarea 是 一个双标签   不需要绑定value 属性的  --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'desc'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 默认会让当前的 value 值为 2 和 3 的下拉框选中</span></span></span><br><span class="line"><span class="hljs-javascript">                 occupation: [<span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>],</span></span><br><span class="line"><span class="hljs-javascript">              desc: <span class="hljs-string">'nihao'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><ul><li><p>.number  转换为数值</p><ul><li>注意点：    </li><li>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</li><li>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</li></ul></li><li><p>.trim  自动过滤用户输入的首尾空白字符</p><ul><li>只能去掉首尾的 不能去除中间的空格</li></ul></li><li><p>.lazy   将input事件切换成change事件</p><ul><li>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</li></ul></li><li><p>在失去焦点 或者 按下回车键时才更新</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 自动将用户的输入值转为数值类型 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">"age"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--自动过滤用户输入的首尾空白字符   --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>内置指令不能满足我们特殊的需求</li><li>Vue允许我们自定义指令</li></ul><h4 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive  注册全局指令"></a>Vue.directive  注册全局指令</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">  使用自定义的指令，只需在对用的元素中，加上'v-'的前缀形成类似于内部指令'v-if'，'v-text'的形式。 </span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 注意点： </span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">//   1、 在自定义指令中  如果以驼峰命名的方式定义 如  Vue.directive('focusA',function()&#123;&#125;) </span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">//   2、 在HTML中使用的时候 只能通过 v-focus-a 来使用 </span></span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 注册一个全局自定义指令 v-focus</span></span></span><br><span class="line"><span class="hljs-javascript">Vue.directive(<span class="hljs-string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span></span></span><br><span class="line"><span class="hljs-javascript">  inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-comment">// 聚焦元素</span></span></span><br><span class="line">    el.focus();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">　　el:<span class="hljs-string">'#app'</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue-directive-注册全局指令-带参数"><a href="#Vue-directive-注册全局指令-带参数" class="headerlink" title="Vue.directive  注册全局指令 带参数"></a>Vue.directive  注册全局指令 带参数</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">'msg'</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     自定义指令-带参数</span><br><span class="line">     bind - 只调用一次，在指令第一次绑定到元素上时候调用</span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"><span class="hljs-javascript">   Vue.directive(<span class="hljs-string">'color'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">// bind声明周期, 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</span></span></span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">// el 为当前自定义指令的DOM元素  </span></span></span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">// binding 为自定义的函数形参   通过自定义属性传递过来的值 存在 binding.value 里面</span></span></span><br><span class="line"><span class="hljs-javascript">     bind: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-comment">// 根据指令的参数设置背景色</span></span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-comment">// console.log(binding.value.color)</span></span></span><br><span class="line">       el.style.backgroundColor = binding.value.color;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line">       msg: &#123;</span><br><span class="line"><span class="hljs-javascript">         color: <span class="hljs-string">'blue'</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义指令局部指令"><a href="#自定义指令局部指令" class="headerlink" title="自定义指令局部指令"></a>自定义指令局部指令</h4><ul><li>局部指令，需要定义在  directives 的选项   用法和全局用法一样 </li><li>局部指令只能在当前组件里面使用</li><li>当全局指令和局部指令同名时以局部指令为准</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">'msg'</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-focus</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      自定义指令-局部指令</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line"><span class="hljs-javascript">          color: <span class="hljs-string">'red'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">//局部指令，需要定义在  directives 的选项</span></span></span><br><span class="line">      directives: &#123;</span><br><span class="line">        color: &#123;</span><br><span class="line"><span class="hljs-javascript">          bind: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding</span>)</span>&#123;</span></span><br><span class="line">            el.style.backgroundColor = binding.value.color;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        focus: &#123;</span><br><span class="line"><span class="hljs-javascript">          inserted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>) </span>&#123;</span></span><br><span class="line">            el.focus();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性   computed"></a>计算属性   computed</h3><ul><li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li><li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong></li><li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--  </span></span><br><span class="line"><span class="hljs-comment">       当多次调用 reverseString  的时候 </span></span><br><span class="line"><span class="hljs-comment">       只要里面的 num 值不改变 他会把第一次计算的结果直接返回</span></span><br><span class="line"><span class="hljs-comment">直到data 中的num值改变 计算属性才会重新发生计算</span></span><br><span class="line"><span class="hljs-comment">    --&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</span><br><span class="line">   */</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="hljs-javascript">       msg: <span class="hljs-string">'Nihao'</span>,</span></span><br><span class="line">       num: 100</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       reverseMessage: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'methods'</span>)</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.msg.split(<span class="hljs-string">''</span>).reverse().join(<span class="hljs-string">''</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="hljs-javascript">     <span class="hljs-comment">//computed  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line">     computed: &#123;</span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-comment">//  reverseString   这个是我们自己定义的名字 </span></span></span><br><span class="line"><span class="hljs-javascript">       reverseString: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'computed'</span>)</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//  当data 中的 num 的值改变的时候  reverseString  会自动发生计算  </span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-keyword">this</span>.num;i++)&#123;</span></span><br><span class="line">           total += i;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 这里一定要有return 否则 调用 reverseString 的 时候无法拿到结果    </span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">return</span> total;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器   watch"></a>侦听器   watch</h3><ul><li>使用watch来响应数据的变化</li><li>一般用于异步或者开销较大的操作</li><li>watch 中的属性 一定是data 中 已经存在的数据 </li><li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'firstName'</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>姓：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'lastName'</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">       /*</span><br><span class="line">             侦听器</span><br><span class="line">           */</span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">           el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="hljs-javascript">               firstName: <span class="hljs-string">'Jim'</span>,</span></span><br><span class="line"><span class="hljs-javascript">               lastName: <span class="hljs-string">'Green'</span>,</span></span><br><span class="line"><span class="hljs-javascript">               <span class="hljs-comment">// fullName: 'Jim Green'</span></span></span><br><span class="line">           &#125;,</span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">//watch  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line">           watch: &#123;</span><br><span class="line"><span class="hljs-javascript">               <span class="hljs-comment">//   注意：  这里firstName  对应着data 中的 firstName </span></span></span><br><span class="line"><span class="hljs-javascript">               <span class="hljs-comment">//   当 firstName 值 改变的时候  会自动触发 watch</span></span></span><br><span class="line"><span class="hljs-javascript">               firstName: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                   <span class="hljs-keyword">this</span>.fullName = val + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName;</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="hljs-javascript">               <span class="hljs-comment">//   注意：  这里 lastName 对应着data 中的 lastName </span></span></span><br><span class="line"><span class="hljs-javascript">               lastName: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                   <span class="hljs-keyword">this</span>.fullName = <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + val;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。</li><li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li><li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li><li>支持级联操作</li><li>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本</li><li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'msg'</span>&gt;</span></span><br><span class="line">      <span class="hljs-comment">&lt;!-- upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg | upper&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--  </span></span><br><span class="line"><span class="hljs-comment">      支持级联操作</span></span><br><span class="line"><span class="hljs-comment">      upper  被定义为接收单个参数的过滤器函数，表达式msg 的值将作为参数传入到函数中。</span></span><br><span class="line"><span class="hljs-comment">  然后继续调用同样被定义为接收单个参数的过滤器 lower ，将upper 的结果传递到lower中</span></span><br><span class="line"><span class="hljs-comment"> --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:abc</span>=<span class="hljs-string">'msg | upper'</span>&gt;</span>测试数据<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-comment">//  lower  为全局过滤器     </span></span></span><br><span class="line"><span class="hljs-javascript">   Vue.filter(<span class="hljs-string">'lower'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> val.charAt(<span class="hljs-number">0</span>).toLowerCase() + val.slice(<span class="hljs-number">1</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="hljs-javascript">        msg: <span class="hljs-string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-comment">//filters  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-comment">//  定义filters 中的过滤器为局部过滤器 </span></span></span><br><span class="line">      filters: &#123;</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//   upper  自定义的过滤器名字 </span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//    upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span></span></span><br><span class="line"><span class="hljs-javascript">        upper: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//  过滤器中一定要有返回值 这样外界使用过滤器的时候才能拿到结果</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">return</span> val.charAt(<span class="hljs-number">0</span>).toUpperCase() + val.slice(<span class="hljs-number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过滤器中传递参数"><a href="#过滤器中传递参数" class="headerlink" title="过滤器中传递参数"></a>过滤器中传递参数</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span></span><br><span class="line">      <span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">filterA 被定义为接收三个参数的过滤器函数。</span></span><br><span class="line"><span class="hljs-comment">其中 message 的值作为第一个参数，</span></span><br><span class="line"><span class="hljs-comment">普通字符串 'arg1' 作为第二个参数，表达式 arg2 的值作为第三个参数。</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line">      &#123;&#123; message | filterA('arg1', 'arg2') &#125;&#125;</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 第2个参数  a 对应 实参  arg1 字符串</span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 第3个参数  b 对应 实参  arg2 字符串</span></span></span><br><span class="line"><span class="hljs-javascript">      Vue.filter(<span class="hljs-string">'filterA'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n,a,b</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">10</span>)&#123;</span></span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-keyword">return</span> n+a;</span></span><br><span class="line"><span class="hljs-javascript">          &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-keyword">return</span> n+b;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">          el:<span class="hljs-string">"#box"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="hljs-javascript">              message: <span class="hljs-string">"哈哈哈"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>事物从出生到死亡的过程</li><li>Vue实例从创建 到销毁的过程 ，这些过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数</li></ul><p>####常用的 钩子函数</p><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后，数据观测和事件配置之前被调用 此时data 和 methods 以及页面的DOM结构都没有初始化   什么都做不了</th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用此时data 和 methods已经可以使用  但是页面还没有渲染出来</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用   此时页面上还看不到真实数据 只是一个模板页面而已</td></tr><tr><td>mounted</td><td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。  数据已经真实渲染到页面上  在这个钩子函数里面我们可以使用一些第三方的插件</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟DOM打补丁之前。   页面上数据还是旧的</td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用</td></tr><tr><td>destroyed</td><td>实例销毁后调用</td></tr></tbody></table><h3 id="数组变异方法"><a href="#数组变异方法" class="headerlink" title="数组变异方法"></a>数组变异方法</h3><ul><li>在 Vue 中，直接修改对象属性的值无法触发响应式。当你直接修改了对象属性的值，你会发现，只有数据改了，但是页面内容并没有改变</li><li>变异数组方法即保持数组方法原有功能不变的前提下对其进行功能拓展</li></ul><table><thead><tr><th><code>push()</code></th><th>往数组最后面添加一个元素，成功返回当前数组的长度</th></tr></thead><tbody><tr><td><code>pop()</code></td><td>删除数组的最后一个元素，成功返回删除元素的值</td></tr><tr><td><code>shift()</code></td><td>删除数组的第一个元素，成功返回删除元素的值</td></tr><tr><td><code>unshift()</code></td><td>往数组最前面添加一个元素，成功返回当前数组的长度</td></tr><tr><td><code>splice()</code></td><td>有三个参数，第一个是想要删除的元素的下标（必选），第二个是想要删除的个数（必选），第三个是删除 后想要在原位置替换的值</td></tr><tr><td><code>sort()</code></td><td>sort()  使数组按照字符编码默认从小到大排序,成功返回排序后的数组</td></tr><tr><td><code>reverse()</code></td><td>reverse()  将数组倒序，成功返回倒序后的数组</td></tr></tbody></table><h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><ul><li>不会改变原始数组，但总是返回一个新数组</li></ul><table><thead><tr><th>filter</th><th>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</th></tr></thead><tbody><tr><td>concat</td><td>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组</td></tr><tr><td>slice</td><td>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组</td></tr></tbody></table><h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><ul><li>Vue.set(a,b,c)    让 触发视图重新更新一遍，数据动态起来</li><li>a是要更改的数据 、   b是数据的第几项、   c是更改后的数据</li></ul><h3 id="图书列表案例"><a href="#图书列表案例" class="headerlink" title="图书列表案例"></a>图书列表案例</h3><ul><li>静态列表效果</li><li>基于数据实现模板效果</li><li>处理每行的操作按钮</li></ul><h4 id="提供的静态数据"><a href="#提供的静态数据" class="headerlink" title="提供的静态数据"></a>提供的静态数据</h4><ul><li>数据存放在vue 中 data 属性中</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       books: [&#123;</span><br><span class="line">         id: <span class="hljs-number">1</span>,</span><br><span class="line">         name: <span class="hljs-string">'三国演义'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="hljs-number">2</span>,</span><br><span class="line">         name: <span class="hljs-string">'水浒传'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="hljs-number">3</span>,</span><br><span class="line">         name: <span class="hljs-string">'红楼梦'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="hljs-number">4</span>,</span><br><span class="line">         name: <span class="hljs-string">'西游记'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;); <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       books: [&#123;</span><br><span class="line">         id: <span class="hljs-number">1</span>,</span><br><span class="line">         name: <span class="hljs-string">'三国演义'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="hljs-number">2</span>,</span><br><span class="line">         name: <span class="hljs-string">'水浒传'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="hljs-number">3</span>,</span><br><span class="line">         name: <span class="hljs-string">'红楼梦'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="hljs-number">4</span>,</span><br><span class="line">         name: <span class="hljs-string">'西游记'</span>,</span><br><span class="line">         date: <span class="hljs-string">''</span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h4 id="把提供好的数据渲染到页面上"><a href="#把提供好的数据渲染到页面上" class="headerlink" title="把提供好的数据渲染到页面上"></a>把提供好的数据渲染到页面上</h4><ul><li>利用 v-for循环 遍历 books 将每一项数据渲染到对应的数据中</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in books'</span>&gt;</span></span><br><span class="line">       <span class="hljs-comment">&lt;!-- 对应的id 渲染到页面上 --&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- 对应的name 渲染到页面上 --&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-comment">&lt;!-- 阻止 a 标签的默认跳转 --&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加图书"><a href="#添加图书" class="headerlink" title="添加图书"></a>添加图书</h4><ul><li>通过双向绑定获取到输入框中的输入内容 </li><li>给按钮添加点击事件 </li><li>把输入框中的数据存储到 data 中的 books  里面</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"book"</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"id"</span>&gt;</span></span><br><span class="line">           编号：</span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">          <span class="hljs-comment">&lt;!-- 3.1、通过双向绑定获取到输入框中的输入的 id  --&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'id'</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"name"</span>&gt;</span></span><br><span class="line">           名称：</span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">           <span class="hljs-comment">&lt;!-- 3.2、通过双向绑定获取到输入框中的输入的 name  --&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'name'</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- 3.3、给按钮添加点击事件  --&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'handle'</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      图书管理-添加图书</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="hljs-javascript">        id: <span class="hljs-string">''</span>,</span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">''</span>,</span></span><br><span class="line">        books: [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'三国演义'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          date: <span class="hljs-string">''</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'水浒传'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          date: <span class="hljs-string">''</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'红楼梦'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          date: <span class="hljs-string">''</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 4,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'西游记'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          date: <span class="hljs-string">''</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="hljs-javascript">        handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 3.4 定义一个新的对象book 存储 获取到输入框中 书 的id和名字 </span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">var</span> book = &#123;&#125;;</span></span><br><span class="line"><span class="hljs-javascript">          book.id = <span class="hljs-keyword">this</span>.id;</span></span><br><span class="line"><span class="hljs-javascript">          book.name = <span class="hljs-keyword">this</span>.name;</span></span><br><span class="line"><span class="hljs-javascript">          book.date = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 3.5 把book  通过数组的变异方法 push 放到    books 里面</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.books.push(book);</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">//3.6 清空输入框</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改图书-上"><a href="#修改图书-上" class="headerlink" title="修改图书-上"></a>修改图书-上</h4><ul><li>点击修改按钮的时候 获取到要修改的书籍名单<ul><li>给修改按钮添加点击事件，  需要把当前的图书的id 传递过去 这样才知道需要修改的是哪一本书籍</li></ul></li><li>把需要修改的书籍名单填充到表单里面<ul><li>根据传递过来的id 查出books 中 对应书籍的详细信息</li><li>把获取到的信息填充到表单</li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grid"</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"book"</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"id"</span>&gt;</span></span><br><span class="line">             编号：</span><br><span class="line">           <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'id'</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"flag"</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"name"</span>&gt;</span></span><br><span class="line">             名称：</span><br><span class="line">           <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'name'</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'handle'</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in books'</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">             <span class="hljs-comment">&lt;!--- </span></span><br><span class="line"><span class="hljs-comment">4.1  给修改按钮添加点击事件，  需要把当前的图书的id 传递过去 </span></span><br><span class="line"><span class="hljs-comment">这样才知道需要修改的是哪一本书籍</span></span><br><span class="line"><span class="hljs-comment"> ---&gt;</span>  </span><br><span class="line">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'toEdit(item.id)'</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">             <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     图书管理-添加图书</span><br><span class="line">   */</span><br><span class="line"><span class="hljs-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">     el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="hljs-javascript">       flag: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-javascript">       id: <span class="hljs-string">''</span>,</span></span><br><span class="line"><span class="hljs-javascript">       name: <span class="hljs-string">''</span>,</span></span><br><span class="line">       books: [&#123;</span><br><span class="line">         id: 1,</span><br><span class="line"><span class="hljs-javascript">         name: <span class="hljs-string">'三国演义'</span>,</span></span><br><span class="line"><span class="hljs-javascript">         date: <span class="hljs-string">''</span></span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: 2,</span><br><span class="line"><span class="hljs-javascript">         name: <span class="hljs-string">'水浒传'</span>,</span></span><br><span class="line"><span class="hljs-javascript">         date: <span class="hljs-string">''</span></span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: 3,</span><br><span class="line"><span class="hljs-javascript">         name: <span class="hljs-string">'红楼梦'</span>,</span></span><br><span class="line"><span class="hljs-javascript">         date: <span class="hljs-string">''</span></span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: 4,</span><br><span class="line"><span class="hljs-javascript">         name: <span class="hljs-string">'西游记'</span>,</span></span><br><span class="line"><span class="hljs-javascript">         date: <span class="hljs-string">''</span></span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="hljs-javascript">       handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// 3.4 定义一个新的对象book 存储 获取到输入框中 书 的id和名字 </span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">var</span> book = &#123;&#125;;</span></span><br><span class="line"><span class="hljs-javascript">         book.id = <span class="hljs-keyword">this</span>.id;</span></span><br><span class="line"><span class="hljs-javascript">         book.name = <span class="hljs-keyword">this</span>.name;</span></span><br><span class="line"><span class="hljs-javascript">         book.date = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 3.5 把book  通过数组的变异方法 push 放到    books 里面</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.books.push(book);</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//3.6 清空输入框</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span></span><br><span class="line">       &#125;,</span><br><span class="line"><span class="hljs-javascript">       toEdit: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-built_in">console</span>.log(id)</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//4.2  根据传递过来的id 查出books 中 对应书籍的详细信息</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">var</span> book = <span class="hljs-keyword">this</span>.books.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">           <span class="hljs-keyword">return</span> item.id == id;</span></span><br><span class="line">         &#125;);</span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-built_in">console</span>.log(book)</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">//4.3 把获取到的信息填充到表单</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-comment">// this.id   和  this.name 通过双向绑定 绑定到了表单中  一旦数据改变视图自动更新</span></span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.id = book[<span class="hljs-number">0</span>].id;</span></span><br><span class="line"><span class="hljs-javascript">         <span class="hljs-keyword">this</span>.name = book[<span class="hljs-number">0</span>].name;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改图书-下"><a href="#修改图书-下" class="headerlink" title="修改图书-下"></a>修改图书-下</h4><ul><li>定义一个标识符， 主要是控制 编辑状态下当前编辑书籍的id 不能被修改 即 处于编辑状态下 当前控制书籍编号的输入框禁用  </li><li>通过属性绑定给书籍编号的 绑定 disabled 的属性  flag 为 true 即为禁用</li><li>flag 默认值为false   处于编辑状态 要把 flag 改为true 即当前表单为禁用 </li><li>复用添加方法   用户点击提交的时候依然执行 handle 中的逻辑如果 flag为true 即 表单处于不可输入状态 此时执行的用户编辑数据数据</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grid"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"book"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"id"</span>&gt;</span></span><br><span class="line">              编号：</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">              <span class="hljs-comment">&lt;!-- 5.2 通过属性绑定 绑定 disabled 的属性  flag 为 true 即为禁用      --&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'id'</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"flag"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"name"</span>&gt;</span></span><br><span class="line">              名称：</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'name'</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'handle'</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in books'</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'toEdit(item.id)'</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">/*图书管理-添加图书*/</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">            el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 5.1  定义一个标识符， 主要是控制 编辑状态下当前编辑书籍的id 不能被修改 </span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 即 处于编辑状态下 当前控制书籍编号的输入框禁用 </span></span></span><br><span class="line"><span class="hljs-javascript">                flag: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-javascript">                id: <span class="hljs-string">''</span>,</span></span><br><span class="line"><span class="hljs-javascript">                name: <span class="hljs-string">''</span>,</span></span><br><span class="line">              </span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="hljs-javascript">                handle: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line">                   /*</span><br><span class="line">                     5.4  复用添加方法   用户点击提交的时候依然执行 handle 中的逻辑</span><br><span class="line"><span class="hljs-javascript">                  如果 flag为<span class="hljs-literal">true</span> 即 表单处于不可输入状态 此时执行的用户编辑数据数据</span></span><br><span class="line">                   */ </span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.flag) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-comment">// 编辑图书</span></span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-comment">// 5.5  根据当前的ID去更新数组中对应的数据  </span></span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">this</span>.books.some(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">                            <span class="hljs-keyword">if</span> (item.id == <span class="hljs-keyword">this</span>.id) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                                <span class="hljs-comment">// 箭头函数中 this 指向父级作用域的this </span></span></span><br><span class="line"><span class="hljs-javascript">                                item.name = <span class="hljs-keyword">this</span>.name;</span></span><br><span class="line"><span class="hljs-javascript">                                <span class="hljs-comment">// 完成更新操作之后，需要终止循环</span></span></span><br><span class="line"><span class="hljs-javascript">                                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-comment">// 5.6 编辑完数据后表单要处以可以输入的状态</span></span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">this</span>.flag = <span class="hljs-literal">false</span>;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-comment">//  5.7  如果 flag为false  表单处于输入状态 此时执行的用户添加数据    </span></span></span><br><span class="line"><span class="hljs-javascript">                    &#125; <span class="hljs-keyword">else</span> &#123; </span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">var</span> book = &#123;&#125;;</span></span><br><span class="line"><span class="hljs-javascript">                        book.id = <span class="hljs-keyword">this</span>.id;</span></span><br><span class="line"><span class="hljs-javascript">                        book.name = <span class="hljs-keyword">this</span>.name;</span></span><br><span class="line"><span class="hljs-javascript">                        book.date = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">this</span>.books.push(book);</span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-comment">// 清空表单</span></span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-comment">// 清空表单</span></span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="hljs-javascript">                toEdit: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) </span>&#123;</span></span><br><span class="line">                     /*</span><br><span class="line"><span class="hljs-javascript">                     <span class="hljs-number">5.3</span>  flag 默认值为<span class="hljs-literal">false</span>   处于编辑状态 要把 flag 改为<span class="hljs-literal">true</span> 即当前表单为禁  用 </span></span><br><span class="line">                     */ </span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">this</span>.flag = <span class="hljs-literal">true</span>;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-built_in">console</span>.log(id)</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">var</span> book = <span class="hljs-keyword">this</span>.books.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-keyword">return</span> item.id == id;</span></span><br><span class="line">                    &#125;);</span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-built_in">console</span>.log(book)</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">this</span>.id = book[<span class="hljs-number">0</span>].id;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">this</span>.name = book[<span class="hljs-number">0</span>].name;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="删除图书"><a href="#删除图书" class="headerlink" title="删除图书"></a>删除图书</h4><ul><li>给删除按钮添加事件 把当前需要删除的书籍id 传递过来</li><li>根据id从数组中查找元素的索引</li><li>根据索引删除数组元素</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in books'</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'toEdit(item.id)'</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">               <span class="hljs-comment">&lt;!--  6.1 给删除按钮添加事件 把当前需要删除的书籍id 传递过来  --&gt;</span> </span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'deleteBook(item.id)'</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      图书管理-添加图书</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="hljs-javascript">        deleteBook: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 删除图书</span></span></span><br><span class="line">          #// 6.2 根据id从数组中查找元素的索引</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// var index = this.books.findIndex(function(item)&#123;</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">//   return item.id == id;</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// &#125;);</span></span></span><br><span class="line">          #// 6.3 根据索引删除数组元素</span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// this.books.splice(index, 1);</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// -------------------------</span></span></span><br><span class="line">         #// 方法二：通过filter方法进行删除</span><br><span class="line"></span><br><span class="line">          # 6.4  根据filter 方法 过滤出来id 不是要删除书籍的id </span><br><span class="line">          # 因为 filter 是替换数组不会修改原始数据 所以需要 把 不是要删除书籍的id  赋值给 books </span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.books = <span class="hljs-keyword">this</span>.books.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">return</span> item.id != id;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用特性应用场景"><a href="#常用特性应用场景" class="headerlink" title="常用特性应用场景"></a>常用特性应用场景</h2><h3 id="过滤器-1"><a href="#过滤器-1" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>Vue.filter  定义一个全局过滤器</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in books'</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">     <span class="hljs-comment">&lt;!-- 1.3  调用过滤器 --&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.date | format('yyyy-MM-dd hh:mm:ss')&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'toEdit(item.id)'</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">'deleteBook(item.id)'</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    #1.1  Vue.filter  定义一个全局过滤器</span><br><span class="line"><span class="hljs-javascript">    Vue.filter(<span class="hljs-string">'format'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, arg</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dateFormat</span>(<span class="hljs-params">date, format</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> date === <span class="hljs-string">"string"</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-keyword">var</span> mts = date.match(<span class="hljs-regexp">/(\/Date\((\d+)\)\/)/</span>);</span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-keyword">if</span> (mts &amp;&amp; mts.length &gt;= <span class="hljs-number">3</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                    date = <span class="hljs-built_in">parseInt</span>(mts[<span class="hljs-number">2</span>]);</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="hljs-javascript">                date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date);</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">if</span> (!date || date.toUTCString() == <span class="hljs-string">"Invalid Date"</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">var</span> map = &#123;</span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"M"</span>: date.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">//月份 </span></span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"d"</span>: date.getDate(), <span class="hljs-comment">//日 </span></span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"h"</span>: date.getHours(), <span class="hljs-comment">//小时 </span></span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"m"</span>: date.getMinutes(), <span class="hljs-comment">//分 </span></span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"s"</span>: date.getSeconds(), <span class="hljs-comment">//秒 </span></span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"q"</span>: <span class="hljs-built_in">Math</span>.floor((date.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">//季度 </span></span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-string">"S"</span>: date.getMilliseconds() <span class="hljs-comment">//毫秒 </span></span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="hljs-javascript">                format = format.replace(<span class="hljs-regexp">/([yMdhmsqS])+/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">all, t</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-keyword">var</span> v = map[t];</span></span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-keyword">if</span> (v !== <span class="hljs-literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">if</span> (all.length &gt; <span class="hljs-number">1</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                      v = <span class="hljs-string">'0'</span> + v;</span></span><br><span class="line">                      v = v.substr(v.length - 2);</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">return</span> v;</span></span><br><span class="line"><span class="hljs-javascript">                  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t === <span class="hljs-string">'y'</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">return</span> (date.getFullYear() + <span class="hljs-string">''</span>).substr(<span class="hljs-number">4</span> - all.length);</span></span><br><span class="line">                  &#125;</span><br><span class="line"><span class="hljs-javascript">                  <span class="hljs-keyword">return</span> all;</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> format;</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="hljs-javascript">              <span class="hljs-keyword">return</span> dateFormat(value, arg);</span></span><br><span class="line">            &#125;)</span><br><span class="line">#1.2  提供的数据 包含一个时间戳   为毫秒数</span><br><span class="line">   [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'三国演义'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'水浒传'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'红楼梦'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 4,</span><br><span class="line"><span class="hljs-javascript">          name: <span class="hljs-string">'西游记'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;];</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令-1"><a href="#自定义指令-1" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>让表单自动获取焦点</li><li>通过Vue.directive 自定义指定</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 2.2  通过v-自定义属性名 调用自定义指令 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'id'</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"flag"</span> <span class="hljs-attr">v-focus</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    # 2.1   通过Vue.directive 自定义指定</span><br><span class="line"><span class="hljs-javascript">Vue.directive(<span class="hljs-string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">      inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;</span></span><br><span class="line">        el.focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li>通过计算属性计算图书的总数<ul><li>图书的总数就是计算数组的长度 </li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"total"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>图书总数：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">     <span class="hljs-comment">&lt;!-- 3.2 在页面上 展示出来 --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;total&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</span><br><span class="line">    */</span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="hljs-javascript">        flag: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-javascript">        submitFlag: <span class="hljs-literal">false</span>,</span></span><br><span class="line"><span class="hljs-javascript">        id: <span class="hljs-string">''</span>,</span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">''</span>,</span></span><br><span class="line">        books: []</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="hljs-javascript">        total: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-comment">// 3.1  计算图书的总数</span></span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.books.length;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第05阶段.Vue.js项目实战开发.Vue常用特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vue常用特性&quot;&gt;&lt;a href=&quot;#Vue常用特性&quot; class=&quot;headerlink&quot; title=&quot;Vue常用特性&quot;&gt;&lt;/a&gt;Vue常用特性&lt;/h2&gt;&lt;h3 id=&quot;表单基本操作&quot;&gt;&lt;a href=&quot;#表单基本操作&quot; class=&quot;headerlink&quot; title=&quot;表单基本操作&quot;&gt;&lt;/a&gt;表单基本操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取单选框中的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过v-model&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;		1、 两个单选框需要同时通过v-model 双向绑定 一个值 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;        2、 每一个单选框必须要有value属性  且value 值不能一样 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;		3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;		gender 的值就是选中的值，我们只需要实时监控他的值就可以了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;	--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;male&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;gender&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;male&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;男&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;female&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;gender&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;female&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;女&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-javascript&quot;&gt;             &lt;span class=&quot;hljs-comment&quot;&gt;// 默认会让当前的 value 值为 2 的单选框选中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                gender: 2,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://www.itfool.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/vue-day01/"/>
    <id>http://www.itfool.cn/前端笔记/vue-day01/</id>
    <published>2020-05-26T01:42:30.000Z</published>
    <updated>2020-05-26T06:08:45.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第05阶段.Vue.js项目实战开发.Vue基础</p></blockquote><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="Vue是什么？"><a href="#Vue是什么？" class="headerlink" title="Vue是什么？"></a>Vue是什么？</h3><ul><li><strong>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架</strong></li><li>vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合</li></ul><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p><img src="/前端笔记/vue-day01/day01-1.png" alt></p><a id="more"></a><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li>本质就是自定义属性</li><li>Vue中指定都是以 v- 开头 </li></ul><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li><p>防止页面加载时出现闪烁问题</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-cloak<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></span><br><span class="line">/* </span><br><span class="line">    1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏</span><br><span class="line"> */</span><br><span class="line"><span class="hljs-css"><span class="hljs-selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="hljs-css"><span class="hljs-comment">/* 元素隐藏    */</span></span></span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">         <span class="hljs-comment">&lt;!-- 2、 让带有插值 语法的   添加 v-cloak 属性 </span></span><br><span class="line"><span class="hljs-comment">         在 数据渲染完场之后，v-cloak 属性会被自动去除，</span></span><br><span class="line"><span class="hljs-comment">         v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签</span></span><br><span class="line"><span class="hljs-comment"> 也就是对应的标签会变为可见</span></span><br><span class="line"><span class="hljs-comment">    --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123; context &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">//  el   指定元素 id 是 app 的元素  </span></span></span><br><span class="line"><span class="hljs-javascript">el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">//  data  里面存储的是数据</span></span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="hljs-javascript">context: <span class="hljs-string">'董冬懂冻的博客'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul><li>v-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li><li>如果数据中有HTML标签会将html标签一并输出</li><li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!--  </span></span><br><span class="line"><span class="hljs-comment">注意:在指令中不要写插值语法  直接写对应的变量名称 </span></span><br><span class="line"><span class="hljs-comment">        在 v-text 中 赋值的时候不要在写 插值语法</span></span><br><span class="line"><span class="hljs-comment">一般属性中不加 &#123;&#123;&#125;&#125;  直接写 对应 的数据名 </span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"context"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- Vue  中只有在标签的 内容中 才用插值语法 --&gt;</span></span><br><span class="line">&#123;&#123;context&#125;&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="hljs-javascript">context: <span class="hljs-string">'董冬懂冻的博客'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li><p>用法和v-text 相似  但是他可以将HTML片段填充到标签中</p></li><li><p>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</p></li><li><p>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">　　<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 输出：html标签在渲染的时候被解析 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 输出：&lt;span&gt;通过双括号绑定&lt;/span&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">　　<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 输出：&lt;span&gt;html标签在渲染的时候被源码输出&lt;/span&gt; --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">　　<span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">　　el: <span class="hljs-string">"#app"</span>,</span></span><br><span class="line">　　data: &#123;</span><br><span class="line"><span class="hljs-xml">　　　　message: "<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>通过双括号绑定<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>",</span></span><br><span class="line"><span class="hljs-xml">　　　　html: "<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>html标签在渲染的时候被解析<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>",</span></span><br><span class="line"><span class="hljs-xml">　　　　text: "<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>html标签在渲染的时候被源码输出<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>",</span></span><br><span class="line">　　&#125;</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>显示原始信息跳过编译过程</li><li>跳过这个元素和它的子元素的编译过程。</li><li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-pre<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!--  显示的是&#123;&#123; this will not be compiled &#125;&#125;  --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="line"><span class="hljs-comment">&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="hljs-javascript">msg: <span class="hljs-string">'Hello Vue.js'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><strong>v-once</strong></h3><ul><li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-once<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 即使data里面定义了context 后期我们修改了 仍然显示的是第一次data里面存储的数据即 董冬懂冻的博客  --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>This will never change: &#123;&#123;context&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="hljs-javascript">context: <span class="hljs-string">'董冬懂冻的博客'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 这里修改了context</span></span></span><br><span class="line"><span class="hljs-javascript">app.context = <span class="hljs-string">'Hi~!'</span>;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul><li>当数据发生变化的时候，视图也就发生变化</li><li>当视图发生变化的时候，数据也会跟着同步变化</li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-model<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">当输入框中内容改变的时候， 页面上的msg 会自动更新</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'msg'</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="hljs-javascript">msg: <span class="hljs-string">'董冬懂冻的博客'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h3><ul><li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li><li>m   model  <ul><li>数据层   Vue  中 数据层 都放在 data 里面</li></ul></li><li>v   view     视图   <ul><li>Vue  中  view      即 我们的HTML页面  </li></ul></li><li>vm   （view-model）     控制器     将数据和视图层建立联系      <ul><li>vm 即  Vue 的实例  就是 vm  </li></ul></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>用来绑定事件的</li><li>形式如：v-on:click  缩写为 @click;</li></ul><p><img src="/前端笔记/vue-day01/@click.png" alt></p><h3 id="v-on事件函数中传入参数"><a href="#v-on事件函数中传入参数" class="headerlink" title="v-on事件函数中传入参数"></a>v-on事件函数中传入参数</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>@click<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">'handle1'</span>&gt;</span>点击1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 2、如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，</span></span><br><span class="line"><span class="hljs-comment">                 并且事件对象的名称必须是$event </span></span><br><span class="line"><span class="hljs-comment">            --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">'handle2(123, 456, $event)'</span>&gt;</span>点击2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line">num: 0</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="hljs-javascript">handle1: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">console</span>.log(event.target.innerHTML)</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-javascript">handle2: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p, p1, event</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">console</span>.log(p, p1)</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">console</span>.log(event.target.innerHTML)</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">this</span>.num++;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li><li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li><li>修饰符是由点开头的指令后缀来表示的</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">"doThis"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">"onSubmit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">"doThat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">"doThat"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。</span><br><span class="line">因此，用 v-on:click.prevent.self 会阻止所有的点击，</span><br><span class="line">而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.13</span>=<span class="hljs-string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-on:keyup.enter.space</span>=<span class="hljs-string">"alertMe"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">        el:<span class="hljs-string">"#app"</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="hljs-javascript">              submit:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,</span></span><br><span class="line"><span class="hljs-javascript">              alertMe:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义按键修饰符别名"><a href="#自定义按键修饰符别名" class="headerlink" title="自定义按键修饰符别名"></a>自定义按键修饰符别名</h3><ul><li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-on:keydown.f5</span>=<span class="hljs-string">"prompt()"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    Vue.config.keyCodes.f5 = 116;</span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">        el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="hljs-javascript">            prompt: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                alert(<span class="hljs-string">'我是 F5！'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li>v-bind 指令被用来响应地更新 HTML 属性</li><li>v-bind:href    可以缩写为    :href;</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imageSrc"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><ul><li>我们可以给v-bind:class 一个对象，以动态地切换class。</li><li>注意：v-bind:class指令可以与普通的class特性共存</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1、 v-bind 中支持绑定一个对象 </span><br><span class="line">如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 </span><br><span class="line"><span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">HTML最终渲染为 &lt;ul class="box textColor textSize"&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-comment">注意：</span></span><br><span class="line"><span class="hljs-comment">textColor，textSize  对应的渲染到页面上的CSS类名</span></span><br><span class="line"><span class="hljs-comment">isColor，isSize  对应vue data中的数据  如果为true 则对应的类名 渲染到页面上 </span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">当 isColor 和 isSize 变化时，class列表将相应的更新，</span></span><br><span class="line"><span class="hljs-comment">例如，将isSize改成false，</span></span><br><span class="line"><span class="hljs-comment">class列表将变为 &lt;ul class="box textColor"&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">"&#123;textColor:isColor, textSize:isSize&#125;"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Node<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习React<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">"&#123;color:activeColor,fontSize:activeSize&#125;"</span>&gt;</span>对象语法<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">sript</span>&gt;</span></span><br><span class="line">var vm= new Vue(&#123;</span><br><span class="line">    el:'.box',</span><br><span class="line">    data:&#123;</span><br><span class="line">        isColor:true,</span><br><span class="line">        isSize:true，</span><br><span class="line">    activeColor:"red",</span><br><span class="line">        activeSize:"25px",</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">sript</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">dashed</span> <span class="hljs-selector-id">#f0f</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.textColor</span>&#123;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">color</span>:<span class="hljs-selector-id">#f00</span>;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">background-color</span>:<span class="hljs-selector-id">#eef</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.textSize</span>&#123;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">font-size</span><span class="hljs-selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">font-weight</span><span class="hljs-selector-pseudo">:bold</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">2、  v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</span><br><span class="line"></span><br><span class="line">这里的classA  对用data 中的  classA</span><br><span class="line">这里的classB  对用data 中的  classB</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"[classA, classB]"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Node<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习React<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> vm= <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">    el:<span class="hljs-string">'.box'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        classA:‘textColor‘,</span><br><span class="line">        classB:‘textSize‘</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">dashed</span> <span class="hljs-selector-id">#f0f</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.textColor</span>&#123;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">color</span>:<span class="hljs-selector-id">#f00</span>;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">background-color</span>:<span class="hljs-selector-id">#eef</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-class">.textSize</span>&#123;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">font-size</span><span class="hljs-selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-tag">font-weight</span><span class="hljs-selector-pseudo">:bold</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul><li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li><li>绑定数组的时候数组里面存的是data 中的数据 </li></ul><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">"styleObject"</span>&gt;</span>绑定样式对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>'</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">"&#123; color: activeColor, fontSize: fontSize,background:'red' &#125;"</span>&gt;</span>内联样式<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">"[styleObj1, styleObj2]"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        styleObject: &#123;</span><br><span class="line"><span class="hljs-javascript">          color: <span class="hljs-string">'green'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          fontSize: <span class="hljs-string">'30px'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          background:<span class="hljs-string">'red'</span></span></span><br><span class="line">        &#125;，</span><br><span class="line"><span class="hljs-javascript">        activeColor: <span class="hljs-string">'green'</span>,</span></span><br><span class="line"><span class="hljs-javascript">   fontSize: <span class="hljs-string">"30px"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj1: &#123;</span><br><span class="line"><span class="hljs-javascript">             color: <span class="hljs-string">'red'</span></span></span><br><span class="line">       &#125;,</span><br><span class="line">       styleObj2: &#123;</span><br><span class="line"><span class="hljs-javascript">            fontSize: <span class="hljs-string">'30px'</span></span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="v-if-使用场景"><a href="#v-if-使用场景" class="headerlink" title="v-if 使用场景"></a>v-if 使用场景</h4><ul><li>1- 多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li><li>2- 进行两个视图之间的切换</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!--  判断是否加载，如果为真，就加载，否则不加载--&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"flag"</span>&gt;</span></span><br><span class="line">           如果flag为true则显示,false不显示!</span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">        el:<span class="hljs-string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="hljs-javascript">            flag:<span class="hljs-literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"type === 'A'"</span>&gt;</span></span><br><span class="line">       A</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- v-else-if紧跟在v-if或v-else-if之后   表示v-if条件不成立时执行--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"type === 'B'"</span>&gt;</span></span><br><span class="line">       B</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"type === 'C'"</span>&gt;</span></span><br><span class="line">       C</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- v-else紧跟在v-if或v-else-if之后--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span></span><br><span class="line">       Not A/B/C</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">      el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="hljs-javascript">        type: <span class="hljs-string">'C'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h4><ul><li>v-show本质就是标签display设置为none，控制隐藏<ul><li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li></ul></li><li>v-if是动态的向DOM树内添加或者删除DOM元素<ul><li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li>用于循环的数组里面的值可以是对象，也可以是普通元素  </li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"example-1"</span>&gt;</span></span><br><span class="line">   <span class="hljs-comment">&lt;!-- 循环结构-遍历数组  </span></span><br><span class="line"><span class="hljs-comment">item 是我们自己定义的一个名字  代表数组里面的每一项  </span></span><br><span class="line"><span class="hljs-comment">items对应的是 data中的数组--&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"> <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">  el: <span class="hljs-string">'#example-1'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">'Foo'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">'Bar'</span> &#125;</span></span><br><span class="line">    ]，</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li><li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-comment">&lt;!--  循环结构-遍历对象</span></span><br><span class="line"><span class="hljs-comment">v 代表   对象的value</span></span><br><span class="line"><span class="hljs-comment">k  代表对象的 键 </span></span><br><span class="line"><span class="hljs-comment">i  代表索引</span></span><br><span class="line"><span class="hljs-comment">---&gt;</span> </span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">'v==13'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(v,k,i) in obj'</span>&gt;</span>&#123;&#123;v + '---' + k + '---' + i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"> <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">  el: <span class="hljs-string">'#example-1'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">'Foo'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">'Bar'</span> &#125;</span></span><br><span class="line">    ]，</span><br><span class="line">    obj: &#123;</span><br><span class="line"><span class="hljs-javascript">        uname: <span class="hljs-string">'zhangsan'</span>,</span></span><br><span class="line">        age: 13,</span><br><span class="line"><span class="hljs-javascript">        gender: <span class="hljs-string">'female'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>key 的作用<ul><li><strong>key来给每个节点做一个唯一标识</strong></li><li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in items"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.id"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例选项卡"><a href="#案例选项卡" class="headerlink" title="案例选项卡"></a>案例选项卡</h2><h3 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab"</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!--  tab栏  --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"active"</span>&gt;</span>apple<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span>orange<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span>lemon<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">          <span class="hljs-comment">&lt;!--  对应显示的图片 --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"current"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/apple.png"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/orange.png"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/lemon.png"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="提供的数据"><a href="#提供的数据" class="headerlink" title="提供的数据"></a>提供的数据</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">list: [&#123;</span><br><span class="line">           id: <span class="hljs-number">1</span>,</span><br><span class="line">           title: <span class="hljs-string">'apple'</span>,</span><br><span class="line">           path: <span class="hljs-string">'img/apple.png'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           id: <span class="hljs-number">2</span>,</span><br><span class="line">           title: <span class="hljs-string">'orange'</span>,</span><br><span class="line">           path: <span class="hljs-string">'img/orange.png'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           id: <span class="hljs-number">3</span>,</span><br><span class="line">           title: <span class="hljs-string">'lemon'</span>,</span><br><span class="line">           path: <span class="hljs-string">'img/lemon.png'</span></span><br><span class="line">       &#125;]</span><br></pre></td></tr></table></figure><h3 id="把数据渲染到页面"><a href="#把数据渲染到页面" class="headerlink" title="把数据渲染到页面"></a>把数据渲染到页面</h3><ul><li><p>把tab栏 中的数替换到页面上</p><ul><li>把 data 中 title  利用 v-for 循环渲染到页面上 </li><li>把 data 中 path利用 v-for 循环渲染到页面上 </li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab"</span>&gt;</span>  </span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">                  <span class="hljs-comment">&lt;!--  </span></span><br><span class="line"><span class="hljs-comment">                    1、绑定key的作用 提高Vue的性能 </span></span><br><span class="line"><span class="hljs-comment">                    2、 key 需要是唯一的标识 所以需要使用id， 也可以使用index ，</span></span><br><span class="line"><span class="hljs-comment">index 也是唯一的 </span></span><br><span class="line"><span class="hljs-comment">                    3、 item 是 数组中对应的每一项  </span></span><br><span class="line"><span class="hljs-comment">                    4、 index 是 每一项的 索引</span></span><br><span class="line"><span class="hljs-comment">                --&gt;</span></span><br><span class="line">                   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item,index) in list'</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item, index) in list'</span>&gt;</span></span><br><span class="line">                    <span class="hljs-comment">&lt;!-- :  是 v-bind 的简写   绑定属性使用 v-bind --&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item.path"</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span>  Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//  指定 操作元素 是 id 为app 的 </span></span></span><br><span class="line"><span class="hljs-javascript">        el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'apple'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/apple.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'orange'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/orange.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'lemon'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/lemon.png'</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="给每一个tab栏添加事件-并让选中的高亮"><a href="#给每一个tab栏添加事件-并让选中的高亮" class="headerlink" title="给每一个tab栏添加事件,并让选中的高亮"></a>给每一个tab栏添加事件,并让选中的高亮</h3><ul><li><p>1、让默认的第一项tab栏高亮</p><ul><li>tab栏高亮 通过添加类名active 来实现   （CSS  active 的样式已经提前写好）<ul><li>在data 中定义一个 默认的  索引 currentIndex  为  0 </li><li>给第一个li 添加 active 的类名  <ul><li>通过动态绑定class 来实现   第一个li 的索引为 0     和 currentIndex   的值刚好相等</li><li>currentIndex     ===  index  如果相等  则添加类名 active  否则 添加 空类名</li></ul></li></ul></li></ul></li><li><p>2、让默认的第一项tab栏对应的div 显示 </p><ul><li>实现思路 和 第一个 tab 实现思路一样  只不过 这里控制第一个div 显示的类名是 current</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">   <span class="hljs-comment">&lt;!-- 动态绑定class   有 active   类名高亮  无 active   不高亮--&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">:class</span>=<span class="hljs-string">'currentIndex==index?"active":""'</span></span></span><br><span class="line"><span class="hljs-tag">           <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item,index) in list'</span></span></span><br><span class="line"><span class="hljs-tag">           &gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 动态绑定class   有 current  类名显示  无 current  隐藏--&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">'currentIndex==index?"current":""'</span> </span></span><br><span class="line"><span class="hljs-tag">       </span></span><br><span class="line"><span class="hljs-tag">       <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item, index) in list'</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- :  是 v-bind 的简写   绑定属性使用 v-bind --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item.path"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span>  Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">        el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="hljs-javascript">                currentIndex: <span class="hljs-number">0</span>, <span class="hljs-comment">// 选项卡当前的索引  默认为 0  </span></span></span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'apple'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/apple.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'orange'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/orange.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'lemon'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/lemon.png'</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>3.点击每一个tab栏 当前的高亮 其他的取消高亮 </p><ul><li><p>给每一个li添加点击事件    </p></li><li><p>让当前的索引 index  和  当前 currentIndex 的  值 进项比较 </p></li><li><p>如果相等 则当前li  添加active 类名 当前的 li 高亮  当前对应索引的 div 添加 current 当前div 显示 其他隐藏</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">                <span class="hljs-comment">&lt;!--  通过v-on 添加点击事件   需要把当前li 的索引传过去 </span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">'change(index)'</span>           </span></span><br><span class="line"><span class="hljs-tag">                    <span class="hljs-attr">:class</span>=<span class="hljs-string">'currentIndex==index?"active":""'</span>                   </span></span><br><span class="line"><span class="hljs-tag">                    <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> </span></span><br><span class="line"><span class="hljs-tag">                    <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item,index) in list'</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">'currentIndex==index?"current":""'</span> </span></span><br><span class="line"><span class="hljs-tag">                 <span class="hljs-attr">:key</span>=<span class="hljs-string">'item.id'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'(item, index) in list'</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item.path"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">new</span>  Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">        el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="hljs-javascript">                currentIndex: <span class="hljs-number">0</span>, <span class="hljs-comment">// 选项卡当前的索引  默认为 0  </span></span></span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'apple'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/apple.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'orange'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/orange.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="hljs-javascript">                    title: <span class="hljs-string">'lemon'</span>,</span></span><br><span class="line"><span class="hljs-javascript">                    path: <span class="hljs-string">'img/lemon.png'</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="hljs-javascript">                change: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-comment">// 通过传入过来的索引来让当前的  currentIndex  和点击的index 值 相等 </span></span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-comment">//  从而实现 控制类名    </span></span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">this</span>.currentIndex = index;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第05阶段.Vue.js项目实战开发.Vue基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vue基础&quot;&gt;&lt;a href=&quot;#Vue基础&quot; class=&quot;headerlink&quot; title=&quot;Vue基础&quot;&gt;&lt;/a&gt;Vue基础&lt;/h2&gt;&lt;h3 id=&quot;Vue是什么？&quot;&gt;&lt;a href=&quot;#Vue是什么？&quot; class=&quot;headerlink&quot; title=&quot;Vue是什么？&quot;&gt;&lt;/a&gt;Vue是什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HelloWorld&quot;&gt;&lt;a href=&quot;#HelloWorld&quot; class=&quot;headerlink&quot; title=&quot;HelloWorld&quot;&gt;&lt;/a&gt;HelloWorld&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/前端笔记/vue-day01/day01-1.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://www.itfool.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>AJAX-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/ajax-day02/"/>
    <id>http://www.itfool.cn/前端笔记/ajax-day02/</id>
    <published>2020-05-25T09:45:58.000Z</published>
    <updated>2020-05-25T10:03:24.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.AJAX拓展</p></blockquote><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="模板引擎概述"><a href="#模板引擎概述" class="headerlink" title="模板引擎概述"></a>模板引擎概述</h3><p>作用：使用模板引擎提供的模板语法，可以将数据和 HTML 拼接起来。</p><p>官方地址： <a href="https://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn/index.html</a></p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>下载 art-template 模板引擎库文件并在 HTML 页面中引入库文件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;lib/template-web.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>准备 art-template 模板</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/html&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>告诉模板引擎将哪一个模板和哪个数据进行拼接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var html = template(&apos;tpl&apos;, &#123;username: &apos;zhangsan&apos;, age: &apos;20&apos;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>将拼接好的html字符串添加到页面中</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&apos;container&apos;).innerHTML = html;</span><br></pre></td></tr></table></figure></li><li><p>通过模板语法告诉模板引擎，数据和html字符串要如何拼接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/html&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt; &#123;&#123; username &#125;&#125; &lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="验证邮箱地址唯一性"><a href="#验证邮箱地址唯一性" class="headerlink" title="验证邮箱地址唯一性"></a>验证邮箱地址唯一性</h3><p><img src="/前端笔记/ajax-day02/image-20200525175308553.png" alt></p><ol><li>获取文本框并为其添加离开焦点事件</li><li>离开焦点时，检测用户输入的邮箱地址是否符合规则</li><li>如果不符合规则，阻止程序向下执行并给出提示信息</li><li>向服务器端发送请求，检测邮箱地址是否被别人注册</li><li>根据服务器端返回值决定客户端显示何种提示信息</li></ol><h3 id="搜索框内容自动提示"><a href="#搜索框内容自动提示" class="headerlink" title="搜索框内容自动提示"></a>搜索框内容自动提示</h3><p><img src="/前端笔记/ajax-day02/image-20200525175320091.png" alt></p><ol><li>获取搜索框并为其添加用户输入事件</li><li>获取用户输入的关键字</li><li>向服务器端发送请求并携带关键字作为请求参数</li><li>将响应数据显示在搜索框底部</li></ol><h3 id="省市区三级联动"><a href="#省市区三级联动" class="headerlink" title="省市区三级联动"></a>省市区三级联动</h3><p><img src="/前端笔记/ajax-day02/image-20200525175349180.png" alt></p><ol><li>通过接口获取省份信息</li><li>使用JavaScript获取到省市区下拉框元素</li><li>将服务器端返回的省份信息显示在下拉框中</li><li>为下拉框元素添加表单值改变事件（onchange）</li><li>当用户选择省份时，根据省份id获取城市信息</li><li>当用户选择城市时，根据城市id获取县城信息</li></ol><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。</li><li>异步上传二进制文件</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>准备 HTML 表单</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;form id=&quot;form&quot;&gt;</span><br><span class="line">     &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;</span><br><span class="line">     &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span><br><span class="line">     &lt;input type=&quot;button&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>将 HTML 表单转化为 formData 对象</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var form = document.getElementById(&apos;form&apos;); </span><br><span class="line">var formData = new FormData(form);</span><br></pre></td></tr></table></figure></li><li><p>删除表单对象中属性的值</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.delete(&apos;key&apos;);</span><br></pre></td></tr></table></figure></li><li><p>向表单对象中追加属性值</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.append(&apos;key&apos;, &apos;value&apos;);</span><br></pre></td></tr></table></figure></li></ol><p><strong><font color="#f00">注意</font></strong>：set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append会保留两个值。</p><h3 id="二进制文件上传"><a href="#二进制文件上传" class="headerlink" title="二进制文件上传"></a>二进制文件上传</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> var file = document.getElementById(&apos;file&apos;)</span><br><span class="line">// 当用户选择文件的时候</span><br><span class="line"> file.onchange = function () &#123;</span><br><span class="line">     // 创建空表单对象</span><br><span class="line">     var formData = new FormData();</span><br><span class="line">     // 将用户选择的二进制文件追加到表单对象中</span><br><span class="line">     formData.append(&apos;attrName&apos;, this.files[0]);</span><br><span class="line">     // 配置ajax对象，请求方式必须为post</span><br><span class="line">     xhr.open(&apos;post&apos;, &apos;www.example.com&apos;);</span><br><span class="line">     xhr.send(formData);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传进度展示"><a href="#文件上传进度展示" class="headerlink" title="文件上传进度展示"></a>文件上传进度展示</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 当用户选择文件的时候</span><br><span class="line">file.onchange = function () &#123;</span><br><span class="line">    // 文件上传过程中持续触发onprogress事件</span><br><span class="line">    xhr.upload.onprogress = function (ev) &#123;</span><br><span class="line">        // 当前上传文件大小/文件总大小 再将结果转换为百分数</span><br><span class="line">        // 将结果赋值给进度条的宽度属性 </span><br><span class="line">        bar.style.width = (ev.loaded / ev.total) * 100 + &apos;%&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传图片即时预览"><a href="#文件上传图片即时预览" class="headerlink" title="文件上传图片即时预览"></a>文件上传图片即时预览</h3><p>在我们将图片上传到服务器端以后，服务器端通常都会将图片地址做为响应数据传递到客户端，客户端可以从响应数据中获取图片地址，然后将图片再显示在页面中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = function () &#123;</span><br><span class="line">    var result = JSON.parse(xhr.responseText);</span><br><span class="line">    var img = document.createElement(&apos;img&apos;);</span><br><span class="line">    img.src = result.src;</span><br><span class="line">    img.onload = function () &#123;</span><br><span class="line">        document.body.appendChild(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h2><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>如果两个页面拥有相同的协议、域名和端口，那么这两个页面就属于同一个源，其中只要有一个不相同，就是不同源。<br><a href="http://www.example.com/dir/page.html" target="_blank" rel="noopener">http://www.example.com/dir/page.html</a></p><p><a href="http://www.example.com/dir2/other.html：同源" target="_blank" rel="noopener">http://www.example.com/dir2/other.html：同源</a><br><a href="http://example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://example.com/dir/other.html：不同源（域名不同）</a><br><a href="http://v2.www.example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a><br><a href="http://www.example.com:81/dir/other.html：不同源（端口不同）" target="_blank" rel="noopener">http://www.example.com:81/dir/other.html：不同源（端口不同）</a><br><a href="https://www.example.com/dir/page.html：不同源（协议不同）" target="_blank" rel="noopener">https://www.example.com/dir/page.html：不同源（协议不同）</a></p><h3 id="同源政策的目的"><a href="#同源政策的目的" class="headerlink" title="同源政策的目的"></a>同源政策的目的</h3><ul><li><p>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A 网站在客户端设置的 Cookie，B网站是不能访问的。</p></li><li><p>随着互联网的发展，同源政策也越来越严格，在不同源的情况下，其中有一项规定就是无法向非同源地址发送Ajax 请求，如果请求，浏览器就会报错。</p></li></ul><h3 id="使用-JSONP-解决同源限制问题"><a href="#使用-JSONP-解决同源限制问题" class="headerlink" title="使用 JSONP 解决同源限制问题"></a>使用 JSONP 解决同源限制问题</h3><p>jsonp 是 json with padding 的缩写，它不属于 Ajax 请求，但它可以模拟 Ajax 请求。</p><ol><li><p>将不同源的服务器端请求地址写在 script 标签的 src 属性中</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;www.example.com&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=“https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>服务器端响应数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const data = &apos;fn(&#123;name: &quot;张三&quot;, age: &quot;20&quot;&#125;)&apos;;</span><br><span class="line">res.send(data);</span><br></pre></td></tr></table></figure></li><li><p>在客户端全局作用域下定义函数 fn</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function fn (data) &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>在 fn 函数内部对服务器端返回的数据进行处理</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function fn (data) &#123; console.log(data); &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="JSONP-代码优化"><a href="#JSONP-代码优化" class="headerlink" title="JSONP 代码优化"></a>JSONP 代码优化</h3><ol><li>客户端需要将函数名称传递到服务器端。</li><li>将 script 请求的发送变成动态请求。</li><li>封装 jsonp 函数，方便请求发送。</li><li>服务器端代码优化之 res.jsonp 方法。</li></ol><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h3><p>CORS：全称为 Cross-origin resource sharing，即跨域资源共享，它允许浏览器向跨域服务器发送 Ajax 请求，克服了 Ajax 只能同源使用的限制。</p><p><img src="/前端笔记/ajax-day02/image-20200525180043706.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">origin: http://localhost:3000</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &apos;http://localhost:3000&apos;</span><br><span class="line">Access-Control-Allow-Origin: &apos;*&apos;</span><br></pre></td></tr></table></figure><p>Node 服务器端设置响应头示例代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">    res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);</span><br><span class="line">    res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;GET, POST&apos;);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="访问非同源数据-服务器端解决方案"><a href="#访问非同源数据-服务器端解决方案" class="headerlink" title="访问非同源数据 服务器端解决方案"></a>访问非同源数据 服务器端解决方案</h3><p>同源政策是浏览器给予Ajax技术的限制，服务器端是不存在同源政策限制。</p><p><img src="/前端笔记/ajax-day02/image-20200525180127863.png" alt></p><h3 id="cookie复习"><a href="#cookie复习" class="headerlink" title="cookie复习"></a>cookie复习</h3><p><img src="/前端笔记/ajax-day02/image-20200525180141222.png" alt></p><h3 id="withCredentials属性"><a href="#withCredentials属性" class="headerlink" title="withCredentials属性"></a>withCredentials属性</h3><ul><li>在使用Ajax技术发送跨域请求时，默认情况下不会在请求中携带cookie信息。</li><li>withCredentials：指定在涉及到跨域请求时，是否携带cookie信息，默认值为false</li><li>Access-Control-Allow-Credentials：true 允许客户端发送请求时携带cookie</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.AJAX拓展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;模板引擎&quot;&gt;&lt;a href=&quot;#模板引擎&quot; class=&quot;headerlink&quot; title=&quot;模板引擎&quot;&gt;&lt;/a&gt;模板引擎&lt;/h2&gt;&lt;h3 id=&quot;模板引擎概述&quot;&gt;&lt;a href=&quot;#模板引擎概述&quot; class=&quot;headerlink&quot; title=&quot;模板引擎概述&quot;&gt;&lt;/a&gt;模板引擎概述&lt;/h3&gt;&lt;p&gt;作用：使用模板引擎提供的模板语法，可以将数据和 HTML 拼接起来。&lt;/p&gt;
&lt;p&gt;官方地址： &lt;a href=&quot;https://aui.github.io/art-template/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aui.github.io/art-template/zh-cn/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="AJAX" scheme="http://www.itfool.cn/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>AJAX-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/ajax-day01/"/>
    <id>http://www.itfool.cn/前端笔记/ajax-day01/</id>
    <published>2020-05-25T09:18:09.000Z</published>
    <updated>2020-05-25T09:44:49.534Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.AJAX基础</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>Ajax 基础</li><li>Ajax 运行原理及实现</li><li>Ajax 异步编程</li></ul><a id="more"></a><h2 id="Ajax-基础"><a href="#Ajax-基础" class="headerlink" title="Ajax 基础"></a>Ajax 基础</h2><h3 id="传统网站中存在的问题"><a href="#传统网站中存在的问题" class="headerlink" title="传统网站中存在的问题"></a>传统网站中存在的问题</h3><ul><li>网速慢的情况下，页面加载时间长，用户只能等待</li><li>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</li><li>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Ajax：标准读音 [ˈeɪˌdʒæks] ，中文音译：阿贾克斯</p><p>它是浏览器提供的一套方法，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。</p><p><img src="/前端笔记/ajax-day01/image-20200525172336464.png" alt></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="/前端笔记/ajax-day01/image-20200525172406700.png" alt></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>Ajax 技术<strong><font color="#f00">需要运行在网站环境中</font></strong>才能生效，当前课程会使用Node创建的服务器作为网站服务器。</p><h2 id="Ajax-运行原理及实现"><a href="#Ajax-运行原理及实现" class="headerlink" title="Ajax 运行原理及实现"></a>Ajax 运行原理及实现</h2><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>Ajax 相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验。</p><p><img src="/前端笔记/ajax-day01/image-20200525172533946.png" alt></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>创建 Ajax 对象</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>告诉 Ajax 请求地址以及请求方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.example.com&apos;);</span><br></pre></td></tr></table></figure></li><li><p>发送请求</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></li><li><p>获取服务器端给与客户端的响应数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = function () &#123;</span><br><span class="line">    console.log(xhr.responseText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="服务器端响应的数据格式"><a href="#服务器端响应的数据格式" class="headerlink" title="服务器端响应的数据格式"></a>服务器端响应的数据格式</h3><p>在真实的项目中，服务器端<strong><font color="#f00">大多数情况下会以 JSON 对象作为响应数据的格式</font></strong>。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中。</p><p>在 http 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse() // 将 json 字符串转换为json对象</span><br></pre></td></tr></table></figure><h3 id="请求参数传递"><a href="#请求参数传递" class="headerlink" title="请求参数传递"></a>请求参数传递</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!– 传统网站表单提交 --&gt;</span><br><span class="line">&lt;form method=&quot;get&quot; action=&quot;http://www.example.com&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;!– http://www.example.com?username=zhangsan&amp;password=123456 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// GET 请求方式</span><br><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.example.com?name=zhangsan&amp;age=20&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// POST 请求方式</span><br><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;) xhr.send(&apos;name=zhangsan&amp;age=20&apos;);</span><br></pre></td></tr></table></figure><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>在 HTTP 请求和响应的过程中传递的数据块就叫<strong><font color="#f00">报文</font></strong>，包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式。</p><p><img src="/前端笔记/ajax-day01/image-20200525173334541.png" alt></p><h3 id="请求参数的格式"><a href="#请求参数的格式" class="headerlink" title="请求参数的格式"></a>请求参数的格式</h3><ol><li><p>application/x-www-form-urlencoded</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=zhangsan&amp;age=20&amp;sex=男</span><br></pre></td></tr></table></figure></li><li><p>application/json</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;name: &apos;zhangsan&apos;, age: &apos;20&apos;, sex: &apos;男&apos;&#125;</span><br></pre></td></tr></table></figure><p>在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify() // 将json对象转换为json字符串</span><br></pre></td></tr></table></figure><p><strong><font color="#f00">注意：get 请求是不能提交 json 对象数据格式的，传统网站的表单提交也是不支持 json 对象数据格式的。</font></strong></p></li></ol><h3 id="Ajax-状态码"><a href="#Ajax-状态码" class="headerlink" title="Ajax 状态码"></a>Ajax 状态码</h3><p>在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码。</p><p>0：请求未初始化(还没有调用open())<br>1：请求已经建立，但是还没有发送(还没有调用send())<br>2：请求已经发送<br>3：请求正在处理中，通常响应中已经有部分数据可以用了<br>4：响应已经完成，可以获取并使用服务器的响应了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.readyState // 获取Ajax状态码</span><br></pre></td></tr></table></figure><h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><p>当 Ajax 状态码发生变化时将自动触发该事件。</p><p>在事件处理函数中可以获取 Ajax 状态码并对其进行判断，当状态码为 <strong><font color="#f00">4</font></strong> 时就可以通过 xhr.responseText 获取服务器端的响应数据了。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 当Ajax状态码发生变化时</span><br><span class="line">xhr.onreadystatechange = function () &#123;</span><br><span class="line">    // 判断当Ajax状态码为4时</span><br><span class="line">    if (xhr.readyState == 4) &#123;</span><br><span class="line">        // 获取服务器端的响应数据</span><br><span class="line">        console.log(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种获取服务器端响应方式的区别</p><table><thead><tr><th><strong>区别描述</strong></th><th><strong>onload事件</strong></th><th><strong>onreadystatechange事件</strong></th></tr></thead><tbody><tr><td>是否兼容IE低版本</td><td>不兼容</td><td>兼容</td></tr><tr><td>是否需要判断Ajax状态码</td><td>不需要</td><td>需要</td></tr><tr><td>被调用次数</td><td>一次</td><td>多次</td></tr></tbody></table><h3 id="Ajax-错误处理"><a href="#Ajax-错误处理" class="headerlink" title="Ajax 错误处理"></a>Ajax 错误处理</h3><p><strong>1. 网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</strong></p><ul><li>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取http状态码</li></ul><p><strong>2. 网络畅通，服务器端没有接收到请求，返回404状态码。</strong> </p><ul><li>检查请求地址是否错误。</li></ul><p><strong>3. 网络畅通，服务器端能接收到请求，服务器端返回500状态码。</strong></p><ul><li>服务器端错误，找后端程序员进行沟通。</li></ul><p><strong>4. 网络中断，请求无法发送到服务器端。</strong></p><ul><li>会触发xhr对象下面的onerror事件，在onerror事件处理函数中对错误进行处理。</li></ul><h3 id="低版本-IE-浏览器的缓存问题"><a href="#低版本-IE-浏览器的缓存问题" class="headerlink" title="低版本 IE 浏览器的缓存问题"></a>低版本 IE 浏览器的缓存问题</h3><p><strong>问题：</strong>在低版本的 IE 浏览器中，Ajax 请求有严重的缓存问题，即在请求地址不发生变化的情况下，只有第一次请求会真正发送到服务器端，后续的请求都会从浏览器的缓存中获取结果。即使服务器端的数据更新了，客户端依然拿到的是缓存中的旧数据。</p><p><strong>解决方案：</strong>在请求地址的后面加请求参数，保证每一次请求中的请求参数的值不相同。 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.example.com?t=&apos; + Math.random());</span><br></pre></td></tr></table></figure><h2 id="Ajax-异步编程"><a href="#Ajax-异步编程" class="headerlink" title="Ajax 异步编程"></a>Ajax 异步编程</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li>一个人同一时间只能做一件事情，只有一件事情做完，才能做另外一件事情。</li><li>落实到代码中，就是上一行代码执行完成后，才能执行下一行代码，即代码逐行执行。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;); </span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>一个人一件事情做了一半，转而去做其他事情，当其他事情做完以后，再回过头来继续做之前未完成的事情。</li><li>落实到代码上，就是异步代码虽然需要花费时间去执行，但程序不会等待异步代码执行完成后再继续执行后续代码，而是直接执行后续代码，当后续代码执行完成后再回头看异步代码是否返回结果，如果已有返回结果，再调用事先准备好的回调函数处理异步代码执行的结果。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;);</span><br><span class="line">setTimeout(</span><br><span class="line">   () =&gt; &#123; console.log(&apos;last&apos;);</span><br><span class="line">&#125;, 2000);</span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><h3 id="Ajax-封装"><a href="#Ajax-封装" class="headerlink" title="Ajax 封装"></a>Ajax 封装</h3><p><strong>问题：</strong>发送一次请求代码过多，发送多次请求代码冗余且重复。</p><p><strong>解决方案：</strong>将请求代码封装到函数中，发请求时调用函数即可。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123; </span><br><span class="line">    type: &apos;get&apos;,</span><br><span class="line">    url: &apos;http://www.itfool.cn&apos;,</span><br><span class="line">    success: function (data) &#123; </span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.AJAX基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ajax 基础&lt;/li&gt;
&lt;li&gt;Ajax 运行原理及实现&lt;/li&gt;
&lt;li&gt;Ajax 异步编程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="AJAX" scheme="http://www.itfool.cn/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day06/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day06/</id>
    <published>2020-05-25T08:52:50.000Z</published>
    <updated>2020-05-25T09:08:59.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.Express框架</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够使用Express创建web服务器</li><li>能够使用Express处理请求参数</li><li>能够使用Express处理静态资源</li><li>能够使用中间件处理请求</li><li>能够在Express中集成art-template模板引擎</li></ul><a id="more"></a><h2 id="Express框架简介及初体验"><a href="#Express框架简介及初体验" class="headerlink" title="Express框架简介及初体验"></a>Express框架简介及初体验</h2><h3 id="Express框架是什么"><a href="#Express框架是什么" class="headerlink" title="Express框架是什么"></a>Express框架是什么</h3><p>Express是一个基于<strong><font color="#f00">Node平台</font></strong>的<strong><font color="#f00">web应用开发框架</font></strong>，它提供了一系列的强大特性，帮助你创建各种Web应用。我们可以使用 <strong><font color="#f00">npm install express</font></strong>  命令进行下载。</p><h3 id="Express框架特性"><a href="#Express框架特性" class="headerlink" title="Express框架特性"></a>Express框架特性</h3><ul><li>提供了方便<strong><font color="#f00">简洁的路由定义</font></strong>方式</li><li>对获取HTTP<strong><font color="#f00">请求参数</font></strong>进行了<strong><font color="#f00">简化处理</font></strong></li><li>对<strong><font color="#f00">模板引擎支持程度高</font></strong>，方便渲染动态HTML页面</li><li>提供了<strong><font color="#f00">中间件</font></strong>机制有效<strong><font color="#f00">控制HTTP请求</font></strong></li><li>拥有大量第三方中间件对功能进行扩展</li></ul><h3 id="原生Node-js与Express框架对比之路由"><a href="#原生Node-js与Express框架对比之路由" class="headerlink" title="原生Node.js与Express框架对比之路由"></a>原生Node.js与Express框架对比之路由</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取客户端的请求路径</span><br><span class="line">    let &#123; pathname &#125; = url.parse(req.url);</span><br><span class="line">    // 对请求路径进行判断 不同的路径地址响应不同的内容</span><br><span class="line">    if (pathname == &apos;/&apos; || pathname == &apos;index&apos;) &#123;</span><br><span class="line">       res.end(&apos;欢迎来到首页&apos;);</span><br><span class="line">    &#125; else if (pathname == &apos;/list&apos;) &#123;</span><br><span class="line">       res.end(&apos;欢迎来到列表页页&apos;);</span><br><span class="line">    &#125; else if (pathname == &apos;/about&apos;) &#123;</span><br><span class="line">       res.end(&apos;欢迎来到关于我们页面&apos;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       res.end(&apos;抱歉, 您访问的页面出游了&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 当客户端以get方式访问/时</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 对客户端做出响应</span><br><span class="line">    res.send(&apos;Hello Express&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 当客户端以post方式访问/add路由时</span><br><span class="line">app.post(&apos;/add&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   res.send(&apos;使用post方式请求了/add路由&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="原生Node-js与Express框架对比之获取请求参数"><a href="#原生Node-js与Express框架对比之获取请求参数" class="headerlink" title="原生Node.js与Express框架对比之获取请求参数"></a>原生Node.js与Express框架对比之获取请求参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 获取GET参数</span><br><span class="line">   let &#123;query&#125; = url.parse(req.url, true);</span><br><span class="line">   // 获取POST参数</span><br><span class="line">   let postData = &apos;&apos;;</span><br><span class="line">   req.on(&apos;data&apos;, (chunk) =&gt; &#123;</span><br><span class="line">       postData += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   req.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class="line">       console.log(querystring.parse(postData)</span><br><span class="line">   &#125;)); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 获取GET参数</span><br><span class="line">   console.log(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 获取POST参数</span><br><span class="line">   console.log(req.body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express初体验"><a href="#Express初体验" class="headerlink" title="Express初体验"></a>Express初体验</h3><p>使用Express框架创建web服务器及其简单，调用express模块返回的函数即可。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 引入Express框架</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">// 使用框架创建web服务器</span><br><span class="line">const app = express();</span><br><span class="line">// 当客户端以get方式访问/路由时</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 对客户端做出响应 send方法会根据内容的类型自动设置请求头</span><br><span class="line">   res.send(&apos;Hello Express&apos;); // &lt;h2&gt;Hello Express&lt;/h2&gt; &#123;say: &apos;hello&apos;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 程序监听3000端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h3><p>中间件就是一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。</p><p><img src="/前端笔记/node-js-day06/image-20200525170133469.png" alt></p><p>中间件主要由两部分构成，中间件方法以及请求处理函数。<br>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;请求路径&apos;, &apos;处理函数&apos;)   // 接收并处理get请求</span><br><span class="line">app.post(&apos;请求路径&apos;, &apos;处理函数&apos;)  // 接收并处理post请求</span><br></pre></td></tr></table></figure><p>可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。<br>默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。<br>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/request&apos;, (req, res, next) =&gt; &#123;</span><br><span class="line">    req.name = &quot;张三&quot;;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(&apos;/request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(req.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-use中间件用法"><a href="#app-use中间件用法" class="headerlink" title="app.use中间件用法"></a>app.use中间件用法</h3><p>app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/admin&apos;, (req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="中间件应用"><a href="#中间件应用" class="headerlink" title="中间件应用"></a>中间件应用</h3><ol><li>路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面。</li><li>网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中。</li><li>自定义404页面</li></ol><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><p>在程序执行的过程中，不可避免的会出现一些无法预料的错误，比如文件读取失败，数据库连接失败。<br>错误处理中间件是一个集中处理错误的地方。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use((err, req, res, next) =&gt; &#123;</span><br><span class="line">    res.status(500).send(&apos;服务器发生未知错误&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当程序出现错误时，调用next()方法，并且将错误信息通过参数的形式传递给next()方法，即可触发错误处理中间件。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> app.get(&quot;/&quot;, (req, res, next) =&gt; &#123;</span><br><span class="line">     fs.readFile(&quot;/file-does-not-exist&quot;, (err, data) =&gt; &#123;</span><br><span class="line">         if (err) &#123;</span><br><span class="line">            next(err);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h3><p>在node.js中，异步API的错误信息都是通过回调函数获取的，支持Promise对象的异步API发生错误可以通过catch方法捕获。<br>异步函数执行如果发生错误要如何捕获错误呢？</p><p>try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能其他类型的API发生的错误。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(&quot;/&quot;, async (req, res, next) =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await User.find(&#123;name: &apos;张三&apos;&#125;)</span><br><span class="line">    &#125;catch(ex) &#123;</span><br><span class="line">        next(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Express框架请求处理"><a href="#Express框架请求处理" class="headerlink" title="Express框架请求处理"></a>Express框架请求处理</h2><h3 id="构建模块化路由"><a href="#构建模块化路由" class="headerlink" title="构建模块化路由"></a>构建模块化路由</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;) </span><br><span class="line">// 创建路由对象</span><br><span class="line">const home = express.Router();</span><br><span class="line">// 将路由和请求路径进行匹配</span><br><span class="line">app.use(&apos;/home&apos;, home);</span><br><span class="line"> // 在home路由下继续创建路由</span><br><span class="line">home.get(&apos;/index&apos;, () =&gt; &#123;</span><br><span class="line">         //  /home/index</span><br><span class="line">        res.send(&apos;欢迎来到博客展示页面&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="构建模块化路由-1"><a href="#构建模块化路由-1" class="headerlink" title="构建模块化路由"></a>构建模块化路由</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// home.js</span><br><span class="line">const home = express.Router(); </span><br><span class="line">home.get(&apos;/index&apos;, () =&gt; &#123;</span><br><span class="line">    res.send(&apos;欢迎来到博客展示页面&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = home;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// admin.js</span><br><span class="line">const admin = express.Router();</span><br><span class="line">admin.get(&apos;/index&apos;, () =&gt; &#123;</span><br><span class="line">    res.send(&apos;欢迎来到博客管理页面&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = admin;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">const home = require(&apos;./route/home.js&apos;);</span><br><span class="line">const admin = require(&apos;./route/admin.js&apos;);</span><br><span class="line">app.use(&apos;/home&apos;, home);</span><br><span class="line">app.use(&apos;/admin&apos;, admin);</span><br></pre></td></tr></table></figure><h3 id="GET参数的获取"><a href="#GET参数的获取" class="headerlink" title="GET参数的获取"></a>GET参数的获取</h3><p>Express框架中使用<strong><font color="#f00">req.query</font></strong>即可获取GET参数，框架内部会将GET参数转换为对象并返回。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 接收地址栏中问号后面的参数</span><br><span class="line">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   console.log(req.query); // &#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: &quot;30&quot;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="POST参数的获取"><a href="#POST参数的获取" class="headerlink" title="POST参数的获取"></a>POST参数的获取</h3><p>Express中接收post请求参数需要借助第三方包 body-parser。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入body-parser模块</span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">// 配置body-parser模块</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">// 接收请求</span><br><span class="line">app.post(&apos;/add&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 接收请求参数</span><br><span class="line">   console.log(req.body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express路由参数"><a href="#Express路由参数" class="headerlink" title="Express路由参数"></a>Express路由参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/find/:id&apos;, (req, res) =&gt; &#123; </span><br><span class="line">    console.log(req.params); // &#123;id: 123&#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:3000/find/123</span><br></pre></td></tr></table></figure><h3 id="静态资源的处理"><a href="#静态资源的处理" class="headerlink" title="静态资源的处理"></a>静态资源的处理</h3><p>通过Express内置的<strong><font color="#f00">express.static</font></strong>可以方便地托管静态文件，例如img、CSS、JavaScript 文件等。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;));</span><br></pre></td></tr></table></figure><p>现在，public 目录下面的文件就可以访问了。</p><ul><li><a href="http://localhost:3000/images/kitten.jpg" target="_blank" rel="noopener">http://localhost:3000/images/kitten.jpg</a></li><li><a href="http://localhost:3000/css/style.css" target="_blank" rel="noopener">http://localhost:3000/css/style.css</a></li><li><a href="http://localhost:3000/js/app.js" target="_blank" rel="noopener">http://localhost:3000/js/app.js</a></li><li><a href="http://localhost:3000/images/bg.png" target="_blank" rel="noopener">http://localhost:3000/images/bg.png</a></li><li><a href="http://localhost:3000/hello.html" target="_blank" rel="noopener">http://localhost:3000/hello.html</a> </li></ul><h2 id="express-art-template模板引擎"><a href="#express-art-template模板引擎" class="headerlink" title="express-art-template模板引擎"></a>express-art-template模板引擎</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul><li>为了使art-template模板引擎能够更好的和Express框架配合，模板引擎官方在原art-template模板引擎的基础上封装了express-art-template。</li><li>使用<strong><font color="#f00">npm install art-template express-art-template</font></strong>命令进行安装。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> // 当渲染后缀为art的模板时 使用express-art-template</span><br><span class="line">app.engine(&apos;art&apos;, require(&apos;express-art-template&apos;));</span><br><span class="line"> // 设置模板存放目录</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line"> // 渲染模板时不写后缀 默认拼接art后缀</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;art&apos;);</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 渲染模板</span><br><span class="line">    res.render(&apos;index&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-locals-对象"><a href="#app-locals-对象" class="headerlink" title="app.locals 对象"></a>app.locals 对象</h3><p>将变量设置到app.locals对象下面，这个数据在所有的模板中都可以获取到。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> app.locals.users = [&#123;</span><br><span class="line">     name: &apos;张三&apos;,</span><br><span class="line">     age: 20</span><br><span class="line"> &#125;,&#123;</span><br><span class="line">     name: &apos;李四&apos;,</span><br><span class="line">     age: 20</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.Express框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够使用Express创建web服务器&lt;/li&gt;
&lt;li&gt;能够使用Express处理请求参数&lt;/li&gt;
&lt;li&gt;能够使用Express处理静态资源&lt;/li&gt;
&lt;li&gt;能够使用中间件处理请求&lt;/li&gt;
&lt;li&gt;能够在Express中集成art-template模板引擎&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day05/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day05/</id>
    <published>2020-05-25T08:11:12.000Z</published>
    <updated>2020-05-25T08:51:39.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.模板引擎artTemplate</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够使用模板引擎渲染数据</li><li>能够使用模板引擎进行原文输出</li><li>能够使用循环输出数据</li><li>能够知道如何引用子模板</li><li>能够知道如何如何进行模板继承</li></ul><a id="more"></a><h2 id="模板引擎的基础概念"><a href="#模板引擎的基础概念" class="headerlink" title="模板引擎的基础概念"></a>模板引擎的基础概念</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板引擎是第三方模块。<br>让开发者以更加友好的方式拼接字符串，使项目代码更加清晰、更加易于维护。</p><p><img src="/前端笔记/node-js-day05/image-20200525163951964.png" alt></p><h3 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h3><ol><li>在命令行工具中使用 <strong><font color="#f00">npm install art-template</font></strong> 命令进行下载</li><li>使用const template = require(‘art-template’)引入模板引擎</li><li>告诉模板引擎要拼接的数据和模板在哪 const html = template(‘模板路径’, 数据);</li><li>使用模板语法告诉模板引擎，模板与数据应该如何进行拼接 </li></ol><h3 id="art-template代码示例"><a href="#art-template代码示例" class="headerlink" title="art-template代码示例"></a>art-template代码示例</h3><p><img src="/前端笔记/node-js-day05/image-20200525164205035.png" alt></p><h2 id="模板引擎的语法"><a href="#模板引擎的语法" class="headerlink" title="模板引擎的语法"></a>模板引擎的语法</h2><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><ul><li><p>art-template同时支持两种模板语法：标准语法和原始语法。</p></li><li><p>标准语法可以让模板更容易读写，原始语法具有强大的逻辑处理能力。</p></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>将某项数据输出在模板中，标准语法和原始语法如下：</p><p><img src="/前端笔记/node-js-day05/image-20200525164731879.png" alt></p><h3 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h3><p>如果数据中携带HTML标签，默认模板引擎不会解析标签，会将其转义后输出。</p><p><img src="/前端笔记/node-js-day05/image-20200525164745112.png" alt></p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><img src="/前端笔记/node-js-day05/image-20200525164554780.png" alt></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><img src="/前端笔记/node-js-day05/image-20200525164803095.png" alt></p><h3 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h3><p>使用子模板可以将网站公共区块(头部、底部)抽离到单独的文件中。</p><p><img src="/前端笔记/node-js-day05/image-20200525164823479.png" alt></p><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>使用模板继承可以将网站HTML骨架抽离到单独的文件中，其他页面模板可以继承骨架文件。</p><p><img src="/前端笔记/node-js-day05/image-20200525162036452.png" alt></p><p><img src="/前端笔记/node-js-day05/image-20200525162104183.png" alt></p><h3 id="模板继承示例"><a href="#模板继承示例" class="headerlink" title="模板继承示例"></a>模板继承示例</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;HTML骨架模板&lt;/title&gt;</span><br><span class="line">        &#123;&#123;block &apos;head&apos;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &#123;&#123;block &apos;content&apos;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--index.art 首页模板--&gt;</span><br><span class="line">&#123;&#123;extend &apos;./layout.art&apos;&#125;&#125;</span><br><span class="line">&#123;&#123;block &apos;head&apos;&#125;&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;custom.css&quot;&gt; &#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block &apos;content&apos;&#125;&#125; &lt;p&gt;This is just an awesome page.&lt;/p&gt; &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h3><ol><li>向模板中导入变量 template.defaults.imports.变量名 = 变量值;</li><li>设置模板根目录 template.defaults.root = 模板目录</li><li>设置模板默认后缀 template.defaults.extname = ‘.art’</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例介绍-–-学生档案管理"><a href="#案例介绍-–-学生档案管理" class="headerlink" title="案例介绍 – 学生档案管理"></a>案例介绍 – 学生档案管理</h3><p>目标：模板引擎应用，强化node.js项目制作流程。</p><p>知识点：http请求响应、数据库、模板引擎、静态资源访问。</p><p><img src="/前端笔记/node-js-day05/image-20200525162236571.png" alt></p><h3 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h3><ol><li>建立项目文件夹并生成项目描述文件</li><li>创建网站服务器实现客户端和服务器端通信</li><li>连接数据库并根据需求设计学员信息表</li><li>创建路由并实现页面模板呈递</li><li>实现静态资源访问</li><li>实现学生信息添加功能</li><li>实现学生信息展示功能</li></ol><h3 id="第三方模块-router"><a href="#第三方模块-router" class="headerlink" title="第三方模块 router"></a>第三方模块 router</h3><p><strong>功能：</strong>实现路由<br><strong>使用步骤：</strong></p><ol><li>获取路由对象</li><li>调用路由对象提供的方法创建路由</li><li>启用路由，使路由生效</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const serveStatic = require(&apos;serve-static&apos;)</span><br><span class="line">const serve = serveStatic(&apos;public&apos;)</span><br><span class="line">server.on(&apos;request&apos;, () =&gt; &#123; </span><br><span class="line">    serve(req, res)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(3000)</span><br></pre></td></tr></table></figure><h3 id="添加学生信息功能步骤分析"><a href="#添加学生信息功能步骤分析" class="headerlink" title="添加学生信息功能步骤分析"></a>添加学生信息功能步骤分析</h3><ol><li>在模板的表单中指定请求地址与请求方式</li><li>为每一个表单项添加name属性</li><li>添加实现学生信息功能路由</li><li>接收客户端传递过来的学生信息</li><li>将学生信息添加到数据库中</li><li>将页面重定向到学生信息列表页面</li></ol><h3 id="学生信息列表页面分析"><a href="#学生信息列表页面分析" class="headerlink" title="学生信息列表页面分析"></a>学生信息列表页面分析</h3><ol><li>从数据库中将所有的学生信息查询出来</li><li>通过模板引擎将学生信息和HTML模板进行拼接</li><li>将拼接好的HTML模板响应给客户端</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.模板引擎artTemplate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够使用模板引擎渲染数据&lt;/li&gt;
&lt;li&gt;能够使用模板引擎进行原文输出&lt;/li&gt;
&lt;li&gt;能够使用循环输出数据&lt;/li&gt;
&lt;li&gt;能够知道如何引用子模板&lt;/li&gt;
&lt;li&gt;能够知道如何如何进行模板继承&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day04/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day04/</id>
    <published>2020-05-25T07:36:41.000Z</published>
    <updated>2020-05-25T08:13:01.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.MongoDB数据库</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够安装数据库软件 </li><li>能够知道集合、文档的概念</li><li>能够使用mongoose创建集合的方法创建集合</li><li>能够对数据库中的数据进行增删改查操作</li></ul><a id="more"></a><h2 id="数据库概述及环境搭建"><a href="#数据库概述及环境搭建" class="headerlink" title="数据库概述及环境搭建"></a>数据库概述及环境搭建</h2><h3 id="为什么要使用数据库"><a href="#为什么要使用数据库" class="headerlink" title="为什么要使用数据库"></a>为什么要使用数据库</h3><ul><li>动态网站中的数据都是存储在数据库中的</li><li>数据库可以用来持久存储客户端通过表单收集的用户信息</li><li>数据库软件本身可以对数据进行高效的管理</li></ul><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库即存储数据的仓库，可以将数据进行有序的分门别类的存储。它是独立于语言之外的软件，可以通过API去操作它。<br>常见的数据库软件有：<strong>mysql</strong>、<strong>mongoDB</strong>、<strong>oracle</strong>。</p><p><img src="/前端笔记/node-js-day04/image-20200525154041354.png" alt></p><h3 id="MongoDB数据库下载安装"><a href="#MongoDB数据库下载安装" class="headerlink" title="MongoDB数据库下载安装"></a>MongoDB数据库下载安装</h3><p>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></p><p><img src="/前端笔记/node-js-day04/image-20200525154234793.png" alt></p><h3 id="MongoDB可视化软件"><a href="#MongoDB可视化软件" class="headerlink" title="MongoDB可视化软件"></a>MongoDB可视化软件</h3><p>MongoDB可视化操作软件，是使用图形界面操作数据库的一种方式。</p><p><img src="/前端笔记/node-js-day04/image-20200525154309472.png" alt></p><h3 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h3><p>在一个数据库软件中可以包含多个数据仓库，在每个数据仓库中可以包含多个数据集合，每个数据集合中可以包含多条文档（具体的数据）。</p><table><thead><tr><th align="left">术语</th><th align="left">解释说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">数据库，mongoDB数据库软件中可以建立多个数据库</td></tr><tr><td align="left">collection</td><td align="left">集合，一组数据的集合，可以理解为JavaScript中的数组</td></tr><tr><td align="left">document</td><td align="left">文档，一条具体的数据，可以理解为JavaScript中的对象</td></tr><tr><td align="left">field</td><td align="left">字段，文档中的属性名称，可以理解为JavaScript中的对象属性</td></tr></tbody></table><h3 id="Mongoose第三方包"><a href="#Mongoose第三方包" class="headerlink" title="Mongoose第三方包"></a>Mongoose第三方包</h3><ul><li>使用Node.js操作MongoDB数据库需要依赖Node.js第三方包mongoose</li><li>使用<strong><font color="#f00">npm install mongoose</font></strong>命令下载</li></ul><h3 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h3><p>在命令行工具中运行<strong><font color="#f00">net start mongoDB</font></strong>即可启动MongoDB，否则MongoDB将无法连接。</p><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>使用mongoose提供的<strong><font color="#f00">connect</font></strong>方法即可连接数据库。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(&apos;mongodb://localhost/playground&apos;)</span><br><span class="line">    .then(() =&gt; console.log(&apos;数据库连接成功&apos;))</span><br><span class="line">    .catch(err =&gt; console.log(&apos;数据库连接失败&apos;, err));</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在MongoDB中<strong><font color="#f00">不需要显式创建数据库</font></strong>，如果正在使用的数据库不存在，<strong><font color="#f00">MongoDB会自动创建</font></strong>。</p><h2 id="MongoDB增删改查操作"><a href="#MongoDB增删改查操作" class="headerlink" title="MongoDB增删改查操作"></a>MongoDB增删改查操作</h2><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>创建集合分为两步，一是对<strong><font color="#f00">对集合设定规则</font></strong>，二是<strong><font color="#f00">创建集合</font></strong>，创建mongoose.Schema构造函数的实例即可创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> // 设定集合规则</span><br><span class="line">const courseSchema = new mongoose.Schema(&#123;</span><br><span class="line">    name: String,</span><br><span class="line">    author: String,</span><br><span class="line">    isPublished: Boolean</span><br><span class="line">&#125;);</span><br><span class="line"> // 创建集合并应用规则</span><br><span class="line">const Course = mongoose.model(&apos;Course&apos;, courseSchema); // courses</span><br></pre></td></tr></table></figure><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>创建文档实际上就是<strong><font color="#f00">向集合中插入数据</font></strong>。<br>分为两步：</p><ol><li>创建集合实例。</li><li>调用实例对象下的save方法将数据保存到数据库中。</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> // 创建集合实例</span><br><span class="line">const course = new Course(&#123;</span><br><span class="line">    name: &apos;Node.js course&apos;,</span><br><span class="line">    author: &apos;董冬懂冻&apos;,</span><br><span class="line">    tags: [&apos;node&apos;, &apos;backend&apos;],</span><br><span class="line">    isPublished: true</span><br><span class="line">&#125;);</span><br><span class="line"> // 将数据保存到数据库中</span><br><span class="line">course.save();</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Course.create(&#123;name: &apos;JavaScript基础&apos;, author: &apos;董冬懂冻&apos;, isPublish: true&#125;, (err, doc) =&gt; &#123; </span><br><span class="line">     //  错误对象</span><br><span class="line">    console.log(err)</span><br><span class="line">     //  当前插入的文档</span><br><span class="line">    console.log(doc)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Course.create(&#123;name: &apos;JavaScript基础&apos;, author: &apos;董冬懂冻&apos;, isPublish: true&#125;)</span><br><span class="line">      .then(doc =&gt; console.log(doc))</span><br><span class="line">      .catch(err =&gt; console.log(err))</span><br></pre></td></tr></table></figure><h3 id="mongoDB数据库导入数据"><a href="#mongoDB数据库导入数据" class="headerlink" title="mongoDB数据库导入数据"></a>mongoDB数据库导入数据</h3><p>mongoimport –d 数据库名称 –c 集合名称 –file 要导入的数据文件<br>找到mongodb数据库的安装目录，将安装目录下的bin目录放置在环境变量中。</p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//  根据条件查找文档（条件为空则查找所有文档）</span><br><span class="line">Course.find().then(result =&gt; console.log(result))</span><br><span class="line"></span><br><span class="line">// 返回文档集合</span><br><span class="line">[&#123;</span><br><span class="line">    _id: 5c0917ed37ec9b03c07cf95f,</span><br><span class="line">    name: &apos;node.js基础&apos;,</span><br><span class="line">    author: &apos;董冬懂冻‘</span><br><span class="line">&#125;,&#123;</span><br><span class="line">     _id: 5c09dea28acfb814980ff827,</span><br><span class="line">     name: &apos;Javascript&apos;,</span><br><span class="line">     author: &apos;董冬懂冻‘</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//  根据条件查找文档</span><br><span class="line">Course.findOne(&#123;name: &apos;node.js基础&apos;&#125;).then(result =&gt; console.log(result))</span><br><span class="line"></span><br><span class="line">// 返回文档</span><br><span class="line"> &#123;</span><br><span class="line">    _id: 5c0917ed37ec9b03c07cf95f,</span><br><span class="line">    name: &apos;node.js基础&apos;,</span><br><span class="line">    author: &apos;董冬懂冻‘</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  匹配大于 小于</span><br><span class="line">User.find(&#123;age: &#123;$gt: 20, $lt: 50&#125;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  匹配包含</span><br><span class="line">User.find(&#123;hobbies: &#123;$in: [&apos;敲代码&apos;]&#125;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  选择要查询的字段  </span><br><span class="line">User.find().select(&apos;name email&apos;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将数据按照年龄进行排序</span><br><span class="line">User.find().sort(&apos;age&apos;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  skip 跳过多少条数据  limit 限制查询数量</span><br><span class="line">User.find().skip(2).limit(2).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> // 删除单个</span><br><span class="line">Course.findOneAndDelete(&#123;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> // 删除多个</span><br><span class="line">User.deleteMany(&#123;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 更新单个</span><br><span class="line">User.updateOne(&#123;查询条件&#125;, &#123;要修改的值&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 更新多个</span><br><span class="line">User.updateMany(&#123;查询条件&#125;, &#123;要更改的值&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><h3 id="mongoose验证"><a href="#mongoose验证" class="headerlink" title="mongoose验证"></a>mongoose验证</h3><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败。</p><ul><li>required: true 必传字段</li><li>minlength：3 字符串最小长度</li><li>maxlength: 20 字符串最大长度</li><li>min: 2 数值最小为2</li><li>max: 100 数值最大为100</li><li>enum: [‘html’, ‘css’, ‘javascript’, ‘node.js’]</li><li>trim: true 去除字符串两边的空格</li><li>validate: 自定义验证器</li><li>default: 默认值</li></ul><h3 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h3><p>通常<strong><font color="#f00">不同集合的数据之间是有关系的</font></strong>，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联。</p><ul><li>使用id对集合进行关联</li><li>使用populate方法进行关联集合查询</li></ul><p><img src="/前端笔记/node-js-day04/image-20200525155834084.png" alt></p><h3 id="集合关联实现"><a href="#集合关联实现" class="headerlink" title="集合关联实现"></a>集合关联实现</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 用户集合</span><br><span class="line">const User = mongoose.model(&apos;User&apos;, new mongoose.Schema(&#123; name: &#123; type: String &#125; &#125;)); </span><br><span class="line"></span><br><span class="line">// 文章集合</span><br><span class="line">const Post = mongoose.model(&apos;Post&apos;, new mongoose.Schema(&#123;</span><br><span class="line">    title: &#123; type: String &#125;,</span><br><span class="line">    // 使用ID将文章集合和作者集合进行关联</span><br><span class="line">    author: &#123; type: mongoose.Schema.Types.ObjectId, ref: &apos;User&apos; &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">//联合查询</span><br><span class="line">Post.find()</span><br><span class="line">      .populate(&apos;author&apos;)</span><br><span class="line">      .then((err, result) =&gt; console.log(result));</span><br></pre></td></tr></table></figure><h3 id="案例：用户信息增删改查"><a href="#案例：用户信息增删改查" class="headerlink" title="案例：用户信息增删改查"></a>案例：用户信息增删改查</h3><ol><li>搭建网站服务器，实现客户端与服务器端的通信</li><li>连接数据库，创建用户集合，向集合中插入文档</li><li>当用户访问/list时，将所有用户信息查询出来</li><li>将用户信息和表格HTML进行拼接并将拼接结果响应回客户端</li><li>当用户访问/add时，呈现表单页面，并实现添加用户信息功能</li><li>当用户访问/modify时，呈现修改页面，并实现修改用户信息功能</li><li>当用户访问/delete时，实现用户删除功能</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.MongoDB数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够安装数据库软件 &lt;/li&gt;
&lt;li&gt;能够知道集合、文档的概念&lt;/li&gt;
&lt;li&gt;能够使用mongoose创建集合的方法创建集合&lt;/li&gt;
&lt;li&gt;能够对数据库中的数据进行增删改查操作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day03/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day03/</id>
    <published>2020-05-25T06:44:49.000Z</published>
    <updated>2020-05-25T07:37:16.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.请求响应原理及HTTP协议</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><p>能够知道B/S软件体系结构 </p></li><li><p>能够搭建Web服务器</p></li><li><p>能够使用获取GET、POST参数的方式获取参数</p></li><li><p>能够掌握如何制作路由</p></li><li><p>能够知道同步异步的概念</p></li><li><p>能够知道回调函数的概念</p></li></ul><a id="more"></a><h2 id="服务器端基础概念"><a href="#服务器端基础概念" class="headerlink" title="服务器端基础概念"></a>服务器端基础概念</h2><h3 id="网站的组成"><a href="#网站的组成" class="headerlink" title="网站的组成"></a>网站的组成</h3><ul><li>网站应用程序主要分为两大部分：客户端和服务器端。</li><li>客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用HTML、CSS、JavaScript构建。</li><li>服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。</li></ul><p><img src="/前端笔记/node-js-day03/image-20200525144850186.png" alt></p><h3 id="Node网站服务器"><a href="#Node网站服务器" class="headerlink" title="Node网站服务器"></a>Node网站服务器</h3><p>能够提供网站访问服务的机器就是网站服务器，它能够接收客户端的<strong><font color="#f00">请求</font></strong>，能够对请求做出<strong><font color="#f00">响应</font></strong>。</p><p><img src="/前端笔记/node-js-day03/image-20200525145003480.png" alt></p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>互联网中设备的唯一标识。<br>IP是Internet Protocol Address的简写，代表互联网协议地址.</p><p><img src="/前端笔记/node-js-day03/image-20200525145132728.png" alt></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>由于IP地址难于记忆，所以产生了域名的概念，所谓域名就是平时上网所使用的网址。<br><a href="https://www.itfool.cn">https://www.itfool.cn</a><br>虽然在地址栏中输入的是网址, 但是最终还是会将域名转换为ip才能访问到指定的网站服务器。</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口是计算机与外界通讯交流的出口，用来区分服务器电脑中提供的不同的服务。</p><p><img src="/前端笔记/node-js-day03/image-20200525145530866.png" alt></p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符，又叫URL（Uniform Resource Locator），是专为标识Internet网上资源位置而设的一种编址方式，我们平时所说的网页地址指的即是URL。</p><p><strong>URL的组成</strong></p><ul><li><p>传输协议: //服务器IP或域名:端口/资源所在位置标识</p><p><a href="http://www.itfool.cn/前端笔记/node-js-day03/">http://www.itfool.cn/前端笔记/node-js-day03/</a></p></li><li><p>http：超文本传输协议，提供了一种发布和接收HTML页面的方法。</p></li></ul><h3 id="开发过程中客户端和服务器端说明"><a href="#开发过程中客户端和服务器端说明" class="headerlink" title="开发过程中客户端和服务器端说明"></a>开发过程中客户端和服务器端说明</h3><p>在开发阶段，客户端和服务器端使用同一台电脑，即开发人员电脑。</p><p><img src="/前端笔记/node-js-day03/image-20200525145818182.png" alt></p><h2 id="创建web服务器"><a href="#创建web服务器" class="headerlink" title="创建web服务器"></a>创建web服务器</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> // 引用系统模块</span><br><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line"> // 创建web服务器</span><br><span class="line">const app = http.createServer();</span><br><span class="line"> // 当客户端发送请求的时候</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">       //  响应</span><br><span class="line">      res.end(&apos;&lt;h1&gt;hi, user&lt;/h1&gt;&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"> // 监听3000端口</span><br><span class="line">app.listen(3000);</span><br><span class="line">console.log(&apos;服务器已启动，监听3000端口，请访问 localhost:3000&apos;)</span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="HTTP协议的概念"><a href="#HTTP协议的概念" class="headerlink" title="HTTP协议的概念"></a>HTTP协议的概念</h3><p><strong><font color="#f00">超文本传输协议</font></strong>（英文：HyperText Transfer Protocol，缩写：<strong><font color="#f00">HTTP</font></strong>）规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，是客户端（用户）和服务器端（网站）请求和应答的标准。</p><p><img src="/前端笔记/node-js-day03/image-20200525150058605.png" alt></p><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>在HTTP请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，并且要遵守规定好的格式。</p><p><img src="/前端笔记/node-js-day03/image-20200525150132970.png" alt></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p><strong>1. 请求方式 （Request Method）</strong></p><ul><li>GET     请求数据</li><li>POST   发送数据</li></ul><p><strong>2. 请求地址 （Request URL）</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    req.headers  // 获取请求报文</span><br><span class="line">    req.url      // 获取请求地址</span><br><span class="line">    req.method   // 获取请求方法</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><img src="/前端笔记/node-js-day03/image-20200525150505527.png" alt></p><p><strong>1. HTTP状态码</strong></p><ul><li>200 请求成功</li><li>404 请求的资源没有被找到</li><li>500 服务器端错误</li><li>400 客户端请求有语法错误</li></ul><p><strong>2.内容类型</strong></p><ul><li>200 请求成功</li><li>404 请求的资源没有被找到</li><li>500 服务器端错误</li><li>400 客户端请求有语法错误</li></ul><h2 id="HTTP请求与响应处理"><a href="#HTTP请求与响应处理" class="headerlink" title="HTTP请求与响应处理"></a>HTTP请求与响应处理</h2><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>客户端向服务器端发送请求时，有时需要携带一些客户信息，客户信息需要通过请求参数的形式传递到服务器端，比如登录操作。</p><p><img src="/前端笔记/node-js-day03/image-20200525150642680.png" alt></p><h3 id="GET请求参数"><a href="#GET请求参数" class="headerlink" title="GET请求参数"></a>GET请求参数</h3><ul><li>参数被放置在浏览器地址栏中，例如：<a href="http://localhost:3000/?name=zhangsan&amp;age=20" target="_blank" rel="noopener">http://localhost:3000/?name=zhangsan&amp;age=20</a></li><li>参数获取需要借助系统模块url，url模块用来处理url地址</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">// 导入url系统模块 用于处理url地址</span><br><span class="line">const url = require(&apos;url&apos;);</span><br><span class="line">const app = http.createServer();</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 将url路径的各个部分解析出来并返回对象</span><br><span class="line">        // true 代表将参数解析为对象格式</span><br><span class="line">    let &#123;query&#125; = url.parse(req.url, true);</span><br><span class="line">    console.log(query);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h3 id="POST请求参数"><a href="#POST请求参数" class="headerlink" title="POST请求参数"></a>POST请求参数</h3><ul><li>参数被放置在请求体中进行传输</li><li>获取POST参数需要使用data事件和end事件</li><li>使用querystring系统模块将参数转换为对象格式</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 导入系统模块querystring 用于将HTTP参数转换为对象格式</span><br><span class="line">const querystring = require(&apos;querystring&apos;);</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    let postData = &apos;&apos;;</span><br><span class="line">    // 监听参数传输事件</span><br><span class="line">    req.on(&apos;data&apos;, (chunk) =&gt; postData += chunk;);</span><br><span class="line">    // 监听参数传输完毕事件</span><br><span class="line">    req.on(&apos;end&apos;, () =&gt; &#123; </span><br><span class="line">        console.log(querystring.parse(postData)); </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><a href="http://localhost:3000/index" target="_blank" rel="noopener">http://localhost:3000/index</a><br><a href="http://localhost:3000/login" target="_blank" rel="noopener">http://localhost:3000/login</a><br>路由是指客户端请求地址与服务器端程序代码的对应关系。简单的说，就是请求什么响应什么。</p><p><img src="/前端笔记/node-js-day03/image-20200525150828958.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 当客户端发来请求的时候</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取客户端的请求路径</span><br><span class="line">    let &#123; pathname &#125; = url.parse(req.url);</span><br><span class="line">    if (pathname == &apos;/&apos; || pathname == &apos;/index&apos;) &#123;</span><br><span class="line">        res.end(&apos;欢迎来到首页&apos;);</span><br><span class="line">    &#125; else if (pathname == &apos;/list&apos;) &#123;</span><br><span class="line">        res.end(&apos;欢迎来到列表页页&apos;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       res.end(&apos;抱歉, 您访问的页面出游了&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。</p><div style="text-align: center"><img src="https://itfool.cn/images/logo.png" alt="https://itfool.cn/"></div><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><p>相同的请求地址不同的响应资源，这种资源就是动态资源。</p><p><a href="https://itfool.cn/archives/" target="_blank" rel="noopener">https://itfool.cn/archives/</a></p><p><a href="https://itfool.cn/categories/" target="_blank" rel="noopener">https://itfool.cn/categories/</a></p><p><img src="/前端笔记/node-js-day03/image-20200525152441995.png" alt></p><h3 id="客户端请求途径"><a href="#客户端请求途径" class="headerlink" title="客户端请求途径"></a>客户端请求途径</h3><p><img src="/前端笔记/node-js-day03/image-20200525152738284.png" alt></p><h2 id="Node-js异步编程"><a href="#Node-js异步编程" class="headerlink" title="Node.js异步编程"></a>Node.js异步编程</h2><h3 id="同步API-异步API"><a href="#同步API-异步API" class="headerlink" title="同步API, 异步API"></a>同步API, 异步API</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 路径拼接</span><br><span class="line">const public = path.join(__dirname, &apos;public&apos;);</span><br><span class="line">// 请求地址解析</span><br><span class="line">const urlObj = url.parse(req.url);</span><br><span class="line">// 读取文件</span><br><span class="line">fs.readFile(&apos;./demo.txt&apos;, &apos;utf8&apos;, (err, result) =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>同步API：只有当前API执行完成后，才能继续执行下一个API</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;); </span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><p><strong>异步API：当前API的执行不会阻塞后续代码的执行</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;);</span><br><span class="line">setTimeout(</span><br><span class="line">   () =&gt; &#123; console.log(&apos;last&apos;);</span><br><span class="line">&#125;, 2000);</span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><h3 id="同步API-异步API的区别（-获取返回值-）"><a href="#同步API-异步API的区别（-获取返回值-）" class="headerlink" title="同步API, 异步API的区别（ 获取返回值 ）"></a>同步API, 异步API的区别（ 获取返回值 ）</h3><p>同步API可以从返回值中拿到API执行的结果, 但是异步API是不可以的</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  // 同步</span><br><span class="line">function sum (n1, n2) &#123; </span><br><span class="line">    return n1 + n2;</span><br><span class="line">&#125; </span><br><span class="line">const result = sum (10, 20);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  // 异步</span><br><span class="line">function getMsg () &#123; </span><br><span class="line">    setTimeout(function () &#123; </span><br><span class="line">        return &#123; msg: &apos;Hello Node.js&apos; &#125;</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line">const msg = getMsg ();</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>自己定义函数让别人去调用。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> // getData函数定义</span><br><span class="line">function getData (callback) &#123;&#125;</span><br><span class="line"> // getData函数调用</span><br><span class="line">getData (() =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用回调函数获取异步API执行结果"><a href="#使用回调函数获取异步API执行结果" class="headerlink" title="使用回调函数获取异步API执行结果"></a>使用回调函数获取异步API执行结果</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getMsg (callback) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        callback (&#123; msg: &apos;Hello Node.js&apos; &#125;)</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line">getMsg (function (msg) &#123; </span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="同步API-异步API的区别（代码执行顺序）"><a href="#同步API-异步API的区别（代码执行顺序）" class="headerlink" title="同步API, 异步API的区别（代码执行顺序）"></a>同步API, 异步API的区别（代码执行顺序）</h3><p>同步API从上到下依次执行，前面代码会阻塞后面代码的执行</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 100000; i++) &#123; </span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;for循环后面的代码&apos;);</span><br></pre></td></tr></table></figure><p>异步API不会等待API执行完成后再向下执行代码</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;代码开始执行&apos;); </span><br><span class="line">setTimeout(() =&gt; &#123; console.log(&apos;2秒后执行的代码&apos;)&#125;, 2000);</span><br><span class="line">setTimeout(() =&gt; &#123; console.log(&apos;&quot;0秒&quot;后执行的代码&apos;)&#125;, 0); </span><br><span class="line">console.log(&apos;代码结束执行&apos;);</span><br></pre></td></tr></table></figure><h3 id="Node-js中的异步API"><a href="#Node-js中的异步API" class="headerlink" title="Node.js中的异步API"></a>Node.js中的异步API</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./demo.txt&apos;, (err, result) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var server = http.createServer();</span><br><span class="line">server.on(&apos;request&apos;, (req, res) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><p>如果异步API后面代码的执行依赖当前异步API的执行结果，但实际上后续代码在执行的时候异步API还没有返回结果，这个问题要怎么解决呢？</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./demo.txt&apos;, (err, result) =&gt; &#123;&#125;);</span><br><span class="line">console.log(&apos;文件读取结果&apos;);</span><br></pre></td></tr></table></figure><p>需求：依次读取A文件、B文件、C文件</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise出现的目的是解决Node.js异步编程中回调地狱的问题。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        if (true) &#123;</span><br><span class="line">            resolve(&#123;name: &apos;张三&apos;&#125;)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            reject(&apos;失败了&apos;) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(result =&gt; console.log(result); // &#123;name: &apos;张三&apos;&#125;)</span><br><span class="line">       .catch(error =&gt; console.log(error); // 失败了)</span><br></pre></td></tr></table></figure><h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fn = async () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">async function fn () &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>async关键字</strong></p><ol><li>普通函数定义前加async关键字 普通函数变成异步函数</li><li>异步函数默认返回promise对象</li><li>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</li><li>在异步函数内部使用throw关键字抛出程序异常</li><li>调用异步函数再链式调用then方法获取异步函数执行结果</li><li>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</li></ol><p><strong>await关键字</strong></p><ol><li><p>await关键字只能出现在异步函数中</p></li><li><p>await promise await后面只能写promise对象 写其他类型的API是不不可以的</p></li><li><p>await关键字可是暂停异步函数向下执行 直到promise返回结果</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.请求响应原理及HTTP协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;能够知道B/S软件体系结构 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够搭建Web服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够使用获取GET、POST参数的方式获取参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够掌握如何制作路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够知道同步异步的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够知道回调函数的概念&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day02/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day02/</id>
    <published>2020-05-25T03:43:45.000Z</published>
    <updated>2020-05-25T06:42:38.976Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.模块加载及第三方包</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够使用模块导入导出方法 </li><li>能够使用基本的系统模块</li><li>能够使用常用的第三方包</li><li>能够说出模块的加载机制</li><li>能够知道package.json文件的作用</li></ul><a id="more"></a><h2 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h2><h3 id="JavaScript开发弊端"><a href="#JavaScript开发弊端" class="headerlink" title="JavaScript开发弊端"></a>JavaScript开发弊端</h3><p>JavaScript在使用时存在两大问题，<strong><font color="#f00">文件依赖</font></strong>和<strong><font color="#f00">命名冲突</font></strong>。</p><p><img src="/前端笔记/node-js-day02/image-20200525114923070.png" alt></p><h3 id="生活中的模块化开发"><a href="#生活中的模块化开发" class="headerlink" title="生活中的模块化开发"></a>生活中的模块化开发</h3><p><img src="/前端笔记/node-js-day02/image-20200525114938653.png" alt>)<img src="/前端笔记/node-js-day02/image-20200525114943729.png" alt></p><h3 id="软件中的模块化开发"><a href="#软件中的模块化开发" class="headerlink" title="软件中的模块化开发"></a>软件中的模块化开发</h3><p>一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。</p><p><img src="/前端笔记/node-js-day02/image-20200525115010570.png" alt></p><h3 id="Node-js中模块化开发规范"><a href="#Node-js中模块化开发规范" class="headerlink" title="Node.js中模块化开发规范"></a>Node.js中模块化开发规范</h3><p>Node.js规定一个<strong><font style="color:#f00">JavaScript文件</font></strong>就是一个模块，模块<strong><font style="color:#f00">内部定义的变量和函数</font></strong>默认情况下在<strong><font style="color:#f00">外部无法得到</font></strong></p><p>模块内部可以使用<strong><font style="color:#f00">exports对象进行成员导出</font></strong>， 使用<strong><font style="color:#f00">require方法</font></strong>导入其他模块。</p><p><img src="/前端笔记/node-js-day02/image-20200525115217442.png" alt></p><p><strong>模块成员导出</strong><br><img src="/前端笔记/node-js-day02/image-20200525115505261.png" alt></p><p><strong>模块成员的导入</strong><br><img src="/前端笔记/node-js-day02/image-20200525115611832.png" alt="导入模块时后缀可以省略"></p><p><strong>模块成员导出的另一种方式</strong><br><img src="/前端笔记/node-js-day02/image-20200525115818472.png" alt></p><p><img src="/前端笔记/node-js-day02/image-20200525115827084.png" alt></p><p><strong>模块导出两种方式的联系与区别</strong></p><p><img src="/前端笔记/node-js-day02/image-20200525115944374.png" alt></p><h2 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h2><h3 id="什么是系统模块"><a href="#什么是系统模块" class="headerlink" title="什么是系统模块"></a>什么是系统模块</h3><p>Node运行环境提供的API. 因为这些API都是以模块化的方式进行开发的, 所以我们又称Node运行环境提供的API为系统模块</p><p><img src="/前端笔记/node-js-day02/image-20200525120045940.png" alt></p><h3 id="系统模块fs-文件操作"><a href="#系统模块fs-文件操作" class="headerlink" title="系统模块fs 文件操作"></a>系统模块fs 文件操作</h3><p>f：file 文件 ，s：system 系统，文件操作系统。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure><p><strong>读取文件内容</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.reaFile(&apos;文件路径/文件名称&apos;[,&apos;文件编码&apos;], callback);</span><br></pre></td></tr></table></figure><p><strong>写入文件内容</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(&apos;文件路径/文件名称&apos;, &apos;数据&apos;, callback);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const content = &apos;&lt;h3&gt;正在使用fs.writeFile写入文件内容&lt;/h3&gt;&apos;;</span><br><span class="line"> fs.writeFile(&apos;../index.html&apos;, content, err =&gt; &#123;</span><br><span class="line">   if (err != null) &#123; </span><br><span class="line">       console.log(err);</span><br><span class="line">       return;</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(&apos;文件写入成功&apos;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="系统模块path-路径操作"><a href="#系统模块path-路径操作" class="headerlink" title="系统模块path 路径操作"></a>系统模块path 路径操作</h3><p><strong>为什么要进行路径拼接</strong></p><ul><li>不同操作系统的路径分隔符不统一</li><li>/public/uploads/avatar</li><li>Windows 上是 \   /</li><li>Linux 上是 /</li></ul><p><strong>路径拼接语法</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.join(&apos;路径&apos;, &apos;路径&apos;, ...)</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> // 导入path模块</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"> // 路径拼接</span><br><span class="line">let finialPath = path.join(&apos;itcast&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c.css&apos;);</span><br><span class="line"> // 输出结果 itcast\a\b\c.css</span><br><span class="line">console.log(finialPath);</span><br></pre></td></tr></table></figure><p><strong>相对路径VS绝对路径</strong> </p><ul><li>大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录</li><li>在读取文件或者设置文件路径时都会选择绝对路径</li><li>使用__dirname获取当前文件所在的绝对路径</li></ul><h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><h3 id="什么是第三方模块"><a href="#什么是第三方模块" class="headerlink" title="什么是第三方模块"></a>什么是第三方模块</h3><p> 别人写好的、具有特定功能的、我们能直接使用的模块即第三方模块，由于第三方模块通常都是由多个文件组成并且被放置在一个文件夹中，所以又名包。</p><p><strong>第三方模块有两种存在形式：</strong></p><ul><li>以js文件的形式存在，提供实现项目具体功能的API接口。</li><li>以命令行工具形式存在，辅助项目开发</li></ul><h3 id="获取第三方模块"><a href="#获取第三方模块" class="headerlink" title="获取第三方模块"></a>获取第三方模块</h3><p><strong>npmjs.com</strong>：第三方模块的存储和分发仓库</p><p><img src="/前端笔记/node-js-day02/image-20200525141557238.png" alt></p><p><strong>npm (node package manager) ：</strong> node的第三方模块管理工具</p><ul><li>下载：npm install 模块名称</li><li>卸载：npm unintall package 模块名称</li></ul><p>全局安装与本地安装</p><ul><li>命令行工具：全局安装</li><li>库文件：本地安装</li></ul><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>nodemon是一个命令行工具，用以辅助项目开发。<br>在Node.js中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐。</p><p><strong>使用步骤</strong></p><ol><li>使用npm install nodemon –g 下载它</li><li>在命令行工具中用nodemon命令替代node命令执行文件</li></ol><p><img src="/前端笔记/node-js-day02/image-20200525142103049.png" alt></p><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>nrm ( npm registry manager )：npm下载地址切换工具<br>npm默认的下载地址在国外，国内下载速度慢</p><p><strong>使用步骤</strong></p><ol><li>使用npm install nrm –g 下载它</li><li>查询可用下载地址列表 nrm ls</li><li>切换npm下载地址 nrm use 下载地址名称</li></ol><h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><p>基于node平台开发的前端构建工具<br>将机械化操作编写成任务, 想要执行机械化操作时执行一个命令行命令任务就能自动执行了<br>用机器代替手工，提高开发效率。</p><p><strong>Gulp能做什么</strong></p><ul><li>项目上线，HTML、CSS、JS文件压缩合并</li><li>语法转换（es6、less …）</li><li>公共文件抽离</li><li>修改文件浏览器自动刷新</li></ul><p><strong>Gulp使用</strong></p><ol><li>使用npm install gulp下载gulp库文件</li><li>在项目根目录下建立gulpfile.js文件</li><li>重构项目的文件夹结构 src目录放置源代码文件 dist目录放置构建后文件</li><li>在gulpfile.js文件中编写任务</li><li>在命令行工具中执行gulp任务</li></ol><p><strong>Gulp中提供的方法</strong></p><ul><li>gulp.src()：获取任务要处理的文件</li><li>gulp.dest()：输出文件</li><li>gulp.task()：建立gulp任务</li><li>gulp.watch()：监控文件的变化</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&apos;gulp&apos;);</span><br><span class="line"> // 使用gulp.task()方法建立任务</span><br><span class="line">gulp.task(&apos;first&apos;, () =&gt; &#123;</span><br><span class="line">   // 获取要处理的文件</span><br><span class="line">   gulp.src(&apos;./src/css/base.css&apos;) </span><br><span class="line">   // 将处理后的文件输出到dist目录</span><br><span class="line">   .pipe(gulp.dest(&apos;./dist/css&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Gulp插件</strong></p><ul><li>gulp-htmlmin ：html文件压缩</li><li>gulp-csso ：压缩css</li><li>gulp-babel ：JavaScript语法转化</li><li>gulp-less: less语法转化</li><li>gulp-uglify ：压缩混淆JavaScript</li><li>gulp-file-include 公共文件包含</li><li>browsersync 浏览器实时同步</li></ul><h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><h3 id="node-modules文件夹的问题"><a href="#node-modules文件夹的问题" class="headerlink" title="node_modules文件夹的问题"></a>node_modules文件夹的问题</h3><ol><li>文件夹以及文件过多过碎，当我们将项目整体拷贝给别人的时候,，传输速度会很慢很慢. </li><li>复杂的模块依赖关系需要被记录，确保模块的版本和当前保持一致，否则会导致当前项目运行报错</li></ol><h3 id="package-json文件的作用"><a href="#package-json文件的作用" class="headerlink" title="package.json文件的作用"></a>package.json文件的作用</h3><p>项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等。<br>使用<strong><font style="color:#f00">npm init -y</font></strong>命令生成。</p><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><ul><li>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包，称为项目依赖</li><li>使用npm install 包名命令下载的文件会默认被添加到 package.json 文件的 dependencies 字段中</li></ul><p><img src="/前端笔记/node-js-day02/image-20200525144007369.png" alt></p><h3 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h3><ul><li>在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖</li><li>使用npm install 包名 –save-dev命令将包添加到package.json文件的devDependencies字段中</li></ul><p><img src="/前端笔记/node-js-day02/image-20200525144050137.png" alt></p><h3 id="package-lock-json文件的作用"><a href="#package-lock-json文件的作用" class="headerlink" title="package-lock.json文件的作用"></a>package-lock.json文件的作用</h3><ul><li>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</li><li>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</li></ul><h2 id="Node-js中模块的加载机制"><a href="#Node-js中模块的加载机制" class="headerlink" title="Node.js中模块的加载机制"></a>Node.js中模块的加载机制</h2><h3 id="模块查找规则-当模块拥有路径但没有后缀时"><a href="#模块查找规则-当模块拥有路径但没有后缀时" class="headerlink" title="模块查找规则-当模块拥有路径但没有后缀时"></a>模块查找规则-当模块拥有路径但没有后缀时</h3><p><img src="/前端笔记/node-js-day02/image-20200525144157565.png" alt></p><h3 id="模块查找规则-当模块没有路径且没有后缀时"><a href="#模块查找规则-当模块没有路径且没有后缀时" class="headerlink" title="模块查找规则-当模块没有路径且没有后缀时"></a>模块查找规则-当模块没有路径且没有后缀时</h3><p><img src="/前端笔记/node-js-day02/image-20200525144223190.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.模块加载及第三方包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够使用模块导入导出方法 &lt;/li&gt;
&lt;li&gt;能够使用基本的系统模块&lt;/li&gt;
&lt;li&gt;能够使用常用的第三方包&lt;/li&gt;
&lt;li&gt;能够说出模块的加载机制&lt;/li&gt;
&lt;li&gt;能够知道package.json文件的作用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day01/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day01/</id>
    <published>2020-05-25T02:44:02.000Z</published>
    <updated>2020-05-25T04:14:23.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.Node.js基础</p></blockquote><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>能够知道Node是什么</li><li>能够安装Node运行环境</li><li>能够知道系统环境变量PATH的作用</li><li>能够使用Node环境执行代码</li></ul><a id="more"></a><h1 id="Node开发概述"><a href="#Node开发概述" class="headerlink" title="Node开发概述"></a>Node开发概述</h1><h2 id="为什么要学习服务器端开发基础"><a href="#为什么要学习服务器端开发基础" class="headerlink" title="为什么要学习服务器端开发基础"></a>为什么要学习服务器端开发基础</h2><ul><li>能够和后端程序员更加紧密的配合</li><li>网站业务逻辑前置，学习前端技术需要后端技术支撑（Ajax）</li><li>扩宽知识视野，能够站在更高的角度审视整个项目</li></ul><h2 id="服务器端开发要做的事情"><a href="#服务器端开发要做的事情" class="headerlink" title="服务器端开发要做的事情"></a>服务器端开发要做的事情</h2><ul><li>实现网站的业务逻辑</li><li>数据的增删改查</li></ul><h2 id="为什么选择Node"><a href="#为什么选择Node" class="headerlink" title="为什么选择Node"></a>为什么选择Node</h2><ul><li>使用JavaScript语法开发后端应用</li><li>一些公司要求前端工程师掌握Node开发</li><li>生态系统活跃，有大量开源库可以使用</li><li>前端开发工具大多基于Node开发</li></ul><h2 id="Node是什么"><a href="#Node是什么" class="headerlink" title="Node是什么"></a>Node是什么</h2><p>Node是一个基于Chrome V8引擎的JavaScript代码运行环境。</p><p><img src="/前端笔记/node-js-day01/image-20200525112125520.png" alt>)<img src="/前端笔记/node-js-day01/image-20200525112144698.png" alt></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li><p>浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境</p></li><li><p>Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境</p></li></ul><h1 id="Node运行环境搭建"><a href="#Node运行环境搭建" class="headerlink" title="Node运行环境搭建"></a>Node运行环境搭建</h1><h2 id="Node-js运行环境安装"><a href="#Node-js运行环境安装" class="headerlink" title="Node.js运行环境安装"></a>Node.js运行环境安装</h2><p>国内下载地址：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p><p><img src="/前端笔记/node-js-day01/image-20200525112700103.png" alt></p><h2 id="Node环境安装失败解决办法"><a href="#Node环境安装失败解决办法" class="headerlink" title="Node环境安装失败解决办法"></a>Node环境安装失败解决办法</h2><h3 id="错误代号2502、2503"><a href="#错误代号2502、2503" class="headerlink" title="错误代号2502、2503"></a>错误代号2502、2503</h3><p><img src="/前端笔记/node-js-day01/image-20200525112845407.png" alt><br>失败原因：系统帐户权限不足。<br>解决办法：</p><ul><li>以管理员身份运行powershell命令行工具</li><li>输入运行安装包命令 msiexec /package node安装包位置</li></ul><h3 id="执行命令报错"><a href="#执行命令报错" class="headerlink" title="执行命令报错"></a>执行命令报错</h3><p><img src="/前端笔记/node-js-day01/image-20200525113006006.png" alt></p><p>失败原因：Node安装目录写入环境变量失败<br>解决办法：将Node安装目录添加到环境变量中</p><h3 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h3><p>存储系统中的目录，在命令行中执行命令的时候系统会自动去这些目录中查找命令的位置。</p><p><img src="/前端笔记/node-js-day01/image-20200525113103968.png" alt></p><h1 id="Node-js快速入门"><a href="#Node-js快速入门" class="headerlink" title="Node.js快速入门"></a>Node.js快速入门</h1><h2 id="Node-js-的组成"><a href="#Node-js-的组成" class="headerlink" title="Node.js 的组成"></a>Node.js 的组成</h2><ul><li>JavaScript 由三部分组成，ECMAScript，DOM，BOM。</li><li>Node.js是由ECMAScript及Node 环境提供的一些附加API组成的，包括文件、网络、路径等等一些更加强大的 API。</li></ul><p><img src="/前端笔记/node-js-day01/image-20200525113214336.png" alt>)<img src="/前端笔记/node-js-day01/image-20200525113226035.png" alt></p><h2 id="Node-js基础语法"><a href="#Node-js基础语法" class="headerlink" title="Node.js基础语法"></a>Node.js基础语法</h2><p>所有ECMAScript语法在Node环境中都可以使用。<br>在Node环境下执行代码，使用Node命令执行后缀为.js的文件即可</p><p><img src="/前端笔记/node-js-day01/image-20200525113302254.png" alt></p><h2 id="Node-js全局对象global"><a href="#Node-js全局对象global" class="headerlink" title="Node.js全局对象global"></a>Node.js全局对象global</h2><p>在<font style="color:#f00">浏览器</font>中全局对象是window，在<font style="color:#f00">Node</font>中全局对象是global。</p><p>Node中全局对象下有以下方法，可以在任何地方使用，global可以省略。</p><ul><li>console.log()     在控制台中输出</li><li>setTimeout()     设置超时定时器</li><li>clearTimeout()  清除超时时定时器</li><li>setInterval()      设置间歇定时器</li><li>clearInterval()   清除间歇定时器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.Node.js基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;能够知道Node是什么&lt;/li&gt;
&lt;li&gt;能够安装Node运行环境&lt;/li&gt;
&lt;li&gt;能够知道系统环境变量PATH的作用&lt;/li&gt;
&lt;li&gt;能够使用Node环境执行代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day05/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day05/</id>
    <published>2020-05-23T09:09:06.000Z</published>
    <updated>2020-05-23T09:12:24.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.ES6</p></blockquote><h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出使用let关键字声明变量的特点</li><li>能够使用解构赋值从数组中提取值</li><li>能够说出箭头函数拥有的特性</li><li>能够使用剩余参数接收剩余的函数参数</li><li>能够使用拓展运算符拆分数组</li><li>能够说出模板字符串拥有的特性<a id="more"></a><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2></li></ul><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p><img src="/前端笔记/javascript高级-day05/es-version.png" alt></p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; </span><br><span class="line">     <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a is not defined </span></span><br><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="hljs-string">'abc'</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> tmp; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="hljs-number">0</span>]();</span><br><span class="line">arr[<span class="hljs-number">1</span>]();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day05/let%E9%9D%A2%E8%AF%95%E9%A2%98.png" alt></p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> arr = [];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="hljs-number">0</span>]();</span><br><span class="line">arr[<span class="hljs-number">1</span>]();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day05/let%E9%9D%A2%E8%AF%95%E9%A2%982.png" alt></p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; </span><br><span class="line">     <span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span></span><br></pre></td></tr></table></figure><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> PI; <span class="hljs-comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;</span><br><span class="line">PI = <span class="hljs-number">100</span>; <span class="hljs-comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];</span><br><span class="line">ary[<span class="hljs-number">0</span>] = <span class="hljs-string">'a'</span>;</span><br><span class="line">ary[<span class="hljs-number">1</span>] = <span class="hljs-string">'b'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">// ['a', 'b']; </span></span><br><span class="line">ary = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>]; <span class="hljs-comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="/前端笔记/javascript高级-day05/var&let&const%E5%8C%BA%E5%88%AB.png" alt></p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//1</span></span><br><span class="line"> <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">//2</span></span><br><span class="line"> <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">//3</span></span><br><span class="line"><span class="hljs-comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'zhangsan'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;; </span><br><span class="line"><span class="hljs-keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// 'zhangsan' </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge&#125; = person; <span class="hljs-comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(myName); <span class="hljs-comment">// 'zhangsan' </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(myAge); <span class="hljs-comment">// 20</span></span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="hljs-comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;&#125;<span class="hljs-comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//es6写法</span></span><br><span class="line"><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params">v</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-comment">//es6写法</span></span><br><span class="line"> <span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'张三'</span>&#125; </span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; </span><br><span class="line">         <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-keyword">const</span> resFn = fn.call(obj); </span><br><span class="line"> resFn();</span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">age: <span class="hljs-number">20</span>,</span><br><span class="line">say: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">alert(<span class="hljs-keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.say();<span class="hljs-comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">first, ...args</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(first); <span class="hljs-comment">// 10</span></span><br><span class="line">     <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)</span><br></pre></td></tr></table></figure><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> students = [<span class="hljs-string">'wangwu'</span>, <span class="hljs-string">'zhangsan'</span>, <span class="hljs-string">'lisi'</span>];</span><br><span class="line"><span class="hljs-keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="hljs-built_in">console</span>.log(s1);  <span class="hljs-comment">// 'wangwu' </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(s2);  <span class="hljs-comment">// ['zhangsan', 'lisi']</span></span><br></pre></td></tr></table></figure><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line">...ary  <span class="hljs-comment">// 1, 2, 3</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(...ary);    <span class="hljs-comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 方法一 </span></span><br><span class="line"> <span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"> <span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="line"> <span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="hljs-comment">// 方法二 </span></span><br><span class="line"> ary1.push(...ary2);</span><br></pre></td></tr></table></figure><h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> oDivs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'div'</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//定义一个集合</span></span><br><span class="line"><span class="hljs-keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="hljs-string">'0'</span>: <span class="hljs-string">'a'</span>,</span><br><span class="line">    <span class="hljs-string">'1'</span>: <span class="hljs-string">'b'</span>,</span><br><span class="line">    <span class="hljs-string">'2'</span>: <span class="hljs-string">'c'</span>,</span><br><span class="line">    length: <span class="hljs-number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="hljs-comment">//转成数组</span></span><br><span class="line"><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="hljs-string">"0"</span>: <span class="hljs-number">1</span>,</span><br><span class="line">    <span class="hljs-string">"1"</span>: <span class="hljs-number">2</span>,</span><br><span class="line">    <span class="hljs-string">"length"</span>: <span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">let</span> newAry = <span class="hljs-built_in">Array</span>.from(arrayLike, item =&gt; item *<span class="hljs-number">2</span>)<span class="hljs-comment">//[2,4]</span></span><br></pre></td></tr></table></figure><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ary = [&#123;</span><br><span class="line">     id: <span class="hljs-number">1</span>,</span><br><span class="line">     name: <span class="hljs-string">'张三'</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     id: <span class="hljs-number">2</span>,</span><br><span class="line">     name: <span class="hljs-string">'李四'</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="hljs-keyword">let</span> target = ary.find(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item.id == <span class="hljs-number">2</span>);<span class="hljs-comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];</span><br><span class="line"><span class="hljs-keyword">let</span> index = ary.findIndex(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> value &gt; <span class="hljs-number">9</span>); </span><br><span class="line"><span class="hljs-built_in">console</span>.log(index); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>) <span class="hljs-comment">// true </span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> name = <span class="hljs-string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> name = <span class="hljs-string">'张三'</span>; </span><br><span class="line"><span class="hljs-keyword">let</span> sayHello = <span class="hljs-string">`hello,my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>; <span class="hljs-comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result = &#123; </span><br><span class="line">    name: <span class="hljs-string">'zhangsan'</span>, </span><br><span class="line">    age: <span class="hljs-number">20</span>,</span><br><span class="line">    sex: <span class="hljs-string">'男'</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">let</span> html = <span class="hljs-string">` &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/div&gt; `</span>;</span><br></pre></td></tr></table></figure><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'哈哈哈哈 追不到我吧 我就是这么强大'</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="hljs-keyword">let</span> greet = <span class="hljs-string">`<span class="hljs-subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(greet); <span class="hljs-comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> str = <span class="hljs-string">'Hello world!'</span>;</span><br><span class="line">str.startsWith(<span class="hljs-string">'Hello'</span>) <span class="hljs-comment">// true </span></span><br><span class="line">str.endsWith(<span class="hljs-string">'!'</span>)       <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'x'</span>.repeat(<span class="hljs-number">3</span>)      <span class="hljs-comment">// "xxx" </span></span><br><span class="line"><span class="hljs-string">'hello'</span>.repeat(<span class="hljs-number">2</span>)  <span class="hljs-comment">// "hellohello"</span></span><br></pre></td></tr></table></figure><h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set([1, 2, 3, 4, 4]);//&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();</span><br><span class="line">s.add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>); <span class="hljs-comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.delete(<span class="hljs-number">2</span>)             <span class="hljs-comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.has(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.clear()               <span class="hljs-comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="hljs-comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;ES6语法&quot;&gt;&lt;a href=&quot;#ES6语法&quot; class=&quot;headerlink&quot; title=&quot;ES6语法&quot;&gt;&lt;/a&gt;ES6语法&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够说出使用let关键字声明变量的特点&lt;/li&gt;
&lt;li&gt;能够使用解构赋值从数组中提取值&lt;/li&gt;
&lt;li&gt;能够说出箭头函数拥有的特性&lt;/li&gt;
&lt;li&gt;能够使用剩余参数接收剩余的函数参数&lt;/li&gt;
&lt;li&gt;能够使用拓展运算符拆分数组&lt;/li&gt;
&lt;li&gt;能够说出模板字符串拥有的特性&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://www.itfool.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day04/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day04/</id>
    <published>2020-05-23T09:04:53.000Z</published>
    <updated>2020-05-23T09:09:53.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.正则表达式</p></blockquote><h2 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h2><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p><a id="more"></a><h3 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   /^[a-z0-9_-]{3,16}$/<h2 id="正则表达式在js中的使用"><a href="#正则表达式在js中的使用" class="headerlink" title="正则表达式在js中的使用"></a>正则表达式在js中的使用</h2></li></ol><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过调用RegExp对象的构造函数创建 </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/123/</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(regexp);</span><br></pre></td></tr></table></figure><p>方式二：利用字面量创建 正则表达式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;</span><br></pre></td></tr></table></figure><h3 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-number">123</span>));<span class="hljs-comment">//匹配字符中是否出现123  出现结果为true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'abc'</span>));<span class="hljs-comment">//匹配字符中是否出现123 未出现结果为false</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day04/img4.png" alt></p><h2 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h2><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p><a href="<http://tool.oschina.net/regex">正则测试工具</a></p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/abc/</span>; <span class="hljs-comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="hljs-comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'abc'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'abcd'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'aabcd'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'---------------------------'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc/</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'abc'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'abcd'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'aabcd'</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'---------------------------'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^abc$/</span>; <span class="hljs-comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'abc'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'abcd'</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'aabcd'</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'abcabc'</span>)); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="方括号"><a href="#方括号" class="headerlink" title="[] 方括号"></a>[] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span>; <span class="hljs-comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'andy'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'baby'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'color'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'red'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-keyword">var</span> rg1 = <span class="hljs-regexp">/^[abc]$/</span>; <span class="hljs-comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'aa'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'b'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'c'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'abc'</span>));<span class="hljs-comment">//true</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-z]$/</span> <span class="hljs-comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'z'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'A'</span>));<span class="hljs-comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-comment">//字符组合</span></span><br><span class="line"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^[a-zA-Z0-9]$/</span>; <span class="hljs-comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">'B'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-number">8</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">'!'</span>));<span class="hljs-comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h4><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="用户名表单验证"><a href="#用户名表单验证" class="headerlink" title="用户名表单验证"></a>用户名表单验证</h4><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li></ol><p><img src="/前端笔记/javascript高级-day04/img2.png" alt></p><p><img src="/前端笔记/javascript高级-day04/img1.png" alt></p><p>分析:</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li><li>首先准备好这种正则表达式模式/$[a-zA-Z0-9-_]{6,16}^/</li><li>当表单失去焦点就开始验证. </li><li>如果符合正则规范, 则让后面的span标签添加 right类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"uname"</span>&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>请输入用户名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> <span class="hljs-comment">//  量词是设定某个模式出现的次数</span></span><br><span class="line"> <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="hljs-comment">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span></span><br><span class="line"> <span class="hljs-keyword">var</span> uname = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.uname'</span>);</span><br><span class="line"> <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'span'</span>);</span><br><span class="line"> uname.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-keyword">this</span>.value)) &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'正确的'</span>);</span><br><span class="line">   span.className = <span class="hljs-string">'right'</span>;</span><br><span class="line">   span.innerHTML = <span class="hljs-string">'用户名格式输入正确'</span>;</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'错误的'</span>);</span><br><span class="line">   span.className = <span class="hljs-string">'wrong'</span>;</span><br><span class="line">   span.innerHTML = <span class="hljs-string">'用户名格式输入不正确'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符. </p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/" target="_blank" rel="noopener">正则表达式在线测试</a></p><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p><p><img src="/前端笔记/javascript高级-day04/img3.png" alt></p><p><strong>案例:验证座机号码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br></pre></td></tr></table></figure><p><strong>表单验证案例</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span></span><br><span class="line"><span class="hljs-comment">//验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line"> <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-keyword">this</span>.value)) &#123;</span><br><span class="line">    <span class="hljs-comment">// console.log('正确的');</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'success'</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜您输入正确'</span>;</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">       <span class="hljs-comment">// console.log('不正确');</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'error'</span>;</span><br><span class="line">      <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="error_icon"&gt;&lt;/i&gt;格式不正确,请从新输入 '</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//QQ号验证: /^[1-9]\d&#123;4,&#125;$/; </span></span><br><span class="line"><span class="hljs-comment">//昵称验证:/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span></span><br><span class="line"><span class="hljs-comment">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">regexp</span>(<span class="hljs-params">ele, reg</span>) </span>&#123;</span><br><span class="line">    ele.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-keyword">this</span>.value)) &#123;</span><br><span class="line">        <span class="hljs-comment">// console.log('正确的');</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'success'</span>;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜您输入正确'</span>;</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">     <span class="hljs-comment">// console.log('不正确');</span></span><br><span class="line">     <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'error'</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="error_icon"&gt;&lt;/i&gt; 格式不正确,请从新输入 '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//密码验证:/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span></span><br><span class="line"><span class="hljs-comment">//再次输入密码只需匹配与上次输入的密码值 是否一致</span></span><br></pre></td></tr></table></figure><h3 id="正则替换replace"><a href="#正则替换replace" class="headerlink" title="正则替换replace"></a>正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'andy和red'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> newStr = str.replace(<span class="hljs-string">'andy'</span>, <span class="hljs-string">'baby'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(newStr)<span class="hljs-comment">//baby和red</span></span><br><span class="line"><span class="hljs-comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="hljs-keyword">var</span> newStr2 = str.replace(<span class="hljs-regexp">/andy/</span>, <span class="hljs-string">'baby'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(newStr2)<span class="hljs-comment">//baby和red</span></span><br><span class="line"><span class="hljs-comment">//全部替换</span></span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'abcabc'</span></span><br><span class="line"><span class="hljs-keyword">var</span> nStr = str.replace(<span class="hljs-regexp">/a/</span>,<span class="hljs-string">'哈哈'</span>)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(nStr) <span class="hljs-comment">//哈哈bcabc</span></span><br><span class="line"><span class="hljs-comment">//全部替换g</span></span><br><span class="line"><span class="hljs-keyword">var</span> nStr = str.replace(<span class="hljs-regexp">/a/</span>a,<span class="hljs-string">'哈哈'</span>)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(nStr) <span class="hljs-comment">//哈哈bc哈哈bc</span></span><br><span class="line"><span class="hljs-comment">//忽略大小写i</span></span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'aAbcAba'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> newStr = str.replace(<span class="hljs-regexp">/a/gi</span>,<span class="hljs-string">'哈哈'</span>)<span class="hljs-comment">//"哈哈哈哈bc哈哈b哈哈"</span></span><br></pre></td></tr></table></figure><p><strong>案例:过滤敏感词汇</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=<span class="hljs-string">""</span> id=<span class="hljs-string">"message"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'textarea'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    div.innerHTML = text.value.replace(<span class="hljs-regexp">/激情|gay/g</span>, <span class="hljs-string">'**'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.正则表达式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正则表达式概述&quot;&gt;&lt;a href=&quot;#正则表达式概述&quot; class=&quot;headerlink&quot; title=&quot;正则表达式概述&quot;&gt;&lt;/a&gt;正则表达式概述&lt;/h2&gt;&lt;h3 id=&quot;什么是正则表达式&quot;&gt;&lt;a href=&quot;#什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是正则表达式&quot;&gt;&lt;/a&gt;什么是正则表达式&lt;/h3&gt;&lt;p&gt;正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。&lt;/p&gt;
&lt;p&gt;正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。&lt;/p&gt;
&lt;p&gt;其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day03/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day03/</id>
    <published>2020-05-23T09:00:45.000Z</published>
    <updated>2020-05-23T09:09:58.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.this指向和闭包</p></blockquote><h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ol><li><p>方式1 函数声明方式 function 关键字 (命名函数)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2 函数表达式(匿名函数)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式3 new Function() </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'console.log(a + b)'</span>);</span><br><span class="line">f(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'参数1'</span>,<span class="hljs-string">'参数2'</span>..., <span class="hljs-string">'函数体'</span>)</span><br><span class="line">注意</span><br><span class="line"><span class="hljs-comment">/*Function 里面参数都必须是字符串格式</span></span><br><span class="line"><span class="hljs-comment">第三种方式执行效率低，也不方便书写，因此较少使用</span></span><br><span class="line"><span class="hljs-comment">所有函数都是 Function 的实例(对象)  </span></span><br><span class="line"><span class="hljs-comment">函数也属于对象</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'人生的巅峰'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> fn(); </span><br><span class="line"><span class="hljs-comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">  sayHi: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'人生的巅峰'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.sayHi();</span><br><span class="line"><span class="hljs-comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">new</span> Star();</span><br><span class="line"><span class="hljs-comment">/* 4. 绑定事件函数*/</span></span><br><span class="line"> btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;   <span class="hljs-comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="hljs-comment">/* 5. 定时器函数*/</span></span><br><span class="line">setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;, <span class="hljs-number">1000</span>);  这个函数是定时器自动<span class="hljs-number">1</span>秒钟调用一次</span><br><span class="line"><span class="hljs-comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'人生的巅峰'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="函数内部的this指向"><a href="#函数内部的this指向" class="headerlink" title="函数内部的this指向"></a>函数内部的this指向</h3><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this 的指向不同</p><p>一般指向我们的调用者.</p><p><img src="/前端笔记/javascript高级-day03/img1.png" alt></p><h3 id="改变函数内部-this-指向"><a href="#改变函数内部-this-指向" class="headerlink" title="改变函数内部 this 指向"></a>改变函数内部 this 指向</h3><h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p><p>应用场景:  经常做继承. </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="hljs-string">'andy'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(a+b)</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">//此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span></span><br></pre></td></tr></table></figure><p>以上代码运行结果为:</p><p><img src="/前端笔记/javascript高级-day03/img4.png" alt></p><h4 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p>应用场景:  经常跟数组有关系</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="hljs-string">'andy'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(a+b)</span><br><span class="line">&#125;;</span><br><span class="line">fn()<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.apply(o,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day03/img4.png" alt></p><h4 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p><p>应用场景:不调用函数,但是还想改变this指向</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line"> name: <span class="hljs-string">'andy'</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a + b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> f = fn.bind(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//此处的f是bind返回的新函数</span></span><br><span class="line">f();<span class="hljs-comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day03/img5.png" alt></p><h4 id="call、apply、bind三者的异同"><a href="#call、apply、bind三者的异同" class="headerlink" title="call、apply、bind三者的异同"></a>call、apply、bind三者的异同</h4><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li></ol></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><h3 id="什么是严格模式"><a href="#什么是严格模式" class="headerlink" title="什么是严格模式"></a>什么是严格模式</h3><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript变体的一种方式，即在严格的条件下运行 JS 代码。</p><p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>严格模式对正常的 JavaScript 语义做了一些更改： </p><p>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</p><p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p><p>3.提高编译器效率，增加运行速度。</p><p>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p><h3 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h3><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><ul><li><p>情况一 :为脚本开启严格模式</p><ul><li><p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他<br>script 脚本文件。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line"><span class="hljs-meta">　　　　"use strict"</span>;</span><br><span class="line">       <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="line">　　　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="hljs-comment">//或者 </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-meta">  　"use strict"</span>; <span class="hljs-comment">//当前script标签开启了严格模式</span></span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/当前script标签未开启严格模式</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>情况二: 为函数开启严格模式</p><ul><li><p>要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-meta">　　"use strict"</span>;</span><br><span class="line">　　<span class="hljs-keyword">return</span> <span class="hljs-string">"123"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-comment">//当前fn函数开启了严格模式</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="严格模式中的变化"><a href="#严格模式中的变化" class="headerlink" title="严格模式中的变化"></a>严格模式中的变化</h3><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">'use strict'</span></span><br><span class="line">num = <span class="hljs-number">10</span> </span><br><span class="line"><span class="hljs-built_in">console</span>.log(num)<span class="hljs-comment">//严格模式后使用未声明的变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">delete</span> num2;<span class="hljs-comment">//严格模式不允许删除变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn();  </span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"> <span class="hljs-keyword">this</span>.sex = <span class="hljs-string">'男'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh.sex);</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//严格模式下，定时器 this 还是指向 window</span></span><br><span class="line">&#125;, <span class="hljs-number">2000</span>);</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">更多严格模式要求参考</a></p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><p><img src="F:/BaiduNetdiskDownload/%25E9%25BB%2591%25E9%25A9%25AC/www.fxw.la_%2520WEB%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25A7%2586%25E9%25A2%2591%25E6%2595%2599%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/07-10%2520JavaScript%25E7%25BD%2591%25E9%25A1%25B5%25E7%25BC%2596%25E7%25A8%258B_9fxw.com/07-10%2520JavaScript%25E7%25BD%2591%25E9%25A1%25B5%25E7%25BC%2596%25E7%25A8%258B/04-JavaScript%25E9%25AB%2598%25E7%25BA%25A7%25E8%25B5%2584%25E6%2596%2599/JavaScript%2520%25E9%25AB%2598%25E7%25BA%25A7_day03/4-%25E7%25AC%2594%25E8%25AE%25B0/images/img2.png" alt></p><p>此时fn 就是一个高阶函数</p><p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数。</p><p>同理函数也可以作为返回值传递回来</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="变量的作用域复习"><a href="#变量的作用域复习" class="headerlink" title="变量的作用域复习"></a>变量的作用域复习</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><ol><li>函数内部可以使用全局变量。</li><li>函数外部不可以使用局部变量。</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。 </p><p><img src="/前端笔记/javascript高级-day03/img3.png" alt></p><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><p>作用：延伸变量的作用范围。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(num);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> fun;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-keyword">var</span> f = fn();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h3 id="闭包的案例"><a href="#闭包的案例" class="headerlink" title="闭包的案例"></a>闭包的案例</h3><ol><li>利用闭包的方式得到当前li 的索引号</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"><span class="hljs-comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line"><span class="hljs-comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;</span><br><span class="line">    lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>闭包应用-3秒钟之后,打印所有li元素的内容</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">   (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;</span><br><span class="line">     setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="line">     &#125;, <span class="hljs-number">3000</span>)</span><br><span class="line">   &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>闭包应用-计算打车价格 </li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*需求分析</span></span><br><span class="line"><span class="hljs-comment">打车起步价13(3公里内),  之后每多一公里增加 5块钱.  用户输入公里数就可以计算打车价格</span></span><br><span class="line"><span class="hljs-comment">如果有拥堵情况,总价格多收取10块钱拥堵费*/</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-keyword">var</span> car = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">var</span> start = <span class="hljs-number">13</span>; <span class="hljs-comment">// 起步价  局部变量</span></span><br><span class="line">     <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总价  局部变量</span></span><br><span class="line">     <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">       <span class="hljs-comment">// 正常的总价</span></span><br><span class="line">       price: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">         <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;</span><br><span class="line">           total = start;</span><br><span class="line">         &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">           total = start + (n - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-keyword">return</span> total;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="hljs-comment">// 拥堵之后的费用</span></span><br><span class="line">       yd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">flag</span>) </span>&#123;</span><br><span class="line">         <span class="hljs-keyword">return</span> flag ? total + <span class="hljs-number">10</span> : total;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;)();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(car.price(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 23</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(car.yd(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// 33</span></span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">var</span> name = <span class="hljs-string">"The Window"</span>;</span><br><span class="line">   <span class="hljs-keyword">var</span> object = &#123;</span><br><span class="line">     name: <span class="hljs-string">"My Object"</span>,</span><br><span class="line">     getNameFunc: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(object.getNameFunc()())</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-keyword">var</span> name = <span class="hljs-string">"The Window"</span>;　　</span><br><span class="line">  <span class="hljs-keyword">var</span> object = &#123;　　　　</span><br><span class="line">    name: <span class="hljs-string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p><strong>递归：</strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p><strong>注意：</strong>递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p><h3 id="利用递归求1-n的阶乘"><a href="#利用递归求1-n的阶乘" class="headerlink" title="利用递归求1~n的阶乘"></a>利用递归求1~n的阶乘</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//结束条件</span></span><br><span class="line">       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> n * fn(n - <span class="hljs-number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(fn(<span class="hljs-number">3</span>));</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day03/img6.png" alt></p><h3 id="利用递归求斐波那契数列"><a href="#利用递归求斐波那契数列" class="headerlink" title="利用递归求斐波那契数列"></a>利用递归求斐波那契数列</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 利用递归函数求斐波那契数列(兔子序列)  1、1、2、3、5、8、13、21...</span></span><br><span class="line"><span class="hljs-comment">// 用户输入一个数字 n 就可以求出 这个数字对应的兔子序列值</span></span><br><span class="line"><span class="hljs-comment">// 我们只需要知道用户输入的n 的前面两项(n-1 n-2)就可以计算出n 对应的序列值</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span> || n === <span class="hljs-number">2</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> fb(n - <span class="hljs-number">1</span>) + fb(n - <span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(fb(<span class="hljs-number">3</span>));</span><br></pre></td></tr></table></figure><h3 id="利用递归遍历数据"><a href="#利用递归遍历数据" class="headerlink" title="利用递归遍历数据"></a>利用递归遍历数据</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 我们想要做输入id号,就可以返回的数据对象</span></span><br><span class="line"> <span class="hljs-keyword">var</span> data = [&#123;</span><br><span class="line">   id: <span class="hljs-number">1</span>,</span><br><span class="line">   name: <span class="hljs-string">'家电'</span>,</span><br><span class="line">   goods: [&#123;</span><br><span class="line">     id: <span class="hljs-number">11</span>,</span><br><span class="line">     gname: <span class="hljs-string">'冰箱'</span>,</span><br><span class="line">     goods: [&#123;</span><br><span class="line">       id: <span class="hljs-number">111</span>,</span><br><span class="line">       gname: <span class="hljs-string">'海尔'</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       id: <span class="hljs-number">112</span>,</span><br><span class="line">       gname: <span class="hljs-string">'美的'</span></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">     id: <span class="hljs-number">12</span>,</span><br><span class="line">     gname: <span class="hljs-string">'洗衣机'</span></span><br><span class="line">   &#125;]</span><br><span class="line"> &#125;, &#123;</span><br><span class="line">   id: <span class="hljs-number">2</span>,</span><br><span class="line">   name: <span class="hljs-string">'服饰'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="hljs-comment">//1.利用 forEach 去遍历里面的每一个对象</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getID</span>(<span class="hljs-params">json, id</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">var</span> o = &#123;&#125;;</span><br><span class="line">   json.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-comment">// console.log(item); // 2个数组元素</span></span><br><span class="line">     <span class="hljs-keyword">if</span> (item.id == id) &#123;</span><br><span class="line">       <span class="hljs-comment">// console.log(item);</span></span><br><span class="line">       o = item;</span><br><span class="line">       <span class="hljs-keyword">return</span> o;</span><br><span class="line">       <span class="hljs-comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span></span><br><span class="line">       <span class="hljs-comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span></span><br><span class="line">     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.goods &amp;&amp; item.goods.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">       o = getID(item.goods, id);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="hljs-keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.this指向和闭包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;函数的定义和调用&quot;&gt;&lt;a href=&quot;#函数的定义和调用&quot; class=&quot;headerlink&quot; title=&quot;函数的定义和调用&quot;&gt;&lt;/a&gt;函数的定义和调用&lt;/h2&gt;&lt;h3 id=&quot;函数的定义方式&quot;&gt;&lt;a href=&quot;#函数的定义方式&quot; class=&quot;headerlink&quot; title=&quot;函数的定义方式&quot;&gt;&lt;/a&gt;函数的定义方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;方式1 函数声明方式 function 关键字 (命名函数)&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式2 函数表达式(匿名函数)&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式3 new Function() &lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;console.log(a + b)&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;参数1&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&#39;参数2&#39;&lt;/span&gt;..., &lt;span class=&quot;hljs-string&quot;&gt;&#39;函数体&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*Function 里面参数都必须是字符串格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;第三种方式执行效率低，也不方便书写，因此较少使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;所有函数都是 Function 的实例(对象)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;函数也属于对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day02/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day02/</id>
    <published>2020-05-23T08:55:49.000Z</published>
    <updated>2020-05-23T09:10:05.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.构造函数和原型</p></blockquote><h2 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h2><h3 id="1对象的三种创建方式–复习"><a href="#1对象的三种创建方式–复习" class="headerlink" title="1对象的三种创建方式–复习"></a>1对象的三种创建方式–复习</h3><ol><li><p>字面量方式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();</span><br></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">  <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'zs'</span>,<span class="hljs-number">12</span>);</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">     <span class="hljs-keyword">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span></span><br></pre></td></tr></table></figure><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">     <span class="hljs-keyword">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Star.sex = <span class="hljs-string">'男'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="/前端笔记/javascript高级-day02/img1.png" alt></p><h3 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的。</p><p>JavaScript 规定，每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p><p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'张学友'</span>, <span class="hljs-number">19</span>);</span><br><span class="line">ldh.sing();<span class="hljs-comment">//我会唱歌</span></span><br><span class="line">zxy.sing();<span class="hljs-comment">//我会唱歌</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img7.png" alt></p><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在。</span><br><span class="line">__proto__对象原型和原型对象 prototype 是等价的</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img2.png" alt></p><p><img src="/前端笔记/javascript高级-day02/img3.png" alt></p><h3 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="line">constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</span><br><span class="line">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数如:</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line"> Star.prototype = &#123;</span><br><span class="line"> <span class="hljs-comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">   <span class="hljs-keyword">constructor</span>: Star, // 手动设置指回原来的构造函数</span><br><span class="line">   sing: function() &#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   movie: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会演电影'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'张学友'</span>, <span class="hljs-number">19</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(zxy)</span><br></pre></td></tr></table></figure><p>以上代码运行结果,设置constructor属性如图:</p><p><img src="/前端笔记/javascript高级-day02/img8.png" alt>如果未设置constructor属性,如图:</p><p><img src="/前端笔记/javascript高级-day02/img9.png" alt></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>​    每一个实例对象又有一个<strong>proto</strong>属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有<strong>proto</strong>属性，这样一层一层往上找就形成了原型链。</p><p><img src="/前端笔记/javascript高级-day02/img5.png" alt></p><h3 id="构造函数实例和原型对象三角关系"><a href="#构造函数实例和原型对象三角关系" class="headerlink" title="构造函数实例和原型对象三角关系"></a>构造函数实例和原型对象三角关系</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1.</span>构造函数的prototype属性指向了构造函数原型对象</span><br><span class="line"><span class="hljs-number">2.</span>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</span><br><span class="line"><span class="hljs-number">3.</span>构造函数的原型对象的<span class="hljs-keyword">constructor</span>属性指向了构造函数,实例对象的原型的<span class="hljs-keyword">constructor</span>属性也指向了构造函数</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img4.png" alt></p><h3 id="原型链和成员的查找机制"><a href="#原型链和成员的查找机制" class="headerlink" title="原型链和成员的查找机制"></a>原型链和成员的查找机制</h3><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有<strong>proto</strong>属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找原型对象的原型（Object的原型对象）。</span><br><span class="line">依此类推一直找到 Object 为止（null）。</span><br><span class="line">__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</span><br></pre></td></tr></table></figure><h3 id="原型对象中this指向"><a href="#原型对象中this指向" class="headerlink" title="原型对象中this指向"></a>原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> that;</span><br><span class="line">Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">    that = <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(that === ldh);<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img6.png" alt></p><h3 id="通过原型为数组扩展内置方法"><a href="#通过原型为数组扩展内置方法" class="headerlink" title="通过原型为数组扩展内置方法"></a>通过原型为数组扩展内置方法</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.length; i++) &#123;</span><br><span class="line">  sum += <span class="hljs-keyword">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><ul><li>call()可以调用函数</li><li>call()可以修改this的指向,使用call()的时候 参数一是修改后的this指向,参数2,参数3..使用逗号隔开连接</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="hljs-string">'andy'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  fn.call(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//调用了函数此时的this指向了对象o,</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img10.png" alt></p><h3 id="子构造函数继承父构造函数中的属性"><a href="#子构造函数继承父构造函数中的属性" class="headerlink" title="子构造函数继承父构造函数中的属性"></a>子构造函数继承父构造函数中的属性</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 1. 父构造函数</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">   <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">   <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="hljs-comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">  <span class="hljs-number">3.</span>使用call方式实现子继承父的属性</span><br><span class="line">  Father.call(<span class="hljs-keyword">this</span>, uname, age);</span><br><span class="line">  <span class="hljs-keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img11.png" alt></p><h3 id="借用原型对象继承方法"><a href="#借用原型对象继承方法" class="headerlink" title="借用原型对象继承方法"></a>借用原型对象继承方法</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 父构造函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">  <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">  <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.money = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100000</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="hljs-comment">// 2 .子构造函数 </span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">      Father.call(<span class="hljs-keyword">this</span>, uname, age);</span><br><span class="line">      <span class="hljs-keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="hljs-comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line">  Son.prototype = <span class="hljs-keyword">new</span> Father();</span><br><span class="line">  <span class="hljs-comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line">  Son.prototype.constructor = Son;</span><br><span class="line">  <span class="hljs-comment">// 这个是子构造函数专门的方法</span></span><br><span class="line">  Son.prototype.exam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'孩子要考试'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p>如上代码结果如图:</p><p><img src="/前端笔记/javascript高级-day02/img12.png" alt></p><h2 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h2><h3 id="数组方法forEach遍历数组"><a href="#数组方法forEach遍历数组" class="headerlink" title="数组方法forEach遍历数组"></a>数组方法forEach遍历数组</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, array</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">//参数一是:数组元素</span></span><br><span class="line">      <span class="hljs-comment">//参数二是:数组元素的索引</span></span><br><span class="line">      <span class="hljs-comment">//参数三是:当前的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"> <span class="hljs-comment">//相当于数组遍历的 for循环 没有返回值</span></span><br></pre></td></tr></table></figure><h3 id="数组方法filter过滤数组"><a href="#数组方法filter过滤数组" class="headerlink" title="数组方法filter过滤数组"></a>数组方法filter过滤数组</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">66</span>, <span class="hljs-number">4</span>, <span class="hljs-number">88</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];</span><br><span class="line"><span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index,array</span>) </span>&#123;</span><br><span class="line"> <span class="hljs-comment">//参数一是:数组元素</span></span><br><span class="line">   <span class="hljs-comment">//参数二是:数组元素的索引</span></span><br><span class="line">   <span class="hljs-comment">//参数三是:当前的数组</span></span><br><span class="line">   <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(newArr);<span class="hljs-comment">//[66,88] //返回值是一个新数组</span></span><br></pre></td></tr></table></figure><h3 id="数组方法some"><a href="#数组方法some" class="headerlink" title="数组方法some"></a>数组方法some</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">some 查找数组中是否有满足条件的元素 </span><br><span class="line"> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>];</span><br><span class="line"> <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//参数一是:数组元素</span></span><br><span class="line">     <span class="hljs-comment">//参数二是:数组元素的索引</span></span><br><span class="line">     <span class="hljs-comment">//参数三是:当前的数组</span></span><br><span class="line">     <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span></span><br></pre></td></tr></table></figure><h3 id="筛选商品案例"><a href="#筛选商品案例" class="headerlink" title="筛选商品案例"></a>筛选商品案例</h3><ol><li><p>定义数组对象数据</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> data = [&#123;</span><br><span class="line">            id: <span class="hljs-number">1</span>,</span><br><span class="line">            pname: <span class="hljs-string">'小米'</span>,</span><br><span class="line">            price: <span class="hljs-number">3999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="hljs-number">2</span>,</span><br><span class="line">            pname: <span class="hljs-string">'oppo'</span>,</span><br><span class="line">            price: <span class="hljs-number">999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="hljs-number">3</span>,</span><br><span class="line">            pname: <span class="hljs-string">'荣耀'</span>,</span><br><span class="line">            price: <span class="hljs-number">1299</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="hljs-number">4</span>,</span><br><span class="line">            pname: <span class="hljs-string">'华为'</span>,</span><br><span class="line">            price: <span class="hljs-number">1999</span></span><br><span class="line">        &#125;, ];</span><br></pre></td></tr></table></figure></li><li><p>使用forEach遍历数据并渲染到页面中</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'tr'</span>);</span><br><span class="line">  tr.innerHTML = <span class="hljs-string">'&lt;td&gt;'</span> + value.id + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="hljs-string">'&lt;/td&gt;'</span>;</span><br><span class="line">  tbody.appendChild(tr);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据价格筛选数据</p><ol><li><p>获取到搜索按钮并为其绑定点击事件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_price.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用filter将用户输入的价格信息筛选出来</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search_price.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">var</span> newDate = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//start.value是开始区间</span></span><br><span class="line">        <span class="hljs-comment">//end.value是结束的区间</span></span><br><span class="line">      <span class="hljs-keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(newDate);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>将筛选出来的数据重新渲染到表格中</p><ol><li><p>将渲染数据的逻辑封装到一个函数中</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setDate</span>(<span class="hljs-params">mydata</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 先清空原来tbody 里面的数据</span></span><br><span class="line">  tbody.innerHTML = <span class="hljs-string">''</span>;</span><br><span class="line">  mydata.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'tr'</span>);</span><br><span class="line">    tr.innerHTML = <span class="hljs-string">'&lt;td&gt;'</span> + value.id + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="hljs-string">'&lt;/td&gt;'</span>;</span><br><span class="line">      tbody.appendChild(tr);</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>将筛选之后的数据重新渲染</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> search_price.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">var</span> newDate = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(newDate);</span><br><span class="line">     <span class="hljs-comment">// 把筛选完之后的对象渲染到页面中</span></span><br><span class="line">     setDate(newDate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>根据商品名称筛选</p><ol><li><p>获取用户输入的商品名称</p></li><li><p>为查询按钮绑定点击事件,将输入的商品名称与这个数据进行筛选</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> search_pro.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">var</span> arr = [];</span><br><span class="line">     data.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">       <span class="hljs-keyword">if</span> (value.pname === product.value) &#123;</span><br><span class="line">         <span class="hljs-comment">// console.log(value);</span></span><br><span class="line">         arr.push(value);</span><br><span class="line">         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// return 后面必须写true  </span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="hljs-comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">     setDate(arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="some和forEach区别"><a href="#some和forEach区别" class="headerlink" title="some和forEach区别"></a>some和forEach区别</h3><ul><li>如果查询数组中唯一的元素, 用some方法更合适,在some 里面 遇到 return true 就是终止遍历 迭代效率更高</li><li>在forEach 里面 return 不会终止迭代</li></ul><h3 id="trim方法去除字符串两端的空格"><a href="#trim方法去除字符串两端的空格" class="headerlink" title="trim方法去除字符串两端的空格"></a>trim方法去除字符串两端的空格</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'   hello   '</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str.trim()）  <span class="hljs-comment">//hello 去除两端空格</span></span><br><span class="line"><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">'   he l l o   '</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str.trim()）  <span class="hljs-comment">//he l l o  去除两端空格</span></span><br></pre></td></tr></table></figure><h3 id="获取对象的属性名"><a href="#获取对象的属性名" class="headerlink" title="获取对象的属性名"></a>获取对象的属性名</h3><p>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">     id: <span class="hljs-number">1</span>,</span><br><span class="line">     pname: <span class="hljs-string">'小米'</span>,</span><br><span class="line">     price: <span class="hljs-number">1999</span>,</span><br><span class="line">     num: <span class="hljs-number">2000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(result)<span class="hljs-comment">//[id，pname,price,num]</span></span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>Object.defineProperty设置或修改对象中的属性</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;</span><br><span class="line">value:修改或新增的属性的值,</span><br><span class="line">writable:<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<span class="hljs-comment">//如果值为false 不允许修改这个属性值</span></span><br><span class="line">enumerable: <span class="hljs-literal">false</span>,<span class="hljs-comment">//enumerable 如果值为false 则不允许遍历</span></span><br><span class="line">        configurable: <span class="hljs-literal">false</span>  <span class="hljs-comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.构造函数和原型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;构造函数和原型&quot;&gt;&lt;a href=&quot;#构造函数和原型&quot; class=&quot;headerlink&quot; title=&quot;构造函数和原型&quot;&gt;&lt;/a&gt;构造函数和原型&lt;/h2&gt;&lt;h3 id=&quot;1对象的三种创建方式–复习&quot;&gt;&lt;a href=&quot;#1对象的三种创建方式–复习&quot; class=&quot;headerlink&quot; title=&quot;1对象的三种创建方式–复习&quot;&gt;&lt;/a&gt;1对象的三种创建方式–复习&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;字面量方式&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new关键字&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造函数方式&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-string&quot;&gt;&#39;zs&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day01/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day01/</id>
    <published>2020-05-23T08:46:28.000Z</published>
    <updated>2020-05-23T08:55:21.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.面向对象</p></blockquote><h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li></ul><h3 id="面向过程与面向对象对比"><a href="#面向过程与面向对象对比" class="headerlink" title="面向过程与面向对象对比"></a>面向过程与面向对象对比</h3><table><thead><tr><th></th><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>优点</td><td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td><td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td></tr><tr><td>缺点</td><td>不易维护、不易复用、不易扩展</td><td>性能比面向过程低</td></tr></tbody></table><a id="more"></a><h2 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//以下代码是对对象的复习</span></span><br><span class="line"><span class="hljs-comment">//字面量创建对象</span></span><br><span class="line"><span class="hljs-keyword">var</span> ldh = &#123;</span><br><span class="line">    name: <span class="hljs-string">'刘德华'</span>,</span><br><span class="line">    age: <span class="hljs-number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//构造函数创建对象</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>)<span class="hljs-comment">//实例化对象</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure><p>如上两行代码运行结果为:<img src="/前端笔记/javascript高级-day01/img3.png" alt></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</li></ul><h4 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h4><ol><li>语法:</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//步骤1 使用class关键字</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// class body</span></span><br><span class="line">&#125;     </span><br><span class="line"><span class="hljs-comment">//步骤2使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="hljs-keyword">var</span> xx = <span class="hljs-keyword">new</span> name();</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name, age) &#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">  <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="hljs-comment">// 2. 利用类创建对象 new</span></span><br><span class="line">  <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure><p>以上代码运行结果: </p><p><img src="/前端笔记/javascript高级-day01/img4.png" alt></p><p>通过结果我们可以看出,运行结果和使用构造函数方式一样</p><h4 id="类创建添加属性和方法"><a href="#类创建添加属性和方法" class="headerlink" title="类创建添加属性和方法"></a>类创建添加属性和方法</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 1. 创建类 class  创建一个类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 类的共有属性放到 constructor 里面 constructor是 构造器或者构造函数</span></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(uname, age) &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">      <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">    &#125;<span class="hljs-comment">//-------------------------------------------&gt;注意,方法与方法之间不需要添加逗号</span></span><br><span class="line">    sing(song) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.uname + <span class="hljs-string">'唱'</span> + song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh); <span class="hljs-comment">// Star &#123;uname: "刘德华", age: 18&#125;</span></span><br><span class="line">ldh.sing(<span class="hljs-string">'冰雨'</span>); <span class="hljs-comment">// 刘德华唱冰雨</span></span><br></pre></td></tr></table></figure><p> 以上代码运行结果:</p><p><img src="/前端笔记/javascript高级-day01/img5.png" alt></p><p><strong>注意哟:</strong></p><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><ol><li>语法</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 父类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;   </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 子类继承父类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Son</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">constructor</span>(surname) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.surname= surname;</span><br><span class="line">      &#125;</span><br><span class="line">      say() &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你的姓是'</span> + <span class="hljs-keyword">this</span>.surname);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;  <span class="hljs-comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> damao= <span class="hljs-keyword">new</span> Son(<span class="hljs-string">'刘'</span>);</span><br><span class="line">damao.say();      <span class="hljs-comment">//结果为 你的姓是刘</span></span><br></pre></td></tr></table></figure><p>以上代码运行结果:</p><p><img src="/前端笔记/javascript高级-day01/img6.png" alt></p><ul><li><p>子类使用super关键字访问父类的方法</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//定义了父类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">   <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   sum() &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-comment">//子元素继承父类</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</span><br><span class="line">    son.sum(); <span class="hljs-comment">//结果为3</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li><p>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p></li><li><p>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p></li><li><p>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 父类有加法方法</span></span><br><span class="line"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">   <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   sum() &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-keyword">this</span>.y);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span></span><br><span class="line">   <span class="hljs-keyword">super</span>(x, y);</span><br><span class="line">   <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">   <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  subtract() &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x - <span class="hljs-keyword">this</span>.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);</span><br><span class="line">son.subtract(); <span class="hljs-comment">//2</span></span><br><span class="line">son.sum();<span class="hljs-comment">//8</span></span><br></pre></td></tr></table></figure><p>以上代码运行结果为:</p><p><img src="/前端笔记/javascript高级-day01/img7.png" alt></p></li><li><p>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.</p><ol><li>constructor中的this指向的是new出来的实例对象 </li><li>自定义的方法,一般也指向的new出来的实例对象</li><li>绑定事件之后this指向的就是触发事件的事件源</li></ol></li><li><p>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象<img src="/前端笔记/javascript高级-day01/img2.png" alt></p><p> <img src="/前端笔记/javascript高级-day01/img1.png" alt></p></li></ol></li></ul><h2 id="面向对象版tab-栏切换"><a href="#面向对象版tab-栏切换" class="headerlink" title="面向对象版tab 栏切换"></a>面向对象版tab 栏切换</h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ol><li>点击 tab栏,可以切换效果.</li><li>点击 + 号, 可以添加 tab 项和内容项.</li><li>点击 x 号, 可以删除当前的tab项和内容项.</li><li>双击tab项文字或者内容项文字可以修改里面的文字内容</li></ol><h3 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h3><ol><li>获取到标题元素</li><li>获取到内容元素</li><li>获取到删除的小按钮 x号</li><li>新建js文件,定义类,添加需要的属性方法(切换,删除,增加,修改)</li><li>时刻注意this的指向问题</li></ol><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><ul><li><p>为获取到的标题绑定点击事件,展示对应的内容区域,存储对应的索引</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.lis[i].index = i;</span><br><span class="line"><span class="hljs-keyword">this</span>.lis[i].onclick = <span class="hljs-keyword">this</span>.toggleTab;</span><br></pre></td></tr></table></figure></li><li><p>使用排他,实现只有一个元素的显示</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">toggleTab() &#123;</span><br><span class="line">  <span class="hljs-comment">//将所有的标题与内容类样式全部移除</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.lis.length; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.lis[i].className = <span class="hljs-string">''</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.sections[i].className = <span class="hljs-string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">//为当前的标题添加激活样式</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.className = <span class="hljs-string">'liactive'</span>;</span><br><span class="line">   <span class="hljs-comment">//为当前的内容添加激活样式</span></span><br><span class="line">    that.sections[<span class="hljs-keyword">this</span>.index].className = <span class="hljs-string">'conactive'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ul><li><p>为添加按钮+ 绑定点击事件 </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.add.onclick = <span class="hljs-keyword">this</span>.addTab;</span><br></pre></td></tr></table></figure></li><li><p>实现标题与内容的添加,做好排他处理</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addTab() &#123;</span><br><span class="line">    that.clearClass();</span><br><span class="line">    <span class="hljs-comment">// (1) 创建li元素和section元素 </span></span><br><span class="line">    <span class="hljs-keyword">var</span> random = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">    <span class="hljs-keyword">var</span> li = <span class="hljs-string">'&lt;li class="liactive"&gt;&lt;span&gt;新选项卡&lt;/span&gt;&lt;span class="iconfont icon-guanbi"&gt;&lt;/span&gt;&lt;/li&gt;'</span>;</span><br><span class="line">    <span class="hljs-keyword">var</span> section = <span class="hljs-string">'&lt;section class="conactive"&gt;测试 '</span> + random + <span class="hljs-string">'&lt;/section&gt;'</span>;</span><br><span class="line">    <span class="hljs-comment">// (2) 把这两个元素追加到对应的父元素里面</span></span><br><span class="line">    that.ul.insertAdjacentHTML(<span class="hljs-string">'beforeend'</span>, li);</span><br><span class="line">    that.fsection.insertAdjacentHTML(<span class="hljs-string">'beforeend'</span>, section);</span><br><span class="line">    that.init();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p>为元素的删除按钮x绑定点击事件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.remove[i].onclick = <span class="hljs-keyword">this</span>.removeTab;</span><br></pre></td></tr></table></figure></li><li><p>获取到点击的删除按钮的所在的父元素的所有,删除对应的标题与内容</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">removeTab(e) &#123;</span><br><span class="line">    e.stopPropagation(); <span class="hljs-comment">// 阻止冒泡 防止触发li 的切换点击事件</span></span><br><span class="line">    <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.parentNode.index;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(index);</span><br><span class="line">    <span class="hljs-comment">// 根据索引号删除对应的li 和section   remove()方法可以直接删除指定的元素</span></span><br><span class="line">    that.lis[index].remove();</span><br><span class="line">    that.sections[index].remove();</span><br><span class="line">    that.init();</span><br><span class="line">    <span class="hljs-comment">// 当我们删除的不是选中状态的li 的时候,原来的选中状态li保持不变</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.liactive'</span>)) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-comment">// 当我们删除了选中状态的这个li 的时候, 让它的前一个li 处于选定状态</span></span><br><span class="line">    index--;</span><br><span class="line">    <span class="hljs-comment">// 手动调用我们的点击事件  不需要鼠标触发</span></span><br><span class="line">    that.lis[index] &amp;&amp; that.lis[index].click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li><p>为元素(标题与内容)绑定双击事件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.spans[i].ondblclick = <span class="hljs-keyword">this</span>.editTab;</span><br><span class="line"><span class="hljs-keyword">this</span>.sections[i].ondblclick = <span class="hljs-keyword">this</span>.editTab;</span><br></pre></td></tr></table></figure></li><li><p>在双击事件处理文本选中状态,修改内部DOM节点,实现新旧value值的传递</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">editTab() &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> str = <span class="hljs-keyword">this</span>.innerHTML;</span><br><span class="line">    <span class="hljs-comment">// 双击禁止选定文字</span></span><br><span class="line">    <span class="hljs-built_in">window</span>.getSelection ? <span class="hljs-built_in">window</span>.getSelection().removeAllRanges() :     <span class="hljs-built_in">document</span>.selection.empty();</span><br><span class="line">    <span class="hljs-comment">// alert(11);</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.innerHTML = <span class="hljs-string">'&lt;input type="text" /&gt;'</span>;</span><br><span class="line">      <span class="hljs-keyword">var</span> input = <span class="hljs-keyword">this</span>.children[<span class="hljs-number">0</span>];</span><br><span class="line">      input.value = str;</span><br><span class="line">      input.select(); <span class="hljs-comment">// 文本框里面的文字处于选定状态</span></span><br><span class="line">      <span class="hljs-comment">// 当我们离开文本框就把文本框里面的值给span </span></span><br><span class="line">      input.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.parentNode.innerHTML = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="hljs-comment">// 按下回车也可以把文本框里面的值给span</span></span><br><span class="line">      input.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">13</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// 手动调用表单失去焦点事件  不需要鼠标离开操作</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.blur();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.面向对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;面向过程与面向对象&quot;&gt;&lt;a href=&quot;#面向过程与面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向过程与面向对象&quot;&gt;&lt;/a&gt;面向过程与面向对象&lt;/h2&gt;&lt;h3 id=&quot;面向过程&quot;&gt;&lt;a href=&quot;#面向过程&quot; class=&quot;headerlink&quot; title=&quot;面向过程&quot;&gt;&lt;/a&gt;面向过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;面向过程与面向对象对比&quot;&gt;&lt;a href=&quot;#面向过程与面向对象对比&quot; class=&quot;headerlink&quot; title=&quot;面向过程与面向对象对比&quot;&gt;&lt;/a&gt;面向过程与面向对象对比&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;面向过程&lt;/th&gt;
&lt;th&gt;面向对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;优点&lt;/td&gt;
&lt;td&gt;性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。&lt;/td&gt;
&lt;td&gt;易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缺点&lt;/td&gt;
&lt;td&gt;不易维护、不易复用、不易扩展&lt;/td&gt;
&lt;td&gt;性能比面向过程低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day03/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day03/</id>
    <published>2020-05-23T08:06:42.000Z</published>
    <updated>2020-05-23T08:10:15.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.jQuery事件</p></blockquote><p><img src="/前端笔记/jquery-day03/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够说出4种常见的注册事件<br>能够说出 on 绑定事件的优势<br>能够说出 jQuery 事件委派的优点以及方式<br>能够说出绑定事件与解绑事件<br>能够说出 jQuery 对象的拷贝方法<br>能够说出 jQuery 多库共存的2种方法<br>能够使用 jQuery 插件</p></blockquote><h2 id="jQuery-事件注册"><a href="#jQuery-事件注册" class="headerlink" title="jQuery 事件注册"></a>jQuery 事件注册</h2><p>​    jQuery 为我们提供了方便的事件注册机制，是开发人员抑郁操作优缺点如下：</p><ul><li>优点: 操作简单，且不用担心事件覆盖等问题。</li><li>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</li></ul><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/register.png" alt="register"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. 单个事件注册</span></span><br><span class="line">            $(<span class="hljs-string">"div"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"purple"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="hljs-string">"div"</span>).mouseenter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"skyblue"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件处理"><a href="#jQuery-事件处理" class="headerlink" title="jQuery 事件处理"></a>jQuery 事件处理</h2><p>​    因为普通注册事件方法的不足，jQuery又开发了多个处理方法，重点讲解如下：</p><ul><li>on(): 用于事件绑定，目前最好用的事件绑定方法</li><li>off(): 事件解绑</li><li>trigger() / triggerHandler(): 事件触发</li></ul><h3 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h3><p>​    因为普通注册事件方法的不足，jQuery又创建了多个新的事件绑定方法bind() / live() / delegate() / on()等，其中最好用的是: on()</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/on1.png" alt="on1"></p><p><img src="/前端笔记/jquery-day03/on2.png" alt="on2"></p><p><img src="/前端笔记/jquery-day03/on3.png" alt="on3"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我们都是好孩子&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;ol&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">            <span class="hljs-comment">// $("div").on(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     mouseenter: function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//         $(this).css("background", "skyblue");</span></span><br><span class="line">            <span class="hljs-comment">//     &#125;,</span></span><br><span class="line">            <span class="hljs-comment">//     click: function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//         $(this).css("background", "purple");</span></span><br><span class="line">            <span class="hljs-comment">//     &#125;</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"mouseenter mouseleave"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).toggleClass(<span class="hljs-string">"current"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">  </span><br><span class="line">            <span class="hljs-comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">            <span class="hljs-comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">            <span class="hljs-comment">// $("ul li").click();</span></span><br><span class="line">            $(<span class="hljs-string">"ul"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"li"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="hljs-number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// (3) on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">            $(<span class="hljs-string">"ol"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"li"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="hljs-number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">"&lt;li&gt;我是后来创建的&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol"</span>).append(li);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：发布微博案例"><a href="#案例：发布微博案例" class="headerlink" title="案例：发布微博案例"></a>案例：发布微博案例</h3><blockquote><p>1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中。<br>2.点击的删除按钮，可以删除当前的微博留言。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h3><p>​    当某个事件上面的逻辑，在特定需求下不需要的时候，可以把该事件上的逻辑移除，这个过程我们称为事件解绑。jQuery 为我们提供 了多种事件解绑方法：die() / undelegate() / off() 等，甚至还有只触发一次的事件绑定方法 one()，在这里我们重点讲解一下 off() ;</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/off.png" alt="off"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我们都是好孩子&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;p&gt;我是一个P标签&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ 事件绑定</span></span><br><span class="line"><span class="hljs-regexp">            $("div").on(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                click: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    console.log("我点击了");</span></span><br><span class="line"><span class="hljs-regexp">                &#125;,</span></span><br><span class="line"><span class="hljs-regexp">                mouseover: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    console.log('我鼠标经过了');</span></span><br><span class="line"><span class="hljs-regexp">                &#125;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").on("click", "li", function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                alert(11);</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">  </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. 事件解绑 off </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("div").off();  /</span><span class="hljs-regexp">/ 这个是解除了div身上的所有事件</span></span><br><span class="line"><span class="hljs-regexp">            $("div").off("click"); /</span><span class="hljs-regexp">/ 这个是解除了div身上的点击事件</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").off("click", "li");</span></span><br><span class="line"><span class="hljs-regexp">  </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. one() 但是它只能触发事件一次</span></span><br><span class="line"><span class="hljs-regexp">            $("p").one("click", function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                alert(11);</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件处理-trigger-自动触发事件"><a href="#事件处理-trigger-自动触发事件" class="headerlink" title="事件处理 trigger() 自动触发事件"></a>事件处理 trigger() 自动触发事件</h3><p>​    有些时候，在某些特定的条件下，我们希望某些事件能够自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。由此 jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler() ; </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/t1.png" alt="t1"></p><p><img src="/前端笔记/jquery-day03/t2.png" alt="t2"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;input type=<span class="hljs-string">"text"</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 绑定事件</span></span><br><span class="line">      $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">11</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 自动触发事件</span></span><br><span class="line">      <span class="hljs-comment">// 1. 元素.事件()</span></span><br><span class="line">      <span class="hljs-comment">// $("div").click();会触发元素的默认行为</span></span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 2. 元素.trigger("事件")</span></span><br><span class="line">      <span class="hljs-comment">// $("div").trigger("click");会触发元素的默认行为</span></span><br><span class="line">      $(<span class="hljs-string">"input"</span>).trigger(<span class="hljs-string">"focus"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 3. 元素.triggerHandler("事件") 就是不会触发元素的默认行为</span></span><br><span class="line">      $(<span class="hljs-string">"input"</span>).on(<span class="hljs-string">"focus"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="hljs-keyword">this</span>).val(<span class="hljs-string">"你好吗"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-comment">// 一个会获取焦点，一个不会</span></span><br><span class="line">      $(<span class="hljs-string">"div"</span>).triggerHandler(<span class="hljs-string">"click"</span>);</span><br><span class="line">      <span class="hljs-comment">// $("input").triggerHandler("focus");</span></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件对象"><a href="#jQuery-事件对象" class="headerlink" title="jQuery 事件对象"></a>jQuery 事件对象</h2><p>​    jQuery 对DOM中的事件对象 event 进行了封装，兼容性更好，获取更方便，使用变化不大。事件被触发，就会有事件对象的产生。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/event.png" alt="event"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"点击了document"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(event);</span></span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"点击了div"</span>);</span><br><span class="line">                event.stopPropagation();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>注意：jQuery中的 event 对象使用，可以借鉴 API 和 DOM 中的 event 。</p><h2 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/extend.png" alt="extend"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 1.合并数据</span></span><br><span class="line">           <span class="hljs-keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">           <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="hljs-number">1</span>,</span><br><span class="line">               name: <span class="hljs-string">"andy"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(targetObj);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// 2. 会覆盖 targetObj 里面原来的数据</span></span><br><span class="line">           <span class="hljs-keyword">var</span> targetObj = &#123;</span><br><span class="line">               id: <span class="hljs-number">0</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="hljs-number">1</span>,</span><br><span class="line">               name: <span class="hljs-string">"andy"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(targetObj); </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h2><p>​    实际开发中，很多项目连续开发十多年，jQuery版本不断更新，最初的 jQuery 版本无法满足需求，这时就需要保证在旧有版本正常运行的情况下，新的功能使用新的jQuery版本实现，这种情况被称为，jQuery 多库共存。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/noconfig.png" alt="noconfig"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">  <span class="hljs-keyword">var</span> suibian = jQuery.noConflict();</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(suibian(<span class="hljs-string">"span"</span>));</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h2><p>​    jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 这些插件也是依赖于jQuery来完成的，所以必须要先引入</p><p>jQuery文件，因此也称为 jQuery 插件。</p><p>​    jQuery 插件常用的网站：</p><ol><li><p>jQuery 插件库  <a href="http://www.jq22.com/" target="_blank" rel="noopener">http://www.jq22.com/</a>     </p></li><li><p>jQuery 之家   <a href="http://www.htmleaf.com/" target="_blank" rel="noopener">http://www.htmleaf.com/</a> </p><p>jQuery 插件使用步骤：</p></li><li><p>引入相关文件。（jQuery 文件 和 插件文件）    </p></li><li><p>复制相关html、css、js (调用插件)。</p></li></ol><h3 id="瀑布流插件（重点讲解）"><a href="#瀑布流插件（重点讲解）" class="headerlink" title="瀑布流插件（重点讲解）"></a>瀑布流插件（重点讲解）</h3><p>​    我们学习的第一个插件是jQuery之家的开源插件，瀑布流。我们将重点详细讲解，从找到插件所在网页，然后点击下载代码，到插件的使用等，后面的插件使用可参考瀑布流插件的使用。</p><p><strong>下载位置</strong></p><p><img src="/前端笔记/jquery-day03/water.png" alt="water"></p><p><img src="/前端笔记/jquery-day03/download.png" alt></p><p><strong>代码演示</strong></p><p>​    插件的使用三点：   1. 引入css.           2.引入JS            3.引入html。 （有的简单插件只需引入html和js，甚至有的只需引入js）</p><ul><li>1.引入css.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"css/normalize.css"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> type=<span class="hljs-string">"text/css"</span> href=<span class="hljs-string">"css/default.css"</span>&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- 下面的样式代码为页面布局，可以引入，也可以自己写，自己设计页面样式，一般为直接引入，方便 --&gt;</span><br><span class="line">&lt;style type=<span class="hljs-string">"text/css"</span>&gt;</span><br><span class="line">  #gallery-wrapper &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    max-width: <span class="hljs-number">75</span>%;</span><br><span class="line">    width: <span class="hljs-number">75</span>%;</span><br><span class="line">    margin: <span class="hljs-number">50</span>px auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img.thumb &#123;</span><br><span class="line">    width: <span class="hljs-number">100</span>%;</span><br><span class="line">    max-width: <span class="hljs-number">100</span>%;</span><br><span class="line">    height: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: white;</span><br><span class="line">    border-radius: <span class="hljs-number">5</span>px;</span><br><span class="line">    box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">1</span>px <span class="hljs-number">2</span>px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);</span><br><span class="line">    padding: <span class="hljs-number">10</span>px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 &#123;</span><br><span class="line">    font-size: <span class="hljs-number">1</span>em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 a &#123;</span><br><span class="line">    color: #A92733;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel:hover &#123;</span><br><span class="line">    box-shadow: <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px <span class="hljs-number">10</span>px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span><br><span class="line">    margin-top: <span class="hljs-number">-5</span>px;</span><br><span class="line">    -webkit-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    -moz-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    -o-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入js.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 前两个必须引入 --&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"js/jquery-1.11.0.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"js/pinterest_grid.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 下面的为启动瀑布流代码，参数可调节属性，具体功能可参考readme.html --&gt;</span><br><span class="line">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="hljs-string">"#gallery-wrapper"</span>).pinterest_grid(&#123;</span><br><span class="line">          no_columns: <span class="hljs-number">5</span>,</span><br><span class="line">          padding_x: <span class="hljs-number">15</span>,</span><br><span class="line">          padding_y: <span class="hljs-number">10</span>,</span><br><span class="line">          margin_bottom: <span class="hljs-number">50</span>,</span><br><span class="line">          single_column_breakpoint: <span class="hljs-number">700</span></span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3.引入html.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html结构一般为事先写好，很难修改结构，但可以修改内容及图片的多少（article标签） --&gt;</span><br><span class="line">&lt;section id=<span class="hljs-string">"gallery-wrapper"</span>&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_000.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_005.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_006.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_007.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">   &lt;<span class="hljs-regexp">/section&gt;</span></span><br></pre></td></tr></table></figure><p>总结：jQuery插件就是引入别人写好的：html 、css、js  （有时也可以只引入一部分，读懂后也可以修改部分内容）</p><h3 id="图片懒加载插件"><a href="#图片懒加载插件" class="headerlink" title="图片懒加载插件"></a>图片懒加载插件</h3><p>​    图片的懒加载就是：当页面滑动到有图片的位置，图片才进行加载，用以提升页面打开的速度及用户体验。（下载略）</p><p><strong>代码演示</strong></p><p>​    懒加载只需引入html 和 js操作 即可，此插件不涉及css。</p><ul><li>1.引入js</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="hljs-string">"js/EasyLazyload.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   lazyLoadInit(&#123;</span><br><span class="line">   showTime: <span class="hljs-number">1100</span>,</span><br><span class="line">   onLoadBackEnd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"onLoadBackEnd:"</span> + i);</span><br><span class="line">   &#125;,</span><br><span class="line">   onLoadBackStart: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"onLoadBackStart:"</span> + i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入html</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img data-lazy-src=<span class="hljs-string">"upload/floor-1-3.png"</span> alt=<span class="hljs-string">""</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="全屏滚动插件"><a href="#全屏滚动插件" class="headerlink" title="全屏滚动插件"></a>全屏滚动插件</h3><p>​    全屏滚动插件比较大，所以，一般大型插件都会有帮助文档，或者网站。全屏滚动插件介绍比较详细的网站为：</p><p><a href="http://www.dowebok.com/demo/2014/77/" target="_blank" rel="noopener">http://www.dowebok.com/demo/2014/77/</a></p><p><strong>代码演示</strong></p><p>​    全屏滚动因为有多重形式，所以不一样的风格html和css也不一样，但是 js 变化不大。所以下面只演示js的引入，html和css引入根据自己实际</p><p>项目需要使用哪种风格引入对应的HTML和CSS。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="hljs-string">"js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"js/fullpage.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="hljs-string">'#dowebok'</span>).fullpage(&#123;</span><br><span class="line">    sectionsColor: [<span class="hljs-string">'pink'</span>, <span class="hljs-string">'#4BBFC3'</span>, <span class="hljs-string">'#7BAABE'</span>, <span class="hljs-string">'#f90'</span>],</span><br><span class="line">    navigation: <span class="hljs-literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注意：实际开发，一般复制文件，然后在文件中进行修改和添加功能。</p><h3 id="bootstrap组件"><a href="#bootstrap组件" class="headerlink" title="bootstrap组件"></a>bootstrap组件</h3><p>​    Bootstrap是 Twitter 公司设计的基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，他依靠jQuery实现，且支持响应式</p><p>布局，使得 Web 开发更加方便快捷。</p><p>​    <strong>凡是在软件开发中用到了软件的复用，被复用的部分都可以称为组件，凡是在应用程序中已经预留接口的组件就是插件</strong>。Bootstrap组件使</p><p>用非常方便:  1.引入bootstrap相关css和js        2.去官网复制html</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/bootstrap.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;</span><br><span class="line">       &lt;!-- Single button --&gt;</span><br><span class="line">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn-group"</span>&gt;</span><br><span class="line">           &lt;button type=<span class="hljs-string">"button"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-default dropdown-toggle"</span> data-toggle=<span class="hljs-string">"dropdown"</span> aria-haspopup=<span class="hljs-string">"true"</span> aria-expanded=<span class="hljs-string">"false"</span>&gt;</span><br><span class="line">     Action &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"caret"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line">   &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">           &lt;ul class="dropdown-menu"&gt;</span></span><br><span class="line"><span class="hljs-regexp">               &lt;li&gt;&lt;a href="#"&gt;Action&lt;/</span>a&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li role=<span class="hljs-string">"separator"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"divider"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">           &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap插件（JS）"><a href="#bootstrap插件（JS）" class="headerlink" title="bootstrap插件（JS）"></a>bootstrap插件（JS）</h3><p>​    bootstrap中的js插件其实也是组件的一部分，只不过是需要js调用功能的组件，所以一般bootstrap的js插件一般会伴随着js代码（有的也可以</p><p>省略js，用属性实现）。</p><p>​    步骤： 1.引入bootstrap相关css和js        2.去官网复制html        3.复制js代码，启动js插件。</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/bootstrap.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 模态框 --&gt;</span><br><span class="line">&lt;!-- Large modal --&gt;</span><br><span class="line">&lt;button type=<span class="hljs-string">"button"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-primary"</span> data-toggle=<span class="hljs-string">"modal"</span> data-target=<span class="hljs-string">".bs-example-modal-lg"</span>&gt;Large modal&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="modal-dialog modal-lg" role="document"&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="hljs-regexp">            里面就是模态框</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>复制js代码，启动js插件。</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-comment">// 当我们点击了自己定义的按钮，就弹出模态框</span></span><br><span class="line">$(<span class="hljs-string">".myBtn"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// alert(11);</span></span><br><span class="line">$(<span class="hljs-string">'#btn'</span>).modal()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap案例-阿里百秀"><a href="#bootstrap案例-阿里百秀" class="headerlink" title="bootstrap案例-阿里百秀"></a>bootstrap案例-阿里百秀</h3><blockquote><p>1.通过调用组件实现导航栏<br>2.通过调用插件实现登录<br>3.通过调用插件标签页实现 tab 栏</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="综合案例-toDoList案例分析（代码略）"><a href="#综合案例-toDoList案例分析（代码略）" class="headerlink" title="综合案例: toDoList案例分析（代码略）"></a>综合案例: toDoList案例分析（代码略）</h2><h3 id="案例：案例介绍"><a href="#案例：案例介绍" class="headerlink" title="案例：案例介绍"></a>案例：案例介绍</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 文本框里面输入内容，按下回车，就可以生成待办事项。</span></span><br><span class="line"><span class="hljs-comment">// 2. 点击待办事项复选框，就可以把当前数据添加到已完成事项里面。</span></span><br><span class="line"><span class="hljs-comment">// 3. 点击已完成事项复选框，就可以把当前数据添加到待办事项里面。</span></span><br><span class="line"><span class="hljs-comment">// 4. 但是本页面内容刷新页面不会丢失。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-分析"><a href="#案例：toDoList-分析" class="headerlink" title="案例：toDoList 分析"></a>案例：toDoList 分析</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 刷新页面不会丢失数据，因此需要用到本地存储 localStorage</span></span><br><span class="line"><span class="hljs-comment">// 2. 核心思路： 不管按下回车，还是点击复选框，都是把本地存储的数据加载到页面中，这样保证刷新关闭页面不会丢失数据</span></span><br><span class="line"><span class="hljs-comment">// 3. 存储的数据格式：var todolist =  [&#123; title : ‘xxx’, done: false&#125;]</span></span><br><span class="line"><span class="hljs-comment">// 4. 注意点1： 本地存储 localStorage 里面只能存储字符串格式 ，因此需要把对象转换为字符串 JSON.stringify(data)。</span></span><br><span class="line"><span class="hljs-comment">// 5. 注意点2： 获取本地存储数据，需要把里面的字符串转换为对象格式JSON.parse() 我们才能使用里面的数据。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-按下回车把新数据添加到本地存储里面"><a href="#案例：toDoList-按下回车把新数据添加到本地存储里面" class="headerlink" title="案例：toDoList 按下回车把新数据添加到本地存储里面"></a>案例：toDoList 按下回车把新数据添加到本地存储里面</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.切记： 页面中的数据，都要从本地存储里面获取，这样刷新页面不会丢失数据，所以先要把数据保存到本地存储里面。</span></span><br><span class="line"><span class="hljs-comment">// 2.利用事件对象.keyCode判断用户按下回车键（13）。</span></span><br><span class="line"><span class="hljs-comment">// 3.声明一个数组，保存数据。</span></span><br><span class="line"><span class="hljs-comment">// 4.先要读取本地存储原来的数据（声明函数 getData()），放到这个数组里面。</span></span><br><span class="line"><span class="hljs-comment">// 5.之后把最新从表单获取过来的数据，追加到数组里面。</span></span><br><span class="line"><span class="hljs-comment">// 6.最后把数组存储给本地存储 (声明函数 savaDate())</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-本地存储数据渲染加载到页面"><a href="#案例：toDoList-本地存储数据渲染加载到页面" class="headerlink" title="案例：toDoList 本地存储数据渲染加载到页面"></a>案例：toDoList 本地存储数据渲染加载到页面</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.因为后面也会经常渲染加载操作，所以声明一个函数 load，方便后面调用</span></span><br><span class="line"><span class="hljs-comment">// 2.先要读取本地存储数据。（数据不要忘记转换为对象格式）</span></span><br><span class="line"><span class="hljs-comment">// 3.之后遍历这个数据（$.each()），有几条数据，就生成几个小li 添加到 ol 里面。</span></span><br><span class="line"><span class="hljs-comment">// 4.每次渲染之前，先把原先里面 ol 的内容清空，然后渲染加载最新的数据。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-删除操作"><a href="#案例：toDoList-删除操作" class="headerlink" title="案例：toDoList 删除操作"></a>案例：toDoList 删除操作</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.点击里面的a链接，不是删除的li，而是删除本地存储对应的数据。</span></span><br><span class="line"><span class="hljs-comment">// 2.核心原理：先获取本地存储数据，删除对应的数据，保存给本地存储，重新渲染列表li</span></span><br><span class="line"><span class="hljs-comment">// 3.我们可以给链接自定义属性记录当前的索引号</span></span><br><span class="line"><span class="hljs-comment">// 4.根据这个索引号删除相关的数据----数组的splice(i, 1)方法</span></span><br><span class="line"><span class="hljs-comment">// 5.存储修改后的数据，然后存储给本地存储</span></span><br><span class="line"><span class="hljs-comment">// 6.重新渲染加载数据列表</span></span><br><span class="line"><span class="hljs-comment">// 7.因为a是动态创建的，我们使用on方法绑定事件</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-正在进行和已完成选项操作"><a href="#案例：toDoList-正在进行和已完成选项操作" class="headerlink" title="案例：toDoList  正在进行和已完成选项操作"></a>案例：toDoList  正在进行和已完成选项操作</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.当我们点击了小的复选框，修改本地存储数据，再重新渲染数据列表。</span></span><br><span class="line"><span class="hljs-comment">// 2.点击之后，获取本地存储数据。</span></span><br><span class="line"><span class="hljs-comment">// 3.修改对应数据属性 done 为当前复选框的checked状态。</span></span><br><span class="line"><span class="hljs-comment">// 4.之后保存数据到本地存储</span></span><br><span class="line"><span class="hljs-comment">// 5.重新渲染加载数据列表</span></span><br><span class="line"><span class="hljs-comment">// 6.load 加载函数里面，新增一个条件,如果当前数据的done为true 就是已经完成的，就把列表渲染加载到 ul 里面</span></span><br><span class="line"><span class="hljs-comment">// 7.如果当前数据的done 为false， 则是待办事项，就把列表渲染加载到 ol 里面</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-统计正在进行个数和已经完成个数"><a href="#案例：toDoList-统计正在进行个数和已经完成个数" class="headerlink" title="案例：toDoList 统计正在进行个数和已经完成个数"></a>案例：toDoList 统计正在进行个数和已经完成个数</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.在我们load 函数里面操作</span></span><br><span class="line"><span class="hljs-comment">// 2.声明2个变量 ：todoCount 待办个数  doneCount 已完成个数   </span></span><br><span class="line"><span class="hljs-comment">// 3.当进行遍历本地存储数据的时候， 如果 数据done为 false， 则 todoCount++, 否则 doneCount++</span></span><br><span class="line"><span class="hljs-comment">// 4.最后修改相应的元素 text()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.jQuery事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/jquery-day03/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
</feed>
