<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>It Fool - 董冬懂冻</title>
  
  <subtitle>前端blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itfool.cn/"/>
  <updated>2020-05-23T08:10:15.898Z</updated>
  <id>http://www.itfool.cn/</id>
  
  <author>
    <name>董冬懂冻</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day03/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day03/</id>
    <published>2020-05-23T08:06:42.000Z</published>
    <updated>2020-05-23T08:10:15.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.jQuery事件</p></blockquote><p><img src="/前端笔记/jquery-day03/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够说出4种常见的注册事件<br>能够说出 on 绑定事件的优势<br>能够说出 jQuery 事件委派的优点以及方式<br>能够说出绑定事件与解绑事件<br>能够说出 jQuery 对象的拷贝方法<br>能够说出 jQuery 多库共存的2种方法<br>能够使用 jQuery 插件</p></blockquote><h2 id="jQuery-事件注册"><a href="#jQuery-事件注册" class="headerlink" title="jQuery 事件注册"></a>jQuery 事件注册</h2><p>​    jQuery 为我们提供了方便的事件注册机制，是开发人员抑郁操作优缺点如下：</p><ul><li>优点: 操作简单，且不用担心事件覆盖等问题。</li><li>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</li></ul><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/register.png" alt="register"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. 单个事件注册</span></span><br><span class="line">            $(<span class="hljs-string">"div"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"purple"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="hljs-string">"div"</span>).mouseenter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"skyblue"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件处理"><a href="#jQuery-事件处理" class="headerlink" title="jQuery 事件处理"></a>jQuery 事件处理</h2><p>​    因为普通注册事件方法的不足，jQuery又开发了多个处理方法，重点讲解如下：</p><ul><li>on(): 用于事件绑定，目前最好用的事件绑定方法</li><li>off(): 事件解绑</li><li>trigger() / triggerHandler(): 事件触发</li></ul><h3 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h3><p>​    因为普通注册事件方法的不足，jQuery又创建了多个新的事件绑定方法bind() / live() / delegate() / on()等，其中最好用的是: on()</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/on1.png" alt="on1"></p><p><img src="/前端笔记/jquery-day03/on2.png" alt="on2"></p><p><img src="/前端笔记/jquery-day03/on3.png" alt="on3"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我们都是好孩子&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;ol&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">            <span class="hljs-comment">// $("div").on(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     mouseenter: function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//         $(this).css("background", "skyblue");</span></span><br><span class="line">            <span class="hljs-comment">//     &#125;,</span></span><br><span class="line">            <span class="hljs-comment">//     click: function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//         $(this).css("background", "purple");</span></span><br><span class="line">            <span class="hljs-comment">//     &#125;</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"mouseenter mouseleave"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).toggleClass(<span class="hljs-string">"current"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">  </span><br><span class="line">            <span class="hljs-comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">            <span class="hljs-comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">            <span class="hljs-comment">// $("ul li").click();</span></span><br><span class="line">            $(<span class="hljs-string">"ul"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"li"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="hljs-number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// (3) on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">            $(<span class="hljs-string">"ol"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"li"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="hljs-number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">"&lt;li&gt;我是后来创建的&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol"</span>).append(li);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：发布微博案例"><a href="#案例：发布微博案例" class="headerlink" title="案例：发布微博案例"></a>案例：发布微博案例</h3><blockquote><p>1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中。<br>2.点击的删除按钮，可以删除当前的微博留言。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h3><p>​    当某个事件上面的逻辑，在特定需求下不需要的时候，可以把该事件上的逻辑移除，这个过程我们称为事件解绑。jQuery 为我们提供 了多种事件解绑方法：die() / undelegate() / off() 等，甚至还有只触发一次的事件绑定方法 one()，在这里我们重点讲解一下 off() ;</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/off.png" alt="off"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我们都是好孩子&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;p&gt;我是一个P标签&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ 事件绑定</span></span><br><span class="line"><span class="hljs-regexp">            $("div").on(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                click: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    console.log("我点击了");</span></span><br><span class="line"><span class="hljs-regexp">                &#125;,</span></span><br><span class="line"><span class="hljs-regexp">                mouseover: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    console.log('我鼠标经过了');</span></span><br><span class="line"><span class="hljs-regexp">                &#125;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").on("click", "li", function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                alert(11);</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">  </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. 事件解绑 off </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("div").off();  /</span><span class="hljs-regexp">/ 这个是解除了div身上的所有事件</span></span><br><span class="line"><span class="hljs-regexp">            $("div").off("click"); /</span><span class="hljs-regexp">/ 这个是解除了div身上的点击事件</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").off("click", "li");</span></span><br><span class="line"><span class="hljs-regexp">  </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. one() 但是它只能触发事件一次</span></span><br><span class="line"><span class="hljs-regexp">            $("p").one("click", function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                alert(11);</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件处理-trigger-自动触发事件"><a href="#事件处理-trigger-自动触发事件" class="headerlink" title="事件处理 trigger() 自动触发事件"></a>事件处理 trigger() 自动触发事件</h3><p>​    有些时候，在某些特定的条件下，我们希望某些事件能够自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。由此 jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler() ; </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/t1.png" alt="t1"></p><p><img src="/前端笔记/jquery-day03/t2.png" alt="t2"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;input type=<span class="hljs-string">"text"</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 绑定事件</span></span><br><span class="line">      $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">11</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 自动触发事件</span></span><br><span class="line">      <span class="hljs-comment">// 1. 元素.事件()</span></span><br><span class="line">      <span class="hljs-comment">// $("div").click();会触发元素的默认行为</span></span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 2. 元素.trigger("事件")</span></span><br><span class="line">      <span class="hljs-comment">// $("div").trigger("click");会触发元素的默认行为</span></span><br><span class="line">      $(<span class="hljs-string">"input"</span>).trigger(<span class="hljs-string">"focus"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 3. 元素.triggerHandler("事件") 就是不会触发元素的默认行为</span></span><br><span class="line">      $(<span class="hljs-string">"input"</span>).on(<span class="hljs-string">"focus"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="hljs-keyword">this</span>).val(<span class="hljs-string">"你好吗"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-comment">// 一个会获取焦点，一个不会</span></span><br><span class="line">      $(<span class="hljs-string">"div"</span>).triggerHandler(<span class="hljs-string">"click"</span>);</span><br><span class="line">      <span class="hljs-comment">// $("input").triggerHandler("focus");</span></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件对象"><a href="#jQuery-事件对象" class="headerlink" title="jQuery 事件对象"></a>jQuery 事件对象</h2><p>​    jQuery 对DOM中的事件对象 event 进行了封装，兼容性更好，获取更方便，使用变化不大。事件被触发，就会有事件对象的产生。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/event.png" alt="event"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"点击了document"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(event);</span></span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"点击了div"</span>);</span><br><span class="line">                event.stopPropagation();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>注意：jQuery中的 event 对象使用，可以借鉴 API 和 DOM 中的 event 。</p><h2 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/extend.png" alt="extend"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 1.合并数据</span></span><br><span class="line">           <span class="hljs-keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">           <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="hljs-number">1</span>,</span><br><span class="line">               name: <span class="hljs-string">"andy"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(targetObj);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// 2. 会覆盖 targetObj 里面原来的数据</span></span><br><span class="line">           <span class="hljs-keyword">var</span> targetObj = &#123;</span><br><span class="line">               id: <span class="hljs-number">0</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="hljs-number">1</span>,</span><br><span class="line">               name: <span class="hljs-string">"andy"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(targetObj); </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h2><p>​    实际开发中，很多项目连续开发十多年，jQuery版本不断更新，最初的 jQuery 版本无法满足需求，这时就需要保证在旧有版本正常运行的情况下，新的功能使用新的jQuery版本实现，这种情况被称为，jQuery 多库共存。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/noconfig.png" alt="noconfig"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">  <span class="hljs-keyword">var</span> suibian = jQuery.noConflict();</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(suibian(<span class="hljs-string">"span"</span>));</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h2><p>​    jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 这些插件也是依赖于jQuery来完成的，所以必须要先引入</p><p>jQuery文件，因此也称为 jQuery 插件。</p><p>​    jQuery 插件常用的网站：</p><ol><li><p>jQuery 插件库  <a href="http://www.jq22.com/" target="_blank" rel="noopener">http://www.jq22.com/</a>     </p></li><li><p>jQuery 之家   <a href="http://www.htmleaf.com/" target="_blank" rel="noopener">http://www.htmleaf.com/</a> </p><p>jQuery 插件使用步骤：</p></li><li><p>引入相关文件。（jQuery 文件 和 插件文件）    </p></li><li><p>复制相关html、css、js (调用插件)。</p></li></ol><h3 id="瀑布流插件（重点讲解）"><a href="#瀑布流插件（重点讲解）" class="headerlink" title="瀑布流插件（重点讲解）"></a>瀑布流插件（重点讲解）</h3><p>​    我们学习的第一个插件是jQuery之家的开源插件，瀑布流。我们将重点详细讲解，从找到插件所在网页，然后点击下载代码，到插件的使用等，后面的插件使用可参考瀑布流插件的使用。</p><p><strong>下载位置</strong></p><p><img src="/前端笔记/jquery-day03/water.png" alt="water"></p><p><img src="/前端笔记/jquery-day03/download.png" alt></p><p><strong>代码演示</strong></p><p>​    插件的使用三点：   1. 引入css.           2.引入JS            3.引入html。 （有的简单插件只需引入html和js，甚至有的只需引入js）</p><ul><li>1.引入css.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"css/normalize.css"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> type=<span class="hljs-string">"text/css"</span> href=<span class="hljs-string">"css/default.css"</span>&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- 下面的样式代码为页面布局，可以引入，也可以自己写，自己设计页面样式，一般为直接引入，方便 --&gt;</span><br><span class="line">&lt;style type=<span class="hljs-string">"text/css"</span>&gt;</span><br><span class="line">  #gallery-wrapper &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    max-width: <span class="hljs-number">75</span>%;</span><br><span class="line">    width: <span class="hljs-number">75</span>%;</span><br><span class="line">    margin: <span class="hljs-number">50</span>px auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img.thumb &#123;</span><br><span class="line">    width: <span class="hljs-number">100</span>%;</span><br><span class="line">    max-width: <span class="hljs-number">100</span>%;</span><br><span class="line">    height: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: white;</span><br><span class="line">    border-radius: <span class="hljs-number">5</span>px;</span><br><span class="line">    box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">1</span>px <span class="hljs-number">2</span>px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);</span><br><span class="line">    padding: <span class="hljs-number">10</span>px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 &#123;</span><br><span class="line">    font-size: <span class="hljs-number">1</span>em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 a &#123;</span><br><span class="line">    color: #A92733;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel:hover &#123;</span><br><span class="line">    box-shadow: <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px <span class="hljs-number">10</span>px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span><br><span class="line">    margin-top: <span class="hljs-number">-5</span>px;</span><br><span class="line">    -webkit-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    -moz-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    -o-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入js.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 前两个必须引入 --&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"js/jquery-1.11.0.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"js/pinterest_grid.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 下面的为启动瀑布流代码，参数可调节属性，具体功能可参考readme.html --&gt;</span><br><span class="line">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="hljs-string">"#gallery-wrapper"</span>).pinterest_grid(&#123;</span><br><span class="line">          no_columns: <span class="hljs-number">5</span>,</span><br><span class="line">          padding_x: <span class="hljs-number">15</span>,</span><br><span class="line">          padding_y: <span class="hljs-number">10</span>,</span><br><span class="line">          margin_bottom: <span class="hljs-number">50</span>,</span><br><span class="line">          single_column_breakpoint: <span class="hljs-number">700</span></span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3.引入html.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html结构一般为事先写好，很难修改结构，但可以修改内容及图片的多少（article标签） --&gt;</span><br><span class="line">&lt;section id=<span class="hljs-string">"gallery-wrapper"</span>&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_000.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_005.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_006.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_007.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">   &lt;<span class="hljs-regexp">/section&gt;</span></span><br></pre></td></tr></table></figure><p>总结：jQuery插件就是引入别人写好的：html 、css、js  （有时也可以只引入一部分，读懂后也可以修改部分内容）</p><h3 id="图片懒加载插件"><a href="#图片懒加载插件" class="headerlink" title="图片懒加载插件"></a>图片懒加载插件</h3><p>​    图片的懒加载就是：当页面滑动到有图片的位置，图片才进行加载，用以提升页面打开的速度及用户体验。（下载略）</p><p><strong>代码演示</strong></p><p>​    懒加载只需引入html 和 js操作 即可，此插件不涉及css。</p><ul><li>1.引入js</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="hljs-string">"js/EasyLazyload.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   lazyLoadInit(&#123;</span><br><span class="line">   showTime: <span class="hljs-number">1100</span>,</span><br><span class="line">   onLoadBackEnd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"onLoadBackEnd:"</span> + i);</span><br><span class="line">   &#125;,</span><br><span class="line">   onLoadBackStart: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"onLoadBackStart:"</span> + i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入html</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img data-lazy-src=<span class="hljs-string">"upload/floor-1-3.png"</span> alt=<span class="hljs-string">""</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="全屏滚动插件"><a href="#全屏滚动插件" class="headerlink" title="全屏滚动插件"></a>全屏滚动插件</h3><p>​    全屏滚动插件比较大，所以，一般大型插件都会有帮助文档，或者网站。全屏滚动插件介绍比较详细的网站为：</p><p><a href="http://www.dowebok.com/demo/2014/77/" target="_blank" rel="noopener">http://www.dowebok.com/demo/2014/77/</a></p><p><strong>代码演示</strong></p><p>​    全屏滚动因为有多重形式，所以不一样的风格html和css也不一样，但是 js 变化不大。所以下面只演示js的引入，html和css引入根据自己实际</p><p>项目需要使用哪种风格引入对应的HTML和CSS。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="hljs-string">"js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"js/fullpage.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="hljs-string">'#dowebok'</span>).fullpage(&#123;</span><br><span class="line">    sectionsColor: [<span class="hljs-string">'pink'</span>, <span class="hljs-string">'#4BBFC3'</span>, <span class="hljs-string">'#7BAABE'</span>, <span class="hljs-string">'#f90'</span>],</span><br><span class="line">    navigation: <span class="hljs-literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注意：实际开发，一般复制文件，然后在文件中进行修改和添加功能。</p><h3 id="bootstrap组件"><a href="#bootstrap组件" class="headerlink" title="bootstrap组件"></a>bootstrap组件</h3><p>​    Bootstrap是 Twitter 公司设计的基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，他依靠jQuery实现，且支持响应式</p><p>布局，使得 Web 开发更加方便快捷。</p><p>​    <strong>凡是在软件开发中用到了软件的复用，被复用的部分都可以称为组件，凡是在应用程序中已经预留接口的组件就是插件</strong>。Bootstrap组件使</p><p>用非常方便:  1.引入bootstrap相关css和js        2.去官网复制html</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/bootstrap.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;</span><br><span class="line">       &lt;!-- Single button --&gt;</span><br><span class="line">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn-group"</span>&gt;</span><br><span class="line">           &lt;button type=<span class="hljs-string">"button"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-default dropdown-toggle"</span> data-toggle=<span class="hljs-string">"dropdown"</span> aria-haspopup=<span class="hljs-string">"true"</span> aria-expanded=<span class="hljs-string">"false"</span>&gt;</span><br><span class="line">     Action &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"caret"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line">   &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">           &lt;ul class="dropdown-menu"&gt;</span></span><br><span class="line"><span class="hljs-regexp">               &lt;li&gt;&lt;a href="#"&gt;Action&lt;/</span>a&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li role=<span class="hljs-string">"separator"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"divider"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">           &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap插件（JS）"><a href="#bootstrap插件（JS）" class="headerlink" title="bootstrap插件（JS）"></a>bootstrap插件（JS）</h3><p>​    bootstrap中的js插件其实也是组件的一部分，只不过是需要js调用功能的组件，所以一般bootstrap的js插件一般会伴随着js代码（有的也可以</p><p>省略js，用属性实现）。</p><p>​    步骤： 1.引入bootstrap相关css和js        2.去官网复制html        3.复制js代码，启动js插件。</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/bootstrap.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 模态框 --&gt;</span><br><span class="line">&lt;!-- Large modal --&gt;</span><br><span class="line">&lt;button type=<span class="hljs-string">"button"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-primary"</span> data-toggle=<span class="hljs-string">"modal"</span> data-target=<span class="hljs-string">".bs-example-modal-lg"</span>&gt;Large modal&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="modal-dialog modal-lg" role="document"&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="hljs-regexp">            里面就是模态框</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>复制js代码，启动js插件。</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-comment">// 当我们点击了自己定义的按钮，就弹出模态框</span></span><br><span class="line">$(<span class="hljs-string">".myBtn"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// alert(11);</span></span><br><span class="line">$(<span class="hljs-string">'#btn'</span>).modal()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap案例-阿里百秀"><a href="#bootstrap案例-阿里百秀" class="headerlink" title="bootstrap案例-阿里百秀"></a>bootstrap案例-阿里百秀</h3><blockquote><p>1.通过调用组件实现导航栏<br>2.通过调用插件实现登录<br>3.通过调用插件标签页实现 tab 栏</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="综合案例-toDoList案例分析（代码略）"><a href="#综合案例-toDoList案例分析（代码略）" class="headerlink" title="综合案例: toDoList案例分析（代码略）"></a>综合案例: toDoList案例分析（代码略）</h2><h3 id="案例：案例介绍"><a href="#案例：案例介绍" class="headerlink" title="案例：案例介绍"></a>案例：案例介绍</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 文本框里面输入内容，按下回车，就可以生成待办事项。</span></span><br><span class="line"><span class="hljs-comment">// 2. 点击待办事项复选框，就可以把当前数据添加到已完成事项里面。</span></span><br><span class="line"><span class="hljs-comment">// 3. 点击已完成事项复选框，就可以把当前数据添加到待办事项里面。</span></span><br><span class="line"><span class="hljs-comment">// 4. 但是本页面内容刷新页面不会丢失。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-分析"><a href="#案例：toDoList-分析" class="headerlink" title="案例：toDoList 分析"></a>案例：toDoList 分析</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 刷新页面不会丢失数据，因此需要用到本地存储 localStorage</span></span><br><span class="line"><span class="hljs-comment">// 2. 核心思路： 不管按下回车，还是点击复选框，都是把本地存储的数据加载到页面中，这样保证刷新关闭页面不会丢失数据</span></span><br><span class="line"><span class="hljs-comment">// 3. 存储的数据格式：var todolist =  [&#123; title : ‘xxx’, done: false&#125;]</span></span><br><span class="line"><span class="hljs-comment">// 4. 注意点1： 本地存储 localStorage 里面只能存储字符串格式 ，因此需要把对象转换为字符串 JSON.stringify(data)。</span></span><br><span class="line"><span class="hljs-comment">// 5. 注意点2： 获取本地存储数据，需要把里面的字符串转换为对象格式JSON.parse() 我们才能使用里面的数据。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-按下回车把新数据添加到本地存储里面"><a href="#案例：toDoList-按下回车把新数据添加到本地存储里面" class="headerlink" title="案例：toDoList 按下回车把新数据添加到本地存储里面"></a>案例：toDoList 按下回车把新数据添加到本地存储里面</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.切记： 页面中的数据，都要从本地存储里面获取，这样刷新页面不会丢失数据，所以先要把数据保存到本地存储里面。</span></span><br><span class="line"><span class="hljs-comment">// 2.利用事件对象.keyCode判断用户按下回车键（13）。</span></span><br><span class="line"><span class="hljs-comment">// 3.声明一个数组，保存数据。</span></span><br><span class="line"><span class="hljs-comment">// 4.先要读取本地存储原来的数据（声明函数 getData()），放到这个数组里面。</span></span><br><span class="line"><span class="hljs-comment">// 5.之后把最新从表单获取过来的数据，追加到数组里面。</span></span><br><span class="line"><span class="hljs-comment">// 6.最后把数组存储给本地存储 (声明函数 savaDate())</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-本地存储数据渲染加载到页面"><a href="#案例：toDoList-本地存储数据渲染加载到页面" class="headerlink" title="案例：toDoList 本地存储数据渲染加载到页面"></a>案例：toDoList 本地存储数据渲染加载到页面</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.因为后面也会经常渲染加载操作，所以声明一个函数 load，方便后面调用</span></span><br><span class="line"><span class="hljs-comment">// 2.先要读取本地存储数据。（数据不要忘记转换为对象格式）</span></span><br><span class="line"><span class="hljs-comment">// 3.之后遍历这个数据（$.each()），有几条数据，就生成几个小li 添加到 ol 里面。</span></span><br><span class="line"><span class="hljs-comment">// 4.每次渲染之前，先把原先里面 ol 的内容清空，然后渲染加载最新的数据。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-删除操作"><a href="#案例：toDoList-删除操作" class="headerlink" title="案例：toDoList 删除操作"></a>案例：toDoList 删除操作</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.点击里面的a链接，不是删除的li，而是删除本地存储对应的数据。</span></span><br><span class="line"><span class="hljs-comment">// 2.核心原理：先获取本地存储数据，删除对应的数据，保存给本地存储，重新渲染列表li</span></span><br><span class="line"><span class="hljs-comment">// 3.我们可以给链接自定义属性记录当前的索引号</span></span><br><span class="line"><span class="hljs-comment">// 4.根据这个索引号删除相关的数据----数组的splice(i, 1)方法</span></span><br><span class="line"><span class="hljs-comment">// 5.存储修改后的数据，然后存储给本地存储</span></span><br><span class="line"><span class="hljs-comment">// 6.重新渲染加载数据列表</span></span><br><span class="line"><span class="hljs-comment">// 7.因为a是动态创建的，我们使用on方法绑定事件</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-正在进行和已完成选项操作"><a href="#案例：toDoList-正在进行和已完成选项操作" class="headerlink" title="案例：toDoList  正在进行和已完成选项操作"></a>案例：toDoList  正在进行和已完成选项操作</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.当我们点击了小的复选框，修改本地存储数据，再重新渲染数据列表。</span></span><br><span class="line"><span class="hljs-comment">// 2.点击之后，获取本地存储数据。</span></span><br><span class="line"><span class="hljs-comment">// 3.修改对应数据属性 done 为当前复选框的checked状态。</span></span><br><span class="line"><span class="hljs-comment">// 4.之后保存数据到本地存储</span></span><br><span class="line"><span class="hljs-comment">// 5.重新渲染加载数据列表</span></span><br><span class="line"><span class="hljs-comment">// 6.load 加载函数里面，新增一个条件,如果当前数据的done为true 就是已经完成的，就把列表渲染加载到 ul 里面</span></span><br><span class="line"><span class="hljs-comment">// 7.如果当前数据的done 为false， 则是待办事项，就把列表渲染加载到 ol 里面</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-统计正在进行个数和已经完成个数"><a href="#案例：toDoList-统计正在进行个数和已经完成个数" class="headerlink" title="案例：toDoList 统计正在进行个数和已经完成个数"></a>案例：toDoList 统计正在进行个数和已经完成个数</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.在我们load 函数里面操作</span></span><br><span class="line"><span class="hljs-comment">// 2.声明2个变量 ：todoCount 待办个数  doneCount 已完成个数   </span></span><br><span class="line"><span class="hljs-comment">// 3.当进行遍历本地存储数据的时候， 如果 数据done为 false， 则 todoCount++, 否则 doneCount++</span></span><br><span class="line"><span class="hljs-comment">// 4.最后修改相应的元素 text()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.jQuery事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/jquery-day03/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day02/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day02/</id>
    <published>2020-05-23T07:57:16.000Z</published>
    <updated>2020-05-23T08:05:13.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.jQuery操作元素</p></blockquote><p><img src="/前端笔记/jquery-day02/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够操作  jQuery 属性<br>能够操作  jQuery 元素<br>能够操作  jQuery 元素尺寸、位置</p></blockquote><h2 id="jQuery-属性操作"><a href="#jQuery-属性操作" class="headerlink" title="jQuery 属性操作"></a>jQuery 属性操作</h2><p>​    jQuery 常用属性操作有三种：prop() / attr() / data() ;</p><h3 id="元素固有属性值-prop"><a href="#元素固有属性值-prop" class="headerlink" title="元素固有属性值 prop()"></a>元素固有属性值 prop()</h3><p>​    所谓元素固有属性就是元素本身自带的属性，比如 <a> 元素里面的 href ，比如 <input> 元素里面的 type。 </a></p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/prop.png" alt></p><p>​    注意：prop() 除了普通属性操作，更适合操作表单属性：disabled / checked / selected 等。</p><h3 id="元素自定义属性值-attr"><a href="#元素自定义属性值-attr" class="headerlink" title="元素自定义属性值 attr()"></a>元素自定义属性值 attr()</h3><p>​    用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =“1”。 </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/attr.png" alt></p><p>​    注意：attr() 除了普通属性操作，更适合操作自定义属性。（该方法也可以获取 H5 自定义属性）</p><h3 id="数据缓存-data"><a href="#数据缓存-data" class="headerlink" title="数据缓存 data()"></a>数据缓存 data()</h3><p>​    data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/data.png" alt></p><p>​    注意：同时，还可以读取 HTML5 自定义属性  data-index ，得到的是数字型。</p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=<span class="hljs-string">"http://www.itcast.cn"</span> title=<span class="hljs-string">"都挺好"</span>&gt;都挺好&lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;input type="checkbox" name="" id="" checked&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div index="1" data-index="2"&gt;我是div&lt;/</span>div&gt;</span><br><span class="line">    &lt;span&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/1. element.prop("属性名") 获取元素固有的属性值</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("a").prop("href"));</span></span><br><span class="line"><span class="hljs-regexp">            $("a").prop("title", "我们都挺好");</span></span><br><span class="line"><span class="hljs-regexp">            $("input").change(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                console.log($(this).prop("checked"));</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ console.log($("div").prop("index"));</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. 元素的自定义属性 我们通过 attr()</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("div").attr("index"));</span></span><br><span class="line"><span class="hljs-regexp">            $("div").attr("index", 4);</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("div").attr("data-index"));</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span><br><span class="line"><span class="hljs-regexp">            $("span").data("uname", "andy");</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("span").data("uname"));</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("div").data("index"));</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-全选"><a href="#案例：购物车案例模块-全选" class="headerlink" title="案例：购物车案例模块-全选"></a>案例：购物车案例模块-全选</h3><blockquote><p>1.全选思路：里面3个小的复选框按钮（j-checkbox）选中状态（checked）跟着全选按钮（checkall）走。<br>2.因为checked 是复选框的固有属性，此时我们需要利用prop()方法获取和设置该属性。<br>3.把全选按钮状态赋值给3小复选框就可以了。<br>4.当我们每次点击小的复选框按钮，就来判断：<br>5.如果小复选框被选中的个数等于3 就应该把全选按钮选上，否则全选按钮不选。<br>6.:checked 选择器      :checked 查找被选中的表单元素。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-文本属性值"><a href="#jQuery-文本属性值" class="headerlink" title="jQuery 文本属性值"></a>jQuery 文本属性值</h2><p>​    jQuery的文本属性值常见操作有三种：html() / text() / val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性。</p><h3 id="jQuery内容文本值"><a href="#jQuery内容文本值" class="headerlink" title="jQuery内容文本值"></a>jQuery内容文本值</h3><p>​    常见操作有三种：html() / text() / val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性，主要针对元素的内容还有表单的值操作。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/html.png" alt></p><p>​    注意：html() 可识别标签，text() 不识别标签。</p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;我是内容&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;input type=<span class="hljs-string">"text"</span> value=<span class="hljs-string">"请输入内容"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1. 获取设置元素内容 html()</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).html());</span><br><span class="line">        <span class="hljs-comment">// $("div").html("123");</span></span><br><span class="line">        <span class="hljs-comment">// 2. 获取设置元素文本内容 text()</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).text());</span><br><span class="line">        $(<span class="hljs-string">"div"</span>).text(<span class="hljs-string">"123"</span>);</span><br><span class="line">        <span class="hljs-comment">// 3. 获取设置表单值 val()</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"input"</span>).val());</span><br><span class="line">        $(<span class="hljs-string">"input"</span>).val(<span class="hljs-string">"123"</span>);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-增减商品数量"><a href="#案例：购物车案例模块-增减商品数量" class="headerlink" title="案例：购物车案例模块-增减商品数量"></a>案例：购物车案例模块-增减商品数量</h3><blockquote><p>1.核心思路：首先声明一个变量，当我们点击+号（increment），就让这个值++，然后赋值给文本框。<br>2.注意1： 只能增加本商品的数量， 就是当前+号的兄弟文本框（itxt）的值。<br>3.修改表单的值是val() 方法<br>4.注意2： 这个变量初始值应该是这个文本框的值，在这个值的基础上++。要获取表单的值<br>5.减号（decrement）思路同理，但是如果文本框的值是1，就不能再减了。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：购物车案例模块-修改商品小计"><a href="#案例：购物车案例模块-修改商品小计" class="headerlink" title="案例：购物车案例模块-修改商品小计"></a>案例：购物车案例模块-修改商品小计</h3><blockquote><p>1.核心思路：每次点击+号或者-号，根据文本框的值 乘以 当前商品的价格  就是 商品的小计<br>2.注意1： 只能增加本商品的小计， 就是当前商品的小计模块（p-sum）<br>3.修改普通元素的内容是text() 方法<br>4.注意2： 当前商品的价格，要把￥符号去掉再相乘 截取字符串 substr(1)<br>5.parents(‘选择器’) 可以返回指定祖先元素<br>6.最后计算的结果如果想要保留2位小数 通过 toFixed(2)  方法<br>7.用户也可以直接修改表单里面的值，同样要计算小计。 用表单change事件<br>8.用最新的表单内的值 乘以 单价即可  但是还是当前商品小计</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-元素操作"><a href="#jQuery-元素操作" class="headerlink" title="jQuery 元素操作"></a>jQuery 元素操作</h2><p>​    jQuery 元素操作主要讲的是用jQuery方法，操作标签的遍历、创建、添加、删除等操作。</p><h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><p>​    jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p><p><strong>语法1</strong></p><p><img src="/前端笔记/jquery-day02/each1.png" alt></p><p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p><p><strong>语法2</strong></p><p><img src="/前端笔记/jquery-day02/each2.png" alt></p><p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span></span><br><span class="line"><span class="hljs-regexp">            var sum = 0;</span></span><br><span class="line"><span class="hljs-regexp">            var arr = ["red", "green", "blue"];</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. each() 方法遍历元素 </span></span><br><span class="line"><span class="hljs-regexp">            $("div").each(function(i, domEle) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ console.log(i);</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ 回调函数第二个参数一定是 dom 元素对象，也是自己命名</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ console.log(domEle);  /</span><span class="hljs-regexp">/ 使用jQuery方法需要转换 $(domEle)</span></span><br><span class="line"><span class="hljs-regexp">                $(domEle).css("color", arr[i]);</span></span><br><span class="line"><span class="hljs-regexp">                sum += parseInt($(domEle).text());</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">            console.log(sum);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $.each($("div"), function(i, ele) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(i);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(ele);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $.each(arr, function(i, ele) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(i);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(ele);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ &#125;)</span></span><br><span class="line"><span class="hljs-regexp">            $.each(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                name: "andy",</span></span><br><span class="line"><span class="hljs-regexp">                age: 18</span></span><br><span class="line"><span class="hljs-regexp">            &#125;, function(i, ele) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                console.log(i); /</span><span class="hljs-regexp">/ 输出的是 name age 属性名</span></span><br><span class="line"><span class="hljs-regexp">                console.log(ele); /</span><span class="hljs-regexp">/ 输出的是 andy  18 属性值</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-计算总计和总额"><a href="#案例：购物车案例模块-计算总计和总额" class="headerlink" title="案例：购物车案例模块-计算总计和总额"></a>案例：购物车案例模块-计算总计和总额</h3><blockquote><p>1.把所有文本框中的值相加就是总额数量，总计同理。<br>2.文本框里面的值不同，如果想要相加需要用 each() 遍历，声明一个变量做计数器，累加即可。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="创建、添加、删除"><a href="#创建、添加、删除" class="headerlink" title="创建、添加、删除"></a>创建、添加、删除</h3><p>​    jQuery方法操作元素的创建、添加、删除方法很多，则重点使用部分，如下：</p><p><strong>语法总和</strong></p><p><img src="/前端笔记/jquery-day02/create.png" alt></p><p><img src="/前端笔记/jquery-day02/append1.png" alt></p><p><img src="/前端笔记/jquery-day02/append2.png" alt></p><p><img src="/前端笔记/jquery-day02/remove.png" alt></p><p>​    注意：以上只是元素的创建、添加、删除方法的常用方法，其他方法请参详API。</p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;原先的li&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"test"</span>&gt;我是原先的div&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. 创建元素</span></span><br><span class="line"><span class="hljs-regexp">            var li = $("&lt;li&gt;我是后来创建的li&lt;/</span>li&gt;<span class="hljs-string">");</span></span><br><span class="line"><span class="hljs-string">      </span></span><br><span class="line"><span class="hljs-string">            // 2. 添加元素</span></span><br><span class="line"><span class="hljs-string">            // 2.1 内部添加</span></span><br><span class="line"><span class="hljs-string">            // $("</span>ul<span class="hljs-string">").append(li);  内部添加并且放到内容的最后面 </span></span><br><span class="line"><span class="hljs-string">            $("</span>ul<span class="hljs-string">").prepend(li); // 内部添加并且放到内容的最前面</span></span><br><span class="line"><span class="hljs-string">            //  2.2 外部添加</span></span><br><span class="line"><span class="hljs-string">            var div = $("</span>&lt;div&gt;我是后妈生的&lt;<span class="hljs-regexp">/div&gt;");</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $(".test").after(div);</span></span><br><span class="line"><span class="hljs-regexp">            $(".test").before(div);</span></span><br><span class="line"><span class="hljs-regexp">      </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 3. 删除元素</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("ul").remove(); 可以删除匹配的元素 自杀</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("ul").empty(); /</span><span class="hljs-regexp">/ 可以删除匹配的元素里面的子节点 孩子</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").html(""); /</span><span class="hljs-regexp">/ 可以删除匹配的元素里面的子节点 孩子</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-删除商品模块"><a href="#案例：购物车案例模块-删除商品模块" class="headerlink" title="案例：购物车案例模块-删除商品模块"></a>案例：购物车案例模块-删除商品模块</h3><blockquote><p>1.核心思路：把商品remove() 删除元素即可<br>2.有三个地方需要删除： 1. 商品后面的删除按钮 2. 删除选中的商品 3. 清理购物车<br>3.商品后面的删除按钮： 一定是删除当前的商品，所以从 $(this) 出发<br>4.删除选中的商品： 先判断小的复选框按钮是否选中状态，如果是选中，则删除对应的商品<br>5.清理购物车： 则是把所有的商品全部删掉</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：购物车案例模块-选中商品添加背景"><a href="#案例：购物车案例模块-选中商品添加背景" class="headerlink" title="案例：购物车案例模块-选中商品添加背景"></a>案例：购物车案例模块-选中商品添加背景</h3><blockquote><p>1.核心思路：选中的商品添加背景，不选中移除背景即可<br>2.全选按钮点击：如果全选是选中的，则所有的商品添加背景，否则移除背景<br>3.小的复选框点击： 如果是选中状态，则当前商品添加背景，否则移除背景<br>4.这个背景，可以通过类名修改，添加类和删除类</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-尺寸、位置操作"><a href="#jQuery-尺寸、位置操作" class="headerlink" title="jQuery 尺寸、位置操作"></a>jQuery 尺寸、位置操作</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><h3 id="jQuery-尺寸操作"><a href="#jQuery-尺寸操作" class="headerlink" title="jQuery 尺寸操作"></a>jQuery 尺寸操作</h3><p>​     jQuery 尺寸操作包括元素宽高的获取和设置，且不一样的API对应不一样的盒子模型。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/size.png" alt></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. width() / height() 获取设置元素 width和height大小 </span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).width());</span><br><span class="line">            <span class="hljs-comment">// $("div").width(300);</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).innerWidth());</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).outerWidth());</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).outerWidth(<span class="hljs-literal">true</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>​    注意：有了这套 API 我们将可以快速获取和子的宽高，至于其他属性想要获取和设置，还要使用 css() 等方法配合。</p><h3 id="jQuery-位置操作"><a href="#jQuery-位置操作" class="headerlink" title="jQuery 位置操作"></a>jQuery 位置操作</h3><p>​    jQuery的位置操作主要有三个： offset()、position()、scrollTop()/scrollLeft() , 具体介绍如下: </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/offset.png" alt></p><p><img src="/前端笔记/jquery-day02/position.png" alt></p><p><img src="/前端笔记/jquery-day02/scroll.png" alt></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"father"</span>&gt;</span><br><span class="line">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"son"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        </span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="back"&gt;返回顶部&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">   </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. 获取设置距离文档的位置（偏移） offset</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">".son"</span>).offset());</span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">".son"</span>).offset().top);</span><br><span class="line">            <span class="hljs-comment">// $(".son").offset(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     top: 200,</span></span><br><span class="line">            <span class="hljs-comment">//     left: 200</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">      </span><br><span class="line">            <span class="hljs-comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span></span><br><span class="line">            <span class="hljs-comment">// 这个方法只能获取不能设置偏移</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">".son"</span>).position());</span><br><span class="line">            <span class="hljs-comment">// $(".son").position(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     top: 200,</span></span><br><span class="line">            <span class="hljs-comment">//     left: 200</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 3. 被卷去的头部</span></span><br><span class="line">      $(<span class="hljs-built_in">document</span>).scrollTop(<span class="hljs-number">100</span>);</span><br><span class="line">            <span class="hljs-comment">// 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span></span><br><span class="line">            <span class="hljs-comment">// 页面滚动事件</span></span><br><span class="line">            <span class="hljs-keyword">var</span> boxTop = $(<span class="hljs-string">".container"</span>).offset().top;</span><br><span class="line">            $(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">                <span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">document</span>).scrollTop());</span><br><span class="line">                <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">document</span>).scrollTop() &gt;= boxTop) &#123;</span><br><span class="line">                    $(<span class="hljs-string">".back"</span>).fadeIn();</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="hljs-string">".back"</span>).fadeOut();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-comment">// 返回顶部</span></span><br><span class="line">            $(<span class="hljs-string">".back"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// $(document).scrollTop(0);</span></span><br><span class="line">                $(<span class="hljs-string">"body, html"</span>).stop().animate(&#123;</span><br><span class="line">                    scrollTop: <span class="hljs-number">0</span></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="hljs-comment">// $(document).stop().animate(&#123;</span></span><br><span class="line">                <span class="hljs-comment">//     scrollTop: 0</span></span><br><span class="line">                <span class="hljs-comment">// &#125;); 不能是文档而是 html和body元素做动画</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：带有动画的返回顶部"><a href="#案例：带有动画的返回顶部" class="headerlink" title="案例：带有动画的返回顶部"></a>案例：带有动画的返回顶部</h3><blockquote><p>1.核心原理： 使用animate动画返回顶部。<br>2.animate动画函数里面有个scrollTop 属性，可以设置位置<br>3.但是是元素做动画，因此 $(“body,html”).animate({scrollTop: 0})</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：-品优购电梯导航（上）"><a href="#案例：-品优购电梯导航（上）" class="headerlink" title="案例： 品优购电梯导航（上）"></a>案例： 品优购电梯导航（上）</h3><blockquote><p>1.当我们滚动到 今日推荐 模块，就让电梯导航显示出来<br>2.点击电梯导航页面可以滚动到相应内容区域<br>3.核心算法：因为电梯导航模块和内容区模块一一对应的<br>4.当我们点击电梯导航某个小模块，就可以拿到当前小模块的索引号<br>5.就可以把animate要移动的距离求出来：当前索引号内容区模块它的offset().top<br>6.然后执行动画即可</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：品优购电梯导航（下）"><a href="#案例：品优购电梯导航（下）" class="headerlink" title="案例：品优购电梯导航（下）"></a>案例：品优购电梯导航（下）</h3><blockquote><p>1.当我们点击电梯导航某个小li， 当前小li 添加current类，兄弟移除类名<br>2.当我们页面滚动到内容区域某个模块， 左侧电梯导航，相对应的小li模块，也会添加current类， 兄弟移除current类。<br>3.触发的事件是页面滚动，因此这个功能要写到页面滚动事件里面。<br>4.需要用到each，遍历内容区域大模块。 each里面能拿到内容区域每一个模块元素和索引号<br>5.判断的条件：  被卷去的头部 大于等于 内容区域里面每个模块的offset().top<br>6.就利用这个索引号找到相应的电梯导航小li添加类。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.jQuery操作元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/jquery-day02/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day01/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day01/</id>
    <published>2020-05-23T07:45:30.000Z</published>
    <updated>2020-05-23T07:55:56.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.认识jQuery</p></blockquote><p> <img src="/前端笔记/jquery-day01/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够说出什么是 jQuery<br>能够说出 jQuery 的优点<br>能够简单使用 jQuery<br>能够说出 DOM 对象和 jQuery 对象的区别<br>能够写出常用的 jQuery 选择器<br>能够操作 jQuery 样式<br>能够写出常用的 jQuery 动画 </p></blockquote><h2 id="jQuery-介绍"><a href="#jQuery-介绍" class="headerlink" title="jQuery 介绍"></a>jQuery 介绍</h2><h3 id="JavaScript-库"><a href="#JavaScript-库" class="headerlink" title="JavaScript 库"></a>JavaScript 库</h3><p>​    JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p><blockquote><p>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p><p>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p></blockquote><p>​    常见的JavaScript 库：jQuery、Prototype、YUI、Dojo、Ext JS、移动端的zepto等，这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</p><h3 id="jQuery的概念"><a href="#jQuery的概念" class="headerlink" title="jQuery的概念"></a>jQuery的概念</h3><p>​    jQuery总体概况如下 :</p><ul><li><p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p></li><li><p>j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p></li><li><p>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p></li><li><p>学习jQuery本质： 就是学习调用这些函数（方法）。</p></li><li><p>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p><p><img src="/前端笔记/jquery-day01/jQuery%E6%A6%82%E8%BF%B0.jpg" alt></p></li></ul><h3 id="jQuery的优点"><a href="#jQuery的优点" class="headerlink" title="jQuery的优点"></a>jQuery的优点</h3><ol><li>轻量级。核心文件才几十kb，不会影响页面加载速度。</li><li>跨浏览器兼容，基本兼容了现在主流的浏览器。</li><li>链式编程、隐式迭代。</li><li>对事件、样式、动画支持，大大简化了DOM操作。</li><li>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等。</li><li>免费、开源。</li></ol><h2 id="jQuery-的基本使用"><a href="#jQuery-的基本使用" class="headerlink" title="jQuery 的基本使用"></a>jQuery 的基本使用</h2><h3 id="jQuery-的下载"><a href="#jQuery-的下载" class="headerlink" title="jQuery 的下载"></a>jQuery 的下载</h3><p>​    jQuery的官网地址： <a href="https://jquery.com/，官网即可下载最新版本。" target="_blank" rel="noopener">https://jquery.com/，官网即可下载最新版本。</a></p><blockquote><p> 各个版本的下载：<a href="https://code.jquery.com/" target="_blank" rel="noopener">https://code.jquery.com/</a></p></blockquote><p>​    版本介绍：</p><blockquote><p>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</p><p>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</p><p>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p></blockquote><h3 id="体验jQuery"><a href="#体验jQuery" class="headerlink" title="体验jQuery"></a>体验jQuery</h3><p>​    步骤：</p><ul><li>引入jQuery文件。</li><li>在文档最末尾插入 script 标签，书写体验代码。</li><li>$(‘div’).hide() 可以隐藏盒子。</li></ul><h3 id="jQuery的入口函数"><a href="#jQuery的入口函数" class="headerlink" title="jQuery的入口函数"></a>jQuery的入口函数</h3><p>​    jQuery中常见的两种入口函数：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 第一种: 简单易用。</span></span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;   </span><br><span class="line">    ...  <span class="hljs-comment">// 此处是页面 DOM 加载完成的入口</span></span><br><span class="line">&#125;) ; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 第二种: 繁琐，但是也可以实现</span></span><br><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">   ...  <span class="hljs-comment">//  此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    总结：</p><ol><li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li><li>相当于原生 js 中的 DOMContentLoaded。</li><li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</li><li>更推荐使用第一种方式。</li></ol><h3 id="jQuery中的顶级对象"><a href="#jQuery中的顶级对象" class="headerlink" title="jQuery中的顶级对象$"></a>jQuery中的顶级对象$</h3><ol><li>$是 jQuery 的别称，在代码中可以使用 jQuery 代替，但一般为了方便，通常都直接使用 $ 。</li><li>$是jQuery的顶级对象，相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</li></ol><h3 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h3><p>​    使用 jQuery 方法和原生JS获取的元素是不一样的，总结如下 : </p><ol><li>用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 方法获取的元素就是 jQuery 对象。</li><li>jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）。</li></ol><blockquote><p>注意：</p><p>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p></blockquote><p><img src="/前端笔记/jquery-day01/jQuery%E5%AF%B9%E8%B1%A1%E5%92%8CDOM%E5%AF%B9%E8%B1%A1.png" alt="jQuery对象和DOM对象"></p><h3 id="jQuery-对象和-DOM-对象转换"><a href="#jQuery-对象和-DOM-对象转换" class="headerlink" title="jQuery 对象和 DOM 对象转换"></a>jQuery 对象和 DOM 对象转换</h3><p>​    DOM 对象与 jQuery 对象之间是可以相互转换的。因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span></span><br><span class="line"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'box'</span>);  <span class="hljs-comment">// 获取DOM对象</span></span><br><span class="line"><span class="hljs-keyword">var</span> jQueryObject = $(box);  <span class="hljs-comment">// 把DOM对象转换为 jQuery 对象</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span></span><br><span class="line"><span class="hljs-comment">//   2.1 jQuery对象[索引值]</span></span><br><span class="line"><span class="hljs-keyword">var</span> domObject1 = $(<span class="hljs-string">'div'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//   2.2 jQuery对象.get(索引值)</span></span><br><span class="line"><span class="hljs-keyword">var</span> domObject2 = $(<span class="hljs-string">'div'</span>).get(<span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>总结：实际开发比较常用的是把DOM对象转换为jQuery对象，这样能够调用功能更加强大的jQuery中的方法。</p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><p>​    原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"选择器"</span>)   <span class="hljs-comment">//  里面选择器直接写 CSS 选择器即可，但是要加引号</span></span><br></pre></td></tr></table></figure><p>​    <img src="/前端笔记/jquery-day01/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="基础选择器"></p><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p>​    层级选择器最常用的两个分别为：后代选择器和子代选择器。</p><p>​    <img src="/前端笔记/jquery-day01/%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="层级选择器"></p><p><strong>基础选择器和层级选择器案例代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;我是div&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="nav"&gt;我是nav div&lt;/</span>div&gt;</span><br><span class="line">    &lt;p&gt;我是p&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我是ul 的&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我是ul 的&lt;<span class="hljs-regexp">/li&gt;        </span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我是ul 的&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log($(".nav"));</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("ul li"));</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h3><p>​    筛选选择器，顾名思义就是在所有的选项中选择满足条件的进行筛选选择。常见如下 :</p><p><img src="/前端笔记/jquery-day01/%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="筛选选择器"></p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;ol&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>ol&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"ul li:first"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"red"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ul li:eq(2)"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"blue"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol li:odd"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"skyblue"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol li:even"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"pink"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>另:  jQuery中还有一些筛选方法，类似DOM中的通过一个节点找另外一个节点，父、子、兄以外有所加强。</p><p><img src="/前端笔记/jquery-day01/relation.png" alt="筛选方法"></p><p>偏重于记忆，演示代码略。</p><h3 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h3><ul><li>jQuery 设置样式</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'div'</span>).css(<span class="hljs-string">'属性'</span>, <span class="hljs-string">'值'</span>)</span><br></pre></td></tr></table></figure><ul><li>jQuery 里面的排他思想</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(“color”,”red”);</span><br><span class="line">$(<span class="hljs-keyword">this</span>).siblings(). css(“color”,””);</span><br></pre></td></tr></table></figure><ul><li>隐式迭代</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</span></span><br><span class="line"><span class="hljs-comment">// 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</span></span><br><span class="line">$(<span class="hljs-string">'div'</span>).hide();  <span class="hljs-comment">// 页面中所有的div全部隐藏，不用循环操作</span></span><br></pre></td></tr></table></figure><ul><li>链式编程</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 链式编程是为了节省代码量，看起来更优雅。</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>).sibling().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">''</span>);</span><br></pre></td></tr></table></figure><h3 id="案例：淘宝服饰精品案例"><a href="#案例：淘宝服饰精品案例" class="headerlink" title="案例：淘宝服饰精品案例"></a>案例：淘宝服饰精品案例</h3><blockquote><p>思路分析:<br>1.核心原理：鼠标经过左侧盒子某个小li，就让内容区盒子相对应图片显示，其余的图片隐藏。<br>2.需要得到当前小li 的索引号，就可以显示对应索引号的图片<br>3.jQuery 得到当前元素索引号 $(this).index()<br>4.中间对应的图片，可以通过  eq(index) 方法去选择<br>5.显示元素 show()   隐藏元素 hide()</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h2><p>​    jQuery中常用的样式操作有两种：css() 和 设置类样式方法</p><h3 id="方法1-操作-css-方法"><a href="#方法1-操作-css-方法" class="headerlink" title="方法1: 操作 css 方法"></a>方法1: 操作 css 方法</h3><p>​    jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p><p>​    常用以下三种形式 : </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.参数只写属性名，则是返回属性值</span></span><br><span class="line"><span class="hljs-keyword">var</span> strColor = $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">'color'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.  参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">''</span>color<span class="hljs-string">''</span>, <span class="hljs-string">''</span>red<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.  参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(&#123; <span class="hljs-string">"color"</span>:<span class="hljs-string">"white"</span>,<span class="hljs-string">"font-size"</span>:<span class="hljs-string">"20px"</span>&#125;);</span><br></pre></td></tr></table></figure><p>​    注意：css() 多用于样式少时操作，多了则不太方便。</p><h3 id="方法2-设置类样式方法"><a href="#方法2-设置类样式方法" class="headerlink" title="方法2: 设置类样式方法"></a>方法2: 设置类样式方法</h3><p>​    作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><p>​    常用的三种设置类样式方法：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.添加类</span></span><br><span class="line">$(<span class="hljs-string">"div"</span>).addClass(<span class="hljs-string">"current"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.删除类</span></span><br><span class="line">$(<span class="hljs-string">"div"</span>).removeClass(<span class="hljs-string">"current"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.切换类</span></span><br><span class="line">$(<span class="hljs-string">"div"</span>).toggleClass(<span class="hljs-string">"current"</span>);</span><br></pre></td></tr></table></figure><p>​    注意：</p><ol><li>设置类样式方法比较适合样式多时操作，可以弥补css()的不足。</li><li>原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</li></ol><h3 id="案例：tab-栏切换"><a href="#案例：tab-栏切换" class="headerlink" title="案例：tab 栏切换"></a>案例：tab 栏切换</h3><blockquote><p>思路分析:<br>1.点击上部的li，当前li 添加current类，其余兄弟移除类。<br>2.点击的同时，得到当前li 的索引号<br>3.让下部里面相应索引号的item显示，其余的item隐藏</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-效果"><a href="#jQuery-效果" class="headerlink" title="jQuery 效果"></a>jQuery 效果</h2><p>​    jQuery 给我们封装了很多动画效果，最为常见的如下：</p><ul><li>显示隐藏：show() / hide() / toggle() ;</li><li>划入画出：slideDown() / slideUp() / slideToggle() ; </li><li>淡入淡出：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </li><li>自定义动画：animate() ;</li></ul><blockquote><p>注意：</p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>jQuery为我们提供另一个方法，可以停止动画排队：stop() ;</p></blockquote><h3 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h3><p>​    显示隐藏动画，常见有三个方法：show() / hide() / toggle() ;</p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/show.png" alt="show"></p><p><img src="/前端笔记/jquery-day01/hide.png" alt="hide"></p><p><img src="/前端笔记/jquery-day01/toggle.png" alt="toggle"></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;隐藏&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;切换&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-string">"div"</span>).show(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="hljs-number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-string">"div"</span>).hide(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="hljs-number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              $(<span class="hljs-string">"div"</span>).toggle(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="滑入滑出"><a href="#滑入滑出" class="headerlink" title="滑入滑出"></a>滑入滑出</h3><p>​    滑入滑出动画，常见有三个方法：slideDown() / slideUp() / slideToggle() ; </p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/slideDown.png" alt="slideDown"></p><p><img src="/前端笔记/jquery-day01/slideUp.png" alt="slideUp"></p><p><img src="/前端笔记/jquery-day01/slideToggle.png" alt="slideToggle"></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;下拉滑动&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;上拉滑动&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;切换滑动&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 下滑动 slideDown()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).slideDown();</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 上滑动 slideUp()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).slideUp(<span class="hljs-number">500</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 滑动切换 slideToggle()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).slideToggle(<span class="hljs-number">500</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>小案例：下拉菜单略（详情参看源码）。</p></blockquote><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><p>​    淡入淡出动画，常见有四个方法：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/fadeIn.png" alt="fadeIn"></p><p><img src="/前端笔记/jquery-day01/fadeOut.png" alt="fadeOut"></p><p><img src="/前端笔记/jquery-day01/fadeToggle.png" alt="fadeToggle"></p><p><img src="/前端笔记/jquery-day01/fadeTo.png" alt="fadeTo"></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;淡入效果&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;淡出效果&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;淡入淡出切换&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;修改透明度&lt;/</span>button&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 淡入 fadeIn()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeIn(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 淡出 fadeOut()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeOut(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 淡入淡出切换 fadeToggle()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeToggle(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">3</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeTo(<span class="hljs-number">1000</span>, <span class="hljs-number">0.5</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>​    自定义动画非常强大，通过参数的传递可以模拟以上所有动画，方法为：animate() ;</p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/animate.png" alt></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;动起来&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-string">"div"</span>).animate(&#123;</span><br><span class="line">                    left: <span class="hljs-number">500</span>,</span><br><span class="line">                    top: <span class="hljs-number">300</span>,</span><br><span class="line">                    opacity: <span class="hljs-number">.4</span>,</span><br><span class="line">                    width: <span class="hljs-number">500</span></span><br><span class="line">                &#125;, <span class="hljs-number">500</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="停止动画排队"><a href="#停止动画排队" class="headerlink" title="停止动画排队"></a>停止动画排队</h3><p>​    动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>​    停止动画排队的方法为：stop() ; </p><ul><li>stop() 方法用于停止动画或效果。</li><li>stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li></ul><p>​        总结: 每次使用动画之前，先调用 stop() ,在调用动画。</p><h3 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h3><p>​    jQuery中为我们添加了一个新事件 hover() ; 功能类似 css 中的伪类 :hover 。介绍如下</p><p><strong>语法</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hover([over,]out)     <span class="hljs-comment">// 其中over和out为两个函数</span></span><br></pre></td></tr></table></figure><ul><li>over:鼠标移到元素上要触发的函数（相当于mouseenter）</li><li>out:鼠标移出元素要触发的函数（相当于mouseleave）</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><p><strong>hover事件和停止动画排列案例</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"nav"</span>&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="hljs-string">"#"</span>&gt;微博&lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;ul&gt;&lt;li&gt;&lt;a href=""&gt;私信&lt;/</span>a&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;a href="#"&gt;微博&lt;/</span>a&gt;</span><br><span class="line">            &lt;ul&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 鼠标经过</span></span><br><span class="line">            <span class="hljs-comment">// $(".nav&gt;li").mouseover(function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     // $(this) jQuery 当前元素  this不要加引号</span></span><br><span class="line">            <span class="hljs-comment">//     // show() 显示元素  hide() 隐藏元素</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideDown(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            <span class="hljs-comment">// // 鼠标离开</span></span><br><span class="line">            <span class="hljs-comment">// $(".nav&gt;li").mouseout(function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideUp(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            <span class="hljs-comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span></span><br><span class="line">            <span class="hljs-comment">// $(".nav&gt;li").hover(function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideDown(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;, function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideUp(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            <span class="hljs-comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span></span><br><span class="line">            $(<span class="hljs-string">".nav&gt;li"</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// stop 方法必须写到动画的前面</span></span><br><span class="line">                $(<span class="hljs-keyword">this</span>).children(<span class="hljs-string">"ul"</span>).stop().slideToggle();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.认识jQuery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;img src=&quot;/前端笔记/jquery-day01/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day07</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day07/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day07/</id>
    <published>2020-05-23T07:37:11.000Z</published>
    <updated>2020-05-23T07:50:29.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.移动端特效</p></blockquote><blockquote><p><strong>学习目标:</strong></p><p>能够写出移动端触屏事件<br>能够写出常见的移动端特效<br>能够使用移动端开发插件开发移动端特效<br>能够使用移动端开发框架开发移动端特效<br>能够写出 sessionStorage 数据的存储以及获取<br>能够写出 localStorage 数据的存储以及获取<br>能够说出它们两者的区别</p></blockquote> <a id="more"></a><h2 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h2><h3 id="触屏事件概述"><a href="#触屏事件概述" class="headerlink" title="触屏事件概述"></a>触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="/前端笔记/webapis-day07/%E5%9B%BE%E7%89%871.png" alt></p><h3 id="触摸事件对象（TouchEvent）"><a href="#触摸事件对象（TouchEvent）" class="headerlink" title="触摸事件对象（TouchEvent）"></a>触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/前端笔记/webapis-day07/%E5%9B%BE%E7%89%872.png" alt></p><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h3><ol><li>touchstart、touchmove、touchend 可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li><li>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</li></ol><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><blockquote><p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p></blockquote><h2 id="移动端常见特效"><a href="#移动端常见特效" class="headerlink" title="移动端常见特效"></a>移动端常见特效</h2><h3 id="案例-移动轮播图"><a href="#案例-移动轮播图" class="headerlink" title="案例: 移动轮播图"></a>案例: 移动轮播图</h3><p><code>移动端轮播图功能和基本PC端一致。</code></p><ol><li>可以自动播放图片</li><li>手指可以拖动播放轮播图</li></ol><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>自动播放功能</li><li>开启定时器</li><li>移动端移动，可以使用translate 移动</li><li>想要图片优雅的移动，请添加过渡效果<img src="/前端笔记/webapis-day07/images%5C1551795152(1).jpg" alt="1551795152(1)"></li></ol><ol><li><p>自动播放功能-无缝滚动</p></li><li><p>注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p></li><li><p>此时需要添加检测过渡完成事件  transitionend </p></li><li><p>判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p></li><li><p>此时图片，去掉过渡效果，然后移动</p></li><li><p>如果索引号小于0， 说明是倒着走， 索引号等于2 </p></li><li><p>此时图片，去掉过渡效果，然后移动</p><p><img src="/前端笔记/webapis-day07/1551795483(1).jpg" alt></p></li></ol><h2 id="classList-属性"><a href="#classList-属性" class="headerlink" title="classList 属性"></a>classList 属性</h2><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p><p><strong>添加类：</strong></p><p>element.classList.add（’类名’）；</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">focus.classList.add(<span class="hljs-string">'current'</span>);</span><br></pre></td></tr></table></figure><p><strong>移除类：</strong></p><p>element.classList.remove（’类名’）;</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">focus.classList.remove(<span class="hljs-string">'current'</span>);</span><br></pre></td></tr></table></figure><p><strong>切换类：</strong></p><p>element.classList.toggle（’类名’）;</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">focus.classList.toggle(<span class="hljs-string">'current'</span>);</span><br></pre></td></tr></table></figure><p><code>注意:以上方法里面，所有类名都不带点</code></p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>小圆点跟随变化效果</p></li><li><p>把ol里面li带有current类名的选出来去掉类名 remove</p></li><li><p>让当前索引号的小li 加上 current   add</p></li><li><p>但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里面</p><p><img src="/前端笔记/webapis-day07/1551796072(1).jpg" alt></p></li></ol><ol><li>手指滑动轮播图</li><li>本质就是ul跟随手指移动，简单说就是移动端拖动元素</li><li>触摸元素touchstart：  获取手指初始坐标</li><li>移动手指touchmove：  计算手指的滑动距离，并且移动盒子</li><li>离开手指touchend:   根据滑动的距离分不同的情况</li><li>如果移动距离小于某个像素  就回弹原来位置</li><li>如果移动距离大于某个像素就上一张下一张滑动。</li><li>滑动也分为左滑动和右滑动判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑 </li><li>如果是左滑就播放下一张 （index++）</li><li>如果是右滑就播放上一张  (index–)</li></ol><p><img src="/前端笔记/webapis-day07/1551796363(1).jpg" alt></p><p><img src="/前端笔记/webapis-day07/1551796502(1).jpg" alt></p><h3 id="案例：返回顶部"><a href="#案例：返回顶部" class="headerlink" title="案例：返回顶部"></a>案例：返回顶部</h3><p>当页面滚动某个地方，就显示，否则隐藏</p><p>点击可以返回顶部</p><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>滚动某个地方显示</li><li>事件：scroll页面滚动事件  </li><li>如果被卷去的头部（window.pageYOffset ）大于某个数值</li><li>点击，window.scroll(0,0) 返回顶部</li></ol><p><img src="/前端笔记/webapis-day07/1551797003(1).jpg" alt></p><h2 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h2><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><p>​    1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    2.利用touch事件自己封装这个事件解决300ms 延迟。 </p><p>​    原理就是：</p><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li>如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li></ol><p>代码如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//封装tap，解决click 300ms 延时</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tap</span> (<span class="hljs-params">obj, callback</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> isMove = <span class="hljs-literal">false</span>;</span><br><span class="line">        <span class="hljs-keyword">var</span> startTime = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录触摸时候的时间变量</span></span><br><span class="line">        obj.addEventListener(<span class="hljs-string">'touchstart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            startTime = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 记录触摸时间</span></span><br><span class="line">        &#125;);</span><br><span class="line">        obj.addEventListener(<span class="hljs-string">'touchmove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            isMove = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">        &#125;);</span><br><span class="line">        obj.addEventListener(<span class="hljs-string">'touchend'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!isMove &amp;&amp; (<span class="hljs-built_in">Date</span>.now() - startTime) &lt; <span class="hljs-number">150</span>) &#123;  <span class="hljs-comment">// 如果手指触摸和离开时间小于150ms 算点击</span></span><br><span class="line">                callback &amp;&amp; callback(); <span class="hljs-comment">// 执行回调函数</span></span><br><span class="line">            &#125;</span><br><span class="line">            isMove = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//  取反 重置</span></span><br><span class="line">            startTime = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//调用  </span></span><br><span class="line">  tap(div, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">// 执行代码  &#125;);</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用插件。fastclick 插件解决300ms 延迟。 </p><p><img src="/前端笔记/webapis-day07/1551797533(1).jpg" alt></p></li></ol><h2 id="移动端常用开发插件"><a href="#移动端常用开发插件" class="headerlink" title="移动端常用开发插件"></a>移动端常用开发插件</h2><h3 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p><p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>我们以前写的animate.js 也算一个最简单的插件</p><p>fastclick 插件解决 300ms 延迟。 使用延时</p><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">https://</a><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">github.com/ftlabs/fastclick</a></p><h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><ol><li><p>引入 js 插件文件。</p></li><li><p>按照规定语法使用。</p></li><li><p>fastclick 插件解决 300ms 延迟。 使用延时</p></li><li><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">https://github.com/ftlabs/fastclick</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">'addEventListener'</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">document</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                       FastClick.attach(<span class="hljs-built_in">document</span>.body);</span><br><span class="line">            &#125;, <span class="hljs-literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Swiper-插件的使用"><a href="#Swiper-插件的使用" class="headerlink" title="Swiper 插件的使用"></a>Swiper 插件的使用</h3><p>中文官网地址： <a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a> </p><ol><li>引入插件相关文件。</li><li>按照规定语法使用</li></ol><h3 id="其他移动端常见插件"><a href="#其他移动端常见插件" class="headerlink" title="其他移动端常见插件"></a>其他移动端常见插件</h3><p>lsuperslide： <a href="http://www.superslide2.com/" target="_blank" rel="noopener">http://www.superslide2.com/</a></p><p>l iscroll： <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">https://github.com/cubiq/iscroll</a></p><h3 id="插件的使用总结"><a href="#插件的使用总结" class="headerlink" title="插件的使用总结"></a>插件的使用总结</h3><p>1.确认插件实现的功能</p><p>2.去官网查看使用说明</p><p>3.下载插件</p><p>4.打开demo实例文件，查看需要引入的相关文件，并且引入</p><p>5.复制demo实例文件中的结构html，样式css以及js代码</p><h3 id="移动端视频插件-zy-media-js"><a href="#移动端视频插件-zy-media-js" class="headerlink" title="移动端视频插件 zy.media.js"></a>移动端视频插件 zy.media.js</h3><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</p><p>不同的视频格式文件，我们可以通过source解决。</p><p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</p><p>这个时候我们可以使用插件方式来制作。</p><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><h2 id="移动端常用开发框架"><a href="#移动端常用开发框架" class="headerlink" title="移动端常用开发框架"></a>移动端常用开发框架</h2><h3 id="移动端视频插件-zy-media-js-1"><a href="#移动端视频插件-zy-media-js-1" class="headerlink" title="移动端视频插件 zy.media.js"></a>移动端视频插件 zy.media.js</h3><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p><p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p><p>框架： 大而全，一整套解决方案</p><p>插件： 小而专一，某个功能的解决方案</p><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p><p>它能开发PC端，也能开发移动端 </p><p>Bootstrap JS插件使用步骤：</p><p>1.引入相关js 文件</p><p>2.复制HTML 结构</p><p>3.修改对应样式</p><p>4.修改相应JS 参数</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h3 id="本地存储特性"><a href="#本地存储特性" class="headerlink" title="本地存储特性"></a>本地存储特性</h3><p>1、数据存储在用户浏览器中</p><p>2、设置、读取方便、甚至页面刷新不丢失数据</p><p>3、容量较大，sessionStorage约5M、localStorage约20M</p><p>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p><h3 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(key, value)</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.getItem(key)</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(key)</span><br></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure><h3 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h3><p>1、声明周期永久生效，除非手动删除 否则关闭页面也会存在</p><p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p><ol start="3"><li>以键值对的形式存储使用</li></ol><p>存储数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(key, value)</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(key)</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(key)</span><br></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure><h3 id="案例：记住用户名"><a href="#案例：记住用户名" class="headerlink" title="案例：记住用户名"></a>案例：记住用户名</h3><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p><h4 id="案例分析-3"><a href="#案例分析-3" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li><p>把数据存起来，用到本地存储</p></li><li><p>关闭页面，也可以显示用户名，所以用到localStorage</p></li><li><p>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</p></li><li><p>当复选框发生改变的时候change事件</p></li><li><p>如果勾选，就存储，否则就移除</p><p><img src="/前端笔记/webapis-day07/1551800263(1).jpg" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.移动端特效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习目标:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够写出移动端触屏事件&lt;br&gt;能够写出常见的移动端特效&lt;br&gt;能够使用移动端开发插件开发移动端特效&lt;br&gt;能够使用移动端开发框架开发移动端特效&lt;br&gt;能够写出 sessionStorage 数据的存储以及获取&lt;br&gt;能够写出 localStorage 数据的存储以及获取&lt;br&gt;能够说出它们两者的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day06/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day06/</id>
    <published>2020-05-23T07:33:00.000Z</published>
    <updated>2020-05-23T07:50:52.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.函数封装</p></blockquote><blockquote><p><strong>学习目标:</strong></p><p>能够封装简单动画函数</p><p>能够理解缓动动画的封装</p><p>能够使用动画函数</p><p>能够写出网页轮播图案例</p><p>能够写出移动端触屏事件</p></blockquote><a id="more"></a><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><h3 id="缓动效果原理"><a href="#缓动效果原理" class="headerlink" title="缓动效果原理"></a>缓动效果原理</h3><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><p>思路：</p><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li>核心算法： (目标值 - 现在的位置)   /  10    做为每次移动的距离步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器  </li><li>注意步长值需要取整  </li></ol><h3 id="动画函数多个目标值之间移动"><a href="#动画函数多个目标值之间移动" class="headerlink" title="动画函数多个目标值之间移动"></a>动画函数多个目标值之间移动</h3><p>可以让动画函数从 800 移动到 500。</p><p>当我们点击按钮时候，判断步长是正值还是负值</p><p>​    1.如果是正值，则步长往大了取整</p><p>​    2.如果是负值，则步长 向小了取整</p><h3 id="动函数添加回调函数"><a href="#动函数添加回调函数" class="headerlink" title="动函数添加回调函数"></a>动函数添加回调函数</h3><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p><p>回调函数写的位置：定时器结束的位置。</p><h3 id="动画完整版代码"><a href="#动画完整版代码" class="headerlink" title="动画完整版代码:"></a>动画完整版代码:</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 步长值写到定时器的里面</span></span><br><span class="line">        <span class="hljs-comment">// 把我们步长值改为整数 不要出现小数的问题</span></span><br><span class="line">        <span class="hljs-comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line">        <span class="hljs-keyword">var</span> step = (target - obj.offsetLeft) / <span class="hljs-number">10</span>;</span><br><span class="line">        step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.ceil(step) : <span class="hljs-built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="hljs-keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line">            <span class="hljs-comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="hljs-comment">// 回调函数写到定时器结束里面</span></span><br><span class="line">            <span class="hljs-comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     // 调用函数</span></span><br><span class="line">            <span class="hljs-comment">//     callback();</span></span><br><span class="line">            <span class="hljs-comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span><br><span class="line">        obj.style.left = obj.offsetLeft + step + <span class="hljs-string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="hljs-number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见网页特效案例"><a href="#常见网页特效案例" class="headerlink" title="常见网页特效案例"></a>常见网页特效案例</h2><h3 id="案例：网页轮播图"><a href="#案例：网页轮播图" class="headerlink" title="案例：网页轮播图"></a>案例：网页轮播图</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p><p>功能需求：</p><p>​    1.鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</p><p>​    2.点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</p><p>​    3.图片播放的同时，下面小圆圈模块跟随一起变化。</p><p>​    4.点击小圆圈，可以播放相应图片。</p><p>​    5.鼠标不经过轮播图，轮播图也会自动播放图片。</p><p>​    6.鼠标经过，轮播图模块， 自动播放停止。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;load&apos;, function() &#123;</span><br><span class="line">    // 1. 获取元素</span><br><span class="line">    var arrow_l = document.querySelector(&apos;.arrow-l&apos;);</span><br><span class="line">    var arrow_r = document.querySelector(&apos;.arrow-r&apos;);</span><br><span class="line">    var focus = document.querySelector(&apos;.focus&apos;);</span><br><span class="line">    var focusWidth = focus.offsetWidth;</span><br><span class="line">    // 2. 鼠标经过focus 就显示隐藏左右按钮</span><br><span class="line">    focus.addEventListener(&apos;mouseenter&apos;, function() &#123;</span><br><span class="line">        arrow_l.style.display = &apos;block&apos;;</span><br><span class="line">        arrow_r.style.display = &apos;block&apos;;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = null; // 清除定时器变量</span><br><span class="line">    &#125;);</span><br><span class="line">    focus.addEventListener(&apos;mouseleave&apos;, function() &#123;</span><br><span class="line">        arrow_l.style.display = &apos;none&apos;;</span><br><span class="line">        arrow_r.style.display = &apos;none&apos;;</span><br><span class="line">        timer = setInterval(function() &#123;</span><br><span class="line">            //手动调用点击事件</span><br><span class="line">            arrow_r.click();</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 3. 动态生成小圆圈  有几张图片，我就生成几个小圆圈</span><br><span class="line">    var ul = focus.querySelector(&apos;ul&apos;);</span><br><span class="line">    var ol = focus.querySelector(&apos;.circle&apos;);</span><br><span class="line">    // console.log(ul.children.length);</span><br><span class="line">    for (var i = 0; i &lt; ul.children.length; i++) &#123;</span><br><span class="line">        // 创建一个小li </span><br><span class="line">        var li = document.createElement(&apos;li&apos;);</span><br><span class="line">        // 记录当前小圆圈的索引号 通过自定义属性来做 </span><br><span class="line">        li.setAttribute(&apos;index&apos;, i);</span><br><span class="line">        // 把小li插入到ol 里面</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">        // 4. 小圆圈的排他思想 我们可以直接在生成小圆圈的同时直接绑定点击事件</span><br><span class="line">        li.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">            // 干掉所有人 把所有的小li 清除 current 类名</span><br><span class="line">            for (var i = 0; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">                ol.children[i].className = &apos;&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            // 留下我自己  当前的小li 设置current 类名</span><br><span class="line">            this.className = &apos;current&apos;;</span><br><span class="line">            // 5. 点击小圆圈，移动图片 当然移动的是 ul </span><br><span class="line">            // ul 的移动距离 小圆圈的索引号 乘以 图片的宽度 注意是负值</span><br><span class="line">            // 当我们点击了某个小li 就拿到当前小li 的索引号</span><br><span class="line">            var index = this.getAttribute(&apos;index&apos;);</span><br><span class="line">            // 当我们点击了某个小li 就要把这个li 的索引号给 num  </span><br><span class="line">            num = index;</span><br><span class="line">            // 当我们点击了某个小li 就要把这个li 的索引号给 circle  </span><br><span class="line">            circle = index;</span><br><span class="line">            // num = circle = index;</span><br><span class="line">            console.log(focusWidth);</span><br><span class="line">            console.log(index);</span><br><span class="line"></span><br><span class="line">            animate(ul, -index * focusWidth);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 把ol里面的第一个小li设置类名为 current</span><br><span class="line">    ol.children[0].className = &apos;current&apos;;</span><br><span class="line">    // 6. 克隆第一张图片(li)放到ul 最后面</span><br><span class="line">    var first = ul.children[0].cloneNode(true);</span><br><span class="line">    ul.appendChild(first);</span><br><span class="line">    // 7. 点击右侧按钮， 图片滚动一张</span><br><span class="line">    var num = 0;</span><br><span class="line">    // circle 控制小圆圈的播放</span><br><span class="line">    var circle = 0;</span><br><span class="line">    // flag 节流阀</span><br><span class="line">    var flag = true;</span><br><span class="line">    arrow_r.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            flag = false; // 关闭节流阀</span><br><span class="line">            // 如果走到了最后复制的一张图片，此时 我们的ul 要快速复原 left 改为 0</span><br><span class="line">            if (num == ul.children.length - 1) &#123;</span><br><span class="line">                ul.style.left = 0;</span><br><span class="line">                num = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">            animate(ul, -num * focusWidth, function() &#123;</span><br><span class="line">                flag = true; // 打开节流阀</span><br><span class="line">            &#125;);</span><br><span class="line">            // 8. 点击右侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br><span class="line">            circle++;</span><br><span class="line">            // 如果circle == 4 说明走到最后我们克隆的这张图片了 我们就复原</span><br><span class="line">            if (circle == ol.children.length) &#123;</span><br><span class="line">                circle = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            // 调用函数</span><br><span class="line">            circleChange();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 9. 左侧按钮做法</span><br><span class="line">    arrow_l.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">            if (num == 0) &#123;</span><br><span class="line">                num = ul.children.length - 1;</span><br><span class="line">                ul.style.left = -num * focusWidth + &apos;px&apos;;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            num--;</span><br><span class="line">            animate(ul, -num * focusWidth, function() &#123;</span><br><span class="line">                flag = true;</span><br><span class="line">            &#125;);</span><br><span class="line">            // 点击左侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br><span class="line">            circle--;</span><br><span class="line">            // 如果circle &lt; 0  说明第一张图片，则小圆圈要改为第4个小圆圈（3）</span><br><span class="line">            // if (circle &lt; 0) &#123;</span><br><span class="line">            //     circle = ol.children.length - 1;</span><br><span class="line">            // &#125;</span><br><span class="line">            circle = circle &lt; 0 ? ol.children.length - 1 : circle;</span><br><span class="line">            // 调用函数</span><br><span class="line">            circleChange();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function circleChange() &#123;</span><br><span class="line">        // 先清除其余小圆圈的current类名</span><br><span class="line">        for (var i = 0; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">            ol.children[i].className = &apos;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        // 留下当前的小圆圈的current类名</span><br><span class="line">        ol.children[circle].className = &apos;current&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    // 10. 自动播放轮播图</span><br><span class="line">    var timer = setInterval(function() &#123;</span><br><span class="line">        //手动调用点击事件</span><br><span class="line">        arrow_r.click();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h3><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</p><p> 开始设置一个变量var flag= true;</p><p>If(flag){flag = false; do something}       关闭水龙头</p><p>利用回调函数动画执行完毕， flag = true     打开水龙头</p><h3 id="案例：返回顶部"><a href="#案例：返回顶部" class="headerlink" title="案例：返回顶部"></a>案例：返回顶部</h3><ol><li>带有动画的返回顶部</li><li>此时可以继续使用我们封装的动画函数</li><li>只需要把所有的left 相关的值改为 跟 页面垂直滚动距离相关就可以了</li><li>页面滚动了多少，可以通过 window.pageYOffset 得到</li><li>最后是页面滚动，使用 window.scroll(x,y) </li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1. 获取元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.slider-bar'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.banner'</span>);</span><br><span class="line">      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span><br><span class="line">      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop</span><br><span class="line">          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;</span><br><span class="line">      <span class="hljs-comment">// 获取main 主体元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.main'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.goBack'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;</span><br><span class="line">      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">              <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">              <span class="hljs-comment">// console.log(window.pageYOffset);</span></span><br><span class="line">              <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;</span><br><span class="line">                  sliderbar.style.position = <span class="hljs-string">'fixed'</span>;</span><br><span class="line">                  sliderbar.style.top = sliderbarTop + <span class="hljs-string">'px'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  sliderbar.style.position = <span class="hljs-string">'absolute'</span>;</span><br><span class="line">                  sliderbar.style.top = <span class="hljs-string">'300px'</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;</span><br><span class="line">                  goBack.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  goBack.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="hljs-comment">// 3. 当我们点击了返回顶部模块，就让窗口滚动的页面的最上方</span></span><br><span class="line">      goBack.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 里面的x和y 不跟单位的 直接写数字即可</span></span><br><span class="line">          <span class="hljs-comment">// window.scroll(0, 0);</span></span><br><span class="line">          <span class="hljs-comment">// 因为是窗口滚动 所以对象是window</span></span><br><span class="line">          animate(<span class="hljs-built_in">window</span>, <span class="hljs-number">0</span>);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="案例：筋头云案例"><a href="#案例：筋头云案例" class="headerlink" title="案例：筋头云案例"></a>案例：筋头云案例</h3><ol><li>利用动画函数做动画效果</li><li>原先筋斗云的起始位置是0</li><li>鼠标经过某个小li，把当前小li的offsetLeft 位置做为目标值即可</li><li>鼠标离开某个小li，就把目标值设为 0</li><li>如果点击了某个小li， 就把li当前的位置存储起来，做为筋斗云的起始位置</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">           <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">           <span class="hljs-keyword">var</span> cloud = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.cloud'</span>);</span><br><span class="line">           <span class="hljs-keyword">var</span> c_nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.c-nav'</span>);</span><br><span class="line">           <span class="hljs-keyword">var</span> lis = c_nav.querySelectorAll(<span class="hljs-string">'li'</span>);</span><br><span class="line">           <span class="hljs-comment">// 2. 给所有的小li绑定事件 </span></span><br><span class="line">           <span class="hljs-comment">// 这个current 做为筋斗云的起始位置</span></span><br><span class="line">           <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span>;</span><br><span class="line">           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">               <span class="hljs-comment">// (1) 鼠标经过把当前小li 的位置做为目标值</span></span><br><span class="line">               lis[i].addEventListener(<span class="hljs-string">'mouseenter'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                   animate(cloud, <span class="hljs-keyword">this</span>.offsetLeft);</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="hljs-comment">// (2) 鼠标离开就回到起始的位置 </span></span><br><span class="line">               lis[i].addEventListener(<span class="hljs-string">'mouseleave'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                   animate(cloud, current);</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="hljs-comment">// (3) 当我们鼠标点击，就把当前位置做为目标值</span></span><br><span class="line">               lis[i].addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                   current = <span class="hljs-keyword">this</span>.offsetLeft;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h2 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h2><h3 id="触屏事件概述"><a href="#触屏事件概述" class="headerlink" title="触屏事件概述"></a>触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android和 IOS 都有。</p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="/前端笔记/webapis-day06/%E5%9B%BE%E7%89%871.png" alt></p><h3 id="触摸事件对象（TouchEvent）"><a href="#触摸事件对象（TouchEvent）" class="headerlink" title="触摸事件对象（TouchEvent）"></a>触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/前端笔记/webapis-day06/%E5%9B%BE%E7%89%872(1).png" alt></p><blockquote><p><code>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</code></p></blockquote><h3 id="案例：移动端拖动元素"><a href="#案例：移动端拖动元素" class="headerlink" title="案例：移动端拖动元素"></a>案例：移动端拖动元素</h3><ol><li><p>touchstart、touchmove、touchend可以实现拖动元素</p></li><li><p>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </p></li><li><p>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</p></li><li><p>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</p><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><p><code>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.函数封装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习目标:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够封装简单动画函数&lt;/p&gt;
&lt;p&gt;能够理解缓动动画的封装&lt;/p&gt;
&lt;p&gt;能够使用动画函数&lt;/p&gt;
&lt;p&gt;能够写出网页轮播图案例&lt;/p&gt;
&lt;p&gt;能够写出移动端触屏事件&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day05/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day05/</id>
    <published>2020-05-23T07:21:44.000Z</published>
    <updated>2020-05-23T07:51:00.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.偏移</p></blockquote><blockquote><p><strong>学习目标:</strong></p><p>能够说出常见 offset 系列属性的作用</p><p>能够说出常见 client 系列属性的作用</p><p>能够说出常见 scroll 系列属性的作用</p><p>能够封装简单动画函数</p></blockquote><a id="more"></a><h2 id="元素偏移量-offset-系列"><a href="#元素偏移量-offset-系列" class="headerlink" title="元素偏移量 offset 系列"></a>元素偏移量 offset 系列</h2><h3 id="offset-概述"><a href="#offset-概述" class="headerlink" title="offset 概述"></a>offset 概述</h3><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ol><li><p>获得元素距离带有定位父元素的位置</p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意：返回的数值都不带单位</p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%871.png" alt></p></li></ol><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%872.png" alt></p><h3 id="offset-与-style-区别"><a href="#offset-与-style-区别" class="headerlink" title="offset 与 style 区别"></a>offset 与 style 区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ul><li><p>offset 可以得到任意样式表中的样式值</p></li><li><p>offset 系列获得的数值是没有单位的</p></li><li><p>offsetWidth 包含padding+border+width</p></li><li><p>offsetWidth 等属性是只读属性，只能获取不能赋值</p></li><li><blockquote><p>所以，我们想要获取元素大小位置，用offset更合适</p></blockquote></li></ul><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><p>style 只能得到行内样式表中的样式值</p></li><li><p>style.width 获得的是带有单位的字符串</p></li><li><p>style.width 获得不包含padding和border 的值</p></li><li><p>style.width 是可读写属性，可以获取也可以赋值</p></li><li><blockquote><p>所以，我们想要给元素更改值，则需要用style改变</p></blockquote></li></ul><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="案例：获取鼠标在盒子内的坐标"><a href="#案例：获取鼠标在盒子内的坐标" class="headerlink" title="案例：获取鼠标在盒子内的坐标"></a>案例：获取鼠标在盒子内的坐标</h3><ol><li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li><li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li><li>其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)</li><li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标</li><li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.box'</span>);</span><br><span class="line">box.addEventListener(<span class="hljs-string">'mousemove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-keyword">this</span>.offsetLeft;</span><br><span class="line"><span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-keyword">this</span>.offsetTop;</span><br><span class="line"><span class="hljs-keyword">this</span>.innerHTML = <span class="hljs-string">'x坐标是'</span> + x + <span class="hljs-string">' y坐标是'</span> + y;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="案例：模态框拖拽"><a href="#案例：模态框拖拽" class="headerlink" title="案例：模态框拖拽"></a>案例：模态框拖拽</h3><p>弹出框，我们也称为模态框。</p><p>​    1.点击弹出层，会弹出模态框， 并且显示灰色半透明的遮挡层。</p><p>​    2.点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</p><p>​    3.鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</p><p>​    4.鼠标松开，可以停止拖动模态框移动</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li><li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li><li>在页面中拖拽的原理：鼠标按下并且移动， 之后松开鼠标</li><li>触发事件是鼠标按下mousedown，鼠标移动mousemove 鼠标松开 mouseup</li><li>拖拽过程:  鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li><li>鼠标按下触发的事件源是最上面一行，就是  id 为 title </li><li>鼠标的坐标减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li><li>鼠标按下，我们要得到鼠标在盒子的坐标。</li><li>鼠标移动，就让模态框的坐标  设置为  ：鼠标坐标 减去盒子坐标即可，注意移动事件写到按下事件里面。</li><li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除  </li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">       <span class="hljs-keyword">var</span> login = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.login'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.login-bg'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#link'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> closeBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#closeBtn'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> title = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#title'</span>);</span><br><span class="line">       <span class="hljs-comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span></span><br><span class="line">       link.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               mask.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">               login.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="hljs-comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span></span><br><span class="line">       closeBtn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               mask.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">               login.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="hljs-comment">// 4. 开始拖拽</span></span><br><span class="line">           <span class="hljs-comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span></span><br><span class="line">       title.addEventListener(<span class="hljs-string">'mousedown'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">           <span class="hljs-keyword">var</span> x = e.pageX - login.offsetLeft;</span><br><span class="line">           <span class="hljs-keyword">var</span> y = e.pageY - login.offsetTop;</span><br><span class="line">           <span class="hljs-comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span></span><br><span class="line">           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'mousemove'</span>, move)</span><br><span class="line"></span><br><span class="line">           <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">               login.style.left = e.pageX - x + <span class="hljs-string">'px'</span>;</span><br><span class="line">               login.style.top = e.pageY - y + <span class="hljs-string">'px'</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="hljs-comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span><br><span class="line">           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'mouseup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">'mousemove'</span>, move);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h3 id="案例：仿京东放大镜"><a href="#案例：仿京东放大镜" class="headerlink" title="案例：仿京东放大镜"></a>案例：仿京东放大镜</h3><ol><li>整个案例可以分为三个功能模块</li><li>鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能</li><li>黄色的遮挡层跟随鼠标功能。 </li><li>移动黄色遮挡层，大图片跟随移动功能。</li></ol><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>黄色的遮挡层跟随鼠标功能。</li><li>把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。</li><li>首先是获得鼠标在盒子的坐标。 </li><li>之后把数值给遮挡层做为left 和top值。</li><li>此时用到鼠标移动事件，但是还是在小图片盒子内移动。</li><li>发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。</li><li>遮挡层不能超出小图片盒子范围。</li><li>如果小于零，就把坐标设置为0</li><li>如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离</li><li>遮挡层的最大移动距离：小图片盒子宽度 减去 遮挡层盒子宽度</li></ol><p><img src="/前端笔记/webapis-day05/image-20200523152952410.png" alt></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> preview_img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.preview_img'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.mask'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> big = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.big'</span>);</span><br><span class="line">    <span class="hljs-comment">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span></span><br><span class="line">    preview_img.addEventListener(<span class="hljs-string">'mouseover'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        mask.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">        big.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    preview_img.addEventListener(<span class="hljs-string">'mouseout'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            mask.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">            big.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="hljs-comment">// 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span></span><br><span class="line">    preview_img.addEventListener(<span class="hljs-string">'mousemove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// (1). 先计算出鼠标在盒子内的坐标</span></span><br><span class="line">        <span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-keyword">this</span>.offsetLeft;</span><br><span class="line">        <span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-keyword">this</span>.offsetTop;</span><br><span class="line">        <span class="hljs-comment">// console.log(x, y);</span></span><br><span class="line">        <span class="hljs-comment">// (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span></span><br><span class="line">        <span class="hljs-comment">// (3) 我们mask 移动的距离</span></span><br><span class="line">        <span class="hljs-keyword">var</span> maskX = x - mask.offsetWidth / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">var</span> maskY = y - mask.offsetHeight / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-comment">// (4) 如果x 坐标小于了0 就让他停在0 的位置</span></span><br><span class="line">        <span class="hljs-comment">// 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="hljs-keyword">var</span> maskMax = preview_img.offsetWidth - mask.offsetWidth;</span><br><span class="line">        <span class="hljs-keyword">if</span> (maskX &lt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            maskX = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskX &gt;= maskMax) &#123;</span><br><span class="line">            maskX = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (maskY &lt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            maskY = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskY &gt;= maskMax) &#123;</span><br><span class="line">            maskY = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        mask.style.left = maskX + <span class="hljs-string">'px'</span>;</span><br><span class="line">        mask.style.top = maskY + <span class="hljs-string">'px'</span>;</span><br><span class="line">        <span class="hljs-comment">// 3. 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="hljs-comment">// 大图</span></span><br><span class="line">        <span class="hljs-keyword">var</span> bigIMg = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.bigImg'</span>);</span><br><span class="line">        <span class="hljs-comment">// 大图片最大移动距离</span></span><br><span class="line">        <span class="hljs-keyword">var</span> bigMax = bigIMg.offsetWidth - big.offsetWidth;</span><br><span class="line">        <span class="hljs-comment">// 大图片的移动距离 X Y</span></span><br><span class="line">        <span class="hljs-keyword">var</span> bigX = maskX * bigMax / maskMax;</span><br><span class="line">        <span class="hljs-keyword">var</span> bigY = maskY * bigMax / maskMax;</span><br><span class="line">        bigIMg.style.left = -bigX + <span class="hljs-string">'px'</span>;</span><br><span class="line">        bigIMg.style.top = -bigY + <span class="hljs-string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="元素可视区-client-系列"><a href="#元素可视区-client-系列" class="headerlink" title="元素可视区 client 系列"></a>元素可视区 client 系列</h2><h3 id="client概述"><a href="#client概述" class="headerlink" title="client概述"></a>client概述</h3><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><h3 id="淘宝-flexible-js-源码分析"><a href="#淘宝-flexible-js-源码分析" class="headerlink" title="淘宝 flexible.js 源码分析"></a>淘宝 flexible.js 源码分析</h3><p>立即执行函数 (function(){})()  或者 (function(){}())</p><p>主要作用： 创建一个独立的作用域。 避免了命名冲突问题</p><p>下面三种情况都会刷新页面都会触发 load 事件。</p><p>1.a标签的超链接</p><p>2.F5或者刷新按钮（强制刷新）</p><p>3.前进后退按钮</p><p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。</p><p>所以此时后退按钮不能刷新页面。</p><p>此时可以使用 pageshow事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件</p><p><code>注意这个事件给window添加。</code></p><h2 id="元素滚动-scroll-系列"><a href="#元素滚动-scroll-系列" class="headerlink" title="元素滚动 scroll 系列"></a>元素滚动 scroll 系列</h2><h3 id="scroll-概述"><a href="#scroll-概述" class="headerlink" title="scroll 概述"></a>scroll 概述</h3><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%875.png" alt></p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%876.png" alt></p><h3 id="页面被卷去的头部"><a href="#页面被卷去的头部" class="headerlink" title="页面被卷去的头部"></a>页面被卷去的头部</h3><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件。</p><h3 id="案例：仿淘宝固定右侧侧边栏"><a href="#案例：仿淘宝固定右侧侧边栏" class="headerlink" title="案例：仿淘宝固定右侧侧边栏"></a>案例：仿淘宝固定右侧侧边栏</h3><ol><li>原先侧边栏是绝对定位</li><li>当页面滚动到一定位置，侧边栏改为固定定位</li><li>页面继续滚动，会让 返回顶部显示出来</li></ol><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>需要用到页面滚动事件 scroll  因为是页面滚动，所以事件源是document</li><li>滚动到某个位置，就是判断页面被卷去的上部值。</li><li>页面被卷去的头部：可以通过window.pageYOffset 获得  如果是被卷去的左侧window.pageXOffset</li><li>注意，元素被卷去的头部是element.scrollTop  , 如果是页面被卷去的头部 则是 window.pageYOffset</li><li>其实这个值 可以通过盒子的 offsetTop可以得到，如果大于等于这个值，就可以让盒子固定定位了</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1. 获取元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.slider-bar'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.banner'</span>);</span><br><span class="line">      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span><br><span class="line">      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop</span><br><span class="line">          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;</span><br><span class="line">      <span class="hljs-comment">// 获取main 主体元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.main'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.goBack'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;</span><br><span class="line">      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">          <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">          <span class="hljs-comment">// console.log(window.pageYOffset);</span></span><br><span class="line">          <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;</span><br><span class="line">              sliderbar.style.position = <span class="hljs-string">'fixed'</span>;</span><br><span class="line">              sliderbar.style.top = sliderbarTop + <span class="hljs-string">'px'</span>;</span><br><span class="line">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">              sliderbar.style.position = <span class="hljs-string">'absolute'</span>;</span><br><span class="line">              sliderbar.style.top = <span class="hljs-string">'300px'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;</span><br><span class="line">              goBack.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">              goBack.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h3 id="页面被卷去的头部兼容性解决方案"><a href="#页面被卷去的头部兼容性解决方案" class="headerlink" title="页面被卷去的头部兼容性解决方案"></a>页面被卷去的头部兼容性解决方案</h3><p>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</p><ol><li>声明了 DTD，使用 document.documentElement.scrollTop</li><li>未声明 DTD，使用  document.body.scrollTop</li><li>新方法 window.pageYOffset和 window.pageXOffset，IE9 开始支持</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScroll</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      left: <span class="hljs-built_in">window</span>.pageXOffset || <span class="hljs-built_in">document</span>.documentElement.scrollLeft || <span class="hljs-built_in">document</span>.body.scrollLeft||<span class="hljs-number">0</span>,</span><br><span class="line">      top: <span class="hljs-built_in">window</span>.pageYOffset || <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"> &#125; </span><br><span class="line">使用的时候  getScroll().left</span><br></pre></td></tr></table></figure><h2 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h2><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%877.png" alt></p><p>他们主要用法：</p><p>1.offset系列 经常用于获得元素位置    offsetLeft  offsetTop</p><p>2.client经常用于获取元素大小  clientWidth clientHeight</p><p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p><p>4.注意页面滚动的距离通过 window.pageXOffset  获得</p><h2 id="mouseenter-和mouseover的区别"><a href="#mouseenter-和mouseover的区别" class="headerlink" title="mouseenter 和mouseover的区别"></a>mouseenter 和mouseover的区别</h2><ul><li>当鼠标移动到元素上时就会触发mouseenter 事件</li><li>类似 mouseover，它们两者之间的差别是</li><li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</li><li>之所以这样，就是因为mouseenter不会冒泡</li><li>跟mouseenter搭配鼠标离开 mouseleave  同样不会冒泡</li></ul><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><h3 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h3><blockquote><p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p></blockquote><p>实现步骤：</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h3 id="动画函数给不同元素记录不同定时器"><a href="#动画函数给不同元素记录不同定时器" class="headerlink" title="动画函数给不同元素记录不同定时器"></a>动画函数给不同元素记录不同定时器</h3><p>如果多个元素都使用这个动画函数，每次都要var 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><blockquote><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target</span>) </span>&#123;</span><br><span class="line">           <span class="hljs-comment">// 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</span></span><br><span class="line">           <span class="hljs-comment">// 解决方案就是 让我们元素只有一个定时器执行</span></span><br><span class="line">           <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">           clearInterval(obj.timer);</span><br><span class="line">           obj.timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               <span class="hljs-keyword">if</span> (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">                   <span class="hljs-comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">                   clearInterval(obj.timer);</span><br><span class="line">               &#125;</span><br><span class="line">               obj.style.left = obj.offsetLeft + <span class="hljs-number">1</span> + <span class="hljs-string">'px'</span>;</span><br><span class="line"></span><br><span class="line">           &#125;, <span class="hljs-number">30</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.偏移&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习目标:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够说出常见 offset 系列属性的作用&lt;/p&gt;
&lt;p&gt;能够说出常见 client 系列属性的作用&lt;/p&gt;
&lt;p&gt;能够说出常见 scroll 系列属性的作用&lt;/p&gt;
&lt;p&gt;能够封装简单动画函数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day04/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day04/</id>
    <published>2020-05-23T07:13:23.000Z</published>
    <updated>2020-05-23T07:32:09.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.键盘事件</p></blockquote><blockquote><p>学习目标：</p><p>能够说出常用的3-5个键盘事件</p><p>能够知道如何获取当前键盘按下的是哪个键</p><p>能够知道浏览器的顶级对象window</p><p>能够使用window.onload事件</p><p>能够使用window.onresize事件</p><p>能够说出两种定时器的区别</p><p>能够使用location对象的href属性完成页面之间的跳转</p><p>能够使用location对象获取url中的参数部分</p><p>能够使用history提供的方法实现页面刷新</p></blockquote><a id="more"></a><h2 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h2><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><img src="/前端笔记/webapis-day04/1551318122855.png" alt></p><p><img src="/前端笔记/webapis-day04/1551318160371.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 常用的键盘事件</span></span><br><span class="line">    <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我弹起了'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我按下了press'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keydown'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我按下了down'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h3><p><img src="/前端笔记/webapis-day04/1551318355505.png" alt></p><p><img src="/前端笔记/webapis-day04/1551318404238.png" alt></p><p><strong>使用keyCode属性判断用户按下哪个键</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'up:'</span> + e.keyCode);</span><br><span class="line">        <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;</span><br><span class="line">            alert(<span class="hljs-string">'您按下的a键'</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="hljs-string">'您没有按下a键'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// console.log(e);</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'press:'</span> + e.keyCode);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：模拟京东按键输入内容"><a href="#案例：模拟京东按键输入内容" class="headerlink" title="案例：模拟京东按键输入内容"></a>案例：模拟京东按键输入内容</h3><p>当我们按下 s 键， 光标就定位到搜索框（文本框获得焦点）。</p><p><img src="/前端笔记/webapis-day04/1551318669520.png" alt></p><blockquote><p>注意：触发获得焦点事件，可以使用 元素对象.focus()</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;input type=<span class="hljs-string">"text"</span>&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 获取输入框</span></span><br><span class="line">      <span class="hljs-keyword">var</span> search = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'input'</span>);</span><br><span class="line"><span class="hljs-comment">// 给document注册keyup事件</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 判断keyCode的值</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">83</span>) &#123;</span><br><span class="line">              <span class="hljs-comment">// 触发输入框的获得焦点事件</span></span><br><span class="line">              search.focus();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：模拟京东快递单号查询"><a href="#案例：模拟京东快递单号查询" class="headerlink" title="案例：模拟京东快递单号查询"></a>案例：模拟京东快递单号查询</h3><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p><p><img src="/前端笔记/webapis-day04/1551318882189.png" alt="1551318882189"></p><p><img src="/前端笔记/webapis-day04/1551318909264.png" alt="1551318909264"></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"search"</span>&gt;</span><br><span class="line">      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"con"</span>&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;input type="text" placeholder="请输入您的快递单号" class="jd"&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 获取要操作的元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.con'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.jd'</span>);</span><br><span class="line"><span class="hljs-comment">// 给输入框注册keyup事件</span></span><br><span class="line">      jd_input.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 判断输入框内容是否为空</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value == <span class="hljs-string">''</span>) &#123;</span><br><span class="line">                  <span class="hljs-comment">// 为空，隐藏放大提示盒子</span></span><br><span class="line">                  con.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  <span class="hljs-comment">// 不为空，显示放大提示盒子，设置盒子的内容</span></span><br><span class="line">                  con.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">                  con.innerText = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      <span class="hljs-comment">// 给输入框注册失去焦点事件，隐藏放大提示盒子</span></span><br><span class="line">      jd_input.addEventListener(<span class="hljs-string">'blur'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              con.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">      <span class="hljs-comment">// 给输入框注册获得焦点事件</span></span><br><span class="line">      jd_input.addEventListener(<span class="hljs-string">'focus'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 判断输入框内容是否为空</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value !== <span class="hljs-string">''</span>) &#123;</span><br><span class="line">              <span class="hljs-comment">// 不为空则显示提示盒子</span></span><br><span class="line">              con.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h3><p>​    BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。</p><p>​    BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><p>​    BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p><p><img src="/前端笔记/webapis-day04/1551319264407.png" alt></p><h3 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h3><p>BOM 比 DOM 更大，它包含 DOM。</p><p><img src="/前端笔记/webapis-day04/1551319344183.png" alt></p><h3 id="顶级对象window"><a href="#顶级对象window" class="headerlink" title="顶级对象window"></a>顶级对象window</h3><p><img src="/前端笔记/webapis-day04/1551319372909.png" alt></p><h3 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h3><h4 id="页面（窗口）加载事件（2种）"><a href="#页面（窗口）加载事件（2种）" class="headerlink" title="页面（窗口）加载事件（2种）"></a>页面（窗口）加载事件（2种）</h4><p><strong>第1种</strong></p><p><img src="/前端笔记/webapis-day04/1551319525109.png" alt></p><p>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p><p><img src="/前端笔记/webapis-day04/1551319600263.png" alt></p><p><strong>第2种</strong></p><p><img src="/前端笔记/webapis-day04/1551319620299.png" alt></p><p>​    DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p><p>​    IE9以上才支持！！！</p><p>​    如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">        btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="hljs-string">'点击我'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">22</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">33</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><p><img src="/前端笔记/webapis-day04/1551319803117.png" alt></p><p>​    window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p><p>注意：</p><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件。</p></li><li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p></li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 注册页面加载事件</span></span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    <span class="hljs-comment">// 注册调整窗口大小事件</span></span><br><span class="line">        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// window.innerWidth 获取窗口大小</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'变化了'</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.innerWidth &lt;= <span class="hljs-number">800</span>) &#123;</span><br><span class="line">                div.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                div.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="定时器（两种）"><a href="#定时器（两种）" class="headerlink" title="定时器（两种）"></a>定时器（两种）</h3><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p><ul><li><p>setTimeout() </p></li><li><p>setInterval()  </p></li></ul><h4 id="setTimeout-炸弹定时器"><a href="#setTimeout-炸弹定时器" class="headerlink" title="setTimeout() 炸弹定时器"></a>setTimeout() 炸弹定时器</h4><h5 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/前端笔记/webapis-day04/1551320279307.png" alt></p><p><img src="/前端笔记/webapis-day04/1551320408854.png" alt></p><p><img src="/前端笔记/webapis-day04/1551320298981.png" alt></p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 普通函数是按照代码顺序直接调用。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</span><br><span class="line">&gt; 例如：定时器中的调用函数，事件处理函数，也是回调函数。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 以前我们讲的   element.onclick = function()&#123;&#125;   或者  element.addEventListener(“click”, fn);   里面的 函数也是回调函数。</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 回调函数是一个匿名函数</span></span><br><span class="line">       setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'时间到了'</span>);</span><br><span class="line"></span><br><span class="line">       &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'爆炸了'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="hljs-comment">// 回调函数是一个有名函数</span></span><br><span class="line">      <span class="hljs-keyword">var</span> timer1 = setTimeout(callback, <span class="hljs-number">3000</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> timer2 = setTimeout(callback, <span class="hljs-number">5000</span>);</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="案例：5秒后关闭广告"><a href="#案例：5秒后关闭广告" class="headerlink" title="案例：5秒后关闭广告"></a>案例：5秒后关闭广告</h5><p><img src="/前端笔记/webapis-day04/1551320924828.png" alt></p><p><img src="/前端笔记/webapis-day04/1551320959756.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"images/ad.jpg"</span> alt=<span class="hljs-string">""</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"ad"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 获取要操作的元素</span></span><br><span class="line">        <span class="hljs-keyword">var</span> ad = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.ad'</span>);</span><br><span class="line"><span class="hljs-comment">// 开启定时器</span></span><br><span class="line">        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            ad.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">        &#125;, <span class="hljs-number">5000</span>);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h5 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/前端笔记/webapis-day04/1551321051001.png" alt></p><p><img src="/前端笔记/webapis-day04/1551321064154.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button&gt;点击停止定时器&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">      var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 开启定时器</span></span><br><span class="line"><span class="hljs-regexp">      var timer = setTimeout(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">          console.log('爆炸了');</span></span><br><span class="line"><span class="hljs-regexp">      &#125;, 5000);</span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 给按钮注册单击事件</span></span><br><span class="line"><span class="hljs-regexp">      btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">          /</span><span class="hljs-regexp">/ 停止定时器</span></span><br><span class="line"><span class="hljs-regexp">          clearTimeout(timer);</span></span><br><span class="line"><span class="hljs-regexp">      &#125;)</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="setInterval-闹钟定时器"><a href="#setInterval-闹钟定时器" class="headerlink" title="setInterval() 闹钟定时器"></a>setInterval() 闹钟定时器</h4><h5 id="开启定时器-1"><a href="#开启定时器-1" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/前端笔记/webapis-day04/1551321162158.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. setInterval </span></span><br><span class="line">    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'继续输出'</span>);</span><br><span class="line">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h5><p><img src="/前端笔记/webapis-day04/1551321298787.png" alt></p><p><img src="/前端笔记/webapis-day04/1551321322188.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"hour"</span>&gt;<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;span class="minute"&gt;2&lt;/</span>span&gt;</span><br><span class="line">    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"second"</span>&gt;<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. 获取元素（时分秒盒子） </span></span><br><span class="line">    <span class="hljs-keyword">var</span> hour = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.hour'</span>); <span class="hljs-comment">// 小时的黑色盒子</span></span><br><span class="line">    <span class="hljs-keyword">var</span> minute = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.minute'</span>); <span class="hljs-comment">// 分钟的黑色盒子</span></span><br><span class="line">    <span class="hljs-keyword">var</span> second = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.second'</span>); <span class="hljs-comment">// 秒数的黑色盒子</span></span><br><span class="line">    <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2019-5-1 18:00:00'</span>); <span class="hljs-comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line"></span><br><span class="line">    countDown(); <span class="hljs-comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 2. 开启定时器</span></span><br><span class="line">    setInterval(countDown, <span class="hljs-number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">        <span class="hljs-keyword">var</span> times = (inputTime - nowTime) / <span class="hljs-number">1000</span>; <span class="hljs-comment">// times是剩余时间总的秒数 </span></span><br><span class="line">        <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>); <span class="hljs-comment">//时</span></span><br><span class="line">        h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + h : h;</span><br><span class="line">        hour.innerHTML = h; <span class="hljs-comment">// 把剩余的小时给 小时黑色盒子</span></span><br><span class="line">        <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>); <span class="hljs-comment">// 分</span></span><br><span class="line">        m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + m : m;</span><br><span class="line">        minute.innerHTML = m;</span><br><span class="line">        <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>); <span class="hljs-comment">// 当前的秒</span></span><br><span class="line">        s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + s : s;</span><br><span class="line">        second.innerHTML = s;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="停止定时器-1"><a href="#停止定时器-1" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/前端笔记/webapis-day04/1551321444559.png" alt></p><h4 id="案例：发送短信倒计时"><a href="#案例：发送短信倒计时" class="headerlink" title="案例：发送短信倒计时"></a>案例：发送短信倒计时</h4><p>​    点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信。</p><p><img src="/前端笔记/webapis-day04/1551321540676.png" alt></p><p><img src="/前端笔记/webapis-day04/1551321564247.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  手机号码： &lt;input type=<span class="hljs-string">"number"</span>&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line"><span class="hljs-comment">// 全局变量，定义剩下的秒数</span></span><br><span class="line">      <span class="hljs-keyword">var</span> time = <span class="hljs-number">3</span>; </span><br><span class="line"><span class="hljs-comment">// 注册单击事件</span></span><br><span class="line">      btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 禁用按钮</span></span><br><span class="line">          btn.disabled = <span class="hljs-literal">true</span>;</span><br><span class="line">          <span class="hljs-comment">// 开启定时器</span></span><br><span class="line">          <span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              <span class="hljs-comment">// 判断剩余秒数</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                  <span class="hljs-comment">// 清除定时器和复原按钮</span></span><br><span class="line">                  clearInterval(timer);</span><br><span class="line">                  btn.disabled = <span class="hljs-literal">false</span>;</span><br><span class="line">                  btn.innerHTML = <span class="hljs-string">'发送'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  btn.innerHTML = <span class="hljs-string">'还剩下'</span> + time + <span class="hljs-string">'秒'</span>;</span><br><span class="line">                  time--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><p>​    this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象。</p><p>现阶段，我们先了解一下几个this指向</p><ol><li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p></li><li><p>方法调用中谁调用this指向谁</p></li><li><p>构造函数中this指向构造函数的实例</p></li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span><br><span class="line"><span class="hljs-regexp">    console.log(this);</span></span><br><span class="line"><span class="hljs-regexp">    function fn() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    window.fn();</span></span><br><span class="line"><span class="hljs-regexp">    window.setTimeout(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;, 1000);</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 2. 方法调用中谁调用this指向谁</span></span><br><span class="line"><span class="hljs-regexp">    var o = &#123;</span></span><br><span class="line"><span class="hljs-regexp">        sayHi: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log(this); /</span><span class="hljs-regexp">/ this指向的是 o 这个对象</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    o.sayHi();</span></span><br><span class="line"><span class="hljs-regexp">    var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">    btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log(this); /</span><span class="hljs-regexp">/ 事件处理函数中的this指向的是btn这个按钮对象</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 3. 构造函数中this指向构造函数的实例</span></span><br><span class="line"><span class="hljs-regexp">    function Fun() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this); /</span><span class="hljs-regexp">/ this 指向的是fun 实例对象</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    var fun = new Fun();</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><h4 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h4><p><img src="/前端笔记/webapis-day04/1551322091638.png" alt></p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><img src="/前端笔记/webapis-day04/1551322373704.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322387201.png" alt></p><h4 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h4><p><img src="/前端笔记/webapis-day04/1551322416716.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322438200.png" alt></p><h4 id="案例：5分钟自动跳转页面"><a href="#案例：5分钟自动跳转页面" class="headerlink" title="案例：5分钟自动跳转页面"></a>案例：5分钟自动跳转页面</h4><p><img src="/前端笔记/webapis-day04/1551322496871.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322517605.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// console.log(location.href);</span></span><br><span class="line">        location.href = <span class="hljs-string">'http://www.itcast.cn'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-keyword">var</span> timer = <span class="hljs-number">5</span>;</span><br><span class="line">    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (timer == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            location.href = <span class="hljs-string">'http://www.itcast.cn'</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            div.innerHTML = <span class="hljs-string">'您将在'</span> + timer + <span class="hljs-string">'秒钟之后跳转到首页'</span>;</span><br><span class="line">            timer--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例：获取URL参数"><a href="#案例：获取URL参数" class="headerlink" title="案例：获取URL参数"></a>案例：获取URL参数</h4><p><img src="/前端笔记/webapis-day04/1551322622640.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322639241.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(location.search); <span class="hljs-comment">// ?uname=andy</span></span><br><span class="line">       <span class="hljs-comment">// 1.先去掉？  substr('起始的位置'，截取几个字符);</span></span><br><span class="line">       <span class="hljs-keyword">var</span> params = location.search.substr(<span class="hljs-number">1</span>); <span class="hljs-comment">// uname=andy</span></span><br><span class="line">       <span class="hljs-built_in">console</span>.log(params);</span><br><span class="line">       <span class="hljs-comment">// 2. 利用=把字符串分割为数组 split('=');</span></span><br><span class="line">       <span class="hljs-keyword">var</span> arr = params.split(<span class="hljs-string">'='</span>);</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// ["uname", "ANDY"]</span></span><br><span class="line">       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">       <span class="hljs-comment">// 3.把数据写入div中</span></span><br><span class="line">       div.innerHTML = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">'欢迎您'</span>;</span><br><span class="line">   &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="location对象的常见方法"><a href="#location对象的常见方法" class="headerlink" title="location对象的常见方法"></a>location对象的常见方法</h4><p><img src="/前端笔记/webapis-day04/1551322750241.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">    btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 记录浏览历史，所以可以实现后退功能</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ location.assign('http:/</span><span class="hljs-regexp">/www.itcast.cn');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 不记录浏览历史，所以不可以实现后退功能</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ location.replace('http:/</span><span class="hljs-regexp">/www.itcast.cn');</span></span><br><span class="line"><span class="hljs-regexp">        location.reload(true);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;)</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p>​    navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p><p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>((navigator.userAgent.match(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">""</span>;     <span class="hljs-comment">//手机</span></span><br><span class="line"> &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">""</span>;     <span class="hljs-comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>​    window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><p><img src="/前端笔记/webapis-day04/1551322885216.png" alt></p><p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p><p><img src="/前端笔记/webapis-day04/1551322959148.png" alt></p><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><p>以下代码执行的结果是什么？</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);</span><br><span class="line">&#125;, <span class="hljs-number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure><p>以下代码执行的结果是什么？</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);</span><br><span class="line">&#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="JS-是单线程"><a href="#JS-是单线程" class="headerlink" title="JS 是单线程"></a>JS 是单线程</h3><p><img src="/前端笔记/webapis-day04/1551415019322.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span><br><span class="line">这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</span><br></pre></td></tr></table></figure><h3 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h3><p>​    单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p><p>​    为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​    你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p><img src="/前端笔记/webapis-day04/1551434295074.png" alt></p><blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; JS中所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 同步任务指的是：</span><br><span class="line">&gt; 在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</span><br><span class="line">&gt; 异步任务指的是：</span><br><span class="line">&gt; 不进入主线程、而进入”任务队列”的任务，当主线程中的任务运行完了，才会从”任务队列”取出异步任务放入主线程执行。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/前端笔记/webapis-day04/1551434972778.png" alt></p><h3 id="JS执行机制（事件循环）"><a href="#JS执行机制（事件循环）" class="headerlink" title="JS执行机制（事件循环）"></a>JS执行机制（事件循环）</h3><p><img src="/前端笔记/webapis-day04/1551435335464.png" alt></p><p><img src="/前端笔记/webapis-day04/1551435398306.png" alt></p><p><img src="/前端笔记/webapis-day04/1551435449634.png" alt></p><h3 id="代码思考题"><a href="#代码思考题" class="headerlink" title="代码思考题"></a>代码思考题</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'click'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)</span><br><span class="line">&#125;, <span class="hljs-number">3000</span>)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.键盘事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学习目标：&lt;/p&gt;
&lt;p&gt;能够说出常用的3-5个键盘事件&lt;/p&gt;
&lt;p&gt;能够知道如何获取当前键盘按下的是哪个键&lt;/p&gt;
&lt;p&gt;能够知道浏览器的顶级对象window&lt;/p&gt;
&lt;p&gt;能够使用window.onload事件&lt;/p&gt;
&lt;p&gt;能够使用window.onresize事件&lt;/p&gt;
&lt;p&gt;能够说出两种定时器的区别&lt;/p&gt;
&lt;p&gt;能够使用location对象的href属性完成页面之间的跳转&lt;/p&gt;
&lt;p&gt;能够使用location对象获取url中的参数部分&lt;/p&gt;
&lt;p&gt;能够使用history提供的方法实现页面刷新&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day03/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day03/</id>
    <published>2020-05-23T07:04:03.000Z</published>
    <updated>2020-05-23T07:51:26.690Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.事件</p></blockquote><blockquote><p>学习目标：</p><p>能够使用removeChild()方法删除节点</p><p>能够完成动态生成表格案例</p><p>能够使用传统方式和监听方式给元素注册事件</p><p>能够说出事件流执行的三个阶段</p><p>能够在事件处理函数中获取事件对象</p><p>能够使用事件对象取消默认行为</p><p>能够使用事件对象阻止事件冒泡</p><p>能够使用事件对象获取鼠标的位置</p><p>能够完成跟随鼠标的天使案例</p></blockquote><a id="more"></a><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><img src="/前端笔记/webapis-day03/1551163384254(1).png" alt></p><p>node.removeChild() 方法从 node节点中删除一个子节点，返回删除的节点。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;删除&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;熊大&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;熊二&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;光头强&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1.获取元素</span></span><br><span class="line"><span class="hljs-regexp">    var ul = document.querySelector('ul');</span></span><br><span class="line"><span class="hljs-regexp">    var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 2. 删除元素  node.removeChild(child)</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ ul.removeChild(ul.children[0]);</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 3. 点击按钮依次删除里面的孩子</span></span><br><span class="line"><span class="hljs-regexp">    btn.onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        if (ul.children.length == 0) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            this.disabled = true;</span></span><br><span class="line"><span class="hljs-regexp">        &#125; else &#123;</span></span><br><span class="line"><span class="hljs-regexp">            ul.removeChild(ul.children[0]);</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：删除留言"><a href="#案例：删除留言" class="headerlink" title="案例：删除留言"></a>案例：删除留言</h3><p><img src="/前端笔记/webapis-day03/1551163586475.png" alt></p><p><img src="/前端笔记/webapis-day03/1551163635501.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=<span class="hljs-string">""</span> id=<span class="hljs-string">""</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span></span><br><span class="line">&lt;button&gt;发布&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'textarea'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ul'</span>);</span><br><span class="line">    <span class="hljs-comment">// 2. 注册事件</span></span><br><span class="line">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (text.value == <span class="hljs-string">''</span>) &#123;</span><br><span class="line">            alert(<span class="hljs-string">'您没有输入内容'</span>);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// console.log(text.value);</span></span><br><span class="line">            <span class="hljs-comment">// (1) 创建元素</span></span><br><span class="line">            <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>);</span><br><span class="line">            <span class="hljs-comment">// 先有li 才能赋值</span></span><br><span class="line">            li.innerHTML = text.value + <span class="hljs-string">"&lt;a href='javascript:;'&gt;删除&lt;/a&gt;"</span>;</span><br><span class="line">            <span class="hljs-comment">// (2) 添加元素</span></span><br><span class="line">            <span class="hljs-comment">// ul.appendChild(li);</span></span><br><span class="line">            ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);</span><br><span class="line">            <span class="hljs-comment">// (3) 删除元素 删除的是当前链接的li  它的父亲</span></span><br><span class="line">            <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'a'</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;</span><br><span class="line">                <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-comment">// 删除的是 li 当前a所在的li  this.parentNode;</span></span><br><span class="line">                    ul.removeChild(<span class="hljs-keyword">this</span>.parentNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复制（克隆）节点"><a href="#复制（克隆）节点" class="headerlink" title="复制（克隆）节点"></a>复制（克隆）节点</h3><p><img src="/前端笔记/webapis-day03/1551163763825.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="hljs-number">1111</span>&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ul'</span>);</span><br><span class="line">    <span class="hljs-comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span><br><span class="line">    <span class="hljs-comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span></span><br><span class="line">    <span class="hljs-keyword">var</span> lili = ul.children[<span class="hljs-number">0</span>].cloneNode(<span class="hljs-literal">true</span>);</span><br><span class="line">    ul.appendChild(lili);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：动态生成表格"><a href="#案例：动态生成表格" class="headerlink" title="案例：动态生成表格"></a>案例：动态生成表格</h3><p><img src="/前端笔记/webapis-day03/1551163900675.png" alt></p><p><img src="/前端笔记/webapis-day03/1551163924396.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 1.先去准备好学生的数据</span></span><br><span class="line">      <span class="hljs-keyword">var</span> datas = [&#123;</span><br><span class="line">          name: <span class="hljs-string">'魏璎珞'</span>,</span><br><span class="line">          subject: <span class="hljs-string">'JavaScript'</span>,</span><br><span class="line">          score: <span class="hljs-number">100</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          name: <span class="hljs-string">'弘历'</span>,</span><br><span class="line">          subject: <span class="hljs-string">'JavaScript'</span>,</span><br><span class="line">          score: <span class="hljs-number">98</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          name: <span class="hljs-string">'傅恒'</span>,</span><br><span class="line">          subject: <span class="hljs-string">'JavaScript'</span>,</span><br><span class="line">          score: <span class="hljs-number">99</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          name: <span class="hljs-string">'明玉'</span>,</span><br><span class="line">          subject: <span class="hljs-string">'JavaScript'</span>,</span><br><span class="line">          score: <span class="hljs-number">88</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          name: <span class="hljs-string">'大猪蹄子'</span>,</span><br><span class="line">          subject: <span class="hljs-string">'JavaScript'</span>,</span><br><span class="line">          score: <span class="hljs-number">0</span></span><br><span class="line">      &#125;];</span><br><span class="line">      <span class="hljs-comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span></span><br><span class="line">      <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'tbody'</span>);</span><br><span class="line"><span class="hljs-comment">// 遍历数组</span></span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; datas.length; i++) &#123; </span><br><span class="line">          <span class="hljs-comment">// 1. 创建 tr行</span></span><br><span class="line">          <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'tr'</span>);</span><br><span class="line">          tbody.appendChild(tr);</span><br><span class="line">          <span class="hljs-comment">// 2. 行里面创建单元格td 单元格的数量取决于每个对象里面的属性个数  </span></span><br><span class="line">          <span class="hljs-comment">// 使用for in遍历学生对象</span></span><br><span class="line">          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> datas[i]) &#123; </span><br><span class="line">              <span class="hljs-comment">// 创建单元格 </span></span><br><span class="line">              <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'td'</span>);</span><br><span class="line">              <span class="hljs-comment">// 把对象里面的属性值 datas[i][k] 给 td  </span></span><br><span class="line">              td.innerHTML = datas[i][k];</span><br><span class="line">              tr.appendChild(td);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="hljs-comment">// 3. 创建有删除2个字的单元格 </span></span><br><span class="line">          <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'td'</span>);</span><br><span class="line">          td.innerHTML = <span class="hljs-string">'&lt;a href="javascript:;"&gt;删除 &lt;/a&gt;'</span>;</span><br><span class="line">          tr.appendChild(td);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-comment">// 4. 删除操作 开始 </span></span><br><span class="line">      <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'a'</span>);</span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;</span><br><span class="line">          <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              <span class="hljs-comment">// 点击a 删除 当前a 所在的行(链接的爸爸的爸爸)  node.removeChild(child)  </span></span><br><span class="line">              tbody.removeChild(<span class="hljs-keyword">this</span>.parentNode.parentNode)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建元素的三种方式"><a href="#创建元素的三种方式" class="headerlink" title="创建元素的三种方式"></a>创建元素的三种方式</h3><p><img src="/前端笔记/webapis-day03/1551164214925.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 三种创建元素方式区别 </span></span><br><span class="line">    <span class="hljs-comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span></span><br><span class="line">     <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">     btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">         <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;div&gt;123&lt;/div&gt;'</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 2. innerHTML 创建元素</span></span><br><span class="line">    <span class="hljs-keyword">var</span> inner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.inner'</span>);</span><br><span class="line">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">         inner.innerHTML += <span class="hljs-string">'&lt;a href="#"&gt;百度&lt;/a&gt;'</span></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> arr = [];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">        arr.push(<span class="hljs-string">'&lt;a href="#"&gt;百度&lt;/a&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    inner.innerHTML = arr.join(<span class="hljs-string">''</span>);</span><br><span class="line">    <span class="hljs-comment">// 3. document.createElement() 创建元素</span></span><br><span class="line">    <span class="hljs-keyword">var</span> create = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.create'</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'a'</span>);</span><br><span class="line">        create.appendChild(a);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="innerTHML和createElement效率对比"><a href="#innerTHML和createElement效率对比" class="headerlink" title="innerTHML和createElement效率对比"></a>innerTHML和createElement效率对比</h3><p><strong>innerHTML字符串拼接方式（效率低）</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">''</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="hljs-built_in">document</span>.body.innerHTML += <span class="hljs-string">'&lt;div style="width:100px; height:2px; border:1px solid blue;"&gt;&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(d2 - d1);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>createElement方式（效率一般）</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);</span><br><span class="line">            div.style.width = <span class="hljs-string">'100px'</span>;</span><br><span class="line">            div.style.height = <span class="hljs-string">'2px'</span>;</span><br><span class="line">            div.style.border = <span class="hljs-string">'1px solid red'</span>;</span><br><span class="line">            <span class="hljs-built_in">document</span>.body.appendChild(div);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(d2 - d1);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>innerHTML数组方式（效率高）</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">        <span class="hljs-keyword">var</span> array = [];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="line">            array.push(<span class="hljs-string">'&lt;div style="width:100px; height:2px; border:1px solid blue;"&gt;&lt;/div&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">document</span>.body.innerHTML = array.join(<span class="hljs-string">''</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(d2 - d1);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM的核心总结"><a href="#DOM的核心总结" class="headerlink" title="DOM的核心总结"></a>DOM的核心总结</h2><p><img src="/前端笔记/webapis-day03/1551164669434.png" alt></p><p><img src="/前端笔记/webapis-day03/1551164715018.png" alt></p><p>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><img src="/前端笔记/webapis-day03/1551164797164.png" alt></p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p><img src="/前端笔记/webapis-day03/1551164829832.png" alt></p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p><img src="/前端笔记/webapis-day03/1551164872533.png" alt></p><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p><img src="/前端笔记/webapis-day03/1551164907830.png" alt></p><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p><img src="/前端笔记/webapis-day03/1551164936214.png" alt></p><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><p><img src="/前端笔记/webapis-day03/1551164985383.png" alt></p><h2 id="事件高级（重点）"><a href="#事件高级（重点）" class="headerlink" title="事件高级（重点）"></a>事件高级（重点）</h2><h3 id="注册事件（2种方式）"><a href="#注册事件（2种方式）" class="headerlink" title="注册事件（2种方式）"></a>注册事件（2种方式）</h3><p><img src="/前端笔记/webapis-day03/1551165252019.png" alt></p><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><h4 id="addEventListener-事件监听（IE9以后支持）"><a href="#addEventListener-事件监听（IE9以后支持）" class="headerlink" title="addEventListener()事件监听（IE9以后支持）"></a>addEventListener()事件监听（IE9以后支持）</h4><p><img src="/前端笔记/webapis-day03/1551165364122.png" alt></p><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p><img src="/前端笔记/webapis-day03/1551165604792.png" alt></p><h4 id="attacheEvent-事件监听（IE678支持）"><a href="#attacheEvent-事件监听（IE678支持）" class="headerlink" title="attacheEvent()事件监听（IE678支持）"></a>attacheEvent()事件监听（IE678支持）</h4><p><img src="/前端笔记/webapis-day03/1551165781836.png" alt></p><p>​    eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p><img src="/前端笔记/webapis-day03/1551165843912.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;传统注册事件&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;button&gt;方法监听注册事件&lt;/</span>button&gt;</span><br><span class="line">&lt;button&gt;ie9 attachEvent&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    var btns = document.querySelectorAll('button');</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1. 传统方式注册事件</span></span><br><span class="line"><span class="hljs-regexp">    btns[0].onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        alert('hi');</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    btns[0].onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            alert('hao a u');</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">   /</span><span class="hljs-regexp">/ 2. 事件侦听注册事件 addEventListener </span></span><br><span class="line"><span class="hljs-regexp">   /</span><span class="hljs-regexp">/ (1) 里面的事件类型是字符串 必定加引号 而且不带on</span></span><br><span class="line"><span class="hljs-regexp">   /</span><span class="hljs-regexp">/ (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span><br><span class="line"><span class="hljs-regexp">    btns[1].addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        alert(22);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    btns[1].addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            alert(33);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 3. attachEvent ie9以前的版本支持</span></span><br><span class="line"><span class="hljs-regexp">    btns[2].attachEvent('onclick', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        alert(11);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;)</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="事件监听兼容性解决方案"><a href="#事件监听兼容性解决方案" class="headerlink" title="事件监听兼容性解决方案"></a>事件监听兼容性解决方案</h4><p>封装一个函数，函数中判断浏览器的类型：</p><p><img src="/前端笔记/webapis-day03/1551166023885.png" alt></p><h3 id="删除事件（解绑事件）"><a href="#删除事件（解绑事件）" class="headerlink" title="删除事件（解绑事件）"></a>删除事件（解绑事件）</h3><p><img src="/前端笔记/webapis-day03/1551166185410.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    var divs = document.querySelectorAll('div');</span></span><br><span class="line"><span class="hljs-regexp">    divs[0].onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        alert(11);</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 传统方式删除事件</span></span><br><span class="line"><span class="hljs-regexp">        divs[0].onclick = null;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 2. removeEventListener 删除事件</span></span><br><span class="line"><span class="hljs-regexp">    divs[1].addEventListener('click', fn) /</span><span class="hljs-regexp">/ 里面的fn 不需要调用加小括号</span></span><br><span class="line"><span class="hljs-regexp">    function fn() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        alert(22);</span></span><br><span class="line"><span class="hljs-regexp">        divs[1].removeEventListener('click', fn);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 3. detachEvent</span></span><br><span class="line"><span class="hljs-regexp">    divs[2].attachEvent('onclick', fn1);</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    function fn1() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        alert(33);</span></span><br><span class="line"><span class="hljs-regexp">        divs[2].detachEvent('onclick', fn1);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>*<em>删除事件兼容性解决方案 *</em></p><p><img src="/前端笔记/webapis-day03/1551166332453.png" alt></p><h3 id="1-3-4-DOM事件流"><a href="#1-3-4-DOM事件流" class="headerlink" title="1.3.4. DOM事件流"></a>1.3.4. DOM事件流</h3><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; html中的标签都是相互嵌套的，我们可以将元素想象成一个盒子装一个盒子，document是最外面的大盒子。</span><br><span class="line">&gt; 当你单击一个div时，同时你也单击了div的父元素，甚至整个页面。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 那么是先执行父元素的单击事件，还是先执行div的单击事件 ？？？</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/前端笔记/webapis-day03/1551166423144.png" alt></p><blockquote><p>比如：我们给页面中的一个div注册了单击事件，当你单击了div时，也就单击了body，单击了html，单击了document。</p></blockquote><p><img src="/前端笔记/webapis-day03/1551166555833.png" alt></p><p><img src="/前端笔记/webapis-day03/1551166581552.png" alt="1551166581552"></p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; 当时的2大浏览器霸主谁也不服谁！</span><br><span class="line">&gt; IE 提出从目标元素开始，然后一层一层向外接收事件并响应，也就是冒泡型事件流。</span><br><span class="line">&gt; Netscape（网景公司）提出从最外层开始，然后一层一层向内接收事件并响应，也就是捕获型事件流。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 江湖纷争，武林盟主也脑壳疼！！！</span><br><span class="line">&gt; </span><br><span class="line">&gt; 最终，w3c 采用折中的方式，平息了战火，制定了统一的标准 —--— 先捕获再冒泡。</span><br><span class="line">&gt; 现代浏览器都遵循了此标准，所以当事件发生时，会经历3个阶段。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>DOM 事件流会经历3个阶段： </p><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段 </p></li></ol><p>​    我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。 </p><p><img src="/前端笔记/webapis-day03/1551169007768.png" alt></p><p><img src="/前端笔记/webapis-day03/1551169042295.png" alt></p><p><strong>事件冒泡</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"father"</span>&gt;</span><br><span class="line">      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"son"</span>&gt;son盒子&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// onclick 和 attachEvent（ie） 在冒泡阶段触发</span></span><br><span class="line">      <span class="hljs-comment">// 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 </span></span><br><span class="line">      <span class="hljs-comment">// son -&gt; father -&gt;body -&gt; html -&gt; document</span></span><br><span class="line">      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.son'</span>);</span><br><span class="line"><span class="hljs-comment">// 给son注册单击事件</span></span><br><span class="line">      son.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'son'</span>);</span><br><span class="line">      &#125;, <span class="hljs-literal">false</span>);</span><br><span class="line"><span class="hljs-comment">// 给father注册单击事件</span></span><br><span class="line">      <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.father'</span>);</span><br><span class="line">      father.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'father'</span>);</span><br><span class="line">      &#125;, <span class="hljs-literal">false</span>);</span><br><span class="line"><span class="hljs-comment">// 给document注册单击事件，省略第3个参数</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'document'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>事件捕获</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"father"</span>&gt;</span><br><span class="line">      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"son"</span>&gt;son盒子&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 如果addEventListener() 第三个参数是 true 那么在捕获阶段触发</span></span><br><span class="line">      <span class="hljs-comment">// document -&gt; html -&gt; body -&gt; father -&gt; son</span></span><br><span class="line">       <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.son'</span>);</span><br><span class="line"><span class="hljs-comment">// 给son注册单击事件，第3个参数为true</span></span><br><span class="line">       son.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">           alert(<span class="hljs-string">'son'</span>);</span><br><span class="line">       &#125;, <span class="hljs-literal">true</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.father'</span>);</span><br><span class="line"><span class="hljs-comment">// 给father注册单击事件，第3个参数为true</span></span><br><span class="line">       father.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">           alert(<span class="hljs-string">'father'</span>);</span><br><span class="line">       &#125;, <span class="hljs-literal">true</span>);</span><br><span class="line"><span class="hljs-comment">// 给document注册单击事件，第3个参数为true</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'document'</span>);</span><br><span class="line">      &#125;, <span class="hljs-literal">true</span>)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="什么是事件对象"><a href="#什么是事件对象" class="headerlink" title="什么是事件对象"></a>什么是事件对象</h4><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p><p>比如：  </p><ol><li><p>谁绑定了这个事件。</p></li><li><p>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</p></li><li><p>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</p></li></ol><h4 id="事件对象的使用"><a href="#事件对象的使用" class="headerlink" title="事件对象的使用"></a>事件对象的使用</h4><p>事件触发发生时就会产生事件对象，并且系统会以实参的形式传给事件处理函数。</p><p>所以，在事件处理函数中声明1个形参用来接收事件对象。</p><p><img src="/前端笔记/webapis-day03/1551169537789.png" alt></p><h4 id="事件对象的兼容性处理"><a href="#事件对象的兼容性处理" class="headerlink" title="事件对象的兼容性处理"></a>事件对象的兼容性处理</h4><p>事件对象本身的获取存在兼容问题：</p><ol><li><p>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</p></li><li><p>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p></li></ol><p><img src="/前端笔记/webapis-day03/1551169680823.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只要“||”前面为false, 不管“||”后面是true 还是 false，都返回 “||” 后面的值。</span><br><span class="line">只要“||”前面为true, 不管“||”后面是true 还是 false，都返回 “||” 前面的值。</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    var div = document.querySelector('div');</span></span><br><span class="line"><span class="hljs-regexp">    div.onclick = function(e) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 事件对象</span></span><br><span class="line"><span class="hljs-regexp">            e = e || window.event;</span></span><br><span class="line"><span class="hljs-regexp">            console.log(e);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h4><p><img src="/前端笔记/webapis-day03/1551169931778.png" alt></p><h4 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h4><ul><li><p>this 是事件绑定的元素（绑定这个事件处理函数的元素） 。</p></li><li><p>e.target 是事件触发的元素。</p></li></ul><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 常情况下terget 和 this是一致的，</span><br><span class="line">&gt; 但有一种情况不同，那就是在事件冒泡时（父子元素有相同事件，单击子元素，父元素的事件处理函数也会被触发执行），</span><br><span class="line">&gt; 这时候this指向的是父元素，因为它是绑定事件的元素对象，</span><br><span class="line">&gt; 而target指向的是子元素，因为他是触发事件的那个具体元素对象。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    var div = document.querySelector('div');</span></span><br><span class="line"><span class="hljs-regexp">    div.addEventListener('click', function(e) &#123;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ e.target 和 this指向的都是div</span></span><br><span class="line"><span class="hljs-regexp">        console.log(e.target);</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this);</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>事件冒泡下的e.target和this</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;abc&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;abc&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;abc&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ul'</span>);</span><br><span class="line">    ul.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span><br><span class="line">          <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// ul</span></span><br><span class="line"></span><br><span class="line">          <span class="hljs-comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span></span><br><span class="line">          <span class="hljs-built_in">console</span>.log(e.target); <span class="hljs-comment">// li</span></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><blockquote><p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="hljs-string">"http://www.baidu.com"</span>&gt;百度&lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 2. 阻止默认行为 让链接不跳转 </span></span><br><span class="line"><span class="hljs-regexp">    var a = document.querySelector('a');</span></span><br><span class="line"><span class="hljs-regexp">    a.addEventListener('click', function(e) &#123;</span></span><br><span class="line"><span class="hljs-regexp">         e.preventDefault(); /</span><span class="hljs-regexp">/  dom 标准写法</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 3. 传统的注册方式</span></span><br><span class="line"><span class="hljs-regexp">    a.onclick = function(e) &#123;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 普通浏览器 e.preventDefault();  方法</span></span><br><span class="line"><span class="hljs-regexp">        e.preventDefault();</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 低版本浏览器 ie678  returnValue  属性</span></span><br><span class="line"><span class="hljs-regexp">        e.returnValue = false;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span></span><br><span class="line"><span class="hljs-regexp">        return false;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p><p><img src="/前端笔记/webapis-day03/1551171467194.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"father"</span>&gt;</span><br><span class="line">      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"son"</span>&gt;son儿子&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.son'</span>);</span><br><span class="line"><span class="hljs-comment">// 给son注册单击事件</span></span><br><span class="line">      son.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'son'</span>);</span><br><span class="line">          e.stopPropagation(); <span class="hljs-comment">// stop 停止  Propagation 传播</span></span><br><span class="line">          <span class="hljs-built_in">window</span>.event.cancelBubble = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 非标准 cancel 取消 bubble 泡泡</span></span><br><span class="line">      &#125;, <span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.father'</span>);</span><br><span class="line"><span class="hljs-comment">// 给father注册单击事件</span></span><br><span class="line">      father.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'father'</span>);</span><br><span class="line">      &#125;, <span class="hljs-literal">false</span>);</span><br><span class="line"><span class="hljs-comment">// 给document注册单击事件</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="hljs-string">'document'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>阻止事件冒泡的兼容性处理</strong></p><p><img src="/前端笔记/webapis-day03/1551171657513.png" alt></p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p><h4 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把事情委托给别人，代为处理。</span><br></pre></td></tr></table></figure><p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p><blockquote><p>说白了就是，不给子元素注册事件，给父元素注册事件，把处理代码在父元素的事件中执行。</p></blockquote><p><strong>生活中的代理：</strong></p><p><img src="/前端笔记/webapis-day03/1551172082624.png" alt></p><p><strong>js事件中的代理：</strong></p><p><img src="/前端笔记/webapis-day03/1551172159273.png" alt></p><h4 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h4><p>​    给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p><h4 id="事件委托的作用"><a href="#事件委托的作用" class="headerlink" title="事件委托的作用"></a>事件委托的作用</h4><ul><li><p>我们只操作了一次 DOM ，提高了程序的性能。</p></li><li><p>动态新创建的子元素，也拥有事件。</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;知否知否，点我应有弹框在手！&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;知否知否，点我应有弹框在手！&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;知否知否，点我应有弹框在手！&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span><br><span class="line">    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ul'</span>);</span><br><span class="line">    ul.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span></span><br><span class="line">        e.target.style.backgroundColor = <span class="hljs-string">'pink'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h2><p><img src="/前端笔记/webapis-day03/1551172699854.png" alt></p><h3 id="案例：禁止选中文字和禁止右键菜单"><a href="#案例：禁止选中文字和禁止右键菜单" class="headerlink" title="案例：禁止选中文字和禁止右键菜单"></a>案例：禁止选中文字和禁止右键菜单</h3><p><img src="/前端笔记/webapis-day03/1551172755484.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    我是一段不愿意分享的文字</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span></span><br><span class="line">        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'contextmenu'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span></span><br><span class="line">        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'selectstart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><p><img src="/前端笔记/webapis-day03/1551173103741.png" alt></p><h3 id="获取鼠标在页面的坐标"><a href="#获取鼠标在页面的坐标" class="headerlink" title="获取鼠标在页面的坐标"></a>获取鼠标在页面的坐标</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 鼠标事件对象 MouseEvent</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 1. client 鼠标在可视区的x和y坐标</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(e.clientX);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(e.clientY);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'---------------------'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 2. page 鼠标在页面文档的x和y坐标</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(e.pageX);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(e.pageY);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'---------------------'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(e.screenX);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(e.screenY);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：跟随鼠标的天使"><a href="#案例：跟随鼠标的天使" class="headerlink" title="案例：跟随鼠标的天使"></a>案例：跟随鼠标的天使</h3><p><img src="/前端笔记/webapis-day03/1551173172613.png" alt></p><p><img src="/前端笔记/webapis-day03/1551173186812.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="hljs-string">"images/angel.gif"</span> alt=<span class="hljs-string">""</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> pic = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'img'</span>);</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'mousemove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span></span><br><span class="line">    <span class="hljs-comment">// 2.核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， </span></span><br><span class="line">        <span class="hljs-comment">// 把这个x和y坐标做为图片的top和left 值就可以移动图片</span></span><br><span class="line">    <span class="hljs-keyword">var</span> x = e.pageX;</span><br><span class="line">    <span class="hljs-keyword">var</span> y = e.pageY;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'x坐标是'</span> + x, <span class="hljs-string">'y坐标是'</span> + y);</span><br><span class="line">    <span class="hljs-comment">//3 . 千万不要忘记给left 和top 添加px 单位</span></span><br><span class="line">    pic.style.left = x - <span class="hljs-number">50</span> + <span class="hljs-string">'px'</span>;</span><br><span class="line">    pic.style.top = y - <span class="hljs-number">40</span> + <span class="hljs-string">'px'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学习目标：&lt;/p&gt;
&lt;p&gt;能够使用removeChild()方法删除节点&lt;/p&gt;
&lt;p&gt;能够完成动态生成表格案例&lt;/p&gt;
&lt;p&gt;能够使用传统方式和监听方式给元素注册事件&lt;/p&gt;
&lt;p&gt;能够说出事件流执行的三个阶段&lt;/p&gt;
&lt;p&gt;能够在事件处理函数中获取事件对象&lt;/p&gt;
&lt;p&gt;能够使用事件对象取消默认行为&lt;/p&gt;
&lt;p&gt;能够使用事件对象阻止事件冒泡&lt;/p&gt;
&lt;p&gt;能够使用事件对象获取鼠标的位置&lt;/p&gt;
&lt;p&gt;能够完成跟随鼠标的天使案例&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day02/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day02/</id>
    <published>2020-05-23T06:50:39.000Z</published>
    <updated>2020-05-23T07:51:41.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.排他思想</p></blockquote><blockquote><p>学习目标：</p><p>能够说出排他操作的一般实现步骤</p><p>能够使用html5中的dataset方式操作自定义属性</p><p>能够根据提示完成百度换肤的案例</p><p>能够根据提示完成全选案例</p><p>能够根据提示完成tab栏切换案例</p><p>能够区分元素节点、文本节点、属性节点</p><p>能够获取指定元素的父元素</p><p>能够获取指定元素的所有子元素</p><p>能够说出childNodes和children的区别</p><p>能够使用createElement创建页面元素</p></blockquote><a id="more"></a><h2 id="排他操作"><a href="#排他操作" class="headerlink" title="排他操作"></a>排他操作</h2><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><p><img src="/前端笔记/webapis-day02/1550914482628.png" alt></p><p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p><ol><li><p>所有元素全部清除样式（干掉其他人）</p></li><li><p>给当前元素设置样式 （留下我自己）</p></li><li><p>注意顺序不能颠倒，首先干掉其他人，再设置自己</p></li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;按钮<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;button&gt;按钮2&lt;/</span>button&gt;</span><br><span class="line">&lt;button&gt;按钮<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;button&gt;按钮4&lt;/</span>button&gt;</span><br><span class="line">&lt;button&gt;按钮<span class="hljs-number">5</span>&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1. 获取所有按钮元素</span></span><br><span class="line"><span class="hljs-regexp">    var btns = document.getElementsByTagName('button');</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ btns得到的是伪数组  里面的每一个元素 btns[i]</span></span><br><span class="line"><span class="hljs-regexp">    for (var i = 0; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="hljs-regexp">        btns[i].onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span></span><br><span class="line"><span class="hljs-regexp">            for (var i = 0; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                btns[i].style.backgroundColor = '';</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ (2) 然后才让当前的元素背景颜色为pink 留下我自己</span></span><br><span class="line"><span class="hljs-regexp">            this.style.backgroundColor = 'pink';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="案例：百度换肤"><a href="#案例：百度换肤" class="headerlink" title="案例：百度换肤"></a>案例：百度换肤</h2><p><img src="/前端笔记/webapis-day02/1550914640677.png" alt></p><p><img src="/前端笔记/webapis-day02/1550914663042.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"baidu"</span>&gt;</span><br><span class="line">        &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/1.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/2.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/3.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/4.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 获取元素 </span></span><br><span class="line"><span class="hljs-regexp">        var imgs = document.querySelector('.baidu').querySelectorAll('img');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ console.log(imgs);</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 2. 循环注册事件 </span></span><br><span class="line"><span class="hljs-regexp">        for (var i = 0; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            imgs[i].onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ this.src 就是我们点击图片的路径   images/</span><span class="hljs-number">2.</span>jpg</span><br><span class="line">                <span class="hljs-comment">// console.log(this.src);</span></span><br><span class="line">                <span class="hljs-comment">// 把这个路径 this.src 给body 就可以了</span></span><br><span class="line">                <span class="hljs-built_in">document</span>.body.style.backgroundImage = <span class="hljs-string">'url('</span> + <span class="hljs-keyword">this</span>.src + <span class="hljs-string">')'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="案例：表格隔行变色"><a href="#案例：表格隔行变色" class="headerlink" title="案例：表格隔行变色"></a>案例：表格隔行变色</h2><p><img src="/前端笔记/webapis-day02/1550914791881.png" alt></p><p><img src="/前端笔记/webapis-day02/1550914812202.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1.获取元素 获取的是 tbody 里面所有的行</span></span><br><span class="line">    <span class="hljs-keyword">var</span> trs = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'tbody'</span>).querySelectorAll(<span class="hljs-string">'tr'</span>);</span><br><span class="line">    <span class="hljs-comment">// 2. 利用循环绑定注册事件</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; trs.length; i++) &#123;</span><br><span class="line">        <span class="hljs-comment">// 3. 鼠标经过事件 onmouseover</span></span><br><span class="line">        trs[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">                <span class="hljs-keyword">this</span>.className = <span class="hljs-string">'bg'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 4. 鼠标离开事件 onmouseout</span></span><br><span class="line">        trs[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.className = <span class="hljs-string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：全选"><a href="#案例：全选" class="headerlink" title="案例：全选"></a>案例：全选</h2><p><img src="/前端笔记/webapis-day02/1550914980274.png" alt></p><p><img src="/前端笔记/webapis-day02/1550915005393.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. 全选和取消全选做法：  让下面所有复选框的checked属性（选中状态） 跟随 全选按钮即可</span></span><br><span class="line">    <span class="hljs-comment">// 获取元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">var</span> j_cbAll = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'j_cbAll'</span>); </span><br><span class="line">    <span class="hljs-keyword">var</span> j_tbs = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'j_tb'</span>).getElementsByTagName(<span class="hljs-string">'input'</span>); </span><br><span class="line">    <span class="hljs-comment">// 全选按钮注册事件</span></span><br><span class="line">    j_cbAll.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// this.checked 当前复选框的选中状态</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.checked);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;</span><br><span class="line">                j_tbs[i].checked = <span class="hljs-keyword">this</span>.checked;</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-comment">// 给所有的子复选框注册单击事件</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;</span><br><span class="line">        j_tbs[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// flag 控制全选按钮是否选中</span></span><br><span class="line">            <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="line">            <span class="hljs-comment">// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (!j_tbs[i].checked) &#123;</span><br><span class="line">                    flag = <span class="hljs-literal">false</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 设置全选按钮的状态</span></span><br><span class="line">            j_cbAll.checked = flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h2><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><p><img src="/前端笔记/webapis-day02/1550915376339.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div id=<span class="hljs-string">"demo"</span> index=<span class="hljs-string">"1"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"nav"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">       <span class="hljs-comment">// 1. 获取元素的属性值</span></span><br><span class="line">       <span class="hljs-comment">// (1) element.属性</span></span><br><span class="line">       <span class="hljs-built_in">console</span>.log(div.id);</span><br><span class="line">       <span class="hljs-comment">//(2) element.getAttribute('属性')  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</span></span><br><span class="line">       <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">'id'</span>));</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">'index'</span>));</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h3><p><img src="/前端笔记/webapis-day02/1550915445026.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 2. 设置元素属性值</span></span><br><span class="line"><span class="hljs-comment">// (1) element.属性= '值'</span></span><br><span class="line">div.id = <span class="hljs-string">'test'</span>;</span><br><span class="line">div.className = <span class="hljs-string">'navs'</span>;</span><br><span class="line"><span class="hljs-comment">// (2) element.setAttribute('属性', '值');  主要针对于自定义属性</span></span><br><span class="line">div.setAttribute(<span class="hljs-string">'index'</span>, <span class="hljs-number">2</span>);</span><br><span class="line">div.setAttribute(<span class="hljs-string">'class'</span>, <span class="hljs-string">'footer'</span>); <span class="hljs-comment">// class 特殊  这里面写的就是</span></span><br></pre></td></tr></table></figure><h3 id="移出属性"><a href="#移出属性" class="headerlink" title="移出属性"></a>移出属性</h3><p><img src="/前端笔记/webapis-day02/1550915513137.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// class 不是className</span></span><br><span class="line">      <span class="hljs-comment">// 3 移除属性 removeAttribute(属性)    </span></span><br><span class="line">      div.removeAttribute(<span class="hljs-string">'index'</span>);</span><br></pre></td></tr></table></figure><h3 id="案例：tab栏"><a href="#案例：tab栏" class="headerlink" title="案例：tab栏"></a>案例：tab栏</h3><p><img src="/前端笔记/webapis-day02/1550915567627.png" alt></p><p><img src="/前端笔记/webapis-day02/1550915590707.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 获取元素</span></span><br><span class="line">    <span class="hljs-keyword">var</span> tab_list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.tab_list'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> lis = tab_list.querySelectorAll(<span class="hljs-string">'li'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> items = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.item'</span>);</span><br><span class="line">    <span class="hljs-comment">// for循环，给选项卡绑定点击事件</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        <span class="hljs-comment">// 开始给5个小li 设置索引号 </span></span><br><span class="line">        lis[i].setAttribute(<span class="hljs-string">'index'</span>, i);</span><br><span class="line">        lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. 上的模块选项卡，当前这一个底色会是红色，其余不变（排他思想）</span></span><br><span class="line">            <span class="hljs-comment">// 干掉所有人 其余的li清除 class 这个类</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">                lis[i].className = <span class="hljs-string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 留下我自己 </span></span><br><span class="line">            <span class="hljs-keyword">this</span>.className = <span class="hljs-string">'current'</span>;</span><br><span class="line">            <span class="hljs-comment">// 2. 下面的显示内容模块</span></span><br><span class="line">            <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.getAttribute(<span class="hljs-string">'index'</span>);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(index);</span><br><span class="line">            <span class="hljs-comment">// 干掉所有人 让其余的item 这些div 隐藏</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                items[i].style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 留下我自己 让对应的item 显示出来</span></span><br><span class="line">            items[index].style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h3><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p><p>自定义属性获取是通过getAttribute(‘属性’) 获取。</p><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p><p>H5给我们新增了自定义属性：</p><p><img src="/前端笔记/webapis-day02/1550915798516.png" alt></p><p><img src="/前端笔记/webapis-day02/1550915815571.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div getTime=<span class="hljs-string">"20"</span> data-index=<span class="hljs-string">"2"</span> data-list-name=<span class="hljs-string">"andy"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    <span class="hljs-comment">// console.log(div.getTime);</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">'getTime'</span>));</span><br><span class="line">    div.setAttribute(<span class="hljs-string">'data-time'</span>, <span class="hljs-number">20</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">'data-index'</span>));</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">'data-list-name'</span>));</span><br><span class="line">    <span class="hljs-comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span><br><span class="line">    <span class="hljs-comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.dataset);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.dataset.index);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">'index'</span>]);</span><br><span class="line">    <span class="hljs-comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.dataset.listName);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">'listName'</span>]);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h3><p>​    网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>​    HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><p><img src="/前端笔记/webapis-day02/1550970944363.png" alt></p><p>​    一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><p><img src="/前端笔记/webapis-day02/1550970986988.png" alt></p><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><p>​    利用 DOM 树可以把节点划分为不同的层级关系，常见的是<strong>父子兄层级关系</strong>。</p><p>​    <img src="/前端笔记/webapis-day02/1550971058781.png" alt></p><h3 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h3><p><img src="/前端笔记/webapis-day02/1550971196686.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"demo"</span>&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"box"</span>&gt;</span><br><span class="line">        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"erweima"</span>&gt;×&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1. 父节点 parentNode</span></span><br><span class="line"><span class="hljs-regexp">    var erweima = document.querySelector('.erweima');</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ var box = document.querySelector('.box');</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span></span><br><span class="line"><span class="hljs-regexp">    console.log(erweima.parentNode);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><p><strong>所有子节点</strong></p><p><img src="/前端笔记/webapis-day02/1550971263925.png" alt></p><p><strong>子元素节点</strong></p><p><img src="/前端笔记/webapis-day02/1550971325828.png" alt="1550971325828"></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;我是li&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;我是li&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;我是li&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;我是li&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ DOM 提供的方法（API）获取</span></span><br><span class="line"><span class="hljs-regexp">    var ul = document.querySelector('ul');</span></span><br><span class="line"><span class="hljs-regexp">    var lis = ul.querySelectorAll('li');</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span><br><span class="line"><span class="hljs-regexp">    console.log(ul.childNodes);</span></span><br><span class="line"><span class="hljs-regexp">    console.log(ul.childNodes[0].nodeType);</span></span><br><span class="line"><span class="hljs-regexp">    console.log(ul.childNodes[1].nodeType);</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span><br><span class="line"><span class="hljs-regexp">    console.log(ul.children);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><strong>第1个子节点</strong></p><p><img src="/前端笔记/webapis-day02/1550971774758.png" alt></p><p><strong>最后1个子节点</strong></p><p><img src="/前端笔记/webapis-day02/1550971825493.png" alt></p><p><strong>第1个子元素节点</strong></p><p><img src="/前端笔记/webapis-day02/1550972014509.png" alt></p><p><strong>最后1个子元素节点</strong></p><p><img src="/前端笔记/webapis-day02/1550972106485.png" alt></p><p>​    实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p><p><img src="/前端笔记/webapis-day02/1550972648014.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;我是li1&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;我是li2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;我是li3&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;li&gt;我是li4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;我是li5&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>ol&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> ol = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ol'</span>);</span><br><span class="line">    <span class="hljs-comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ol.firstChild);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ol.lastChild);</span><br><span class="line">    <span class="hljs-comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ol.firstElementChild);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ol.lastElementChild);</span><br><span class="line">    <span class="hljs-comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ol.children[<span class="hljs-number">0</span>]);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ol.children[ol.children.length - <span class="hljs-number">1</span>]);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：新浪下拉菜单"><a href="#案例：新浪下拉菜单" class="headerlink" title="案例：新浪下拉菜单"></a>案例：新浪下拉菜单</h3><p><img src="/前端笔记/webapis-day02/1550974934894.png" alt></p><p><img src="/前端笔记/webapis-day02/1550975025608.png" alt></p><p><img src="/前端笔记/webapis-day02/1550975049176.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">    <span class="hljs-keyword">var</span> nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.nav'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> lis = nav.children; <span class="hljs-comment">// 得到4个小li</span></span><br><span class="line">    <span class="hljs-comment">// 2.循环注册事件</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        lis[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.children[<span class="hljs-number">1</span>].style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lis[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.children[<span class="hljs-number">1</span>].style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><p><strong>下一个兄弟节点</strong></p><p><img src="/前端笔记/webapis-day02/1550973538696.png" alt></p><p><strong>上一个兄弟节点</strong></p><p><img src="/前端笔记/webapis-day02/1550973558511.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;我是div&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;span&gt;我是span&lt;/</span>span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    <span class="hljs-comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.nextSibling);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.previousSibling);</span><br><span class="line">    <span class="hljs-comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.nextElementSibling);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(div.previousElementSibling);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>下一个兄弟元素节点（有兼容性问题）</strong></p><p><img src="/前端笔记/webapis-day02/1550973610223.png" alt></p><p><strong>上一个兄弟元素节点（有兼容性问题）</strong></p><p><img src="/前端笔记/webapis-day02/1550973630150.png" alt></p><p><img src="/前端笔记/webapis-day02/1550973722805.png" alt></p><p><img src="/前端笔记/webapis-day02/1550973799759.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNextElementSibling</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">var</span> el = element;</span><br><span class="line">   <span class="hljs-keyword">while</span> (el = el.nextSibling) &#123;</span><br><span class="line">     <span class="hljs-keyword">if</span> (el.nodeType === <span class="hljs-number">1</span>) &#123;</span><br><span class="line">         <span class="hljs-keyword">return</span> el;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p><img src="/前端笔记/webapis-day02/1550975514321.png" alt></p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p><img src="/前端笔记/webapis-day02/1550975640170.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. 创建节点元素节点</span></span><br><span class="line">    <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>);</span><br><span class="line">    <span class="hljs-comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素</span></span><br><span class="line">    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ul'</span>);</span><br><span class="line">    ul.appendChild(li);</span><br><span class="line">    <span class="hljs-comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span><br><span class="line">    <span class="hljs-keyword">var</span> lili = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>);</span><br><span class="line">    ul.insertBefore(lili, ul.children[<span class="hljs-number">0</span>]);</span><br><span class="line">    <span class="hljs-comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span></span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：简单版发布留言"><a href="#案例：简单版发布留言" class="headerlink" title="案例：简单版发布留言"></a>案例：简单版发布留言</h3><p><img src="/前端笔记/webapis-day02/1550975849302.png" alt></p><p><img src="/前端笔记/webapis-day02/1550975887017.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;textarea name=<span class="hljs-string">""</span> id=<span class="hljs-string">""</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span></span><br><span class="line">    &lt;button&gt;发布&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'textarea'</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'ul'</span>);</span><br><span class="line">        <span class="hljs-comment">// 2. 注册事件</span></span><br><span class="line">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (text.value == <span class="hljs-string">''</span>) &#123;</span><br><span class="line">                alert(<span class="hljs-string">'您没有输入内容'</span>);</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(text.value);</span></span><br><span class="line">                <span class="hljs-comment">// (1) 创建元素</span></span><br><span class="line">                <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>);</span><br><span class="line">                <span class="hljs-comment">// 先有li 才能赋值</span></span><br><span class="line">                li.innerHTML = text.value;</span><br><span class="line">                <span class="hljs-comment">// (2) 添加元素</span></span><br><span class="line">                <span class="hljs-comment">// ul.appendChild(li);</span></span><br><span class="line">                ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.排他思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学习目标：&lt;/p&gt;
&lt;p&gt;能够说出排他操作的一般实现步骤&lt;/p&gt;
&lt;p&gt;能够使用html5中的dataset方式操作自定义属性&lt;/p&gt;
&lt;p&gt;能够根据提示完成百度换肤的案例&lt;/p&gt;
&lt;p&gt;能够根据提示完成全选案例&lt;/p&gt;
&lt;p&gt;能够根据提示完成tab栏切换案例&lt;/p&gt;
&lt;p&gt;能够区分元素节点、文本节点、属性节点&lt;/p&gt;
&lt;p&gt;能够获取指定元素的父元素&lt;/p&gt;
&lt;p&gt;能够获取指定元素的所有子元素&lt;/p&gt;
&lt;p&gt;能够说出childNodes和children的区别&lt;/p&gt;
&lt;p&gt;能够使用createElement创建页面元素&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day01/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day01/</id>
    <published>2020-05-23T06:43:12.000Z</published>
    <updated>2020-05-23T06:51:07.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.操作元素</p></blockquote><p><img src="/前端笔记/webapis-day01/1550737354861.png" alt="1550737354861"></p><a id="more"></a><h2 id="Web-API介绍"><a href="#Web-API介绍" class="headerlink" title="Web API介绍"></a>Web API介绍</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，无需理解其内部工作机制细节，只需直接调用使用即可。</p><p><img src="/前端笔记/webapis-day01/1550719591484.png" alt></p><blockquote><p>举例解释什么是API。</p><p>例如，</p><p>​    C语言中有一个函数 fopen()可以打开硬盘上的文件，这个函数对于我们来说，就是一个C语言提供的打开文件的工具。</p><p>​    javascript中有一个函数alert()可以在页面弹一个提示框，这个函数就是js提供的一个弹框工具。</p><p>这些工具（函数）由编程语言提供，内部的实现已经封装好了，我们只要学会灵活的使用这些工具即可。</p></blockquote><h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web  API的概念"></a>Web  API的概念</h3><p>​    Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p><p>​    现阶段我们主要针对于浏览器讲解常用的 API , 主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框， 直接使用 alert(‘弹出’)</p><p>​    MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><p>​    因为 Web API 很多，所以我们将这个阶段称为 Web APIs。</p><p>​    此处的 Web API 特指浏览器提供的一系列API(很多函数或对象方法)，即操作网页的一系列工具。例如：操作html标签、操作页面地址的方法。</p><h3 id="API-和-Web-API-总结"><a href="#API-和-Web-API-总结" class="headerlink" title="API 和 Web  API 总结"></a>API 和 Web  API 总结</h3><ol><li><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</p></li><li><p>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</p></li><li><p>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</p></li><li><p>学习 Web API 可以结合前面学习内置对象方法的思路学习</p></li></ol><h2 id="DOM-介绍"><a href="#DOM-介绍" class="headerlink" title="DOM 介绍"></a>DOM 介绍</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>​    文档对象模型（Document Object Model，简称DOM），是 <a href="https://baike.baidu.com/item/W3C" target="_blank" rel="noopener">W3C</a> 组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">可扩展标记语言</a>（html或者xhtml）的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">编程接口</a>。</p><p>​    W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><blockquote><p>DOM是W3C组织制定的一套处理 html和xml文档的规范，所有的浏览器都遵循了这套标准。</p></blockquote><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p><img src="/前端笔记/webapis-day01/1550731974575.png" alt="1550731974575"></p><p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p><ul><li>文档：一个页面就是一个文档，DOM中使用document表示</li><li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li><li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li></ul><p><img src="/前端笔记/webapis-day01/1550732362134.png" alt="1550732362134"></p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p>为什么要获取页面元素？</p><p>例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，再对其进行操作。</p><h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="hljs-built_in">document</span>.getElementById(id)</span><br><span class="line">作用：根据ID获取元素对象</span><br><span class="line">参数：id值，区分大小写的字符串</span><br><span class="line">返回值：元素对象 或 <span class="hljs-literal">null</span></span><br></pre></td></tr></table></figure><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="hljs-string">"time"</span>&gt;<span class="hljs-number">2019</span><span class="hljs-number">-9</span><span class="hljs-number">-9</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面</span></span><br><span class="line"><span class="hljs-regexp">        var timer = document.getElementById('time');</span></span><br><span class="line"><span class="hljs-regexp">        console.log(timer);</span></span><br><span class="line"><span class="hljs-regexp">        console.log(typeof timer);</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</span></span><br><span class="line"><span class="hljs-regexp">        console.dir(timer);</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：document.getElementsByTagName(&apos;标签名&apos;) 或者 element.getElementsByTagName(&apos;标签名&apos;) </span><br><span class="line">作用：根据标签名获取元素对象</span><br><span class="line">参数：标签名</span><br><span class="line">返回值：元素对象集合（伪数组，数组元素是元素对象）</span><br></pre></td></tr></table></figure><p><strong>案例代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="hljs-number">11</span>&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;知否知否，应是等你好久22&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="hljs-number">33</span>&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;知否知否，应是等你好久44&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="hljs-number">55</span>&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;ul id=<span class="hljs-string">"nav"</span>&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;生僻字&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;生僻字&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span><br><span class="line">        <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'li'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(lis);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(lis[<span class="hljs-number">0</span>]);</span><br><span class="line">        <span class="hljs-comment">// 2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式</span></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// 3. element.getElementsByTagName()  可以得到这个元素里面的某些标签</span></span><br><span class="line">        <span class="hljs-keyword">var</span> nav = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'nav'</span>); <span class="hljs-comment">// 这个获得nav 元素</span></span><br><span class="line">        <span class="hljs-keyword">var</span> navLis = nav.getElementsByTagName(<span class="hljs-string">'li'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(navLis);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/webapis-day01/1550733441663.png" alt="1550733441663"></p><p>注意：getElementsByTagName()获取到是动态集合，即：当页面增加了标签，这个集合中也就增加了元素。</p><h3 id="H5新增获取元素方式"><a href="#H5新增获取元素方式" class="headerlink" title="H5新增获取元素方式"></a>H5新增获取元素方式</h3><p><img src="/前端笔记/webapis-day01/1550733518278.png" alt="1550733518278"></p><p><img src="/前端笔记/webapis-day01/1550733734425.png" alt="1550733734425"></p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"box"</span>&gt;盒子<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="box"&gt;盒子2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="hljs-string">"nav"</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;首页&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;li&gt;产品&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span><br><span class="line">        <span class="hljs-keyword">var</span> boxs = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'box'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(boxs);</span><br><span class="line">        <span class="hljs-comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span></span><br><span class="line">        <span class="hljs-keyword">var</span> firstBox = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.box'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(firstBox);</span><br><span class="line">        <span class="hljs-keyword">var</span> nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#nav'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(nav);</span><br><span class="line">        <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'li'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(li);</span><br><span class="line">        <span class="hljs-comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span><br><span class="line">        <span class="hljs-keyword">var</span> allBox = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.box'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(allBox);</span><br><span class="line">        <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'li'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(lis);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="获取特殊元素（body，html）"><a href="#获取特殊元素（body，html）" class="headerlink" title="获取特殊元素（body，html）"></a>获取特殊元素（body，html）</h3><p><img src="/前端笔记/webapis-day01/1550733794816.png" alt="1550733794816"></p><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： <strong>触发— 响应机制</strong>。</p><p>​    网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul><li>事件源（谁）：触发事件的元素</li><li>事件类型（什么事件）： 例如 click 点击事件</li><li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li></ul><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="hljs-string">"btn"</span>&gt;唐伯虎&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 点击一个按钮，弹出对话框</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/(1) 事件源 事件被触发的对象   谁  按钮</span></span><br><span class="line"><span class="hljs-regexp">        var btn = document.getElementById('btn');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span><br><span class="line"><span class="hljs-regexp">        btn.onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            alert('点秋香');</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h3><p><img src="/前端笔记/webapis-day01/1550734387056.png" alt="1550734387056"></p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 执行事件步骤</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 点击div 控制台输出 我被选中了</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 获取事件源</span></span><br><span class="line"><span class="hljs-regexp">        var div = document.querySelector('div');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 2.绑定事件 注册事件</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ div.onclick </span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 3.添加事件处理程序 </span></span><br><span class="line"><span class="hljs-regexp">        div.onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log('我被选中了');</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常见的鼠标事件"><a href="#常见的鼠标事件" class="headerlink" title="常见的鼠标事件"></a>常见的鼠标事件</h3><p><img src="/前端笔记/webapis-day01/1550734506084.png" alt="1550734506084"></p><h3 id="分析事件三要素"><a href="#分析事件三要素" class="headerlink" title="分析事件三要素"></a>分析事件三要素</h3><ul><li><p>下拉菜单三要素</p></li><li><p>关闭广告三要素</p></li></ul><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><p>​    JavaScript的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容、属性等。（注意：这些操作都是通过元素对象的属性实现的）</p><h3 id="改变元素内容（获取或设置）"><a href="#改变元素内容（获取或设置）" class="headerlink" title="改变元素内容（获取或设置）"></a>改变元素内容（获取或设置）</h3><p><img src="/前端笔记/webapis-day01/1550735016756.png" alt="1550735016756"></p><p><strong>innerText改变元素内容</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示当前系统时间&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;某个时间&lt;/</span>div&gt;</span><br><span class="line">    &lt;p&gt;<span class="hljs-number">1123</span>&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 当我们点击了按钮，  div里面的文字会发生变化</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 获取元素 </span></span><br><span class="line"><span class="hljs-regexp">        var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">        var div = document.querySelector('div');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 2.注册事件</span></span><br><span class="line"><span class="hljs-regexp">        btn.onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ div.innerText = '2019-6-6';</span></span><br><span class="line"><span class="hljs-regexp">            div.innerHTML = getDate();</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">        function getDate() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            var date = new Date();</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 我们写一个 2019年 5月 1日 星期三</span></span><br><span class="line"><span class="hljs-regexp">            var year = date.getFullYear();</span></span><br><span class="line"><span class="hljs-regexp">            var month = date.getMonth() + 1;</span></span><br><span class="line"><span class="hljs-regexp">            var dates = date.getDate();</span></span><br><span class="line"><span class="hljs-regexp">            var arr = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];</span></span><br><span class="line"><span class="hljs-regexp">            var day = date.getDay();</span></span><br><span class="line"><span class="hljs-regexp">            return '今天是：' + year + '年' + month + '月' + dates + '日 ' + arr[day];</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p><strong>innerText和innerHTML的区别</strong></p><ul><li>获取内容时的区别：</li></ul><p>​    innerText会去除空格和换行，而innerHTML会保留空格和换行    </p><ul><li>设置内容时的区别：</li></ul><p>​    innerText不会识别html，而innerHTML会识别</p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        我是文字</span><br><span class="line">        &lt;span&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// innerText 和 innerHTML的区别 </span></span><br><span class="line">        <span class="hljs-comment">// 1. innerText 不识别html标签 非标准  去除空格和换行</span></span><br><span class="line">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">        <span class="hljs-comment">// div.innerText = '&lt;strong&gt;今天是：&lt;/strong&gt; 2019';</span></span><br><span class="line">        <span class="hljs-comment">// 2. innerHTML 识别html标签 W3C标准 保留空格和换行的</span></span><br><span class="line">        div.innerHTML = <span class="hljs-string">'&lt;strong&gt;今天是：&lt;/strong&gt; 2019'</span>;</span><br><span class="line">        <span class="hljs-comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span><br><span class="line">        <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'p'</span>);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(p.innerText);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(p.innerHTML);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="常用元素的属性操作"><a href="#常用元素的属性操作" class="headerlink" title="常用元素的属性操作"></a>常用元素的属性操作</h3><p><img src="/前端笔记/webapis-day01/1550735556297.png" alt="1550735556297"></p><p><strong>获取属性的值</strong></p><blockquote><p>元素对象.属性名</p></blockquote><p><strong>设置属性的值</strong></p><blockquote><p>元素对象.属性名 = 值</p></blockquote><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="hljs-string">"ldh"</span>&gt;刘德华&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button id="zxy"&gt;张学友&lt;/</span>button&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span><br><span class="line">    &lt;img src="images/ldh.jpg" alt="" title="刘德华"&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 修改元素属性  src</span><br><span class="line">        // 1. 获取元素</span><br><span class="line">        var ldh = document.getElementById('ldh');</span><br><span class="line">        var zxy = document.getElementById('zxy');</span><br><span class="line">        var img = document.querySelector('img');</span><br><span class="line">        // 2. 注册事件  处理程序</span><br><span class="line">        zxy.onclick = function() &#123;</span><br><span class="line">            img.src = 'images/zxy.jpg';</span><br><span class="line">            img.title = '张学友思密达';</span><br><span class="line">        &#125;</span><br><span class="line">        ldh.onclick = function() &#123;</span><br><span class="line">            img.src = 'images/ldh.jpg';</span><br><span class="line">            img.title = '刘德华';</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="案例：分时问候"><a href="#案例：分时问候" class="headerlink" title="案例：分时问候"></a>案例：分时问候</h3><p><img src="/前端笔记/webapis-day01/1550735858049.png" alt="1550735858049"></p><p><img src="/前端笔记/webapis-day01/1550735877145.png" alt="1550735877145"></p><h3 id="表单元素的属性操作"><a href="#表单元素的属性操作" class="headerlink" title="表单元素的属性操作"></a>表单元素的属性操作</h3><p><img src="/前端笔记/webapis-day01/1550736039005.png" alt="1550736039005"></p><p><strong>获取属性的值</strong></p><blockquote><p>元素对象.属性名</p></blockquote><p><strong>设置属性的值</strong></p><blockquote><p>元素对象.属性名 = 值</p><p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p></blockquote><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;input type="text" value="输入内容"&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 获取元素</span></span><br><span class="line"><span class="hljs-regexp">        var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">        var input = document.querySelector('input');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 2. 注册事件 处理程序</span></span><br><span class="line"><span class="hljs-regexp">        btn.onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 表单里面的值 文字内容是通过 value 来修改的</span></span><br><span class="line"><span class="hljs-regexp">            input.value = '被点击了';</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ btn.disabled = true;</span></span><br><span class="line"><span class="hljs-regexp">            this.disabled = true;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ this 指向的是事件函数的调用者 btn</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：仿京东显示密码"><a href="#案例：仿京东显示密码" class="headerlink" title="案例：仿京东显示密码"></a>案例：仿京东显示密码</h3><p><img src="/前端笔记/webapis-day01/1550736330331.png" alt="1550736330331"></p><p><img src="/前端笔记/webapis-day01/1550736346822.png" alt="1550736346822"></p><h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><p><strong>常用方式</strong></p><p><img src="/前端笔记/webapis-day01/1550736488634.png" alt="1550736488634"></p><h4 id="方式1：通过操作style属性"><a href="#方式1：通过操作style属性" class="headerlink" title="方式1：通过操作style属性"></a>方式1：通过操作style属性</h4><blockquote><p>元素对象的style属性也是一个对象！</p><p>元素对象.style.样式属性 = 值;</p></blockquote><p><img src="/前端笔记/webapis-day01/1550736620181.png" alt="1550736620181"></p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">        <span class="hljs-comment">// 2. 注册事件 处理程序</span></span><br><span class="line">        div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// div.style里面的属性 采取驼峰命名法 </span></span><br><span class="line">            <span class="hljs-keyword">this</span>.style.backgroundColor = <span class="hljs-string">'purple'</span>;</span><br><span class="line">            <span class="hljs-keyword">this</span>.style.width = <span class="hljs-string">'250px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h4 id="案例：淘宝点击关闭二维码"><a href="#案例：淘宝点击关闭二维码" class="headerlink" title="案例：淘宝点击关闭二维码"></a>案例：淘宝点击关闭二维码</h4><p><img src="/前端笔记/webapis-day01/1550736843659.png" alt="1550736843659"></p><p><img src="/前端笔记/webapis-day01/1550736881832.png" alt="1550736881832"></p><h4 id="案例：循环精灵图背景"><a href="#案例：循环精灵图背景" class="headerlink" title="案例：循环精灵图背景"></a>案例：循环精灵图背景</h4><p><img src="/前端笔记/webapis-day01/1550736940082.png" alt="1550736940082"></p><p><img src="/前端笔记/webapis-day01/1550736956754.png" alt="1550736956754"></p><h4 id="案例：显示隐藏文本框内容"><a href="#案例：显示隐藏文本框内容" class="headerlink" title="案例：显示隐藏文本框内容"></a>案例：显示隐藏文本框内容</h4><p><img src="/前端笔记/webapis-day01/1550737006593.png" alt="1550737006593"></p><p><img src="/前端笔记/webapis-day01/1550737019729.png" alt="1550737019729"></p><h4 id="方式2：通过操作className属性"><a href="#方式2：通过操作className属性" class="headerlink" title="方式2：通过操作className属性"></a>方式2：通过操作className属性</h4><blockquote><p>元素对象.className = 值;</p><p>因为class是关键字，所有使用className。</p></blockquote><p><img src="/前端笔记/webapis-day01/1550737214510.png" alt="1550737214510"></p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"first"</span>&gt;文本&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span><br><span class="line"><span class="hljs-regexp">        var test = document.querySelector('div');</span></span><br><span class="line"><span class="hljs-regexp">        test.onclick = function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ this.style.backgroundColor = 'purple';</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ this.style.color = '#fff';</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ this.style.fontSize = '25px';</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ this.style.marginTop = '100px';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ this.className = 'change';</span></span><br><span class="line"><span class="hljs-regexp">            this.className = 'first change';</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例：密码框格式提示错误信息"><a href="#案例：密码框格式提示错误信息" class="headerlink" title="案例：密码框格式提示错误信息"></a>案例：密码框格式提示错误信息</h4><p><img src="/前端笔记/webapis-day01/1550737269546.png" alt="1550737269546"></p><p><img src="/前端笔记/webapis-day01/1550737284218.png" alt="1550737284218"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.操作元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/webapis-day01/1550737354861.png&quot; alt=&quot;1550737354861&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day06/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day06/</id>
    <published>2020-05-23T06:09:26.000Z</published>
    <updated>2020-05-23T07:03:07.638Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.内置对象</p></blockquote><h1 id="JavaScript基础第06天笔记"><a href="#JavaScript基础第06天笔记" class="headerlink" title="JavaScript基础第06天笔记"></a>JavaScript基础第06天笔记</h1><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="内置对象-1"><a href="#内置对象-1" class="headerlink" title="内置对象"></a>内置对象</h3><p>​         JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    </p><a id="more"></a><h3 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h3><p>​        查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。<br>​        Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>​        MDN:<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>​        Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​    注意：上面的方法使用时必须带括号</p><p>​    <strong>获取指定范围内的随机整数</strong>：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>​         Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用Date实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> future = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2019/5/1'</span>);</span><br></pre></td></tr></table></figure><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></li><li><p>使用Date实例的方法和属性    </p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%871.png" alt></p></li><li><p>通过Date实例获取总毫米数</p><ul><li><p>总毫秒数的含义</p><p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 实例化Date对象</span></span><br><span class="line"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line"><span class="hljs-comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(date.valueOf())</span><br><span class="line"><span class="hljs-built_in">console</span>.log(date.getTime())</span><br><span class="line"><span class="hljs-comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="hljs-keyword">var</span> now = + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line"><span class="hljs-comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="hljs-keyword">var</span> now = <span class="hljs-built_in">Date</span>.now();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-string">"test"</span>,<span class="hljs-literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br></pre></td></tr></table></figure><p>​    注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p><p>​    参数传递规则如下：</p><ul><li><p>如果只传入一个参数，则参数规定了数组的长度</p></li><li><p>如果传入了多个参数，则参数称为数组的元素</p></li></ul></li></ul></li></ul><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr));   <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(obj));   <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4><ul><li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%872.png" alt></p><p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p></li></ul><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%873.png" alt></p><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%874.png" alt></p></li></ul><h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%875.png" alt></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%876.png" alt></p></li></ul><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>​        为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>​        基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'andy'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><p>​        按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>​        js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">'andy'</span>);</span><br><span class="line"><span class="hljs-comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="hljs-comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="hljs-literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>​        指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>​        当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>​        由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%877.png" alt></p><p>​        案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li>先查找第一个o出现的位置</li><li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找     </li></ol><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%878.png" alt></p><p>​        在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%879.png" alt></p><p>​        案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p></li><li><p>遍历对象，得到最大值和该字符     </p><p>​    注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8710.png" alt></p><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>​        replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>​        split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>​        其使用格式如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(&quot;分割字符&quot;)</span><br></pre></td></tr></table></figure><h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>​        <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>​        <strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8711.png" alt></p><ul><li><p>简单数据类型的存储方式</p><p>​        值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8712.png" alt></p><ul><li><p>复杂数据类型的存储方式</p><p>​        引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8713.png" alt></p></li></ul><h3 id="简单类型传参"><a href="#简单类型传参" class="headerlink" title="简单类型传参"></a>简单类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(x)；</span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8714.png" alt></p><h3 id="复杂数据类型传参"><a href="#复杂数据类型传参" class="headerlink" title="复杂数据类型传参"></a>复杂数据类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>) </span>&#123; <span class="hljs-comment">// x = p</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">    x.name = <span class="hljs-string">"张学友"</span>;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"刘德华"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 1. 这个输出什么 ?   </span></span><br><span class="line">f1(p);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 4. 这个输出什么 ?</span></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8715.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.内置对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第06天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第06天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第06天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第06天笔记&lt;/h1&gt;&lt;h2 id=&quot;内置对象&quot;&gt;&lt;a href=&quot;#内置对象&quot; class=&quot;headerlink&quot; title=&quot;内置对象&quot;&gt;&lt;/a&gt;内置对象&lt;/h2&gt;&lt;h3 id=&quot;内置对象-1&quot;&gt;&lt;a href=&quot;#内置对象-1&quot; class=&quot;headerlink&quot; title=&quot;内置对象&quot;&gt;&lt;/a&gt;内置对象&lt;/h3&gt;&lt;p&gt;​         JavaScript 中的对象分为3种：&lt;strong&gt;自定义对象 、内置对象、 浏览器对象&lt;/strong&gt;&lt;br&gt;​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是&lt;strong&gt;最基本而必要的功能&lt;/strong&gt;（属性和方法），内置对象最大的优点就是帮助我们快速开发&lt;/p&gt;
&lt;p&gt;​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    &lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day05/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day05/</id>
    <published>2020-05-23T06:05:51.000Z</published>
    <updated>2020-05-23T06:16:46.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.作用域</p></blockquote><h1 id="JavaScript基础第05天笔记"><a href="#JavaScript基础第05天笔记" class="headerlink" title="JavaScript基础第05天笔记"></a>JavaScript基础第05天笔记</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="作用域概述"><a href="#作用域概述" class="headerlink" title="作用域概述"></a>作用域概述</h3><pre><code>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</code></pre><p>JavaScript（es6前）中的作用域有两种：</p><ul><li><p>全局作用域</p></li><li><p>局部作用域（函数作用域）    </p><a id="more"></a><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>  作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p></li></ul><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><pre><code>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</code></pre><h3 id="JS没有块级作用域"><a href="#JS没有块级作用域" class="headerlink" title="JS没有块级作用域"></a>JS没有块级作用域</h3><ul><li><p>块作用域由 { } 包括。</p></li><li><p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：    </p><p>java有块级作用域：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span>)&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> num = <span class="hljs-number">123</span>;</span><br><span class="line">  system.out.print(num);  <span class="hljs-comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num);    <span class="hljs-comment">// 报错</span></span><br></pre></td></tr></table></figure><p>以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；</p><p>而与之类似的JavaScript代码，则不会报错：</p></li></ul><p>  Js中没有块级作用域（在ES6之前）</p>  <figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>); <span class="hljs-comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);   <span class="hljs-comment">//123</span></span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><pre><code>在JavaScript中，根据作用域的不同，变量可以分为两种：</code></pre><ul><li>全局变量</li><li>局部变量</li></ul><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><pre><code>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</code></pre><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><pre><code>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</code></pre><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><h3 id="全局变量和局部变量的区别"><a href="#全局变量和局部变量的区别" class="headerlink" title="全局变量和局部变量的区别"></a>全局变量和局部变量的区别</h3><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><pre><code>只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链案例分析1：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">456</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript-day05/%E5%9B%BE%E7%89%871(1).png" alt></p><pre><code>作用域链：采取就近原则的方式来查找变量最终的值。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">var</span> b = <span class="hljs-string">'22'</span>;</span><br><span class="line">    fn2();</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;</span><br><span class="line">        fn3();</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//a的值 ?</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">//b的值 ?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript-day05/%E5%9B%BE%E7%89%872.png" alt></p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><h3 id="预解析的相关概念"><a href="#预解析的相关概念" class="headerlink" title="预解析的相关概念"></a>预解析的相关概念</h3><pre><code>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。</code></pre><ul><li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p></li><li><p>代码执行： 从上到下执行JS语句。</p><p><strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p></li></ul><h3 id="变量预解析"><a href="#变量预解析" class="headerlink" title="变量预解析"></a>变量预解析</h3><pre><code>预解析也叫做变量、函数提升。变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(num);  <span class="hljs-comment">// 结果是多少？</span></span><br><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;      <span class="hljs-comment">// ？</span></span><br></pre></td></tr></table></figure><pre><code>结果：undefined注意：**变量提升只提升声明，不提升赋值**</code></pre><h3 id="函数预解析"><a href="#函数预解析" class="headerlink" title="函数预解析"></a>函数预解析</h3><pre><code>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'打印'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>结果：控制台打印字符串 --- ”打印“ 注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！    </code></pre><h3 id="函数表达式声明函数问题"><a href="#函数表达式声明函数问题" class="headerlink" title="函数表达式声明函数问题"></a>函数表达式声明函数问题</h3><pre><code>函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="hljs-keyword">var</span>  fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'想不到吧'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>结果：报错提示 ”fn is not a function&quot;解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用</code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的相关概念"><a href="#对象的相关概念" class="headerlink" title="对象的相关概念"></a>对象的相关概念</h3><ul><li><p>什么是对象？</p><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><pre><code>对象是由属性和方法组成的。</code></pre><ul><li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p></li><li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p><p><img src="/前端笔记/javascript-day05/%E5%9B%BE%E7%89%873.png" alt></p></li></ul></li><li><p>为什么需要对象？</p><p>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。</p><pre><code>如果要保存一个人的完整信息呢？例如，将“张三疯”的个人的信息保存在数组中的方式为：</code></pre><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [‘张三疯’, ‘男&apos;, 128,154];</span><br></pre></td></tr></table></figure><pre><code>上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。使用对象记录上组数据为：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="hljs-string">"name"</span>:<span class="hljs-string">"张三疯"</span>,</span><br><span class="line">    <span class="hljs-string">"sex"</span>:<span class="hljs-string">"男"</span>,</span><br><span class="line">    <span class="hljs-string">"age"</span>:<span class="hljs-number">128</span>,</span><br><span class="line">    <span class="hljs-string">"height"</span>:<span class="hljs-number">154</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>JS中的对象表达结构更清晰，更强大。</code></pre></li></ul><h3 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h3><ul><li><p>利用字面量创建对象 </p><h5 id="使用对象字面量创建对象："><a href="#使用对象字面量创建对象：" class="headerlink" title="使用对象字面量创建对象："></a><strong>使用对象字面量创建对象</strong>：</h5><pre><code>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示 </code></pre><ul><li><p>键：相当于属性名</p></li><li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p><p>代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="hljs-string">'pink'</span>,</span><br><span class="line">    age : <span class="hljs-number">18</span>,</span><br><span class="line">    sex : <span class="hljs-string">'男'</span>,</span><br><span class="line">    sayHi : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="hljs-string">'大家好啊~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述代码中 star即是创建的对象。</p></li></ul></li><li><p>对象的使用</p><ul><li><p>对象的属性</p><ul><li>对象中存储<strong>具体数据</strong>的 “键值对”中的 “键”称为对象的属性，即对象中存储具体数据的项</li></ul></li><li><p>对象的方法</p><ul><li>对象中存储<strong>函数</strong>的 “键值对”中的 “键”称为对象的方法，即对象中存储函数的项</li></ul></li><li><p>访问对象的属性</p><ul><li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p></li><li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号      </p><p>示例代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(star.name)     <span class="hljs-comment">// 调用名字属性</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(star[<span class="hljs-string">'name'</span>])  <span class="hljs-comment">// 调用名字属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用对象的方法</p><ul><li><p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </p><p>示例代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">star.sayHi();              <span class="hljs-comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量、属性、函数、方法总结</p><p>属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器</p><ul><li>变量：单独声明赋值，单独存在</li><li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li></ul></li></ul></li></ul><pre><code>    方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器- 函数：单独存在的，通过“函数名()”的方式就可以调用- 方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。 </code></pre><ul><li><p>利用 new Object 创建对象 </p><ul><li><p>创建空对象</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> andy = <span class="hljs-keyword">new</span> Obect();</span><br></pre></td></tr></table></figure><p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p></li><li><p>给空对象添加属性和方法</p><ul><li><p>通过对象操作属性和方法的方式，来为对象增加属性和方法</p><p>示例代码如下：</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">andy.name = <span class="hljs-string">'pink'</span>;</span><br><span class="line">andy.age = <span class="hljs-number">18</span>;</span><br><span class="line">andy.sex = <span class="hljs-string">'男'</span>;</span><br><span class="line">andy.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="hljs-string">'大家好啊~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Object() ：第一个字母大写   </li><li>new Object() ：需要 new 关键字</li><li>使用的格式：对象.属性 =  值;     </li></ul></li></ul></li><li><p>利用构造函数创建对象</p><ul><li><p>构造函数</p><ul><li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p></li><li><p>构造函数的封装格式：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>,形参<span class="hljs-number">3</span></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.属性名<span class="hljs-number">1</span> = 参数<span class="hljs-number">1</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.属性名<span class="hljs-number">2</span> = 参数<span class="hljs-number">2</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.属性名<span class="hljs-number">3</span> = 参数<span class="hljs-number">3</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数的调用格式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = new 构造函数名(实参1，实参2，实参3)</span><br></pre></td></tr></table></figure><p>以上代码中，obj即接收到构造函数创建出来的对象。</p></li><li><p>注意事项</p><ol><li>构造函数约定<strong>首字母大写</strong>。</li><li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>构造函数中<strong>不需要 return 返回结果</strong>。</li><li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ol></li><li><p>其他</p><p>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p></li></ul></li></ul></li><li><p>new关键字的作用</p><ol><li>在构造函数代码开始执行之前，创建一个空对象；</li><li>修改this的指向，把this指向创建出来的空对象；</li><li>执行函数的代码</li><li>在函数完成之后，返回this—即创建出来的对象</li></ol><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><pre><code>for...in 语句用于对数组或者对象的属性进行循环操作。其语法如下：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="hljs-comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(k);      <span class="hljs-comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第05天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第05天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第05天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第05天笔记&lt;/h1&gt;&lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;h3 id=&quot;作用域概述&quot;&gt;&lt;a href=&quot;#作用域概述&quot; class=&quot;headerlink&quot; title=&quot;作用域概述&quot;&gt;&lt;/a&gt;作用域概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JavaScript（es6前）中的作用域有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局作用域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局部作用域（函数作用域）    &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day04/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day04/</id>
    <published>2020-05-23T06:02:38.000Z</published>
    <updated>2020-05-23T06:05:41.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.数组</p></blockquote><h1 id="JavaScript基础第04天笔记"><a href="#JavaScript基础第04天笔记" class="headerlink" title="JavaScript基础第04天笔记"></a>JavaScript基础第04天笔记</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><ul><li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li><li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。<a id="more"></a><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3></li></ul><p>JS 中创建数组有两种方式：</p><ul><li><p>利用  new 创建数组  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> 数组名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() ；</span><br><span class="line"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();   <span class="hljs-comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure><p>注意 Array () ，A 要大写    </p></li><li><p>利用数组字面量创建数组</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="hljs-keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="hljs-comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="hljs-keyword">var</span>  数组名 = [<span class="hljs-string">'小白'</span>,<span class="hljs-string">'小黑'</span>,<span class="hljs-string">'大黄'</span>,<span class="hljs-string">'瑞奇'</span>];</span><br></pre></td></tr></table></figure><ul><li>数组的字面量是方括号 [ ] </li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-string">'小白'</span>,<span class="hljs-number">12</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">28.9</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h3><p>​        索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%871.png" alt></p><p>​        数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 定义数组</span></span><br><span class="line"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="line"><span class="hljs-comment">// 获取数组中的第2个元素</span></span><br><span class="line">alert(arrStus[<span class="hljs-number">1</span>]);</span><br></pre></td></tr></table></figure><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><ul><li><p>数组遍历</p><p>​        把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'red'</span>,<span class="hljs-string">'green'</span>, <span class="hljs-string">'blue'</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(arrStus[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>数组的长度</p><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="line">alert(arrStus.length);  <span class="hljs-comment">// 3</span></span><br></pre></td></tr></table></figure><p>  <strong>注意</strong>：</p><ul><li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li></ul></li><li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p><ul><li>数组的length属性可以被修改：</li></ul></li><li><p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p><ul><li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li></ul></li></ul><h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><p>​        数组中可以通过以下方式在数组的末尾插入新元素：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组[ 数组.length ] = 新数据;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><p>​        在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p><p>​        函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。  </p><h3 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 声明函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>function 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p></li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 调用函数</span></span><br><span class="line">函数名();  <span class="hljs-comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%872.png" alt></p><p>例子：封装计算1-100累加和</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* </span></span><br><span class="line"><span class="hljs-comment">   计算1-100之间值的函数</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-comment">// 声明函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> sumNum = <span class="hljs-number">0</span>;<span class="hljs-comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">    sumNum += i;<span class="hljs-comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  alert(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 调用函数</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="函数参数语法"><a href="#函数参数语法" class="headerlink" title="函数参数语法"></a>函数参数语法</h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%873.png" alt></p><p>​    参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p><p>函数参数的运用：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 带参数的函数声明</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>, 形参<span class="hljs-number">2</span> , 形参<span class="hljs-number">3.</span>..</span>) </span>&#123; <span class="hljs-comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="hljs-comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>, 实参<span class="hljs-number">3.</span>..);</span><br></pre></td></tr></table></figure><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol></li></ul><h4 id="函数形参和实参数量不匹配时"><a href="#函数形参和实参数量不匹配时" class="headerlink" title="函数形参和实参数量不匹配时"></a>函数形参和实参数量不匹配时</h4><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%874.png" alt></p><pre><code>注意：在JavaScript中，形参的默认值是undefined。</code></pre><p>小结：</p><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 声明函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名（）</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="hljs-keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="hljs-comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><p>​        当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h3><pre><code>函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</code></pre><h3 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用函数关键字 function 自定义函数方式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 声明定义方式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="hljs-comment">// 调用  </span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul></li><li><p>函数表达式方式(匿名函数）</p><p>利用函数表达式方式的写法如下： </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="hljs-comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个fn 里面存储的是一个函数  </li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第04天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第04天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第04天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第04天笔记&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;数组的概念&quot;&gt;&lt;a href=&quot;#数组的概念&quot; class=&quot;headerlink&quot; title=&quot;数组的概念&quot;&gt;&lt;/a&gt;数组的概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。&lt;/li&gt;
&lt;li&gt;数组是指&lt;strong&gt;一组数据的集合&lt;/strong&gt;，其中的每个数据被称作&lt;strong&gt;元素&lt;/strong&gt;，在数组中可以&lt;strong&gt;存放任意类型的元素&lt;/strong&gt;。数组是一种将一组数据存储在单个变量名下的优雅方式。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day03/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day03/</id>
    <published>2020-05-23T05:58:35.000Z</published>
    <updated>2020-05-23T06:03:05.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.循环</p></blockquote><h1 id="JavaScript基础第03天笔记"><a href="#JavaScript基础第03天笔记" class="headerlink" title="JavaScript基础第03天笔记"></a>JavaScript基础第03天笔记</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;</span><br><span class="line">    <span class="hljs-comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>初始化变量</td><td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td></tr><tr><td>条件表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr><tr><td>操作表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr></tbody></table></li></ul><a id="more"></a><p>  执行过程：</p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li></ol><ul><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li></ul><ol><li>执行操作表达式，此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。</li><li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li></ol><p>断点调试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">断点调试的流程：</span><br><span class="line">1、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br><span class="line">2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</span><br><span class="line">3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br></pre></td></tr></table></figure><ul><li><p>for 循环重复相同的代码</p><p>比如输出10句“媳妇我错了”</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//  基本写法</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'媳妇我错了~'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 用户输入次数</span></span><br><span class="line"><span class="hljs-keyword">var</span> num = prompt(<span class="hljs-string">'请输入次数:'</span>)；</span><br><span class="line"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'媳妇我错了~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for 循环重复不相同的代码</p><p>例如，求输出1到100岁：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//  基本写法</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年'</span> + i + <span class="hljs-string">'岁了'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，求输出1到100岁，并提示出生、死亡</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// for 里面是可以添加其他语句的 </span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line"> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年1岁了， 它出生了'</span>);</span><br><span class="line"> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">100</span>) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年100岁了，它死了'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年'</span> + i + <span class="hljs-string">'岁了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。</p></li></ul><h3 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h3><ul><li><p>双重 for 循环概述</p><pre><code>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</code></pre></li><li><p>双重 for 循环语法</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;  </span><br><span class="line">       需执行的代码;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层循环可以看做外层循环的循环体语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序 </li><li>外层循环执行一次，内层循环要执行全部次数</li></ul></li><li><p>打印五行五列星星</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> star = <span class="hljs-string">''</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;</span><br><span class="line">      star += <span class="hljs-string">'☆'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 每次满 5个星星 就 加一次换行</span></span><br><span class="line">    star += <span class="hljs-string">'\n'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure><p>核心逻辑：</p><p>1.内层循环负责一行打印五个星星</p><p>2.外层循环负责打印五行</p></li><li><p>for 循环小结</p><ul><li>for 循环可以重复执行某些相同代码</li><li>for 循环可以重复执行些许不同的代码，因为我们有计数器</li><li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li><li>随着需求增加，双重for循环可以做更多、更好看的效果</li><li>双重 for 循环，外层循环一次，内层 for 循环全部执行</li><li>for 循环是循环条件和数字直接相关的循环</li></ul></li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while语句的语法结构如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="hljs-comment">// 循环体代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行思路：</p><ul><li>1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li>2 执行循环体代码</li><li>3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ul><p>注意：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li></ul><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p>do… while 语句的语法结构如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">do</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="hljs-keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><p>执行思路</p><ul><li><p>1 先执行一次循环体代码 </p></li><li><p>2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码    </p><p>注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码</p></li></ul><h3 id="continue、break"><a href="#continue、break" class="headerlink" title="continue、break"></a>continue、break</h3><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个包子有虫子，扔掉'</span>);</span><br><span class="line">        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳出本次循环，跳出的是第3次循环 </span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/前端笔记/javascript-day03/%E5%9B%BE%E7%89%871.png" alt></p><p>  break 关键字用于立即跳出整个循环（循环结束）。</p><p>  例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p>  <figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  运行结果：</p><p>  <img src="/前端笔记/javascript-day03/%E5%9B%BE%E7%89%872.png" alt></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词  </li><li>函数的名称一般用动词  </li></ul><h3 id="操作符规范"><a href="#操作符规范" class="headerlink" title="操作符规范"></a>操作符规范</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 操作符的左右两侧各保留一个空格</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行注释规范"><a href="#单行注释规范" class="headerlink" title="单行注释规范"></a>单行注释规范</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 单行注释前面注意有个空格</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h3><pre><code>关键词、操作符之间后加空格</code></pre><p><img src="/前端笔记/javascript-day03/%E5%9B%BE%E7%89%873-1590213671361.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第03天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第03天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第03天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第03天笔记&lt;/h1&gt;&lt;h2 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h2&gt;&lt;h3 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法结构&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(初始化变量; 条件表达式; 操作表达式 )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//循环体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;初始化变量&lt;/td&gt;
&lt;td&gt;通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;条件表达式&lt;/td&gt;
&lt;td&gt;用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作表达式&lt;/td&gt;
&lt;td&gt;用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day02/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day02/</id>
    <published>2020-05-23T05:50:16.000Z</published>
    <updated>2020-05-23T05:58:12.333Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.运算符</p></blockquote><h1 id="JavaScript基础第02天"><a href="#JavaScript基础第02天" class="headerlink" title="JavaScript基础第02天"></a>JavaScript基础第02天</h1><h2 id="运算符（操作符）"><a href="#运算符（操作符）" class="headerlink" title="运算符（操作符）"></a>运算符（操作符）</h2><h3 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h3><p><strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><pre><code>JavaScript中常用的运算符有：</code></pre><ul><li><p>算数运算符</p></li><li><p>递增和递减运算符</p></li><li><p>比较运算符</p></li><li><p>逻辑运算符</p></li><li><p>赋值运算符</p><a id="more"></a><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3></li><li><p>算术运算符概述</p><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%871.png" alt></p></li><li><p>浮点数的精度问题</p><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;    <span class="hljs-comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>);   <span class="hljs-comment">// 结果不是 7，  而是：7.000000000000001</span></span><br></pre></td></tr></table></figure><p>所以：不要直接判断两个浮点数是否相等 ! </p></li><li><p>表达式和返回值</p><p>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p>简单理解：是由数字、运算符、变量等组成的式子</p><p>表达式最终都会有一个结果，返回给开发者，称为返回值</p></li></ul><h3 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h3><ul><li><p>递增和递减运算符概述</p><p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。</p><pre><code>在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。注意：递增和递减运算符必须和变量配合使用。 </code></pre></li><li><p>递增运算符</p><ul><li><p>前置递增运算符</p><p>  ++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p><p>  使用口诀：先自加，后返回值</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;</span><br><span class="line">alert(++num + <span class="hljs-number">10</span>);   <span class="hljs-comment">// 21</span></span><br></pre></td></tr></table></figure><ul><li><p>后置递增运算符</p><p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p><p>使用口诀：先返回原值，后自加 </p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;</span><br><span class="line">alert(<span class="hljs-number">10</span> + num++);  <span class="hljs-comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li><p>比较运算符概述</p><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%872.png" alt></p></li><li><p>等号比较</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%873.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> == <span class="hljs-string">'18'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> === <span class="hljs-string">'18'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>逻辑运算符概述</p><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%874.png" alt></p></li><li><p>逻辑与&amp;&amp;</p><p>两边都是 true才返回 true，否则返回 false</p></li></ul><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%875.png" alt></p><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%876.png" alt></p><ul><li><p>逻辑或 ||</p><p>两边都是 true才返回 true，否则返回 false</p></li></ul><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%877.png" alt></p><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%878.png" alt></p><ul><li><p>逻辑非 ！</p><p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> isOk = !<span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(isOk);  <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>短路运算（逻辑中断）</p><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><ul><li><p>逻辑与</p><p>语法： 表达式1 &amp;&amp; 表达式2</p><pre><code>- 如果第一个表达式的值为真，则返回表达式2- 如果第一个表达式的值为假，则返回表达式1</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span> );        <span class="hljs-comment">// 456</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span> );          <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>&amp;&amp; <span class="hljs-number">789</span> );  <span class="hljs-comment">// 789</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑或</p><p>语法： 表达式1 || 表达式2</p><pre><code>- 如果第一个表达式的值为真，则返回表达式1- 如果第一个表达式的值为假，则返回表达式2</code></pre> <figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> );         <span class="hljs-comment">//  123</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> ||  <span class="hljs-number">456</span> );          <span class="hljs-comment">//  456</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> || <span class="hljs-number">789</span> );  <span class="hljs-comment">//  123</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><pre><code>概念：用来把数据赋值给变量的运算符。</code></pre><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%879.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;</span><br><span class="line">age += <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8710.png" alt></p><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="流程控制概念"><a href="#流程控制概念" class="headerlink" title="流程控制概念"></a>流程控制概念</h3><pre><code>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。简单理解：**流程控制就是来控制代码按照一定结构顺序来执行**流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。</code></pre><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8711.png" alt></p><h3 id="顺序流程控制"><a href="#顺序流程控制" class="headerlink" title="顺序流程控制"></a>顺序流程控制</h3><p>​    </p><p>​    顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br>​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8712.png" alt></p><h3 id="分支流程控制"><a href="#分支流程控制" class="headerlink" title="分支流程控制"></a>分支流程控制</h3><ul><li><p>分支结构</p><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><pre><code>![](JavaScript-Day02/%E5%9B%BE%E7%89%8713.png)</code></pre><p>  JS 语言提供了两种分支结构语句：if 语句、switch 语句</p></li><li><p>if 语句</p><ul><li>语法结构</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="hljs-keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="hljs-comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</code></pre><ul><li><p>执行流程</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8714.png" alt></p></li></ul></li><li><p>if else语句（双分支语句）</p><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span></span><br><span class="line"><span class="hljs-keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="hljs-comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行流程</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8715.png" alt></p></li></ul></li><li><p>if else if 语句(多分支语句)</p><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 适合于检查多重条件。</span></span><br><span class="line"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;</span><br><span class="line">    语句<span class="hljs-number">1</span>；</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>)  &#123;</span><br><span class="line">    语句<span class="hljs-number">2</span>；</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>)  &#123;</span><br><span class="line">   语句<span class="hljs-number">3</span>；</span><br><span class="line"> ....</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行逻辑</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8716.png" alt></p></li></ul></li></ul><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="hljs-number">1</span> ? 表达式<span class="hljs-number">2</span> : 表达式<span class="hljs-number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行思路</p><ul><li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li><li>简单理解： 就类似于  if  else （双分支） 的简写</li></ul></li></ul><h3 id="switch分支流程控制"><a href="#switch分支流程控制" class="headerlink" title="switch分支流程控制"></a>switch分支流程控制</h3><ul><li><p>语法结构</p><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">switch</span>( 表达式 )&#123; </span><br><span class="line">    <span class="hljs-keyword">case</span> value1:</span><br><span class="line">        <span class="hljs-comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> value2:</span><br><span class="line">        <span class="hljs-comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">        <span class="hljs-comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>switch ：开关 转换  ， case ：小例子   选项</p></li><li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p></li><li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p></li><li><p>switch 表达式的值会与结构中的 case 的值做比较 </p></li><li><p>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p></li><li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p></li></ul></li><li><p>switch 语句和 if else if 语句的区别</p><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</li><li>当分支比较少时，if… else语句的执行效率比 switch语句高。</li><li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.运算符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第02天&quot;&gt;&lt;a href=&quot;#JavaScript基础第02天&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第02天&quot;&gt;&lt;/a&gt;JavaScript基础第02天&lt;/h1&gt;&lt;h2 id=&quot;运算符（操作符）&quot;&gt;&lt;a href=&quot;#运算符（操作符）&quot; class=&quot;headerlink&quot; title=&quot;运算符（操作符）&quot;&gt;&lt;/a&gt;运算符（操作符）&lt;/h2&gt;&lt;h3 id=&quot;运算符的分类&quot;&gt;&lt;a href=&quot;#运算符的分类&quot; class=&quot;headerlink&quot; title=&quot;运算符的分类&quot;&gt;&lt;/a&gt;运算符的分类&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;运算符&lt;/strong&gt;（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JavaScript中常用的运算符有：&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;算数运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递增和递减运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比较运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;赋值运算符&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day01/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day01/</id>
    <published>2020-05-23T05:42:55.000Z</published>
    <updated>2020-05-23T06:20:31.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.变量</p></blockquote><h1 id="JavaScript基础第01天"><a href="#JavaScript基础第01天" class="headerlink" title="JavaScript基础第01天"></a>JavaScript基础第01天</h1><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul><li><p>编程：</p><ul><li>就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</li></ul></li><li><p>计算机程序：</p><ul><li>就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。<a id="more"></a><h3 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h3></li></ul></li><li><p>计算机语言指用于人与计算机之间通讯的语言，它是人与计算机之间传递信息的媒介。</p></li><li><p>计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。</p></li><li><p>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%871.png" alt></p></li></ul><h3 id="编程语言-1"><a href="#编程语言-1" class="headerlink" title="编程语言"></a>编程语言</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编程语言：</span><br><span class="line">可以通过类似于人类语言的“语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。如今通用的编程语言有两种形式：汇编语言和高级语言。</span><br></pre></td></tr></table></figure><table><thead><tr><th>语言类型</th><th align="center">说明</th></tr></thead><tbody><tr><td><strong>汇编语言</strong></td><td align="center">汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</td></tr><tr><td><strong>高级语言</strong></td><td align="center">高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</td></tr></tbody></table><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%872.png" alt></p><h3 id="翻译器"><a href="#翻译器" class="headerlink" title="翻译器"></a>翻译器</h3><pre><code>高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。</code></pre><p> <img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%873.png" alt></p><h3 id="编程语言和标记语言区别"><a href="#编程语言和标记语言区别" class="headerlink" title="编程语言和标记语言区别"></a>编程语言和标记语言区别</h3><table><thead><tr><th>语言</th><th>说明</th></tr></thead><tbody><tr><td>编程语言</td><td>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</td></tr><tr><td>标记语言</td><td>标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>计算机可以帮助人类解决某些问题</li><li>程序员利用编程语言编写程序发出指令控制计算机来实现这些任务</li><li>编程语言有机器语言、汇编语言、高级语言</li><li>高级语言需要一个翻译器转换为计算机识别的机器语言</li><li>编程语言是主动的有很强的逻辑性</li></ol><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%874.png" alt></p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%875.png" alt></p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><ol><li>计算机内部使用二进制 0 和 1来表示数据。</li><li>所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。</li><li>所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</li><li>硬盘、内存都是保存的二进制数据。</li></ol><h3 id="数据存储单位"><a href="#数据存储单位" class="headerlink" title="数据存储单位"></a>数据存储单位</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大小关系：bit &lt; byte &lt; kb &lt; GB &lt; TB&lt;.....</span><br></pre></td></tr></table></figure><ul><li>位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）</li><li>字节(Byte)：1B = 8b</li><li>千字节(KB)：1KB = 1024B</li><li>兆字节(MB)：1MB = 1024KB</li><li>吉字节(GB):  1GB = 1024MB</li><li>太字节(TB):  1TB = 1024GB</li></ul><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%876.png" alt></p><pre><code>计算机运行软件的过程：1. 打开某个程序时，先从硬盘中把程序的代码加载到内存中2. CPU执行内存中的代码   注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</code></pre><h2 id="初始JavaScript"><a href="#初始JavaScript" class="headerlink" title="初始JavaScript"></a>初始JavaScript</h2><h3 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%877.png" alt></p><ul><li><p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p></li><li><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p></li><li><p>现在也可以基于 Node.js 技术进行服务器端编程</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%878.png" alt></p></li></ul><h3 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h3><ul><li>表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova) </li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ul><h3 id="HTML-CSS-JS-的关系"><a href="#HTML-CSS-JS-的关系" class="headerlink" title="HTML/CSS/JS 的关系"></a>HTML/CSS/JS 的关系</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%879.png" alt></p><h3 id="浏览器执行-JS-简介"><a href="#浏览器执行-JS-简介" class="headerlink" title="浏览器执行 JS 简介"></a>浏览器执行 JS 简介</h3><p><strong>浏览器分成两部分：渲染引擎和 JS 引擎</strong></p><p><img src="/前端笔记/javascript-day01/neihe.png" alt></p><pre><code>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</code></pre><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8710.png" alt></p><h3 id="JS-的组成"><a href="#JS-的组成" class="headerlink" title="JS 的组成"></a>JS 的组成</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8711.png" alt></p><ol><li><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a><strong>ECMAScript</strong></h4><p>​        ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8712.png" alt></p><p>​        ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview" target="_blank" rel="noopener">MDN手册</a></p></li><li><h4 id="DOM——文档对象模型"><a href="#DOM——文档对象模型" class="headerlink" title="DOM——文档对象模型"></a><strong>DOM——文档对象模型</strong></h4><p>​        <strong>文档对象模型</strong>（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p></li><li><h4 id="BOM——浏览器对象模型"><a href="#BOM——浏览器对象模型" class="headerlink" title="BOM——浏览器对象模型"></a><strong>BOM——浏览器对象模型</strong></h4><p>​        <strong>浏览器对象模型</strong>(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h3 id="JS-初体验"><a href="#JS-初体验" class="headerlink" title="JS 初体验"></a>JS 初体验</h3><pre><code>JS 有3种书写位置，分别为行内、内嵌和外部。</code></pre><ol><li><p>行内式</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点我试试"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('Hello World')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li><li>特殊情况下使用</li></ul></li><li><p>内嵌式</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    alert(<span class="hljs-string">'Hello  World~!'</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以将多行JS代码写到 script 标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul></li><li><p>外部JS文件</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"my.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</li><li>引用外部 JS文件的 script 标签中间不可以写代码</li><li>适合于JS 代码量比较大的情况</li></ul></li></ol><h2 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><pre><code>为了提高代码的可读性，JS与CSS一样，也提供了注释功能。JS中的注释主要有两种，分别是 单行注释 和 多行注释。</code></pre><p>单行注释的注释方式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 我是一行文字，不想被 JS引擎 执行，所以 注释起来</span><br></pre></td></tr></table></figure><pre><code>// 用来注释单行文字（  快捷键   ctrl  +  /   ）</code></pre><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释的注释方式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  获取用户年龄和姓名</span><br><span class="line">  并通过提示框显示出来</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* */  用来注释多行文字（ 默认快捷键  alt +  shift  + a ）</span><br></pre></td></tr></table></figure><p>快捷键修改为：   ctrl + shift  +  /</p><p>vscode → 首选项按钮 → 键盘快捷方式 → 查找 原来的快捷键 → 修改为新的快捷键 → 回车确认</p><h2 id="JavaScript输入输出语句"><a href="#JavaScript输入输出语句" class="headerlink" title="JavaScript输入输出语句"></a>JavaScript输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li></ul><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p><p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。<br><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8713.png" alt></p><h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><pre><code>本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。  </code></pre><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8714.png" alt></p><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><ul><li>变量的声明   </li><li>变量的赋值 </li></ul><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//  声明变量  </span></span><br><span class="line"><span class="hljs-keyword">var</span> age; <span class="hljs-comment">//  声明一个 名称为age 的变量</span></span><br></pre></td></tr></table></figure><ul><li><p>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p></li><li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p></li></ul><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="hljs-number">10</span>; <span class="hljs-comment">// 给 age  这个变量赋值为 10</span></span><br></pre></td></tr></table></figure><ul><li>= 用来把右边的值赋给左边的变量空间中   此处代表赋值的意思</li><li>变量值是程序员保存到变量空间里的值</li></ul><h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age  = <span class="hljs-number">18</span>;  <span class="hljs-comment">// 声明变量同时赋值为 18</span></span><br><span class="line"><span class="hljs-comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span></span><br></pre></td></tr></table></figure><h3 id="变量语法扩展"><a href="#变量语法扩展" class="headerlink" title="变量语法扩展"></a>变量语法扩展</h3><ul><li><p>更新变量</p><p>​        一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;</span><br><span class="line"></span><br><span class="line">age = <span class="hljs-number">81</span>;   <span class="hljs-comment">// 最后的结果就是81因为18 被覆盖掉了</span></span><br></pre></td></tr></table></figure></li><li><p>同时声明多个变量</p><p>​        同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>,  name = <span class="hljs-string">'zs'</span>, sex = <span class="hljs-number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var  age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值  直接使用</td><td>报错</td></tr><tr><td>age   = 10; console.log (age);</td><td>不声明   只赋值</td><td>10</td></tr></tbody></table></li></ul><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><p>规则：</p><ul><li>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</li><li>严格区分大小写。var app; 和 var App; 是两个变量</li><li>不能 以数字开头。  18age   是错误的</li><li>不能 是关键字、保留字。例如：var、for、while</li><li>变量名必须有意义。 MMD   BBD        nl   →     age  </li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName<img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8715.png" alt></li></ul><p>推荐翻译网站： 有道    爱词霸</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型简介"><a href="#数据类型简介" class="headerlink" title="数据类型简介"></a>数据类型简介</h3><ul><li><p>为什么需要数据类型</p><p>​        在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p><pre><code>简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</code></pre></li><li><p>变量的数据类型</p><p>​        变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;        <span class="hljs-comment">// 这是一个数字型</span></span><br><span class="line"><span class="hljs-keyword">var</span> areYouOk = <span class="hljs-string">'是的'</span>;   <span class="hljs-comment">// 这是一个字符串</span></span><br></pre></td></tr></table></figure><p>​        在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">6</span>;           <span class="hljs-comment">// x 为数字</span></span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-string">"Bill"</span>;      <span class="hljs-comment">// x 为字符串</span></span><br></pre></td></tr></table></figure></li><li><p>数据类型的分类</p><p>JS 把数据类型分为两类：</p><ul><li><p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p></li><li><p>复杂数据类型 （object)    </p></li></ul></li></ul><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>简单数据类型（基本数据类型）</p><p>JavaScript 中的简单数据类型及其说明如下：</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8716.png" alt></p><ul><li><p>数字型 Number</p><p>​        JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">21</span>;       <span class="hljs-comment">// 整数</span></span><br><span class="line"><span class="hljs-keyword">var</span> Age = <span class="hljs-number">21.3747</span>;  <span class="hljs-comment">// 小数</span></span><br></pre></td></tr></table></figure><ol><li><p>数字型进制</p><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">07</span>;   <span class="hljs-comment">// 对应十进制的7</span></span><br><span class="line"><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">019</span>;  <span class="hljs-comment">// 对应十进制的19</span></span><br><span class="line"><span class="hljs-keyword">var</span> num3 = <span class="hljs-number">08</span>;   <span class="hljs-comment">// 对应十进制的8</span></span><br><span class="line"> <span class="hljs-comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0xA</span>;</span><br></pre></td></tr></table></figure><p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p></li><li><p>数字型范围</p><p>JavaScript中数值的最大和最小值</p><ul><li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p></li><li><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p></li></ul></li></ol></li></ul><ol start="3"><li><p>数字型三个特殊值</p><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul><ol start="4"><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p></li></ol><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8717.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">var</span> usrAge = <span class="hljs-number">21</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> isOk = <span class="hljs-built_in">isNaN</span>(userAge);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(isNum);          <span class="hljs-comment">// false ，21 不是一个非数字</span></span><br><span class="line"><span class="hljs-keyword">var</span> usrName = <span class="hljs-string">"andy"</span>;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(userName));<span class="hljs-comment">// true ，"andy"是一个非数字</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>字符串型 String</p><p>​        字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">"我爱北京天安门~"</span>;  <span class="hljs-comment">// 使用双引号表示字符串</span></span><br><span class="line"><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">'我爱吃猪蹄~'</span>;    <span class="hljs-comment">// 使用单引号表示字符串</span></span><br><span class="line"><span class="hljs-comment">// 常见错误</span></span><br><span class="line"><span class="hljs-keyword">var</span> strMsg3 = 我爱大肘子;       <span class="hljs-comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span><br></pre></td></tr></table></figure><p>​        因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p><ol><li><p>字符串引号嵌套</p><p>​        JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">'我是"高帅富"程序猿'</span>;   <span class="hljs-comment">// 可以用''包含""</span></span><br><span class="line"><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">"我是'高帅富'程序猿"</span>;  <span class="hljs-comment">// 也可以用"" 包含''</span></span><br><span class="line"><span class="hljs-comment">//  常见错误</span></span><br><span class="line"><span class="hljs-keyword">var</span> badQuotes = <span class="hljs-string">'What on earth?"; // 报错，不能 单双引号搭配</span></span><br></pre></td></tr></table></figure></li><li><p>字符串转义符</p><p>​        类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>​        转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n   是   newline   的意思</td></tr><tr><td>\ \</td><td>斜杠   \</td></tr><tr><td>&#39;</td><td>‘   单引号</td></tr><tr><td>&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab  缩进</td></tr><tr><td>\b</td><td>空格 ，b   是   blank  的意思</td></tr></tbody></table></li><li><p>字符串长度</p><p>​        字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">"我是帅气多金的程序猿！"</span>;</span><br><span class="line">alert(strMsg.length); <span class="hljs-comment">// 显示 11</span></span><br></pre></td></tr></table></figure></li><li><p>字符串拼接</p><ul><li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p></li><li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1.1 字符串 "相加"</span></span><br><span class="line">alert(<span class="hljs-string">'hello'</span> + <span class="hljs-string">' '</span> + <span class="hljs-string">'world'</span>); <span class="hljs-comment">// hello world</span></span><br><span class="line"><span class="hljs-comment">//1.2 数值字符串 "相加"</span></span><br><span class="line">alert(<span class="hljs-string">'100'</span> + <span class="hljs-string">'100'</span>); <span class="hljs-comment">// 100100</span></span><br><span class="line"><span class="hljs-comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="hljs-string">'11'</span> + <span class="hljs-number">12</span>);     <span class="hljs-comment">// 1112</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>+ 号总结口诀：数值相加 ，字符相连</em></strong></li></ul></li></ul></li><li><p>字符串拼接加强</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师'</span> + <span class="hljs-number">18</span>);        <span class="hljs-comment">// 只要有字符就会相连 </span></span><br><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师age岁啦'</span>);      <span class="hljs-comment">// 这样不行哦</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师'</span> + age);         <span class="hljs-comment">// pink老师18</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师'</span> + age + <span class="hljs-string">'岁啦'</span>); <span class="hljs-comment">// pink老师18岁啦</span></span><br></pre></td></tr></table></figure><ul><li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li></ul></li></ol></li><li><p>布尔型Boolean</p><p>​        布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>​        布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 2</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>Undefined和 Null</p><p>​        一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> variable;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(variable);           <span class="hljs-comment">// undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你好'</span> + variable);  <span class="hljs-comment">// 你好undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + variable);     <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + variable);   <span class="hljs-comment">//  NaN</span></span><br></pre></td></tr></table></figure><p>​        一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> vari = <span class="hljs-literal">null</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你好'</span> + vari);  <span class="hljs-comment">// 你好null</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + vari);     <span class="hljs-comment">// 11</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + vari);   <span class="hljs-comment">//  1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取变量数据类型"><a href="#获取变量数据类型" class="headerlink" title="获取变量数据类型"></a>获取变量数据类型</h3><ul><li><p>获取检测变量的数据类型</p><p>​        typeof 可用来获取检测变量的数据类型</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num) <span class="hljs-comment">// 结果 number</span></span><br></pre></td></tr></table></figure><p>​        不同类型的返回值</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8718.png" alt></p></li><li><p>字面量</p><p>​        字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8, 9, 10</li><li>字符串字面量：’黑马程序员’, “大前端”</li><li>布尔字面量：true，false</li></ul></li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>​        什么是数据类型转换？</p><p>​        使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转换为字符串类型</span><br><span class="line">转换为数字型</span><br><span class="line">转换为布尔型</span><br></pre></td></tr></table></figure><ul><li><p>转换为字符串</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8719.png" alt></p><ul><li>toString() 和 String()  使用方式不一样。</li><li>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</li></ul></li><li><p>转换为数字型（重点）</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8720.png" alt></p><ul><li>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</li><li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li></ul></li><li><p>转换为布尔型</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8721.png" alt></p><ul><li><p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined  </p></li><li><p>其余值都会被转换为 true</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">''</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">'小白'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">12</span>)); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="解释型语言和编译型语言"><a href="#解释型语言和编译型语言" class="headerlink" title="解释型语言和编译型语言"></a>解释型语言和编译型语言</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</code></pre><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8722.png" alt></p><ul><li>翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同</li><li>编译器是在代码执行之前进行编译，生成中间代码文件</li><li>解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li></ul><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8723.png" alt></p><pre><code>类似于请客吃饭：    编译语言：首先把所有菜做好，才能上桌吃饭    解释语言：好比吃火锅，边吃边涮，同时进行</code></pre><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><pre><code>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。标识符不能是关键字或保留字。</code></pre><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><pre><code>关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</code></pre><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><pre><code>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第01天&quot;&gt;&lt;a href=&quot;#JavaScript基础第01天&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第01天&quot;&gt;&lt;/a&gt;JavaScript基础第01天&lt;/h1&gt;&lt;h2 id=&quot;编程语言&quot;&gt;&lt;a href=&quot;#编程语言&quot; class=&quot;headerlink&quot; title=&quot;编程语言&quot;&gt;&lt;/a&gt;编程语言&lt;/h2&gt;&lt;h3 id=&quot;编程&quot;&gt;&lt;a href=&quot;#编程&quot; class=&quot;headerlink&quot; title=&quot;编程&quot;&gt;&lt;/a&gt;编程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算机程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>响应式布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/响应式布局/</id>
    <published>2020-05-23T03:31:38.000Z</published>
    <updated>2020-05-23T03:33:51.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.响应式布局</p></blockquote><h1 id="移动端WEB开发之响应式布局"><a href="#移动端WEB开发之响应式布局" class="headerlink" title="移动端WEB开发之响应式布局"></a>移动端WEB开发之响应式布局</h1><h3 id="响应式开发原理"><a href="#响应式开发原理" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h3><h4 id="响应式开发原理-1"><a href="#响应式开发原理-1" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h4><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）<a id="more"></a><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4></li></ul><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h3 id="bootstrap的介绍"><a href="#bootstrap的介绍" class="headerlink" title="bootstrap的介绍"></a>bootstrap的介绍</h3><h4 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h4><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/" target="_blank" rel="noopener">中文网</a>  <a href="lhttp://getbootstrap.com/" target="_blank" rel="noopener">官网</a>  <a href="http://bootstrap.css88.com/" target="_blank" rel="noopener">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h4 id="bootstrap优点"><a href="#bootstrap优点" class="headerlink" title="bootstrap优点"></a>bootstrap优点</h4><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h4 id="版本简介"><a href="#版本简介" class="headerlink" title="版本简介"></a>版本简介</h4><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h4 id="bootstrap基本使用"><a href="#bootstrap基本使用" class="headerlink" title="bootstrap基本使用"></a>bootstrap基本使用</h4><p>在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。</p><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  </p><p><img src="/前端笔记/响应式布局/1.png" alt></p></li></ol><ol start="2"><li><p>创建 html 骨架结构 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary for Bootstrap&apos;s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>引入相关样式文件  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Bootstrap 核心样式--&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>书写内容 </p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h4 id="bootstrap布局容器"><a href="#bootstrap布局容器" class="headerlink" title="bootstrap布局容器"></a>bootstrap布局容器</h4><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 或者.container-fluid 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1170px</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h4 id="Bootstrap栅格系统"><a href="#Bootstrap栅格系统" class="headerlink" title="Bootstrap栅格系统"></a>Bootstrap栅格系统</h4><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p>栅格嵌套</p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*<br>元素内。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列嵌套 --&gt;</span><br><span class="line"> &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;col-sm-6&quot;&gt;小列&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;col-sm-6&quot;&gt;小列&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>列偏移</p><p>使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列偏移 --&gt;</span><br><span class="line"> &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-4&quot;&gt;1&lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-4 col-lg-offset-4&quot;&gt;2&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>列排序</p><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列排序 --&gt;</span><br><span class="line"> &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-4 col-lg-push-8&quot;&gt;左侧&lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-8 col-lg-pull-4&quot;&gt;右侧&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>响应式工具</p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><p><img src="/前端笔记/响应式布局/2.jpg" alt></p><h3 id="阿里百秀案例制作"><a href="#阿里百秀案例制作" class="headerlink" title="阿里百秀案例制作"></a>阿里百秀案例制作</h3><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>方案：我们采取响应式页面开发方案</p><p>技术：bootstrap框架</p><p>设计图： 本设计图采用 1280px 设计尺寸</p><p>项目结构搭建</p><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  </p></li><li><p>创建 html 骨架结构  </p></li><li><p>引入相关样式文件  </p></li><li><p>书写内容 </p></li></ol><p>container宽度修改</p><p>因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 利用媒体查询修改 container宽度适合效果图宽度  */</span><br><span class="line"> @media (min-width: 1280px) &#123; </span><br><span class="line">   .container &#123; </span><br><span class="line">width: 1280px; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.响应式布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动端WEB开发之响应式布局&quot;&gt;&lt;a href=&quot;#移动端WEB开发之响应式布局&quot; class=&quot;headerlink&quot; title=&quot;移动端WEB开发之响应式布局&quot;&gt;&lt;/a&gt;移动端WEB开发之响应式布局&lt;/h1&gt;&lt;h3 id=&quot;响应式开发原理&quot;&gt;&lt;a href=&quot;#响应式开发原理&quot; class=&quot;headerlink&quot; title=&quot;响应式开发原理&quot;&gt;&lt;/a&gt;响应式开发原理&lt;/h3&gt;&lt;h4 id=&quot;响应式开发原理-1&quot;&gt;&lt;a href=&quot;#响应式开发原理-1&quot; class=&quot;headerlink&quot; title=&quot;响应式开发原理&quot;&gt;&lt;/a&gt;响应式开发原理&lt;/h4&gt;&lt;p&gt;就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。&lt;/p&gt;
&lt;p&gt;设备的划分情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小于768的为超小屏幕（手机）&lt;/li&gt;
&lt;li&gt;768~992之间的为小屏设备（平板）&lt;/li&gt;
&lt;li&gt;992~1200的中等屏幕（桌面显示器）&lt;/li&gt;
&lt;li&gt;大于1200的宽屏设备（大桌面显示器）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>rem布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/rem%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/rem布局/</id>
    <published>2020-05-23T03:16:34.000Z</published>
    <updated>2020-05-23T03:30:04.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.rem布局</p></blockquote><h1 id="移动web开发之rem布局"><a href="#移动web开发之rem布局" class="headerlink" title="移动web开发之rem布局"></a>移动web开发之rem布局</h1><h3 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h3><h4 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h4><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</p><p>不同的是rem的基准是相对于html元素的字体大小。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 根html 为 12px */</span><br><span class="line">html &#123;</span><br><span class="line">   font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">/* 此时 div 的字体大小就是 24px */       </span><br><span class="line">div &#123;</span><br><span class="line">    font-size: 2rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><a id="more"></a><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><h4 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h4><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面 </li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><h4 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h4><ul><li>用 @media开头 注意@符号</li><li>mediatype  媒体类型</li><li>关键字 and  not  only</li><li>media feature 媒体特性必须有小括号包含</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media mediatype and|not|only (media feature) &#123;</span><br><span class="line">    CSS-Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>mediatype 查询类型</li></ol><p>​       将不同的终端设备划分成不同的类型，称为媒体类型</p><p><img src="/前端笔记/rem布局/1.jpg" alt></p><ol start="2"><li>关键字</li></ol><p>​       关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。    </li></ul><ol start="3"><li><p>媒体特性</p><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。</p><p>注意他们要加小括号包含</p><p><img src="/前端笔记/rem布局/2.jpg" alt></p></li></ol><ol start="4"><li><p>媒体查询书写规则</p><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p><p><img src="/前端笔记/rem布局/3.png" alt></p></li></ol><h3 id="less-基础"><a href="#less-基础" class="headerlink" title="less 基础"></a>less 基础</h3><h4 id="维护css弊端"><a href="#维护css弊端" class="headerlink" title="维护css弊端"></a>维护css弊端</h4><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。 </li></ul><h4 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h4><p>Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。</p><p>做为 CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。</p><p>它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p><p>Less中文网址：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://</a><a href="http://lesscss.cn/" target="_blank" rel="noopener">less</a><a href="http://lesscss.cn/" target="_blank" rel="noopener">css.cn/</a></p><p>常见的CSS预处理器：Sass、Less、Stylus</p><p>一句话：Less是一门 CSS 预处理语言，它扩展了CSS的动态特性。</p><p>Less安装</p><p>①安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd）  —输入“node –v”查看版本即可</p><p>③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可</p><p>④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p><p>Less 使用之变量</p><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@变量名:值;</span><br></pre></td></tr></table></figure><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@color: pink;</span><br></pre></td></tr></table></figure><p>Less 编译 vocode Less 插件</p><p>Easy LESS 插件用来把less文件编译为css文件</p><p>安装完毕插件，重新加载下 vscode。</p><p>只要保存一下Less文件，会自动生成CSS文件。</p><p><img src="/前端笔记/rem布局/4.png" alt></p><p>Less 嵌套</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将css改为less</span><br><span class="line">#header .logo &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#header &#123;</span><br><span class="line">    .logo &#123;</span><br><span class="line">       width: 300px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">a&#123;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">      color:red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Less 运算</p><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*Less 里面写*/</span><br><span class="line">@witdh: 10px + 5;</span><br><span class="line">div &#123;</span><br><span class="line">    border: @witdh solid red;</span><br><span class="line">&#125;</span><br><span class="line">/*生成的css*/</span><br><span class="line">div &#123;</span><br><span class="line">  border: 15px solid red;</span><br><span class="line">&#125;</span><br><span class="line">/*Less 甚至还可以这样 */</span><br><span class="line">width: (@width + 5) * 2;</span><br></pre></td></tr></table></figure><ul><li>乘号（*）和除号（/）的写法  </li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h3 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h3><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><p>技术方案：</p><p>1.less+rem+媒体查询</p><p>2.lflexible.js+rem</p><p>总结： </p><p>两种方案现在都存在。</p><p>方案2 更简单，现阶段大家无需了解里面的js代码。</p><h4 id="rem实际开发适配方案1"><a href="#rem实际开发适配方案1" class="headerlink" title="rem实际开发适配方案1"></a>rem实际开发适配方案1</h4><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100<em>100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem</em>2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h3 id="苏宁首页"><a href="#苏宁首页" class="headerlink" title="苏宁首页"></a>苏宁首页</h3><p>苏宁首页地址 ：<a href="m.suning.com">苏宁首页</a></p><p>1、 技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取rem适配布局（less + rem  + 媒体查询）</p><p>设计图： 本设计图采用 750px 设计尺寸</p><p>2、搭建文件结构</p><p><img src="/前端笔记/rem布局/5.jpg" alt></p><p>3、设置视口标签以及引入初始化样式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,         initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>4、设置公共common.less文件</p><ul><li>新建common.less    设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要</li><li>我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li><li>划分的份数我们定为 15等份</li><li>因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面</li></ul><h3 id="rem-适配方案2"><a href="#rem-适配方案2" class="headerlink" title="rem 适配方案2"></a>rem 适配方案2</h3><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p>里面页面元素rem值： 页面元素的px 值 /  75  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://link.jianshu.com/?t=https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><p><img src="/前端笔记/rem布局/6.jpg" alt></p><p><img src="/前端笔记/rem布局/7.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.rem布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动web开发之rem布局&quot;&gt;&lt;a href=&quot;#移动web开发之rem布局&quot; class=&quot;headerlink&quot; title=&quot;移动web开发之rem布局&quot;&gt;&lt;/a&gt;移动web开发之rem布局&lt;/h1&gt;&lt;h3 id=&quot;rem基础&quot;&gt;&lt;a href=&quot;#rem基础&quot; class=&quot;headerlink&quot; title=&quot;rem基础&quot;&gt;&lt;/a&gt;rem基础&lt;/h3&gt;&lt;h4 id=&quot;rem单位&quot;&gt;&lt;a href=&quot;#rem单位&quot; class=&quot;headerlink&quot; title=&quot;rem单位&quot;&gt;&lt;/a&gt;rem单位&lt;/h4&gt;&lt;p&gt;rem (root em)是一个相对单位，类似于em，em是父元素字体大小。&lt;/p&gt;
&lt;p&gt;不同的是rem的基准是相对于html元素的字体大小。&lt;/p&gt;
&lt;p&gt;比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* 根html 为 12px */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   font-size: 12px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 此时 div 的字体大小就是 24px */       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    font-size: 2rem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/flex布局/</id>
    <published>2020-05-23T03:08:33.000Z</published>
    <updated>2020-05-23T03:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.flex布局</p></blockquote><h1 id="移动web开发——flex布局"><a href="#移动web开发——flex布局" class="headerlink" title="移动web开发——flex布局"></a>移动web开发——flex布局</h1><h2 id="传统布局和flex布局对比"><a href="#传统布局和flex布局对比" class="headerlink" title="传统布局和flex布局对比"></a>传统布局和flex布局对比</h2><h3 id="传统布局"><a href="#传统布局" class="headerlink" title="传统布局"></a>传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul><a id="more"></a><h2 id="flex布局原理"><a href="#flex布局原理" class="headerlink" title="flex布局原理"></a>flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 </li><li>采用 Flex 布局的元素，称为 Flex 容器（flex</li></ul><p>container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex<br>item），简称”项目”。</p><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id="父项常见属性"><a href="#父项常见属性" class="headerlink" title="父项常见属性"></a>父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行  </li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="flex-direction设置主轴的方向"><a href="#flex-direction设置主轴的方向" class="headerlink" title="flex-direction设置主轴的方向"></a>flex-direction设置主轴的方向</h3><ul><li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</li><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ul><p><img src="/前端笔记/flex布局/1.JPG" alt></p><ul><li><p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p><p><img src="/前端笔记/flex布局/2.JPG" alt></p></li></ul><h3 id="justify-content-设置主轴上的子元素排列方式"><a href="#justify-content-设置主轴上的子元素排列方式" class="headerlink" title="justify-content 设置主轴上的子元素排列方式"></a>justify-content 设置主轴上的子元素排列方式</h3><p><img src="/前端笔记/flex布局/3.JPG" alt></p><h3 id="flex-wrap设置是否换行"><a href="#flex-wrap设置是否换行" class="headerlink" title="flex-wrap设置是否换行"></a>flex-wrap设置是否换行</h3><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h3 id="align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="align-items 设置侧轴上的子元素排列方式（单行 ）"></a>align-items 设置侧轴上的子元素排列方式（单行 ）</h3><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式  在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h3 id="align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="align-content  设置侧轴上的子元素的排列方式（多行）"></a>align-content  设置侧轴上的子元素的排列方式（多行）</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</p><p><img src="/前端笔记/flex布局/4.JPG" alt></p><h3 id="align-content-和align-items区别"><a href="#align-content-和align-items区别" class="headerlink" title="align-content 和align-items区别"></a>align-content 和align-items区别</h3><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 </li><li>总结就是单行找align-items  多行找 align-content</li></ul><h3 id="flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow:row wrap;</span><br></pre></td></tr></table></figure><h2 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">    flex: &lt;number&gt;; /* 默认值 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="align-self控制子项自己在侧轴上的排列方式"><a href="#align-self控制子项自己在侧轴上的排列方式" class="headerlink" title="align-self控制子项自己在侧轴上的排列方式"></a>align-self控制子项自己在侧轴上的排列方式</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">span:nth-child(2) &#123;</span><br><span class="line">      /* 设置自己在侧轴上的排列方式 */</span><br><span class="line">      align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="order-属性定义项目的排列顺序"><a href="#order-属性定义项目的排列顺序" class="headerlink" title="order 属性定义项目的排列顺序"></a>order 属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">    order: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="携程网首页案例制作"><a href="#携程网首页案例制作" class="headerlink" title="携程网首页案例制作"></a>携程网首页案例制作</h2><p>携程网链接：<a href="http://m.ctrip.com" target="_blank" rel="noopener">http://m.ctrip.com</a></p><p>1.技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取flex布局</p><p>2.搭建相关文件夹</p><p><img src="/前端笔记/flex布局/5.JPG" alt></p><p>3.设置视口标签以及引入初始化样式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>4.常用初始化样式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  max-width: 540px;</span><br><span class="line">  min-width: 320px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  font: normal 14px/1.5 Tahoma,&quot;Lucida Grande&quot;,Verdana,&quot;Microsoft Yahei&quot;,STXihei,hei;</span><br><span class="line">  color: #000;</span><br><span class="line">  background: #f2f2f2;</span><br><span class="line">  overflow-x: hidden;</span><br><span class="line">  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.模块名字划分</p><p><img src="/前端笔记/flex布局/6.JPG" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.flex布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动web开发——flex布局&quot;&gt;&lt;a href=&quot;#移动web开发——flex布局&quot; class=&quot;headerlink&quot; title=&quot;移动web开发——flex布局&quot;&gt;&lt;/a&gt;移动web开发——flex布局&lt;/h1&gt;&lt;h2 id=&quot;传统布局和flex布局对比&quot;&gt;&lt;a href=&quot;#传统布局和flex布局对比&quot; class=&quot;headerlink&quot; title=&quot;传统布局和flex布局对比&quot;&gt;&lt;/a&gt;传统布局和flex布局对比&lt;/h2&gt;&lt;h3 id=&quot;传统布局&quot;&gt;&lt;a href=&quot;#传统布局&quot; class=&quot;headerlink&quot; title=&quot;传统布局&quot;&gt;&lt;/a&gt;传统布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;兼容性好&lt;/li&gt;
&lt;li&gt;布局繁琐&lt;/li&gt;
&lt;li&gt;局限性，不能再移动端很好的布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作方便，布局极其简单，移动端使用比较广泛&lt;/li&gt;
&lt;li&gt;pc端浏览器支持情况比较差&lt;/li&gt;
&lt;li&gt;IE11或更低版本不支持flex或仅支持部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;建议&quot;&gt;&lt;a href=&quot;#建议&quot; class=&quot;headerlink&quot; title=&quot;建议&quot;&gt;&lt;/a&gt;建议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果是pc端页面布局，还是采用传统方式&lt;/li&gt;
&lt;li&gt;如果是移动端或者是不考虑兼容的pc则采用flex&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>流式布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/流式布局/</id>
    <published>2020-05-23T03:02:16.000Z</published>
    <updated>2020-05-23T03:14:38.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.流式布局</p></blockquote><h1 id="移动web开发——流式布局"><a href="#移动web开发——流式布局" class="headerlink" title="移动web开发——流式布局"></a>移动web开发——流式布局</h1><h3 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h3><h4 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h4><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><a id="more"></a><h4 id="手机屏幕的现状"><a href="#手机屏幕的现状" class="headerlink" title="手机屏幕的现状"></a>手机屏幕的现状</h4><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h4 id="常见移动端屏幕尺寸"><a href="#常见移动端屏幕尺寸" class="headerlink" title="常见移动端屏幕尺寸"></a>常见移动端屏幕尺寸</h4><p><img src="/前端笔记/流式布局/1(1).png" alt></p><h4 id="移动端调试方法"><a href="#移动端调试方法" class="headerlink" title="移动端调试方法"></a>移动端调试方法</h4><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h4 id="布局视口-layout-viewport"><a href="#布局视口-layout-viewport" class="headerlink" title="布局视口 layout viewport"></a>布局视口 layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><p><img src="/前端笔记/流式布局/2.png" alt></p><h4 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h4><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><p><img src="/前端笔记/流式布局/3.png" alt></p><h4 id="理想视口-ideal-viewport"><a href="#理想视口-ideal-viewport" class="headerlink" title="理想视口 ideal viewport"></a>理想视口 ideal viewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><p><img src="/前端笔记/流式布局/4.png" alt></p><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h3 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h3><h4 id="物理像素-amp-物理像素比"><a href="#物理像素-amp-物理像素比" class="headerlink" title="物理像素&amp;物理像素比"></a>物理像素&amp;物理像素比</h4><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h4 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: 背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="移动开发选择和技术解决方案"><a href="#移动开发选择和技术解决方案" class="headerlink" title="移动开发选择和技术解决方案"></a>移动开发选择和技术解决方案</h3><h4 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h4><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><p><img src="/前端笔记/流式布局/5.png" alt></p><p>京东移动端：</p><p><img src="/前端笔记/流式布局/6.jpg" alt></p><p>2.响应式页面兼容移动端（其次）</p><p><img src="/前端笔记/流式布局/7.jpg" alt></p><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h4 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</p><p>我们可以放心使用 H5 标签和 CSS3 样式。</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><h4 id="移动端大量使用-CSS3盒子模型box-sizin"><a href="#移动端大量使用-CSS3盒子模型box-sizin" class="headerlink" title="移动端大量使用 CSS3盒子模型box-sizin"></a>移动端大量使用 CSS3盒子模型box-sizin</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*CSS3盒子模型*/</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">/*传统盒子模型*/</span><br><span class="line">box-sizing: content-box;</span><br></pre></td></tr></table></figure><p>移动端可以全部CSS3 盒子模型</p><p>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h4 id="移动端特殊样式"><a href="#移动端特殊样式" class="headerlink" title="移动端特殊样式"></a>移动端特殊样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*CSS3盒子模型*/</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">-webkit-box-sizing: border-box;</span><br><span class="line">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span><br><span class="line">-webkit-tap-highlight-color: transparent;</span><br><span class="line">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span><br><span class="line">-webkit-appearance: none;</span><br><span class="line">/*禁用长按页面时的弹出菜单*/</span><br><span class="line">img,a &#123; -webkit-touch-callout: none; &#125;</span><br></pre></td></tr></table></figure><h3 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h3><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。</p><p>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>流式布局方式是移动web开发使用的比较常见的布局方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.流式布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动web开发——流式布局&quot;&gt;&lt;a href=&quot;#移动web开发——流式布局&quot; class=&quot;headerlink&quot; title=&quot;移动web开发——流式布局&quot;&gt;&lt;/a&gt;移动web开发——流式布局&lt;/h1&gt;&lt;h3 id=&quot;移动端基础&quot;&gt;&lt;a href=&quot;#移动端基础&quot; class=&quot;headerlink&quot; title=&quot;移动端基础&quot;&gt;&lt;/a&gt;移动端基础&lt;/h3&gt;&lt;h4 id=&quot;浏览器现状&quot;&gt;&lt;a href=&quot;#浏览器现状&quot; class=&quot;headerlink&quot; title=&quot;浏览器现状&quot;&gt;&lt;/a&gt;浏览器现状&lt;/h4&gt;&lt;p&gt; PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。&lt;/p&gt;
&lt;p&gt;移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。&lt;/p&gt;
&lt;p&gt;国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
</feed>
