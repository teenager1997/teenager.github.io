<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>It Fool - 董冬懂冻</title>
  
  <subtitle>前端blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itfool.cn/"/>
  <updated>2020-05-23T06:12:41.577Z</updated>
  <id>http://www.itfool.cn/</id>
  
  <author>
    <name>董冬懂冻</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day06/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day06/</id>
    <published>2020-05-23T06:09:26.000Z</published>
    <updated>2020-05-23T06:12:41.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.内置对象</p></blockquote><h1 id="JavaScript基础第06天笔记"><a href="#JavaScript基础第06天笔记" class="headerlink" title="JavaScript基础第06天笔记"></a>JavaScript基础第06天笔记</h1><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="内置对象-1"><a href="#内置对象-1" class="headerlink" title="内置对象"></a>内置对象</h3><p>​         JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    </p><h3 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h3><p>​        查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。<br>​        Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>​        MDN:<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p><a id="more"></a><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>​        Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​    注意：上面的方法使用时必须带括号</p><p>​    <strong>获取指定范围内的随机整数</strong>：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>​         Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用Date实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> future = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2019/5/1'</span>);</span><br></pre></td></tr></table></figure><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></li><li><p>使用Date实例的方法和属性    </p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%871.png" alt></p></li><li><p>通过Date实例获取总毫米数</p><ul><li><p>总毫秒数的含义</p><p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 实例化Date对象</span></span><br><span class="line"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line"><span class="hljs-comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(date.valueOf())</span><br><span class="line"><span class="hljs-built_in">console</span>.log(date.getTime())</span><br><span class="line"><span class="hljs-comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="hljs-keyword">var</span> now = + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line"><span class="hljs-comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="hljs-keyword">var</span> now = <span class="hljs-built_in">Date</span>.now();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-string">"test"</span>,<span class="hljs-literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br></pre></td></tr></table></figure><p>​    注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p><p>​    参数传递规则如下：</p><ul><li><p>如果只传入一个参数，则参数规定了数组的长度</p></li><li><p>如果传入了多个参数，则参数称为数组的元素</p></li></ul></li></ul></li></ul><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr));   <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(obj));   <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4><ul><li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%872.png" alt></p><p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p></li></ul><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%873.png" alt></p><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%874.png" alt></p></li></ul><h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%875.png" alt></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%876.png" alt></p></li></ul><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>​        为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>​        基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'andy'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><p>​        按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>​        js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">'andy'</span>);</span><br><span class="line"><span class="hljs-comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="hljs-comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="hljs-literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>​        指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>​        当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>​        由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%877.png" alt></p><p>​        案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li>先查找第一个o出现的位置</li><li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找     </li></ol><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%878.png" alt></p><p>​        在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%879.png" alt></p><p>​        案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p></li><li><p>遍历对象，得到最大值和该字符     </p><p>​    注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8710.png" alt></p><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>​        replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>​        split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>​        其使用格式如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(&quot;分割字符&quot;)</span><br></pre></td></tr></table></figure><h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>​        <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>​        <strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8711.png" alt></p><ul><li><p>简单数据类型的存储方式</p><p>​        值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8712.png" alt></p><ul><li><p>复杂数据类型的存储方式</p><p>​        引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8713.png" alt></p></li></ul><h3 id="简单类型传参"><a href="#简单类型传参" class="headerlink" title="简单类型传参"></a>简单类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(x)；</span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8714.png" alt></p><h3 id="复杂数据类型传参"><a href="#复杂数据类型传参" class="headerlink" title="复杂数据类型传参"></a>复杂数据类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>) </span>&#123; <span class="hljs-comment">// x = p</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">    x.name = <span class="hljs-string">"张学友"</span>;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"刘德华"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 1. 这个输出什么 ?   </span></span><br><span class="line">f1(p);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 4. 这个输出什么 ?</span></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="/前端笔记/javascript-day06/%E5%9B%BE%E7%89%8715.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.内置对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第06天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第06天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第06天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第06天笔记&lt;/h1&gt;&lt;h2 id=&quot;内置对象&quot;&gt;&lt;a href=&quot;#内置对象&quot; class=&quot;headerlink&quot; title=&quot;内置对象&quot;&gt;&lt;/a&gt;内置对象&lt;/h2&gt;&lt;h3 id=&quot;内置对象-1&quot;&gt;&lt;a href=&quot;#内置对象-1&quot; class=&quot;headerlink&quot; title=&quot;内置对象&quot;&gt;&lt;/a&gt;内置对象&lt;/h3&gt;&lt;p&gt;​         JavaScript 中的对象分为3种：&lt;strong&gt;自定义对象 、内置对象、 浏览器对象&lt;/strong&gt;&lt;br&gt;​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是&lt;strong&gt;最基本而必要的功能&lt;/strong&gt;（属性和方法），内置对象最大的优点就是帮助我们快速开发&lt;/p&gt;
&lt;p&gt;​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    &lt;/p&gt;
&lt;h3 id=&quot;查文档&quot;&gt;&lt;a href=&quot;#查文档&quot; class=&quot;headerlink&quot; title=&quot;查文档&quot;&gt;&lt;/a&gt;查文档&lt;/h3&gt;&lt;p&gt;​        查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。&lt;br&gt;​        Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。&lt;br&gt;​        MDN:&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/zh-CN/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day05/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day05/</id>
    <published>2020-05-23T06:05:51.000Z</published>
    <updated>2020-05-23T06:16:46.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.作用域</p></blockquote><h1 id="JavaScript基础第05天笔记"><a href="#JavaScript基础第05天笔记" class="headerlink" title="JavaScript基础第05天笔记"></a>JavaScript基础第05天笔记</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="作用域概述"><a href="#作用域概述" class="headerlink" title="作用域概述"></a>作用域概述</h3><pre><code>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</code></pre><p>JavaScript（es6前）中的作用域有两种：</p><ul><li><p>全局作用域</p></li><li><p>局部作用域（函数作用域）    </p><a id="more"></a><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>  作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p></li></ul><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><pre><code>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</code></pre><h3 id="JS没有块级作用域"><a href="#JS没有块级作用域" class="headerlink" title="JS没有块级作用域"></a>JS没有块级作用域</h3><ul><li><p>块作用域由 { } 包括。</p></li><li><p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：    </p><p>java有块级作用域：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span>)&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> num = <span class="hljs-number">123</span>;</span><br><span class="line">  system.out.print(num);  <span class="hljs-comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num);    <span class="hljs-comment">// 报错</span></span><br></pre></td></tr></table></figure><p>以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；</p><p>而与之类似的JavaScript代码，则不会报错：</p></li></ul><p>  Js中没有块级作用域（在ES6之前）</p>  <figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>); <span class="hljs-comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);   <span class="hljs-comment">//123</span></span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><pre><code>在JavaScript中，根据作用域的不同，变量可以分为两种：</code></pre><ul><li>全局变量</li><li>局部变量</li></ul><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><pre><code>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</code></pre><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><pre><code>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</code></pre><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><h3 id="全局变量和局部变量的区别"><a href="#全局变量和局部变量的区别" class="headerlink" title="全局变量和局部变量的区别"></a>全局变量和局部变量的区别</h3><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><pre><code>只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链案例分析1：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">456</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript-day05/%E5%9B%BE%E7%89%871(1).png" alt></p><pre><code>作用域链：采取就近原则的方式来查找变量最终的值。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">var</span> b = <span class="hljs-string">'22'</span>;</span><br><span class="line">    fn2();</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;</span><br><span class="line">        fn3();</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//a的值 ?</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">//b的值 ?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript-day05/%E5%9B%BE%E7%89%872.png" alt></p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><h3 id="预解析的相关概念"><a href="#预解析的相关概念" class="headerlink" title="预解析的相关概念"></a>预解析的相关概念</h3><pre><code>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。</code></pre><ul><li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p></li><li><p>代码执行： 从上到下执行JS语句。</p><p><strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p></li></ul><h3 id="变量预解析"><a href="#变量预解析" class="headerlink" title="变量预解析"></a>变量预解析</h3><pre><code>预解析也叫做变量、函数提升。变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(num);  <span class="hljs-comment">// 结果是多少？</span></span><br><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;      <span class="hljs-comment">// ？</span></span><br></pre></td></tr></table></figure><pre><code>结果：undefined注意：**变量提升只提升声明，不提升赋值**</code></pre><h3 id="函数预解析"><a href="#函数预解析" class="headerlink" title="函数预解析"></a>函数预解析</h3><pre><code>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'打印'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>结果：控制台打印字符串 --- ”打印“ 注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！    </code></pre><h3 id="函数表达式声明函数问题"><a href="#函数表达式声明函数问题" class="headerlink" title="函数表达式声明函数问题"></a>函数表达式声明函数问题</h3><pre><code>函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="hljs-keyword">var</span>  fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'想不到吧'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>结果：报错提示 ”fn is not a function&quot;解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用</code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的相关概念"><a href="#对象的相关概念" class="headerlink" title="对象的相关概念"></a>对象的相关概念</h3><ul><li><p>什么是对象？</p><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><pre><code>对象是由属性和方法组成的。</code></pre><ul><li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p></li><li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p><p><img src="/前端笔记/javascript-day05/%E5%9B%BE%E7%89%873.png" alt></p></li></ul></li><li><p>为什么需要对象？</p><p>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。</p><pre><code>如果要保存一个人的完整信息呢？例如，将“张三疯”的个人的信息保存在数组中的方式为：</code></pre><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [‘张三疯’, ‘男&apos;, 128,154];</span><br></pre></td></tr></table></figure><pre><code>上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。使用对象记录上组数据为：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="hljs-string">"name"</span>:<span class="hljs-string">"张三疯"</span>,</span><br><span class="line">    <span class="hljs-string">"sex"</span>:<span class="hljs-string">"男"</span>,</span><br><span class="line">    <span class="hljs-string">"age"</span>:<span class="hljs-number">128</span>,</span><br><span class="line">    <span class="hljs-string">"height"</span>:<span class="hljs-number">154</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>JS中的对象表达结构更清晰，更强大。</code></pre></li></ul><h3 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h3><ul><li><p>利用字面量创建对象 </p><h5 id="使用对象字面量创建对象："><a href="#使用对象字面量创建对象：" class="headerlink" title="使用对象字面量创建对象："></a><strong>使用对象字面量创建对象</strong>：</h5><pre><code>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示 </code></pre><ul><li><p>键：相当于属性名</p></li><li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p><p>代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="hljs-string">'pink'</span>,</span><br><span class="line">    age : <span class="hljs-number">18</span>,</span><br><span class="line">    sex : <span class="hljs-string">'男'</span>,</span><br><span class="line">    sayHi : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="hljs-string">'大家好啊~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述代码中 star即是创建的对象。</p></li></ul></li><li><p>对象的使用</p><ul><li><p>对象的属性</p><ul><li>对象中存储<strong>具体数据</strong>的 “键值对”中的 “键”称为对象的属性，即对象中存储具体数据的项</li></ul></li><li><p>对象的方法</p><ul><li>对象中存储<strong>函数</strong>的 “键值对”中的 “键”称为对象的方法，即对象中存储函数的项</li></ul></li><li><p>访问对象的属性</p><ul><li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p></li><li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号      </p><p>示例代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(star.name)     <span class="hljs-comment">// 调用名字属性</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(star[<span class="hljs-string">'name'</span>])  <span class="hljs-comment">// 调用名字属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用对象的方法</p><ul><li><p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </p><p>示例代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">star.sayHi();              <span class="hljs-comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量、属性、函数、方法总结</p><p>属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器</p><ul><li>变量：单独声明赋值，单独存在</li><li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li></ul></li></ul></li></ul><pre><code>    方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器- 函数：单独存在的，通过“函数名()”的方式就可以调用- 方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。 </code></pre><ul><li><p>利用 new Object 创建对象 </p><ul><li><p>创建空对象</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> andy = <span class="hljs-keyword">new</span> Obect();</span><br></pre></td></tr></table></figure><p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p></li><li><p>给空对象添加属性和方法</p><ul><li><p>通过对象操作属性和方法的方式，来为对象增加属性和方法</p><p>示例代码如下：</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">andy.name = <span class="hljs-string">'pink'</span>;</span><br><span class="line">andy.age = <span class="hljs-number">18</span>;</span><br><span class="line">andy.sex = <span class="hljs-string">'男'</span>;</span><br><span class="line">andy.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="hljs-string">'大家好啊~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Object() ：第一个字母大写   </li><li>new Object() ：需要 new 关键字</li><li>使用的格式：对象.属性 =  值;     </li></ul></li></ul></li><li><p>利用构造函数创建对象</p><ul><li><p>构造函数</p><ul><li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p></li><li><p>构造函数的封装格式：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>,形参<span class="hljs-number">3</span></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.属性名<span class="hljs-number">1</span> = 参数<span class="hljs-number">1</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.属性名<span class="hljs-number">2</span> = 参数<span class="hljs-number">2</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.属性名<span class="hljs-number">3</span> = 参数<span class="hljs-number">3</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数的调用格式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = new 构造函数名(实参1，实参2，实参3)</span><br></pre></td></tr></table></figure><p>以上代码中，obj即接收到构造函数创建出来的对象。</p></li><li><p>注意事项</p><ol><li>构造函数约定<strong>首字母大写</strong>。</li><li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>构造函数中<strong>不需要 return 返回结果</strong>。</li><li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ol></li><li><p>其他</p><p>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p></li></ul></li></ul></li><li><p>new关键字的作用</p><ol><li>在构造函数代码开始执行之前，创建一个空对象；</li><li>修改this的指向，把this指向创建出来的空对象；</li><li>执行函数的代码</li><li>在函数完成之后，返回this—即创建出来的对象</li></ol><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><pre><code>for...in 语句用于对数组或者对象的属性进行循环操作。其语法如下：</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="hljs-comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(k);      <span class="hljs-comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第05天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第05天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第05天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第05天笔记&lt;/h1&gt;&lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;h3 id=&quot;作用域概述&quot;&gt;&lt;a href=&quot;#作用域概述&quot; class=&quot;headerlink&quot; title=&quot;作用域概述&quot;&gt;&lt;/a&gt;作用域概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JavaScript（es6前）中的作用域有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局作用域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局部作用域（函数作用域）    &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day04/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day04/</id>
    <published>2020-05-23T06:02:38.000Z</published>
    <updated>2020-05-23T06:05:41.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.数组</p></blockquote><h1 id="JavaScript基础第04天笔记"><a href="#JavaScript基础第04天笔记" class="headerlink" title="JavaScript基础第04天笔记"></a>JavaScript基础第04天笔记</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><ul><li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li><li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。<a id="more"></a><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3></li></ul><p>JS 中创建数组有两种方式：</p><ul><li><p>利用  new 创建数组  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> 数组名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() ；</span><br><span class="line"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();   <span class="hljs-comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure><p>注意 Array () ，A 要大写    </p></li><li><p>利用数组字面量创建数组</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="hljs-keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="hljs-comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="hljs-keyword">var</span>  数组名 = [<span class="hljs-string">'小白'</span>,<span class="hljs-string">'小黑'</span>,<span class="hljs-string">'大黄'</span>,<span class="hljs-string">'瑞奇'</span>];</span><br></pre></td></tr></table></figure><ul><li>数组的字面量是方括号 [ ] </li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-string">'小白'</span>,<span class="hljs-number">12</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">28.9</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h3><p>​        索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%871.png" alt></p><p>​        数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 定义数组</span></span><br><span class="line"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="line"><span class="hljs-comment">// 获取数组中的第2个元素</span></span><br><span class="line">alert(arrStus[<span class="hljs-number">1</span>]);</span><br></pre></td></tr></table></figure><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><ul><li><p>数组遍历</p><p>​        把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'red'</span>,<span class="hljs-string">'green'</span>, <span class="hljs-string">'blue'</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(arrStus[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>数组的长度</p><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="line">alert(arrStus.length);  <span class="hljs-comment">// 3</span></span><br></pre></td></tr></table></figure><p>  <strong>注意</strong>：</p><ul><li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li></ul></li><li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p><ul><li>数组的length属性可以被修改：</li></ul></li><li><p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p><ul><li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li></ul></li></ul><h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><p>​        数组中可以通过以下方式在数组的末尾插入新元素：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组[ 数组.length ] = 新数据;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><p>​        在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p><p>​        函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。  </p><h3 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 声明函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>function 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p></li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 调用函数</span></span><br><span class="line">函数名();  <span class="hljs-comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%872.png" alt></p><p>例子：封装计算1-100累加和</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* </span></span><br><span class="line"><span class="hljs-comment">   计算1-100之间值的函数</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-comment">// 声明函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> sumNum = <span class="hljs-number">0</span>;<span class="hljs-comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">    sumNum += i;<span class="hljs-comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  alert(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 调用函数</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="函数参数语法"><a href="#函数参数语法" class="headerlink" title="函数参数语法"></a>函数参数语法</h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%873.png" alt></p><p>​    参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p><p>函数参数的运用：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 带参数的函数声明</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>, 形参<span class="hljs-number">2</span> , 形参<span class="hljs-number">3.</span>..</span>) </span>&#123; <span class="hljs-comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="hljs-comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>, 实参<span class="hljs-number">3.</span>..);</span><br></pre></td></tr></table></figure><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol></li></ul><h4 id="函数形参和实参数量不匹配时"><a href="#函数形参和实参数量不匹配时" class="headerlink" title="函数形参和实参数量不匹配时"></a>函数形参和实参数量不匹配时</h4><p><img src="/前端笔记/javascript-day04/%E5%9B%BE%E7%89%874.png" alt></p><pre><code>注意：在JavaScript中，形参的默认值是undefined。</code></pre><p>小结：</p><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 声明函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名（）</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="hljs-keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="hljs-comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><p>​        当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h3><pre><code>函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</code></pre><h3 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用函数关键字 function 自定义函数方式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 声明定义方式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="hljs-comment">// 调用  </span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul></li><li><p>函数表达式方式(匿名函数）</p><p>利用函数表达式方式的写法如下： </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="hljs-comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个fn 里面存储的是一个函数  </li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第04天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第04天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第04天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第04天笔记&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;数组的概念&quot;&gt;&lt;a href=&quot;#数组的概念&quot; class=&quot;headerlink&quot; title=&quot;数组的概念&quot;&gt;&lt;/a&gt;数组的概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。&lt;/li&gt;
&lt;li&gt;数组是指&lt;strong&gt;一组数据的集合&lt;/strong&gt;，其中的每个数据被称作&lt;strong&gt;元素&lt;/strong&gt;，在数组中可以&lt;strong&gt;存放任意类型的元素&lt;/strong&gt;。数组是一种将一组数据存储在单个变量名下的优雅方式。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day03/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day03/</id>
    <published>2020-05-23T05:58:35.000Z</published>
    <updated>2020-05-23T06:03:05.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.循环</p></blockquote><h1 id="JavaScript基础第03天笔记"><a href="#JavaScript基础第03天笔记" class="headerlink" title="JavaScript基础第03天笔记"></a>JavaScript基础第03天笔记</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;</span><br><span class="line">    <span class="hljs-comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>初始化变量</td><td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td></tr><tr><td>条件表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr><tr><td>操作表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr></tbody></table></li></ul><a id="more"></a><p>  执行过程：</p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li></ol><ul><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li></ul><ol><li>执行操作表达式，此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。</li><li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li></ol><p>断点调试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">断点调试的流程：</span><br><span class="line">1、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br><span class="line">2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</span><br><span class="line">3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br></pre></td></tr></table></figure><ul><li><p>for 循环重复相同的代码</p><p>比如输出10句“媳妇我错了”</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//  基本写法</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'媳妇我错了~'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 用户输入次数</span></span><br><span class="line"><span class="hljs-keyword">var</span> num = prompt(<span class="hljs-string">'请输入次数:'</span>)；</span><br><span class="line"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'媳妇我错了~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for 循环重复不相同的代码</p><p>例如，求输出1到100岁：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//  基本写法</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年'</span> + i + <span class="hljs-string">'岁了'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，求输出1到100岁，并提示出生、死亡</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// for 里面是可以添加其他语句的 </span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line"> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年1岁了， 它出生了'</span>);</span><br><span class="line"> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">100</span>) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年100岁了，它死了'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个人今年'</span> + i + <span class="hljs-string">'岁了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。</p></li></ul><h3 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h3><ul><li><p>双重 for 循环概述</p><pre><code>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</code></pre></li><li><p>双重 for 循环语法</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;  </span><br><span class="line">       需执行的代码;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层循环可以看做外层循环的循环体语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序 </li><li>外层循环执行一次，内层循环要执行全部次数</li></ul></li><li><p>打印五行五列星星</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> star = <span class="hljs-string">''</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;</span><br><span class="line">      star += <span class="hljs-string">'☆'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 每次满 5个星星 就 加一次换行</span></span><br><span class="line">    star += <span class="hljs-string">'\n'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure><p>核心逻辑：</p><p>1.内层循环负责一行打印五个星星</p><p>2.外层循环负责打印五行</p></li><li><p>for 循环小结</p><ul><li>for 循环可以重复执行某些相同代码</li><li>for 循环可以重复执行些许不同的代码，因为我们有计数器</li><li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li><li>随着需求增加，双重for循环可以做更多、更好看的效果</li><li>双重 for 循环，外层循环一次，内层 for 循环全部执行</li><li>for 循环是循环条件和数字直接相关的循环</li></ul></li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while语句的语法结构如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="hljs-comment">// 循环体代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行思路：</p><ul><li>1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li>2 执行循环体代码</li><li>3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ul><p>注意：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li></ul><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p>do… while 语句的语法结构如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">do</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="hljs-keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><p>执行思路</p><ul><li><p>1 先执行一次循环体代码 </p></li><li><p>2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码    </p><p>注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码</p></li></ul><h3 id="continue、break"><a href="#continue、break" class="headerlink" title="continue、break"></a>continue、break</h3><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'这个包子有虫子，扔掉'</span>);</span><br><span class="line">        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳出本次循环，跳出的是第3次循环 </span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/前端笔记/javascript-day03/%E5%9B%BE%E7%89%871.png" alt></p><p>  break 关键字用于立即跳出整个循环（循环结束）。</p><p>  例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p>  <figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  运行结果：</p><p>  <img src="/前端笔记/javascript-day03/%E5%9B%BE%E7%89%872.png" alt></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词  </li><li>函数的名称一般用动词  </li></ul><h3 id="操作符规范"><a href="#操作符规范" class="headerlink" title="操作符规范"></a>操作符规范</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 操作符的左右两侧各保留一个空格</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行注释规范"><a href="#单行注释规范" class="headerlink" title="单行注释规范"></a>单行注释规范</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 单行注释前面注意有个空格</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我正在吃第'</span> + i + <span class="hljs-string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h3><pre><code>关键词、操作符之间后加空格</code></pre><p><img src="/前端笔记/javascript-day03/%E5%9B%BE%E7%89%873-1590213671361.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第03天笔记&quot;&gt;&lt;a href=&quot;#JavaScript基础第03天笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第03天笔记&quot;&gt;&lt;/a&gt;JavaScript基础第03天笔记&lt;/h1&gt;&lt;h2 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h2&gt;&lt;h3 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法结构&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(初始化变量; 条件表达式; 操作表达式 )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//循环体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;初始化变量&lt;/td&gt;
&lt;td&gt;通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;条件表达式&lt;/td&gt;
&lt;td&gt;用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作表达式&lt;/td&gt;
&lt;td&gt;用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day02/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day02/</id>
    <published>2020-05-23T05:50:16.000Z</published>
    <updated>2020-05-23T05:58:12.333Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.运算符</p></blockquote><h1 id="JavaScript基础第02天"><a href="#JavaScript基础第02天" class="headerlink" title="JavaScript基础第02天"></a>JavaScript基础第02天</h1><h2 id="运算符（操作符）"><a href="#运算符（操作符）" class="headerlink" title="运算符（操作符）"></a>运算符（操作符）</h2><h3 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h3><p><strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><pre><code>JavaScript中常用的运算符有：</code></pre><ul><li><p>算数运算符</p></li><li><p>递增和递减运算符</p></li><li><p>比较运算符</p></li><li><p>逻辑运算符</p></li><li><p>赋值运算符</p><a id="more"></a><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3></li><li><p>算术运算符概述</p><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%871.png" alt></p></li><li><p>浮点数的精度问题</p><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;    <span class="hljs-comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>);   <span class="hljs-comment">// 结果不是 7，  而是：7.000000000000001</span></span><br></pre></td></tr></table></figure><p>所以：不要直接判断两个浮点数是否相等 ! </p></li><li><p>表达式和返回值</p><p>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p>简单理解：是由数字、运算符、变量等组成的式子</p><p>表达式最终都会有一个结果，返回给开发者，称为返回值</p></li></ul><h3 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h3><ul><li><p>递增和递减运算符概述</p><p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。</p><pre><code>在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。注意：递增和递减运算符必须和变量配合使用。 </code></pre></li><li><p>递增运算符</p><ul><li><p>前置递增运算符</p><p>  ++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p><p>  使用口诀：先自加，后返回值</p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;</span><br><span class="line">alert(++num + <span class="hljs-number">10</span>);   <span class="hljs-comment">// 21</span></span><br></pre></td></tr></table></figure><ul><li><p>后置递增运算符</p><p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p><p>使用口诀：先返回原值，后自加 </p></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;</span><br><span class="line">alert(<span class="hljs-number">10</span> + num++);  <span class="hljs-comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li><p>比较运算符概述</p><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%872.png" alt></p></li><li><p>等号比较</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%873.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> == <span class="hljs-string">'18'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> === <span class="hljs-string">'18'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>逻辑运算符概述</p><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%874.png" alt></p></li><li><p>逻辑与&amp;&amp;</p><p>两边都是 true才返回 true，否则返回 false</p></li></ul><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%875.png" alt></p><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%876.png" alt></p><ul><li><p>逻辑或 ||</p><p>两边都是 true才返回 true，否则返回 false</p></li></ul><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%877.png" alt></p><p>  ​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%878.png" alt></p><ul><li><p>逻辑非 ！</p><p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> isOk = !<span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(isOk);  <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>短路运算（逻辑中断）</p><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><ul><li><p>逻辑与</p><p>语法： 表达式1 &amp;&amp; 表达式2</p><pre><code>- 如果第一个表达式的值为真，则返回表达式2- 如果第一个表达式的值为假，则返回表达式1</code></pre><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span> );        <span class="hljs-comment">// 456</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span> );          <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>&amp;&amp; <span class="hljs-number">789</span> );  <span class="hljs-comment">// 789</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑或</p><p>语法： 表达式1 || 表达式2</p><pre><code>- 如果第一个表达式的值为真，则返回表达式1- 如果第一个表达式的值为假，则返回表达式2</code></pre> <figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> );         <span class="hljs-comment">//  123</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> ||  <span class="hljs-number">456</span> );          <span class="hljs-comment">//  456</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> || <span class="hljs-number">789</span> );  <span class="hljs-comment">//  123</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><pre><code>概念：用来把数据赋值给变量的运算符。</code></pre><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%879.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;</span><br><span class="line">age += <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8710.png" alt></p><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="流程控制概念"><a href="#流程控制概念" class="headerlink" title="流程控制概念"></a>流程控制概念</h3><pre><code>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。简单理解：**流程控制就是来控制代码按照一定结构顺序来执行**流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。</code></pre><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8711.png" alt></p><h3 id="顺序流程控制"><a href="#顺序流程控制" class="headerlink" title="顺序流程控制"></a>顺序流程控制</h3><p>​    </p><p>​    顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br>​                <img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8712.png" alt></p><h3 id="分支流程控制"><a href="#分支流程控制" class="headerlink" title="分支流程控制"></a>分支流程控制</h3><ul><li><p>分支结构</p><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><pre><code>![](JavaScript-Day02/%E5%9B%BE%E7%89%8713.png)</code></pre><p>  JS 语言提供了两种分支结构语句：if 语句、switch 语句</p></li><li><p>if 语句</p><ul><li>语法结构</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="hljs-keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="hljs-comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</code></pre><ul><li><p>执行流程</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8714.png" alt></p></li></ul></li><li><p>if else语句（双分支语句）</p><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span></span><br><span class="line"><span class="hljs-keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="hljs-comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行流程</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8715.png" alt></p></li></ul></li><li><p>if else if 语句(多分支语句)</p><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 适合于检查多重条件。</span></span><br><span class="line"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;</span><br><span class="line">    语句<span class="hljs-number">1</span>；</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>)  &#123;</span><br><span class="line">    语句<span class="hljs-number">2</span>；</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>)  &#123;</span><br><span class="line">   语句<span class="hljs-number">3</span>；</span><br><span class="line"> ....</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行逻辑</p><p><img src="/前端笔记/javascript-day02/%E5%9B%BE%E7%89%8716.png" alt></p></li></ul></li></ul><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul><li><p>语法结构</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="hljs-number">1</span> ? 表达式<span class="hljs-number">2</span> : 表达式<span class="hljs-number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行思路</p><ul><li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li><li>简单理解： 就类似于  if  else （双分支） 的简写</li></ul></li></ul><h3 id="switch分支流程控制"><a href="#switch分支流程控制" class="headerlink" title="switch分支流程控制"></a>switch分支流程控制</h3><ul><li><p>语法结构</p><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">switch</span>( 表达式 )&#123; </span><br><span class="line">    <span class="hljs-keyword">case</span> value1:</span><br><span class="line">        <span class="hljs-comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> value2:</span><br><span class="line">        <span class="hljs-comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">        <span class="hljs-comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>switch ：开关 转换  ， case ：小例子   选项</p></li><li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p></li><li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p></li><li><p>switch 表达式的值会与结构中的 case 的值做比较 </p></li><li><p>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p></li><li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p></li></ul></li><li><p>switch 语句和 if else if 语句的区别</p><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</li><li>当分支比较少时，if… else语句的执行效率比 switch语句高。</li><li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.运算符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第02天&quot;&gt;&lt;a href=&quot;#JavaScript基础第02天&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第02天&quot;&gt;&lt;/a&gt;JavaScript基础第02天&lt;/h1&gt;&lt;h2 id=&quot;运算符（操作符）&quot;&gt;&lt;a href=&quot;#运算符（操作符）&quot; class=&quot;headerlink&quot; title=&quot;运算符（操作符）&quot;&gt;&lt;/a&gt;运算符（操作符）&lt;/h2&gt;&lt;h3 id=&quot;运算符的分类&quot;&gt;&lt;a href=&quot;#运算符的分类&quot; class=&quot;headerlink&quot; title=&quot;运算符的分类&quot;&gt;&lt;/a&gt;运算符的分类&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;运算符&lt;/strong&gt;（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JavaScript中常用的运算符有：&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;算数运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递增和递减运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比较运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;赋值运算符&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript-day01/"/>
    <id>http://www.itfool.cn/前端笔记/javascript-day01/</id>
    <published>2020-05-23T05:42:55.000Z</published>
    <updated>2020-05-23T06:20:31.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.变量</p></blockquote><h1 id="JavaScript基础第01天"><a href="#JavaScript基础第01天" class="headerlink" title="JavaScript基础第01天"></a>JavaScript基础第01天</h1><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul><li><p>编程：</p><ul><li>就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</li></ul></li><li><p>计算机程序：</p><ul><li>就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。<a id="more"></a><h3 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h3></li></ul></li><li><p>计算机语言指用于人与计算机之间通讯的语言，它是人与计算机之间传递信息的媒介。</p></li><li><p>计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。</p></li><li><p>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%871.png" alt></p></li></ul><h3 id="编程语言-1"><a href="#编程语言-1" class="headerlink" title="编程语言"></a>编程语言</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编程语言：</span><br><span class="line">可以通过类似于人类语言的“语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。如今通用的编程语言有两种形式：汇编语言和高级语言。</span><br></pre></td></tr></table></figure><table><thead><tr><th>语言类型</th><th align="center">说明</th></tr></thead><tbody><tr><td><strong>汇编语言</strong></td><td align="center">汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</td></tr><tr><td><strong>高级语言</strong></td><td align="center">高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</td></tr></tbody></table><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%872.png" alt></p><h3 id="翻译器"><a href="#翻译器" class="headerlink" title="翻译器"></a>翻译器</h3><pre><code>高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。</code></pre><p> <img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%873.png" alt></p><h3 id="编程语言和标记语言区别"><a href="#编程语言和标记语言区别" class="headerlink" title="编程语言和标记语言区别"></a>编程语言和标记语言区别</h3><table><thead><tr><th>语言</th><th>说明</th></tr></thead><tbody><tr><td>编程语言</td><td>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</td></tr><tr><td>标记语言</td><td>标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>计算机可以帮助人类解决某些问题</li><li>程序员利用编程语言编写程序发出指令控制计算机来实现这些任务</li><li>编程语言有机器语言、汇编语言、高级语言</li><li>高级语言需要一个翻译器转换为计算机识别的机器语言</li><li>编程语言是主动的有很强的逻辑性</li></ol><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%874.png" alt></p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%875.png" alt></p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><ol><li>计算机内部使用二进制 0 和 1来表示数据。</li><li>所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。</li><li>所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</li><li>硬盘、内存都是保存的二进制数据。</li></ol><h3 id="数据存储单位"><a href="#数据存储单位" class="headerlink" title="数据存储单位"></a>数据存储单位</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大小关系：bit &lt; byte &lt; kb &lt; GB &lt; TB&lt;.....</span><br></pre></td></tr></table></figure><ul><li>位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）</li><li>字节(Byte)：1B = 8b</li><li>千字节(KB)：1KB = 1024B</li><li>兆字节(MB)：1MB = 1024KB</li><li>吉字节(GB):  1GB = 1024MB</li><li>太字节(TB):  1TB = 1024GB</li></ul><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%876.png" alt></p><pre><code>计算机运行软件的过程：1. 打开某个程序时，先从硬盘中把程序的代码加载到内存中2. CPU执行内存中的代码   注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</code></pre><h2 id="初始JavaScript"><a href="#初始JavaScript" class="headerlink" title="初始JavaScript"></a>初始JavaScript</h2><h3 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%877.png" alt></p><ul><li><p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p></li><li><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p></li><li><p>现在也可以基于 Node.js 技术进行服务器端编程</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%878.png" alt></p></li></ul><h3 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h3><ul><li>表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova) </li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ul><h3 id="HTML-CSS-JS-的关系"><a href="#HTML-CSS-JS-的关系" class="headerlink" title="HTML/CSS/JS 的关系"></a>HTML/CSS/JS 的关系</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%879.png" alt></p><h3 id="浏览器执行-JS-简介"><a href="#浏览器执行-JS-简介" class="headerlink" title="浏览器执行 JS 简介"></a>浏览器执行 JS 简介</h3><p><strong>浏览器分成两部分：渲染引擎和 JS 引擎</strong></p><p><img src="/前端笔记/javascript-day01/neihe.png" alt></p><pre><code>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</code></pre><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8710.png" alt></p><h3 id="JS-的组成"><a href="#JS-的组成" class="headerlink" title="JS 的组成"></a>JS 的组成</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8711.png" alt></p><ol><li><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a><strong>ECMAScript</strong></h4><p>​        ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8712.png" alt></p><p>​        ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview" target="_blank" rel="noopener">MDN手册</a></p></li><li><h4 id="DOM——文档对象模型"><a href="#DOM——文档对象模型" class="headerlink" title="DOM——文档对象模型"></a><strong>DOM——文档对象模型</strong></h4><p>​        <strong>文档对象模型</strong>（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p></li><li><h4 id="BOM——浏览器对象模型"><a href="#BOM——浏览器对象模型" class="headerlink" title="BOM——浏览器对象模型"></a><strong>BOM——浏览器对象模型</strong></h4><p>​        <strong>浏览器对象模型</strong>(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h3 id="JS-初体验"><a href="#JS-初体验" class="headerlink" title="JS 初体验"></a>JS 初体验</h3><pre><code>JS 有3种书写位置，分别为行内、内嵌和外部。</code></pre><ol><li><p>行内式</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点我试试"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('Hello World')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li><li>特殊情况下使用</li></ul></li><li><p>内嵌式</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    alert(<span class="hljs-string">'Hello  World~!'</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以将多行JS代码写到 script 标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul></li><li><p>外部JS文件</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"my.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</li><li>引用外部 JS文件的 script 标签中间不可以写代码</li><li>适合于JS 代码量比较大的情况</li></ul></li></ol><h2 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><pre><code>为了提高代码的可读性，JS与CSS一样，也提供了注释功能。JS中的注释主要有两种，分别是 单行注释 和 多行注释。</code></pre><p>单行注释的注释方式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 我是一行文字，不想被 JS引擎 执行，所以 注释起来</span><br></pre></td></tr></table></figure><pre><code>// 用来注释单行文字（  快捷键   ctrl  +  /   ）</code></pre><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释的注释方式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  获取用户年龄和姓名</span><br><span class="line">  并通过提示框显示出来</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* */  用来注释多行文字（ 默认快捷键  alt +  shift  + a ）</span><br></pre></td></tr></table></figure><p>快捷键修改为：   ctrl + shift  +  /</p><p>vscode → 首选项按钮 → 键盘快捷方式 → 查找 原来的快捷键 → 修改为新的快捷键 → 回车确认</p><h2 id="JavaScript输入输出语句"><a href="#JavaScript输入输出语句" class="headerlink" title="JavaScript输入输出语句"></a>JavaScript输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li></ul><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p><p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。<br><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8713.png" alt></p><h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><pre><code>本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。  </code></pre><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8714.png" alt></p><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><ul><li>变量的声明   </li><li>变量的赋值 </li></ul><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//  声明变量  </span></span><br><span class="line"><span class="hljs-keyword">var</span> age; <span class="hljs-comment">//  声明一个 名称为age 的变量</span></span><br></pre></td></tr></table></figure><ul><li><p>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p></li><li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p></li></ul><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="hljs-number">10</span>; <span class="hljs-comment">// 给 age  这个变量赋值为 10</span></span><br></pre></td></tr></table></figure><ul><li>= 用来把右边的值赋给左边的变量空间中   此处代表赋值的意思</li><li>变量值是程序员保存到变量空间里的值</li></ul><h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age  = <span class="hljs-number">18</span>;  <span class="hljs-comment">// 声明变量同时赋值为 18</span></span><br><span class="line"><span class="hljs-comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span></span><br></pre></td></tr></table></figure><h3 id="变量语法扩展"><a href="#变量语法扩展" class="headerlink" title="变量语法扩展"></a>变量语法扩展</h3><ul><li><p>更新变量</p><p>​        一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;</span><br><span class="line"></span><br><span class="line">age = <span class="hljs-number">81</span>;   <span class="hljs-comment">// 最后的结果就是81因为18 被覆盖掉了</span></span><br></pre></td></tr></table></figure></li><li><p>同时声明多个变量</p><p>​        同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>,  name = <span class="hljs-string">'zs'</span>, sex = <span class="hljs-number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var  age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值  直接使用</td><td>报错</td></tr><tr><td>age   = 10; console.log (age);</td><td>不声明   只赋值</td><td>10</td></tr></tbody></table></li></ul><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><p>规则：</p><ul><li>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</li><li>严格区分大小写。var app; 和 var App; 是两个变量</li><li>不能 以数字开头。  18age   是错误的</li><li>不能 是关键字、保留字。例如：var、for、while</li><li>变量名必须有意义。 MMD   BBD        nl   →     age  </li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName<img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8715.png" alt></li></ul><p>推荐翻译网站： 有道    爱词霸</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型简介"><a href="#数据类型简介" class="headerlink" title="数据类型简介"></a>数据类型简介</h3><ul><li><p>为什么需要数据类型</p><p>​        在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p><pre><code>简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</code></pre></li><li><p>变量的数据类型</p><p>​        变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;        <span class="hljs-comment">// 这是一个数字型</span></span><br><span class="line"><span class="hljs-keyword">var</span> areYouOk = <span class="hljs-string">'是的'</span>;   <span class="hljs-comment">// 这是一个字符串</span></span><br></pre></td></tr></table></figure><p>​        在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">6</span>;           <span class="hljs-comment">// x 为数字</span></span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-string">"Bill"</span>;      <span class="hljs-comment">// x 为字符串</span></span><br></pre></td></tr></table></figure></li><li><p>数据类型的分类</p><p>JS 把数据类型分为两类：</p><ul><li><p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p></li><li><p>复杂数据类型 （object)    </p></li></ul></li></ul><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>简单数据类型（基本数据类型）</p><p>JavaScript 中的简单数据类型及其说明如下：</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8716.png" alt></p><ul><li><p>数字型 Number</p><p>​        JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">21</span>;       <span class="hljs-comment">// 整数</span></span><br><span class="line"><span class="hljs-keyword">var</span> Age = <span class="hljs-number">21.3747</span>;  <span class="hljs-comment">// 小数</span></span><br></pre></td></tr></table></figure><ol><li><p>数字型进制</p><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">07</span>;   <span class="hljs-comment">// 对应十进制的7</span></span><br><span class="line"><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">019</span>;  <span class="hljs-comment">// 对应十进制的19</span></span><br><span class="line"><span class="hljs-keyword">var</span> num3 = <span class="hljs-number">08</span>;   <span class="hljs-comment">// 对应十进制的8</span></span><br><span class="line"> <span class="hljs-comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0xA</span>;</span><br></pre></td></tr></table></figure><p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p></li><li><p>数字型范围</p><p>JavaScript中数值的最大和最小值</p><ul><li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p></li><li><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p></li></ul></li></ol></li></ul><ol start="3"><li><p>数字型三个特殊值</p><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul><ol start="4"><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p></li></ol><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8717.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">var</span> usrAge = <span class="hljs-number">21</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> isOk = <span class="hljs-built_in">isNaN</span>(userAge);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(isNum);          <span class="hljs-comment">// false ，21 不是一个非数字</span></span><br><span class="line"><span class="hljs-keyword">var</span> usrName = <span class="hljs-string">"andy"</span>;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(userName));<span class="hljs-comment">// true ，"andy"是一个非数字</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>字符串型 String</p><p>​        字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">"我爱北京天安门~"</span>;  <span class="hljs-comment">// 使用双引号表示字符串</span></span><br><span class="line"><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">'我爱吃猪蹄~'</span>;    <span class="hljs-comment">// 使用单引号表示字符串</span></span><br><span class="line"><span class="hljs-comment">// 常见错误</span></span><br><span class="line"><span class="hljs-keyword">var</span> strMsg3 = 我爱大肘子;       <span class="hljs-comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span><br></pre></td></tr></table></figure><p>​        因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p><ol><li><p>字符串引号嵌套</p><p>​        JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">'我是"高帅富"程序猿'</span>;   <span class="hljs-comment">// 可以用''包含""</span></span><br><span class="line"><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">"我是'高帅富'程序猿"</span>;  <span class="hljs-comment">// 也可以用"" 包含''</span></span><br><span class="line"><span class="hljs-comment">//  常见错误</span></span><br><span class="line"><span class="hljs-keyword">var</span> badQuotes = <span class="hljs-string">'What on earth?"; // 报错，不能 单双引号搭配</span></span><br></pre></td></tr></table></figure></li><li><p>字符串转义符</p><p>​        类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>​        转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n   是   newline   的意思</td></tr><tr><td>\ \</td><td>斜杠   \</td></tr><tr><td>&#39;</td><td>‘   单引号</td></tr><tr><td>&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab  缩进</td></tr><tr><td>\b</td><td>空格 ，b   是   blank  的意思</td></tr></tbody></table></li><li><p>字符串长度</p><p>​        字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">"我是帅气多金的程序猿！"</span>;</span><br><span class="line">alert(strMsg.length); <span class="hljs-comment">// 显示 11</span></span><br></pre></td></tr></table></figure></li><li><p>字符串拼接</p><ul><li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p></li><li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1.1 字符串 "相加"</span></span><br><span class="line">alert(<span class="hljs-string">'hello'</span> + <span class="hljs-string">' '</span> + <span class="hljs-string">'world'</span>); <span class="hljs-comment">// hello world</span></span><br><span class="line"><span class="hljs-comment">//1.2 数值字符串 "相加"</span></span><br><span class="line">alert(<span class="hljs-string">'100'</span> + <span class="hljs-string">'100'</span>); <span class="hljs-comment">// 100100</span></span><br><span class="line"><span class="hljs-comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="hljs-string">'11'</span> + <span class="hljs-number">12</span>);     <span class="hljs-comment">// 1112</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>+ 号总结口诀：数值相加 ，字符相连</em></strong></li></ul></li></ul></li><li><p>字符串拼接加强</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师'</span> + <span class="hljs-number">18</span>);        <span class="hljs-comment">// 只要有字符就会相连 </span></span><br><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师age岁啦'</span>);      <span class="hljs-comment">// 这样不行哦</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师'</span> + age);         <span class="hljs-comment">// pink老师18</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'pink老师'</span> + age + <span class="hljs-string">'岁啦'</span>); <span class="hljs-comment">// pink老师18岁啦</span></span><br></pre></td></tr></table></figure><ul><li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li></ul></li></ol></li><li><p>布尔型Boolean</p><p>​        布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>​        布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 2</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>Undefined和 Null</p><p>​        一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> variable;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(variable);           <span class="hljs-comment">// undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你好'</span> + variable);  <span class="hljs-comment">// 你好undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + variable);     <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + variable);   <span class="hljs-comment">//  NaN</span></span><br></pre></td></tr></table></figure><p>​        一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> vari = <span class="hljs-literal">null</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你好'</span> + vari);  <span class="hljs-comment">// 你好null</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + vari);     <span class="hljs-comment">// 11</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + vari);   <span class="hljs-comment">//  1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取变量数据类型"><a href="#获取变量数据类型" class="headerlink" title="获取变量数据类型"></a>获取变量数据类型</h3><ul><li><p>获取检测变量的数据类型</p><p>​        typeof 可用来获取检测变量的数据类型</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num) <span class="hljs-comment">// 结果 number</span></span><br></pre></td></tr></table></figure><p>​        不同类型的返回值</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8718.png" alt></p></li><li><p>字面量</p><p>​        字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8, 9, 10</li><li>字符串字面量：’黑马程序员’, “大前端”</li><li>布尔字面量：true，false</li></ul></li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>​        什么是数据类型转换？</p><p>​        使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转换为字符串类型</span><br><span class="line">转换为数字型</span><br><span class="line">转换为布尔型</span><br></pre></td></tr></table></figure><ul><li><p>转换为字符串</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8719.png" alt></p><ul><li>toString() 和 String()  使用方式不一样。</li><li>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</li></ul></li><li><p>转换为数字型（重点）</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8720.png" alt></p><ul><li>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</li><li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li></ul></li><li><p>转换为布尔型</p><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8721.png" alt></p><ul><li><p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined  </p></li><li><p>其余值都会被转换为 true</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">''</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">'小白'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">12</span>)); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="解释型语言和编译型语言"><a href="#解释型语言和编译型语言" class="headerlink" title="解释型语言和编译型语言"></a>解释型语言和编译型语言</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</code></pre><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8722.png" alt></p><ul><li>翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同</li><li>编译器是在代码执行之前进行编译，生成中间代码文件</li><li>解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li></ul><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p><img src="/前端笔记/javascript-day01/%E5%9B%BE%E7%89%8723.png" alt></p><pre><code>类似于请客吃饭：    编译语言：首先把所有菜做好，才能上桌吃饭    解释语言：好比吃火锅，边吃边涮，同时进行</code></pre><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><pre><code>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。标识符不能是关键字或保留字。</code></pre><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><pre><code>关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</code></pre><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><pre><code>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript基础第01天&quot;&gt;&lt;a href=&quot;#JavaScript基础第01天&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础第01天&quot;&gt;&lt;/a&gt;JavaScript基础第01天&lt;/h1&gt;&lt;h2 id=&quot;编程语言&quot;&gt;&lt;a href=&quot;#编程语言&quot; class=&quot;headerlink&quot; title=&quot;编程语言&quot;&gt;&lt;/a&gt;编程语言&lt;/h2&gt;&lt;h3 id=&quot;编程&quot;&gt;&lt;a href=&quot;#编程&quot; class=&quot;headerlink&quot; title=&quot;编程&quot;&gt;&lt;/a&gt;编程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算机程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>响应式布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/响应式布局/</id>
    <published>2020-05-23T03:31:38.000Z</published>
    <updated>2020-05-23T03:33:51.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.响应式布局</p></blockquote><h1 id="移动端WEB开发之响应式布局"><a href="#移动端WEB开发之响应式布局" class="headerlink" title="移动端WEB开发之响应式布局"></a>移动端WEB开发之响应式布局</h1><h3 id="响应式开发原理"><a href="#响应式开发原理" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h3><h4 id="响应式开发原理-1"><a href="#响应式开发原理-1" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h4><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）<a id="more"></a><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4></li></ul><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h3 id="bootstrap的介绍"><a href="#bootstrap的介绍" class="headerlink" title="bootstrap的介绍"></a>bootstrap的介绍</h3><h4 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h4><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/" target="_blank" rel="noopener">中文网</a>  <a href="lhttp://getbootstrap.com/" target="_blank" rel="noopener">官网</a>  <a href="http://bootstrap.css88.com/" target="_blank" rel="noopener">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h4 id="bootstrap优点"><a href="#bootstrap优点" class="headerlink" title="bootstrap优点"></a>bootstrap优点</h4><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h4 id="版本简介"><a href="#版本简介" class="headerlink" title="版本简介"></a>版本简介</h4><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h4 id="bootstrap基本使用"><a href="#bootstrap基本使用" class="headerlink" title="bootstrap基本使用"></a>bootstrap基本使用</h4><p>在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。</p><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  </p><p><img src="/前端笔记/响应式布局/1.png" alt></p></li></ol><ol start="2"><li><p>创建 html 骨架结构 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary for Bootstrap&apos;s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>引入相关样式文件  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Bootstrap 核心样式--&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>书写内容 </p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h4 id="bootstrap布局容器"><a href="#bootstrap布局容器" class="headerlink" title="bootstrap布局容器"></a>bootstrap布局容器</h4><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 或者.container-fluid 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1170px</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h4 id="Bootstrap栅格系统"><a href="#Bootstrap栅格系统" class="headerlink" title="Bootstrap栅格系统"></a>Bootstrap栅格系统</h4><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p>栅格嵌套</p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*<br>元素内。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列嵌套 --&gt;</span><br><span class="line"> &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;col-sm-6&quot;&gt;小列&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;col-sm-6&quot;&gt;小列&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>列偏移</p><p>使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列偏移 --&gt;</span><br><span class="line"> &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-4&quot;&gt;1&lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-4 col-lg-offset-4&quot;&gt;2&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>列排序</p><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列排序 --&gt;</span><br><span class="line"> &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-4 col-lg-push-8&quot;&gt;左侧&lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;col-lg-8 col-lg-pull-4&quot;&gt;右侧&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>响应式工具</p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><p><img src="/前端笔记/响应式布局/2.jpg" alt></p><h3 id="阿里百秀案例制作"><a href="#阿里百秀案例制作" class="headerlink" title="阿里百秀案例制作"></a>阿里百秀案例制作</h3><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>方案：我们采取响应式页面开发方案</p><p>技术：bootstrap框架</p><p>设计图： 本设计图采用 1280px 设计尺寸</p><p>项目结构搭建</p><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  </p></li><li><p>创建 html 骨架结构  </p></li><li><p>引入相关样式文件  </p></li><li><p>书写内容 </p></li></ol><p>container宽度修改</p><p>因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 利用媒体查询修改 container宽度适合效果图宽度  */</span><br><span class="line"> @media (min-width: 1280px) &#123; </span><br><span class="line">   .container &#123; </span><br><span class="line">width: 1280px; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.响应式布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动端WEB开发之响应式布局&quot;&gt;&lt;a href=&quot;#移动端WEB开发之响应式布局&quot; class=&quot;headerlink&quot; title=&quot;移动端WEB开发之响应式布局&quot;&gt;&lt;/a&gt;移动端WEB开发之响应式布局&lt;/h1&gt;&lt;h3 id=&quot;响应式开发原理&quot;&gt;&lt;a href=&quot;#响应式开发原理&quot; class=&quot;headerlink&quot; title=&quot;响应式开发原理&quot;&gt;&lt;/a&gt;响应式开发原理&lt;/h3&gt;&lt;h4 id=&quot;响应式开发原理-1&quot;&gt;&lt;a href=&quot;#响应式开发原理-1&quot; class=&quot;headerlink&quot; title=&quot;响应式开发原理&quot;&gt;&lt;/a&gt;响应式开发原理&lt;/h4&gt;&lt;p&gt;就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。&lt;/p&gt;
&lt;p&gt;设备的划分情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小于768的为超小屏幕（手机）&lt;/li&gt;
&lt;li&gt;768~992之间的为小屏设备（平板）&lt;/li&gt;
&lt;li&gt;992~1200的中等屏幕（桌面显示器）&lt;/li&gt;
&lt;li&gt;大于1200的宽屏设备（大桌面显示器）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>rem布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/rem%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/rem布局/</id>
    <published>2020-05-23T03:16:34.000Z</published>
    <updated>2020-05-23T03:30:04.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.rem布局</p></blockquote><h1 id="移动web开发之rem布局"><a href="#移动web开发之rem布局" class="headerlink" title="移动web开发之rem布局"></a>移动web开发之rem布局</h1><h3 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h3><h4 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h4><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</p><p>不同的是rem的基准是相对于html元素的字体大小。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 根html 为 12px */</span><br><span class="line">html &#123;</span><br><span class="line">   font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">/* 此时 div 的字体大小就是 24px */       </span><br><span class="line">div &#123;</span><br><span class="line">    font-size: 2rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><a id="more"></a><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><h4 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h4><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面 </li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><h4 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h4><ul><li>用 @media开头 注意@符号</li><li>mediatype  媒体类型</li><li>关键字 and  not  only</li><li>media feature 媒体特性必须有小括号包含</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media mediatype and|not|only (media feature) &#123;</span><br><span class="line">    CSS-Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>mediatype 查询类型</li></ol><p>​       将不同的终端设备划分成不同的类型，称为媒体类型</p><p><img src="/前端笔记/rem布局/1.jpg" alt></p><ol start="2"><li>关键字</li></ol><p>​       关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。    </li></ul><ol start="3"><li><p>媒体特性</p><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。</p><p>注意他们要加小括号包含</p><p><img src="/前端笔记/rem布局/2.jpg" alt></p></li></ol><ol start="4"><li><p>媒体查询书写规则</p><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p><p><img src="/前端笔记/rem布局/3.png" alt></p></li></ol><h3 id="less-基础"><a href="#less-基础" class="headerlink" title="less 基础"></a>less 基础</h3><h4 id="维护css弊端"><a href="#维护css弊端" class="headerlink" title="维护css弊端"></a>维护css弊端</h4><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。 </li></ul><h4 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h4><p>Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。</p><p>做为 CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。</p><p>它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p><p>Less中文网址：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://</a><a href="http://lesscss.cn/" target="_blank" rel="noopener">less</a><a href="http://lesscss.cn/" target="_blank" rel="noopener">css.cn/</a></p><p>常见的CSS预处理器：Sass、Less、Stylus</p><p>一句话：Less是一门 CSS 预处理语言，它扩展了CSS的动态特性。</p><p>Less安装</p><p>①安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd）  —输入“node –v”查看版本即可</p><p>③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可</p><p>④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p><p>Less 使用之变量</p><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@变量名:值;</span><br></pre></td></tr></table></figure><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@color: pink;</span><br></pre></td></tr></table></figure><p>Less 编译 vocode Less 插件</p><p>Easy LESS 插件用来把less文件编译为css文件</p><p>安装完毕插件，重新加载下 vscode。</p><p>只要保存一下Less文件，会自动生成CSS文件。</p><p><img src="/前端笔记/rem布局/4.png" alt></p><p>Less 嵌套</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将css改为less</span><br><span class="line">#header .logo &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#header &#123;</span><br><span class="line">    .logo &#123;</span><br><span class="line">       width: 300px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">a&#123;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">      color:red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Less 运算</p><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*Less 里面写*/</span><br><span class="line">@witdh: 10px + 5;</span><br><span class="line">div &#123;</span><br><span class="line">    border: @witdh solid red;</span><br><span class="line">&#125;</span><br><span class="line">/*生成的css*/</span><br><span class="line">div &#123;</span><br><span class="line">  border: 15px solid red;</span><br><span class="line">&#125;</span><br><span class="line">/*Less 甚至还可以这样 */</span><br><span class="line">width: (@width + 5) * 2;</span><br></pre></td></tr></table></figure><ul><li>乘号（*）和除号（/）的写法  </li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h3 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h3><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><p>技术方案：</p><p>1.less+rem+媒体查询</p><p>2.lflexible.js+rem</p><p>总结： </p><p>两种方案现在都存在。</p><p>方案2 更简单，现阶段大家无需了解里面的js代码。</p><h4 id="rem实际开发适配方案1"><a href="#rem实际开发适配方案1" class="headerlink" title="rem实际开发适配方案1"></a>rem实际开发适配方案1</h4><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100<em>100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem</em>2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h3 id="苏宁首页"><a href="#苏宁首页" class="headerlink" title="苏宁首页"></a>苏宁首页</h3><p>苏宁首页地址 ：<a href="m.suning.com">苏宁首页</a></p><p>1、 技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取rem适配布局（less + rem  + 媒体查询）</p><p>设计图： 本设计图采用 750px 设计尺寸</p><p>2、搭建文件结构</p><p><img src="/前端笔记/rem布局/5.jpg" alt></p><p>3、设置视口标签以及引入初始化样式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,         initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>4、设置公共common.less文件</p><ul><li>新建common.less    设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要</li><li>我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li><li>划分的份数我们定为 15等份</li><li>因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面</li></ul><h3 id="rem-适配方案2"><a href="#rem-适配方案2" class="headerlink" title="rem 适配方案2"></a>rem 适配方案2</h3><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p>里面页面元素rem值： 页面元素的px 值 /  75  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://link.jianshu.com/?t=https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><p><img src="/前端笔记/rem布局/6.jpg" alt></p><p><img src="/前端笔记/rem布局/7.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.rem布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动web开发之rem布局&quot;&gt;&lt;a href=&quot;#移动web开发之rem布局&quot; class=&quot;headerlink&quot; title=&quot;移动web开发之rem布局&quot;&gt;&lt;/a&gt;移动web开发之rem布局&lt;/h1&gt;&lt;h3 id=&quot;rem基础&quot;&gt;&lt;a href=&quot;#rem基础&quot; class=&quot;headerlink&quot; title=&quot;rem基础&quot;&gt;&lt;/a&gt;rem基础&lt;/h3&gt;&lt;h4 id=&quot;rem单位&quot;&gt;&lt;a href=&quot;#rem单位&quot; class=&quot;headerlink&quot; title=&quot;rem单位&quot;&gt;&lt;/a&gt;rem单位&lt;/h4&gt;&lt;p&gt;rem (root em)是一个相对单位，类似于em，em是父元素字体大小。&lt;/p&gt;
&lt;p&gt;不同的是rem的基准是相对于html元素的字体大小。&lt;/p&gt;
&lt;p&gt;比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* 根html 为 12px */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   font-size: 12px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 此时 div 的字体大小就是 24px */       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    font-size: 2rem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/flex布局/</id>
    <published>2020-05-23T03:08:33.000Z</published>
    <updated>2020-05-23T03:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.flex布局</p></blockquote><h1 id="移动web开发——flex布局"><a href="#移动web开发——flex布局" class="headerlink" title="移动web开发——flex布局"></a>移动web开发——flex布局</h1><h2 id="传统布局和flex布局对比"><a href="#传统布局和flex布局对比" class="headerlink" title="传统布局和flex布局对比"></a>传统布局和flex布局对比</h2><h3 id="传统布局"><a href="#传统布局" class="headerlink" title="传统布局"></a>传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul><a id="more"></a><h2 id="flex布局原理"><a href="#flex布局原理" class="headerlink" title="flex布局原理"></a>flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 </li><li>采用 Flex 布局的元素，称为 Flex 容器（flex</li></ul><p>container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex<br>item），简称”项目”。</p><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id="父项常见属性"><a href="#父项常见属性" class="headerlink" title="父项常见属性"></a>父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行  </li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="flex-direction设置主轴的方向"><a href="#flex-direction设置主轴的方向" class="headerlink" title="flex-direction设置主轴的方向"></a>flex-direction设置主轴的方向</h3><ul><li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</li><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ul><p><img src="/前端笔记/flex布局/1.JPG" alt></p><ul><li><p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p><p><img src="/前端笔记/flex布局/2.JPG" alt></p></li></ul><h3 id="justify-content-设置主轴上的子元素排列方式"><a href="#justify-content-设置主轴上的子元素排列方式" class="headerlink" title="justify-content 设置主轴上的子元素排列方式"></a>justify-content 设置主轴上的子元素排列方式</h3><p><img src="/前端笔记/flex布局/3.JPG" alt></p><h3 id="flex-wrap设置是否换行"><a href="#flex-wrap设置是否换行" class="headerlink" title="flex-wrap设置是否换行"></a>flex-wrap设置是否换行</h3><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h3 id="align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="align-items 设置侧轴上的子元素排列方式（单行 ）"></a>align-items 设置侧轴上的子元素排列方式（单行 ）</h3><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式  在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h3 id="align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="align-content  设置侧轴上的子元素的排列方式（多行）"></a>align-content  设置侧轴上的子元素的排列方式（多行）</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</p><p><img src="/前端笔记/flex布局/4.JPG" alt></p><h3 id="align-content-和align-items区别"><a href="#align-content-和align-items区别" class="headerlink" title="align-content 和align-items区别"></a>align-content 和align-items区别</h3><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 </li><li>总结就是单行找align-items  多行找 align-content</li></ul><h3 id="flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow:row wrap;</span><br></pre></td></tr></table></figure><h2 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">    flex: &lt;number&gt;; /* 默认值 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="align-self控制子项自己在侧轴上的排列方式"><a href="#align-self控制子项自己在侧轴上的排列方式" class="headerlink" title="align-self控制子项自己在侧轴上的排列方式"></a>align-self控制子项自己在侧轴上的排列方式</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">span:nth-child(2) &#123;</span><br><span class="line">      /* 设置自己在侧轴上的排列方式 */</span><br><span class="line">      align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="order-属性定义项目的排列顺序"><a href="#order-属性定义项目的排列顺序" class="headerlink" title="order 属性定义项目的排列顺序"></a>order 属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">    order: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="携程网首页案例制作"><a href="#携程网首页案例制作" class="headerlink" title="携程网首页案例制作"></a>携程网首页案例制作</h2><p>携程网链接：<a href="http://m.ctrip.com" target="_blank" rel="noopener">http://m.ctrip.com</a></p><p>1.技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取flex布局</p><p>2.搭建相关文件夹</p><p><img src="/前端笔记/flex布局/5.JPG" alt></p><p>3.设置视口标签以及引入初始化样式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>4.常用初始化样式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  max-width: 540px;</span><br><span class="line">  min-width: 320px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  font: normal 14px/1.5 Tahoma,&quot;Lucida Grande&quot;,Verdana,&quot;Microsoft Yahei&quot;,STXihei,hei;</span><br><span class="line">  color: #000;</span><br><span class="line">  background: #f2f2f2;</span><br><span class="line">  overflow-x: hidden;</span><br><span class="line">  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.模块名字划分</p><p><img src="/前端笔记/flex布局/6.JPG" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.flex布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动web开发——flex布局&quot;&gt;&lt;a href=&quot;#移动web开发——flex布局&quot; class=&quot;headerlink&quot; title=&quot;移动web开发——flex布局&quot;&gt;&lt;/a&gt;移动web开发——flex布局&lt;/h1&gt;&lt;h2 id=&quot;传统布局和flex布局对比&quot;&gt;&lt;a href=&quot;#传统布局和flex布局对比&quot; class=&quot;headerlink&quot; title=&quot;传统布局和flex布局对比&quot;&gt;&lt;/a&gt;传统布局和flex布局对比&lt;/h2&gt;&lt;h3 id=&quot;传统布局&quot;&gt;&lt;a href=&quot;#传统布局&quot; class=&quot;headerlink&quot; title=&quot;传统布局&quot;&gt;&lt;/a&gt;传统布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;兼容性好&lt;/li&gt;
&lt;li&gt;布局繁琐&lt;/li&gt;
&lt;li&gt;局限性，不能再移动端很好的布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作方便，布局极其简单，移动端使用比较广泛&lt;/li&gt;
&lt;li&gt;pc端浏览器支持情况比较差&lt;/li&gt;
&lt;li&gt;IE11或更低版本不支持flex或仅支持部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;建议&quot;&gt;&lt;a href=&quot;#建议&quot; class=&quot;headerlink&quot; title=&quot;建议&quot;&gt;&lt;/a&gt;建议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果是pc端页面布局，还是采用传统方式&lt;/li&gt;
&lt;li&gt;如果是移动端或者是不考虑兼容的pc则采用flex&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>流式布局</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://www.itfool.cn/前端笔记/流式布局/</id>
    <published>2020-05-23T03:02:16.000Z</published>
    <updated>2020-05-23T03:14:38.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.流式布局</p></blockquote><h1 id="移动web开发——流式布局"><a href="#移动web开发——流式布局" class="headerlink" title="移动web开发——流式布局"></a>移动web开发——流式布局</h1><h3 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h3><h4 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h4><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><a id="more"></a><h4 id="手机屏幕的现状"><a href="#手机屏幕的现状" class="headerlink" title="手机屏幕的现状"></a>手机屏幕的现状</h4><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h4 id="常见移动端屏幕尺寸"><a href="#常见移动端屏幕尺寸" class="headerlink" title="常见移动端屏幕尺寸"></a>常见移动端屏幕尺寸</h4><p><img src="/前端笔记/流式布局/1(1).png" alt></p><h4 id="移动端调试方法"><a href="#移动端调试方法" class="headerlink" title="移动端调试方法"></a>移动端调试方法</h4><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h4 id="布局视口-layout-viewport"><a href="#布局视口-layout-viewport" class="headerlink" title="布局视口 layout viewport"></a>布局视口 layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><p><img src="/前端笔记/流式布局/2.png" alt></p><h4 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h4><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><p><img src="/前端笔记/流式布局/3.png" alt></p><h4 id="理想视口-ideal-viewport"><a href="#理想视口-ideal-viewport" class="headerlink" title="理想视口 ideal viewport"></a>理想视口 ideal viewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><p><img src="/前端笔记/流式布局/4.png" alt></p><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h3 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h3><h4 id="物理像素-amp-物理像素比"><a href="#物理像素-amp-物理像素比" class="headerlink" title="物理像素&amp;物理像素比"></a>物理像素&amp;物理像素比</h4><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h4 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: 背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="移动开发选择和技术解决方案"><a href="#移动开发选择和技术解决方案" class="headerlink" title="移动开发选择和技术解决方案"></a>移动开发选择和技术解决方案</h3><h4 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h4><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><p><img src="/前端笔记/流式布局/5.png" alt></p><p>京东移动端：</p><p><img src="/前端笔记/流式布局/6.jpg" alt></p><p>2.响应式页面兼容移动端（其次）</p><p><img src="/前端笔记/流式布局/7.jpg" alt></p><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h4 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</p><p>我们可以放心使用 H5 标签和 CSS3 样式。</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><h4 id="移动端大量使用-CSS3盒子模型box-sizin"><a href="#移动端大量使用-CSS3盒子模型box-sizin" class="headerlink" title="移动端大量使用 CSS3盒子模型box-sizin"></a>移动端大量使用 CSS3盒子模型box-sizin</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*CSS3盒子模型*/</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">/*传统盒子模型*/</span><br><span class="line">box-sizing: content-box;</span><br></pre></td></tr></table></figure><p>移动端可以全部CSS3 盒子模型</p><p>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h4 id="移动端特殊样式"><a href="#移动端特殊样式" class="headerlink" title="移动端特殊样式"></a>移动端特殊样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*CSS3盒子模型*/</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">-webkit-box-sizing: border-box;</span><br><span class="line">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span><br><span class="line">-webkit-tap-highlight-color: transparent;</span><br><span class="line">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span><br><span class="line">-webkit-appearance: none;</span><br><span class="line">/*禁用长按页面时的弹出菜单*/</span><br><span class="line">img,a &#123; -webkit-touch-callout: none; &#125;</span><br></pre></td></tr></table></figure><h3 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h3><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。</p><p>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>流式布局方式是移动web开发使用的比较常见的布局方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.流式布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;移动web开发——流式布局&quot;&gt;&lt;a href=&quot;#移动web开发——流式布局&quot; class=&quot;headerlink&quot; title=&quot;移动web开发——流式布局&quot;&gt;&lt;/a&gt;移动web开发——流式布局&lt;/h1&gt;&lt;h3 id=&quot;移动端基础&quot;&gt;&lt;a href=&quot;#移动端基础&quot; class=&quot;headerlink&quot; title=&quot;移动端基础&quot;&gt;&lt;/a&gt;移动端基础&lt;/h3&gt;&lt;h4 id=&quot;浏览器现状&quot;&gt;&lt;a href=&quot;#浏览器现状&quot; class=&quot;headerlink&quot; title=&quot;浏览器现状&quot;&gt;&lt;/a&gt;浏览器现状&lt;/h4&gt;&lt;p&gt; PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。&lt;/p&gt;
&lt;p&gt;移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。&lt;/p&gt;
&lt;p&gt;国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="布局" scheme="http://www.itfool.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML5+CSS3-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html5-css3-day03/"/>
    <id>http://www.itfool.cn/前端笔记/html5-css3-day03/</id>
    <published>2020-05-23T02:33:10.000Z</published>
    <updated>2020-05-23T02:52:42.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.3D转换</p></blockquote><h3 id="HTML5-第三天"><a href="#HTML5-第三天" class="headerlink" title="HTML5  第三天"></a><code>HTML5</code>  第三天</h3><h6 id="一、-认识-3D-转换"><a href="#一、-认识-3D-转换" class="headerlink" title="一、 认识 3D 转换"></a>一、 认识 <code>3D</code> 转换</h6><ol><li><p><code>3D</code> 的特点</p><ul><li>近大远小</li><li>物体和面遮挡不可见</li></ul></li><li><p>三维坐标系</p><ul><li><p>x 轴：水平向右  – <strong>注意：x 轴右边是正值，左边是负值</strong></p></li><li><p>y 轴：垂直向下  – <strong>注意：y 轴下面是正值，上面是负值</strong></p></li><li><p>z 轴：垂直屏幕  –  <strong>注意：往外边的是正值，往里面的是负值</strong></p><a id="more"></a><p><img src="/前端笔记/html5-css3-day03/sanwei.png" alt></p></li></ul></li></ol><p>​          </p><h6 id="二、3D-转换"><a href="#二、3D-转换" class="headerlink" title="二、3D 转换"></a>二、<code>3D</code> 转换</h6><ol><li><p><code>3D</code> 转换知识要点</p><ul><li><code>3D</code> 位移：<code>translate3d(x, y, z)</code></li><li><code>3D</code> 旋转：<code>rotate3d(x, y, z)</code></li><li>透视：<code>perspctive</code></li><li><code>3D</code>呈现 <code>transfrom-style</code></li></ul></li><li><p><code>3D</code> 移动 <code>translate3d</code></p><ul><li><code>3D</code> 移动就是在 <code>2D</code> 移动的基础上多加了一个可以移动的方向，就是 z 轴方向</li><li><code>transform: translateX(100px)</code>：仅仅是在 x 轴上移动</li><li><code>transform: translateY(100px)</code>：仅仅是在 y 轴上移动</li><li><code>transform: translateZ(100px)</code>：仅仅是在 z 轴上移动</li><li><code>transform: translate3d(x, y, z)</code>：其中x、y、z 分别指要移动的轴的方向的距离</li><li><strong>注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充</strong></li></ul></li><li><p>语法</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate3d</span>(<span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span>, <span class="hljs-selector-tag">z</span>)</span><br></pre></td></tr></table></figure></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate3d</span>(100<span class="hljs-selector-tag">px</span>, 100<span class="hljs-selector-tag">px</span>, 100<span class="hljs-selector-tag">px</span>)</span><br><span class="line"><span class="hljs-comment">/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */</span></span><br><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate3d</span>(100<span class="hljs-selector-tag">px</span>, 100<span class="hljs-selector-tag">px</span>, 0)</span><br></pre></td></tr></table></figure></li></ol><h6 id="三、透视-perspective"><a href="#三、透视-perspective" class="headerlink" title="三、透视 perspective"></a>三、透视 <code>perspective</code></h6><ol><li><p>知识点讲解</p><ul><li>如果想要网页产生 <code>3D</code> 效果需要透视(理解成 <code>3D</code> 物体投影的 <code>2D</code> 平面上)</li><li>实际上模仿人类的视觉位置，可视为安排一直眼睛去看</li><li>透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul></li><li><p>知识要点</p><ul><li><p><strong>透视需要写在被视察元素的父盒子上面</strong></p></li><li><p>注意下方图片</p><ul><li><p>d：就是视距，视距就是指人的眼睛到屏幕的距离</p></li><li><p>z：就是 z 轴，z 轴越大(正值)，我们看到的物体就越大</p><p><img src="/前端笔记/html5-css3-day03/perspective.png" alt></p></li></ul></li></ul><p>​            </p></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="四、-translateZ"><a href="#四、-translateZ" class="headerlink" title="四、 translateZ"></a>四、 <code>translateZ</code></h6><ol><li><code>translateZ</code> 与 <code>perspecitve</code> 的区别<ul><li><code>perspecitve</code> 给父级进行设置，<code>translateZ</code> 给 子元素进行设置不同的大小</li></ul></li></ol><h6 id="五、3D-旋转rotateX"><a href="#五、3D-旋转rotateX" class="headerlink" title="五、3D 旋转rotateX"></a>五、<code>3D</code> 旋转<code>rotateX</code></h6><blockquote><p>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转</p></blockquote><ol><li><p>语法</p><ul><li><code>transform: rotateX(45deg)</code> – 沿着 x 轴正方向旋转 45 度</li><li><code>transform: rotateY(45deg)</code> – 沿着 y 轴正方向旋转 45 度</li><li><code>transform: rotateZ(45deg)</code> – 沿着 z 轴正方向旋转 45 度</li><li><code>transform: rotate3d(x, y, z, 45deg)</code> – 沿着自定义轴旋转 45 deg 为角度</li></ul></li><li><p>代码案例</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(-45deg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>左手准则</p><ul><li><p>左手的手拇指指向 x 轴的正方向</p></li><li><p>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</p><p><img src="/前端笔记/html5-css3-day03/rotateX.png" alt></p></li></ul></li></ol><p>​              </p><h6 id="六、3D-旋转-rotateY"><a href="#六、3D-旋转-rotateY" class="headerlink" title="六、3D 旋转 rotateY"></a>六、<code>3D</code> 旋转 <code>rotateY</code></h6><ol><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(180deg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>左手准则</p><ul><li><p>左手的拇指指向 y 轴的正方向</p></li><li><p>其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值)</p><p><img src="/前端笔记/html5-css3-day03/rotateY.png" alt></p></li></ul></li></ol><h6 id="七、-3D-旋转-rotateZ"><a href="#七、-3D-旋转-rotateZ" class="headerlink" title="七、 3D 旋转 rotateZ"></a>七、 <code>3D</code> 旋转 <code>rotateZ</code></h6><ol><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(180deg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>rotate3d</code></p><ul><li><code>transform: rotate3d(x, y, z, deg)</code> – 沿着自定义轴旋转 deg 为角度</li><li>x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度<ul><li><code>transform: rotate3d(1, 1, 0, 180deg)</code> – 沿着对角线旋转 45deg</li><li><code>transform: rotate3d(1, 0, 0, 180deg)</code> – 沿着 x 轴旋转 45deg</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate3d</span>(1, 1, 0, 180deg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="八、3D-呈现-transform-style"><a href="#八、3D-呈现-transform-style" class="headerlink" title="八、3D 呈现 transform-style"></a>八、<code>3D</code> 呈现 <code>transform-style</code></h6><ol><li><p><code>transform-style</code></p><ul><li><p>☆☆☆☆☆</p></li><li><p>控制子元素是否开启三维立体环境</p></li><li><p><code>transform-style: flat</code>  代表子元素不开启 <code>3D</code> 立体空间，默认的</p></li><li><p><code>transform-style: preserve-3d</code> 子元素开启立体空间</p></li><li><p>代码写给父级，但是影响的是子盒子</p></li></ul></li><li><p>代码演示</p></li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-selector-id">#div1</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-selector-id">#div2</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">padding</span>:<span class="hljs-number">50px</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: red;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(60deg);</span><br><span class="line">  <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="line">  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotateY</span>(60deg); <span class="hljs-comment">/* Safari and Chrome */</span></span><br><span class="line">  <span class="hljs-attribute">-webkit-transform-style</span>: preserve-<span class="hljs-number">3</span>d; <span class="hljs-comment">/* Safari and Chrome */</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-selector-id">#div3</span> &#123;</span><br><span class="line"><span class="hljs-attribute">padding</span>:<span class="hljs-number">40px</span>;</span><br><span class="line"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="line"><span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="line"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(-60deg);</span><br><span class="line"><span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotateY</span>(-60deg); <span class="hljs-comment">/* Safari and Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.3D转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTML5-第三天&quot;&gt;&lt;a href=&quot;#HTML5-第三天&quot; class=&quot;headerlink&quot; title=&quot;HTML5  第三天&quot;&gt;&lt;/a&gt;&lt;code&gt;HTML5&lt;/code&gt;  第三天&lt;/h3&gt;&lt;h6 id=&quot;一、-认识-3D-转换&quot;&gt;&lt;a href=&quot;#一、-认识-3D-转换&quot; class=&quot;headerlink&quot; title=&quot;一、 认识 3D 转换&quot;&gt;&lt;/a&gt;一、 认识 &lt;code&gt;3D&lt;/code&gt; 转换&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;3D&lt;/code&gt; 的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;近大远小&lt;/li&gt;
&lt;li&gt;物体和面遮挡不可见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三维坐标系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;x 轴：水平向右  – &lt;strong&gt;注意：x 轴右边是正值，左边是负值&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;y 轴：垂直向下  – &lt;strong&gt;注意：y 轴下面是正值，上面是负值&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;z 轴：垂直屏幕  –  &lt;strong&gt;注意：往外边的是正值，往里面的是负值&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML5+CSS3" scheme="http://www.itfool.cn/tags/HTML5-CSS3/"/>
    
  </entry>
  
  <entry>
    <title>HTML5+CSS3-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html5-css3-day02/"/>
    <id>http://www.itfool.cn/前端笔记/html5-css3-day02/</id>
    <published>2020-05-23T02:32:20.000Z</published>
    <updated>2020-05-23T02:52:07.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.CSS3属性</p></blockquote><h3 id="HTML5-第二天"><a href="#HTML5-第二天" class="headerlink" title="HTML5 第二天"></a>HTML5 第二天</h3><h6 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h6><p> 2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p><p>使用步骤：</p><ol><li>给元素添加转换属性 <code>transform</code></li><li>属性值为 <code>rotate(角度)</code>  如 <code>transform:rotate(30deg)</code>  顺时针方向旋转<strong>30度</strong></li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="line">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(0deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="三角"><a href="#三角" class="headerlink" title="三角"></a>三角</h6><ul><li>代码演示</li></ul><h6 id="设置元素旋转中心点-transform-origin"><a href="#设置元素旋转中心点-transform-origin" class="headerlink" title="设置元素旋转中心点(transform-origin)"></a>设置元素旋转中心点(transform-origin)</h6><ol><li><p><code>transform-origin</code> 基础语法</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">transform-origin</span>: <span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">y</span>;</span><br></pre></td></tr></table></figure></li><li><p>重要知识点</p><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 <code>center</code>  <code>center</code></li><li>还可以给 x y 设置像素或者方位名词(<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>、<code>center</code>)</li></ul></li></ol><h6 id="旋转中心案例"><a href="#旋转中心案例" class="headerlink" title="旋转中心案例"></a>旋转中心案例</h6><ul><li>代码演示</li></ul><h6 id="2D-转换之-scale"><a href="#2D-转换之-scale" class="headerlink" title="2D 转换之 scale"></a><code>2D</code> 转换之 <code>scale</code></h6><ol><li><p><code>scale</code> 的作用</p><ul><li>用来控制元素的放大与缩小</li></ul></li><li><p>语法</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">scale</span>(<span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span>)</span><br></pre></td></tr></table></figure></li><li><p>知识要点</p><ul><li>注意，x 与 y 之间使用逗号进行分隔</li><li><code>transform: scale(1, 1)</code>: 宽高都放大一倍，相当于没有放大</li><li><code>transform: scale(2, 2)</code>: 宽和高都放大了二倍</li><li><code>transform: scale(2)</code>: 如果只写了一个参数，第二个参数就和第一个参数一致</li><li><code>transform:scale(0.5, 0.5)</code>: 缩小</li><li><code>scale</code> 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子</li></ul></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="hljs-comment">/* 注意，数字是倍数的含义，所以不需要加单位 */</span></span><br><span class="line"> <span class="hljs-comment">/* transform: scale(2, 2) */</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-comment">/* 实现等比缩放，同时修改宽与高 */</span></span><br><span class="line"> <span class="hljs-comment">/* transform: scale(2) */</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-comment">/* 小于 1 就等于缩放*/</span></span><br><span class="line"> <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(0.5, 0.5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="图片放大案例"><a href="#图片放大案例" class="headerlink" title="图片放大案例"></a>图片放大案例</h6><ul><li>代码演示</li></ul><h6 id="分页按钮案例"><a href="#分页按钮案例" class="headerlink" title="分页按钮案例"></a>分页按钮案例</h6><ul><li>代码演示</li></ul><h6 id="2D-转换综合写法以及顺序问题"><a href="#2D-转换综合写法以及顺序问题" class="headerlink" title="2D 转换综合写法以及顺序问题"></a><code>2D</code> 转换综合写法以及顺序问题</h6><ol><li><p>知识要点</p><ul><li>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></li><li>顺序会影响到转换的效果(先旋转会改变坐标轴方向)</li><li>但我们同时有位置或者其他属性的时候，要将位移放到最前面</li></ul></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(200px, 0) <span class="hljs-built_in">rotate</span>(360deg) <span class="hljs-built_in">scale</span>(1.2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="动画-animation"><a href="#动画-animation" class="headerlink" title="动画(animation)"></a>动画(animation)</h6><ol><li><p>什么是动画</p><ul><li>动画是 <code>CSS3</code> 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果</li></ul></li><li><p>动画的基本使用</p><ul><li>先定义动画</li><li>在调用定义好的动画</li></ul></li><li><p>语法格式(定义动画)</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="hljs-keyword">keyframes</span> 动画名称 &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法格式(使用动画)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">/* 调用动画 */</span><br><span class="line">    animation-name: 动画名称;</span><br><span class="line"> /* 持续时间 */</span><br><span class="line"> animation-duration: 持续时间；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动画序列</p><ul><li>0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列</li><li>在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数</li><li>用百分比来规定变化发生的时间，或用 <code>from</code> 和 <code>to</code>，等同于 0% 和 100%</li></ul></li><li><p>代码演示</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">      <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="line">      <span class="hljs-attribute">animation-name</span>: move;</span><br><span class="line">      <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">0.5s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="hljs-keyword">keyframes</span> move&#123;</span><br><span class="line">      0% &#123;</span><br><span class="line">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0px)</span><br><span class="line">      &#125;</span><br><span class="line">      100% &#123;</span><br><span class="line">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(500px, 0)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="动画序列"><a href="#动画序列" class="headerlink" title="动画序列"></a>动画序列</h6><ul><li>代码演示</li></ul><h6 id="动画常见属性"><a href="#动画常见属性" class="headerlink" title="动画常见属性"></a>动画常见属性</h6><ol><li><p>常见的属性</p><p><img src="/前端笔记/html5-css3-day02/animationcanshu.png" alt></p></li></ol><ol start="2"><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="hljs-comment">/* 动画名称 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-name</span>: move;</span><br><span class="line">  <span class="hljs-comment">/* 动画花费时长 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">2s</span>;</span><br><span class="line">  <span class="hljs-comment">/* 动画速度曲线 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="hljs-comment">/* 动画等待多长时间执行 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2s</span>;</span><br><span class="line">  <span class="hljs-comment">/* 规定动画播放次数 infinite: 无限循环 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="hljs-comment">/* 是否逆行播放 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="hljs-comment">/* 动画结束之后的状态 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-comment">/* 规定动画是否暂停或者播放 */</span></span><br><span class="line">  <span class="hljs-attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="动画简写方式"><a href="#动画简写方式" class="headerlink" title="动画简写方式"></a>动画简写方式</h6><ol><li><p>动画简写方式</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span></span><br><span class="line"><span class="hljs-selector-tag">animation</span>: <span class="hljs-selector-tag">name</span> <span class="hljs-selector-tag">duration</span> <span class="hljs-selector-tag">timing-function</span> <span class="hljs-selector-tag">delay</span> <span class="hljs-selector-tag">iteration-count</span> <span class="hljs-selector-tag">direction</span> <span class="hljs-selector-tag">fill-mode</span></span><br></pre></td></tr></table></figure></li><li><p>知识要点</p><ul><li>简写属性里面不包含 <code>animation-paly-state</code></li><li>暂停动画 <code>animation-paly-state: paused</code>; 经常和鼠标经过等其他配合使用</li><li>要想动画走回来，而不是直接调回来：<code>animation-direction: alternate</code></li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code> </li></ul></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">animation</span>: <span class="hljs-selector-tag">move</span> 2<span class="hljs-selector-tag">s</span> <span class="hljs-selector-tag">linear</span> 1<span class="hljs-selector-tag">s</span> <span class="hljs-selector-tag">infinite</span> <span class="hljs-selector-tag">alternate</span> <span class="hljs-selector-tag">forwards</span>;</span><br></pre></td></tr></table></figure></li></ol><h6 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h6><ol><li>速度曲线细节<ul><li><code>animation-timing-function</code>: 规定动画的速度曲线，默认是<code>ease</code></li></ul></li></ol><p><img src="/前端笔记/html5-css3-day02/steps.png" alt></p><ol start="2"><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="line">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="line">  <span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="hljs-attribute">animation</span>: move <span class="hljs-number">4s</span> <span class="hljs-built_in">steps</span>(24) forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">keyframes</span> move &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">480px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="奔跑的熊大"><a href="#奔跑的熊大" class="headerlink" title="奔跑的熊大"></a>奔跑的熊大</h6><ol><li>代码演示</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="hljs-css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;      </span><br><span class="line">        div &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: url(media/bear.png) no-repeat;</span><br><span class="line"><span class="hljs-css">            <span class="hljs-comment">/* 我们元素可以添加多个动画， 用逗号分隔 */</span></span></span><br><span class="line"><span class="hljs-css">            <span class="hljs-selector-tag">animation</span>: <span class="hljs-selector-tag">bear</span> <span class="hljs-selector-class">.4s</span> <span class="hljs-selector-tag">steps</span>(8) <span class="hljs-selector-tag">infinite</span>, <span class="hljs-selector-tag">move</span> 3<span class="hljs-selector-tag">s</span> <span class="hljs-selector-tag">forwards</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-css">        @<span class="hljs-keyword">keyframes</span> bear &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                background-position: 0 0;</span><br><span class="line">            &#125;</span><br><span class="line">            100% &#123;</span><br><span class="line">                background-position: -1600px 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-css">        @<span class="hljs-keyword">keyframes</span> move &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                left: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            100% &#123;</span><br><span class="line">                left: 50%;</span><br><span class="line"><span class="hljs-css">                <span class="hljs-comment">/* margin-left: -100px; */</span></span></span><br><span class="line">                transform: translateX(-50%);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.CSS3属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTML5-第二天&quot;&gt;&lt;a href=&quot;#HTML5-第二天&quot; class=&quot;headerlink&quot; title=&quot;HTML5 第二天&quot;&gt;&lt;/a&gt;HTML5 第二天&lt;/h3&gt;&lt;h6 id=&quot;rotate&quot;&gt;&lt;a href=&quot;#rotate&quot; class=&quot;headerlink&quot; title=&quot;rotate&quot;&gt;&lt;/a&gt;rotate&lt;/h6&gt;&lt;p&gt; 2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转&lt;/p&gt;
&lt;p&gt;使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给元素添加转换属性 &lt;code&gt;transform&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;属性值为 &lt;code&gt;rotate(角度)&lt;/code&gt;  如 &lt;code&gt;transform:rotate(30deg)&lt;/code&gt;  顺时针方向旋转&lt;strong&gt;30度&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rotate&lt;/span&gt;(0deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML5+CSS3" scheme="http://www.itfool.cn/tags/HTML5-CSS3/"/>
    
  </entry>
  
  <entry>
    <title>HTML5+CSS3-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html5-css3-day01/"/>
    <id>http://www.itfool.cn/前端笔记/html5-css3-day01/</id>
    <published>2020-05-23T02:16:40.000Z</published>
    <updated>2020-05-23T02:52:12.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第02阶段.移动Web网页开发.HTML5标签</p></blockquote><h3 id="HTML5-第一天"><a href="#HTML5-第一天" class="headerlink" title="HTML5  第一天"></a>HTML5  第一天</h3><h6 id="什么是-HTML5"><a href="#什么是-HTML5" class="headerlink" title="什么是 HTML5"></a>什么是 <code>HTML5</code></h6><ol><li><p><code>HTML5</code> 的概念与定义 </p><ul><li>定义：<code>HTML5</code> 定义了 <code>HTML</code> 标准的最新版本，是对 <code>HTML</code> 的第五次重大修改，号称下一代的 <code>HTML</code> </li><li>两个概念：<ul><li>是一个新版本的 <code>HTML</code> 语言，定义了新的标签、特性和属性</li><li>拥有一个强大的技术集，这些技术集是指： <code>HTML5</code> 、<code>CSS3</code> 、<code>javascript</code>, 这也是广义上的 <code>HTML5</code><a id="more"></a></li></ul></li></ul></li><li><p><code>HTML5</code> 拓展了哪些内容</p><ul><li>语义化标签</li><li>本地存储</li><li>兼容特性</li><li><code>2D</code>、<code>3D</code> </li><li>动画、过渡</li><li><code>CSS3</code> 特性</li><li>性能与集成</li></ul></li><li><p><code>HTML5</code> 的现状</p><p>  绝对多数新的属性，都已经被浏览器所支持，最新版本的浏览器已经开始陆续支持最新的特性，</p><p>  总的来说：<code>HTML5</code> 已经是大势所趋</p></li></ol><h6 id="HTML5-新增标签"><a href="#HTML5-新增标签" class="headerlink" title="HTML5 新增标签"></a><code>HTML5</code> 新增标签</h6><ol><li><p>什么是语义化</p></li><li><p>新增了那些语义化标签</p><ul><li><code>header</code>   —  头部标签</li><li><code>nav</code>        —  导航标签</li><li><code>article</code> —   内容标签</li><li><code>section</code> —   块级标签</li><li><code>aside</code>     —   侧边栏标签</li><li><code>footer</code>   —   尾部标签</li></ul></li></ol><pre><code>![](HTML5-CSS3-Day01/yuyibq.png)</code></pre><ol start="3"><li><p>使用语义化标签的注意</p><ul><li>语义化标签主要针对搜索引擎</li><li>新标签可以使用一次或者多次</li><li>在 <code>IE9</code> 浏览器中，需要把语义化标签都转换为块级元素</li><li>语义化标签，在移动端支持比较友好，</li><li>另外，<code>HTML5</code> 新增的了很多的语义化标签，随着课程深入，还会学习到其他的</li></ul></li></ol><h6 id="三、多媒体音频标签"><a href="#三、多媒体音频标签" class="headerlink" title="三、多媒体音频标签"></a>三、多媒体音频标签</h6><ol><li><p>多媒体标签有两个，分别是</p><ul><li>音频  – <code>audio</code></li><li>视频  – <code>video</code></li></ul></li><li><p><code>audio</code> 标签说明</p><ul><li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li><li>但是：播放格式是有限的</li></ul></li><li><p>audio 支持的音频格式</p><ul><li>audio 目前支持三种格式</li></ul></li></ol><p>   <img src="/前端笔记/html5-css3-day01/audio.png" alt></p><ol start="4"><li>audio 的参数</li></ol><p>   <img src="/前端笔记/html5-css3-day01/audiocanshu.png" alt></p><p>5、audio 代码演示</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">body</span>&gt;</span><br><span class="line">  &lt;!<span class="hljs-selector-tag">--</span> 注意：在 <span class="hljs-selector-tag">chrome</span> 浏览器中已经禁用了 <span class="hljs-selector-tag">autoplay</span> 属性 <span class="hljs-selector-tag">--</span>&gt;</span><br><span class="line">  &lt;!-- &lt;audio src="./media/snow.mp3" controls autoplay&gt;&lt;/audio&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!<span class="hljs-selector-tag">--</span> </span><br><span class="line">    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件</span><br><span class="line">   <span class="hljs-selector-tag">--</span>&gt;</span><br><span class="line">  &lt;<span class="hljs-selector-tag">audio</span> <span class="hljs-selector-tag">controls</span>&gt;</span><br><span class="line">    &lt;source src="./media/snow.mp3" type="audio/mpeg" /&gt;</span><br><span class="line">  &lt;/audio&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h6 id="多媒体视频标签"><a href="#多媒体视频标签" class="headerlink" title="多媒体视频标签"></a>多媒体视频标签</h6><ol><li><p>video 视频标签</p><ul><li>目前支持三种格式</li></ul></li></ol><p>   <img src="/前端笔记/html5-css3-day01/vedio.png" alt></p><ol start="2"><li><p>语法格式</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./media/video.mp4"</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>video 参数</p><p><img src="/前端笔记/html5-css3-day01/videocanshu.png" alt></p></li></ol><ol start="4"><li><p>video 代码演示</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- &lt;video src="./media/video.mp4" controls="controls"&gt;&lt;/video&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">"./media/pig.jpg"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./media/video.mp4"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./media/video.ogg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/ogg"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多媒体标签总结</p><ul><li>音频标签与视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都禁止了</li><li>谷歌浏览器中视频添加 muted 标签可以自己播放</li><li>注意：重点记住使用方法以及自动播放即可，其他属性可以在使用时查找对应的手册</li></ul></li></ol><h6 id="新增-input-标签"><a href="#新增-input-标签" class="headerlink" title="新增 input 标签"></a>新增 input 标签</h6><p><img src="/前端笔记/html5-css3-day01/h5input.png" alt></p><h6 id="新增表单属性"><a href="#新增表单属性" class="headerlink" title="新增表单属性"></a>新增表单属性</h6><p><img src="/前端笔记/html5-css3-day01/newinput.png" alt></p><h6 id="CSS3-属性选择器-上"><a href="#CSS3-属性选择器-上" class="headerlink" title="CSS3 属性选择器(上)"></a><code>CSS3</code> 属性选择器(上)</h6><ol><li><p>什么是 <code>CSS3</code></p><ul><li>在 <code>CSS2</code> 的基础上拓展、新增的样式</li></ul></li><li><p><code>CSS3</code> 发展现状</p><ul><li>移动端支持优于 <code>PC</code> 端</li><li><code>CSS3</code> 目前还草案，在不断改进中</li><li><code>CSS3</code> 相对 <code>H5</code>，应用非常广泛</li></ul></li><li><p>属性选择器列表</p><p><img src="/前端笔记/html5-css3-day01/attrcanshu.png" alt></p></li></ol><ol start="4"><li><p>属性选择器代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">button</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">button</span><span class="hljs-selector-attr">[disabled]</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">cursor</span>: default</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="CSS3-属性选择器-下"><a href="#CSS3-属性选择器-下" class="headerlink" title="CSS3 属性选择器(下)"></a><code>CSS3</code> 属性选择器(下)</h6><ol><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=search]</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class^=black]</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class$=black]</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">color</span>: lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[class*=black]</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h6><ol><li><p>属性列表</p><p><img src="/前端笔记/html5-css3-day01/jiegouweilei.png" alt></p></li></ol><ol start="2"><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="nth-child-参数详解"><a href="#nth-child-参数详解" class="headerlink" title="nth-child 参数详解"></a><code>nth-child</code> 参数详解</h6><ol><li><p>nth-child 详解</p><ul><li><p>注意：本质上就是选中第几个子元素</p></li><li><p>n 可以是数字、关键字、公式</p></li><li><p>n 如果是数字，就是选中第几个</p></li><li><p>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</p></li><li><p>常见的公式如下(如果 n 是公式，则从 0 开始计算)</p></li><li><p>但是第 0 个元素或者超出了元素的个数会被忽略</p><p><img src="/前端笔记/html5-css3-day01/nthchildcanshu.png" alt></p></li></ul></li></ol><ol start="2"><li><p>代码演示</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line">  <span class="hljs-comment">/* 偶数 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(even)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 奇数 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(odd)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: blueviolet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/*n 是公式，从 0 开始计算 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(n)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: lightcoral;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 偶数 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: lightskyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 奇数 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(2n</span> + 1) &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: lightsalmon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 选择第 0 5 10 15, 应该怎么选 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(5n)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: orangered;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* n + 5 就是从第5个开始往后选择 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(n</span> + 5) &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: peru;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* -n + 5 前五个 */</span></span><br><span class="line">  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(-n</span> + 5) &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: tan;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="nth-child-和-nt-of-type-的区别"><a href="#nth-child-和-nt-of-type-的区别" class="headerlink" title="nth-child 和  nt-of-type 的区别"></a><code>nth-child</code> 和  <code>nt-of-type</code> 的区别</h6><ol><li><p>代码演示</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: lightpink;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-of-type(2)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: lightseagreen;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-of-type(3)</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>区别</p><ul><li><code>nth-child</code>  选择父元素里面的第几个子元素，不管是第几个类型</li><li><code>nt-of-type</code>  选择指定类型的元素</li></ul></li></ol><h6 id="十二、伪元素选择器"><a href="#十二、伪元素选择器" class="headerlink" title="十二、伪元素选择器"></a>十二、伪元素选择器</h6><ol><li><p>伪类选择器</p><p><img src="/前端笔记/html5-css3-day01/weiyuansu.png" alt></p></li></ol><ol start="2"><li><p>伪类选择器注意事项</p><ul><li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li><li><code>before</code> 在内容前面，after 在内容后面</li><li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul></li><li><p>代码演示</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid lightcoral;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>,</span><br><span class="line">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="line">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">      <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">content</span>: <span class="hljs-string">'德'</span>;</span><br><span class="line">      <span class="hljs-attribute">background-color</span>: lightskyblue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">content</span>: <span class="hljs-string">'道'</span>;</span><br><span class="line">      <span class="hljs-attribute">background-color</span>: mediumaquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="伪元素的案例"><a href="#伪元素的案例" class="headerlink" title="伪元素的案例"></a>伪元素的案例</h6><ol><li><p>添加字体图标</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">   <span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="line">   <span class="hljs-attribute">height</span>: <span class="hljs-number">22px</span>;</span><br><span class="line">   <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid lightseagreen;</span><br><span class="line">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">   <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">content</span>: <span class="hljs-string">'\ea50'</span>;</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'icomoon'</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="2D-转换之-translate"><a href="#2D-转换之-translate" class="headerlink" title="2D 转换之 translate"></a><code>2D</code> 转换之 <code>translate</code></h6><ol><li><p><code>2D</code> 转换</p><ul><li><p><code>2D</code> 转换是改变标签在二维平面上的位置和形状</p></li><li><p>移动： <code>translate</code></p></li><li><p>旋转： <code>rotate</code></p></li><li><p>缩放： <code>scale</code></p></li></ul></li><li><p><code>translate</code> 语法</p><ul><li>x 就是 x 轴上水平移动</li><li>y 就是 y 轴上水平移动</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate</span>(<span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span>)</span><br><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translateX</span>(<span class="hljs-selector-tag">n</span>)</span><br><span class="line"><span class="hljs-selector-tag">transfrom</span>: <span class="hljs-selector-tag">translateY</span>(<span class="hljs-selector-tag">n</span>)</span><br></pre></td></tr></table></figure></li><li><p>重点知识点</p><ul><li><code>2D</code> 的移动主要是指 水平、垂直方向上的移动</li><li><code>translate</code> 最大的优点就是不影响其他元素的位置</li><li><code>translate</code> 中的100%单位，是相对于本身的宽度和高度来进行计算的</li><li>行内标签没有效果</li></ul></li><li><p>代码演示</p></li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: lightseagreen;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">  <span class="hljs-comment">/* 平移 */</span></span><br><span class="line">  <span class="hljs-comment">/* 水平垂直移动 100px */</span></span><br><span class="line">  <span class="hljs-comment">/* transform: translate(100px, 100px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 水平移动 100px */</span></span><br><span class="line">  <span class="hljs-comment">/* transform: translate(100px, 0) */</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 垂直移动 100px */</span></span><br><span class="line">  <span class="hljs-comment">/* transform: translate(0, 100px) */</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 水平移动 100px */</span></span><br><span class="line">  <span class="hljs-comment">/* transform: translateX(100px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* 垂直移动 100px */</span></span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(100px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="让一个盒子水平垂直居中"><a href="#让一个盒子水平垂直居中" class="headerlink" title="让一个盒子水平垂直居中"></a>让一个盒子水平垂直居中</h6><ul><li>看代码</li></ul><h6 id="2D-转换-rotate"><a href="#2D-转换-rotate" class="headerlink" title="2D 转换 rotate"></a><code>2D 转换 rotate</code></h6><ol><li><p>rotate 旋转</p><ul><li><code>2D</code> 旋转指的是让元素在二维平面内顺时针或者逆时针旋转</li></ul></li><li><p><code>rotate</code> 语法</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 单位是：deg */</span></span><br><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">rotate</span>(度数)</span><br></pre></td></tr></table></figure></li><li><p>重点知识点</p><ul><li><code>rotate</code> 里面跟度数，单位是 <code>deg</code></li><li>角度为正时，顺时针，角度为负时，逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul></li><li><p>代码演示</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(360deg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第02阶段.移动Web网页开发.HTML5标签&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTML5-第一天&quot;&gt;&lt;a href=&quot;#HTML5-第一天&quot; class=&quot;headerlink&quot; title=&quot;HTML5  第一天&quot;&gt;&lt;/a&gt;HTML5  第一天&lt;/h3&gt;&lt;h6 id=&quot;什么是-HTML5&quot;&gt;&lt;a href=&quot;#什么是-HTML5&quot; class=&quot;headerlink&quot; title=&quot;什么是 HTML5&quot;&gt;&lt;/a&gt;什么是 &lt;code&gt;HTML5&lt;/code&gt;&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;HTML5&lt;/code&gt; 的概念与定义 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：&lt;code&gt;HTML5&lt;/code&gt; 定义了 &lt;code&gt;HTML&lt;/code&gt; 标准的最新版本，是对 &lt;code&gt;HTML&lt;/code&gt; 的第五次重大修改，号称下一代的 &lt;code&gt;HTML&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;两个概念：&lt;ul&gt;
&lt;li&gt;是一个新版本的 &lt;code&gt;HTML&lt;/code&gt; 语言，定义了新的标签、特性和属性&lt;/li&gt;
&lt;li&gt;拥有一个强大的技术集，这些技术集是指： &lt;code&gt;HTML5&lt;/code&gt; 、&lt;code&gt;CSS3&lt;/code&gt; 、&lt;code&gt;javascript&lt;/code&gt;, 这也是广义上的 &lt;code&gt;HTML5&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML5+CSS3" scheme="http://www.itfool.cn/tags/HTML5-CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day07</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day07/"/>
    <id>http://www.itfool.cn/前端笔记/css-day07/</id>
    <published>2020-05-22T02:19:33.000Z</published>
    <updated>2020-05-22T02:29:05.242Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.CSS高级技巧</p></blockquote><h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><p><strong>目标</strong></p><ul><li>理解<ul><li>能说出元素显示隐藏最常见的写法</li><li>能说出精灵图产生的目的</li><li>能说出去除图片底侧空白缝隙的方法</li></ul></li><li>应用<ul><li>能写出最常见的鼠标样式</li><li>能使用精灵图技术</li><li>能用滑动门做导航栏案例<a id="more"></a><h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2></li></ul></li></ul><ul><li><p>目的</p><p>让一个元素在页面中消失或者显示出来</p></li><li><p>场景</p><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p></li></ul><h3 id="display-显示（重点）"><a href="#display-显示（重点）" class="headerlink" title="display 显示（重点）"></a>display 显示（重点）</h3><ul><li><p>display 设置或检索对象是否及如何显示。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br></pre></td></tr></table></figure></li><li><p>特点： 隐藏之后，不再保留位置。</p></li></ul><p><img src="/前端笔记/css-day07/29none.png" alt></p><p>实际开发场景：</p><blockquote><p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p></blockquote><h3 id="visibility-可见性-了解"><a href="#visibility-可见性-了解" class="headerlink" title="visibility 可见性 (了解)"></a>visibility 可见性 (了解)</h3><ul><li><p>设置或检索是否显示对象。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visibility：visible ; 　对象可视</span><br><span class="line"></span><br><span class="line">visibility：hidden; 　  对象隐藏</span><br></pre></td></tr></table></figure></li><li><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p></li></ul><p><img src="/前端笔记/css-day07/30visibility.png" alt></p><h3 id="overflow-溢出-重点"><a href="#overflow-溢出-重点" class="headerlink" title="overflow 溢出(重点)"></a>overflow 溢出(重点)</h3><ul><li>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p> <img src="/前端笔记/css-day07/33overflow.png" alt></p><p>实际开发场景：</p><ol><li>清除浮动</li><li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li></ol><h3 id="显示与隐藏总结"><a href="#显示与隐藏总结" class="headerlink" title="显示与隐藏总结"></a>显示与隐藏总结</h3><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display</strong></td><td>隐藏对象，不保留位置</td><td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td></tr><tr><td><strong>visibility</strong></td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><ul><li>所谓的界面样式， 就是更改一些用户操作样式，以便提高更好的用户体验。<ul><li>更改用户的鼠标样式 (滚动条因为兼容性非常差，我们不研究) </li><li>表单轮廓等。</li><li>防止表单域拖拽</li></ul></li></ul><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>default</strong></td><td>小白  默认</td></tr><tr><td><strong>pointer</strong></td><td>小手</td></tr><tr><td><strong>move</strong></td><td>移动</td></tr><tr><td><strong>text</strong></td><td>文本</td></tr><tr><td><strong>not-allowed</strong></td><td>禁止</td></tr></tbody></table><p> 鼠标放我身上查看效果哦：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:default"</span>&gt;</span>我是小白<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:pointer"</span>&gt;</span>我是小手<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:move"</span>&gt;</span>我是移动<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:text"</span>&gt;</span>我是文本<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:not-allowed"</span>&gt;</span>我是文本<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线 outline"></a>轮廓线 outline</h3><p><img src="/前端笔记/css-day07/outline.png" alt></p><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 </p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width</span><br></pre></td></tr></table></figure><p> 但是我们都不关心可以设置多少，我们平时都是去掉的。 li  </p><p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"outline: 0;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p><img src="/前端笔记/css-day07/34textarea.png" alt></p><p>实际开发中，我们文本域右下角是不可以拖拽： </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"resize: none;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用户界面样式总结"><a href="#用户界面样式总结" class="headerlink" title="用户界面样式总结"></a>用户界面样式总结</h3><table><thead><tr><th>属性</th><th>用途</th><th>用途</th></tr></thead><tbody><tr><td><strong>鼠标样式</strong></td><td>更改鼠标样式cursor</td><td>样式很多，重点记住 pointer</td></tr><tr><td><strong>轮廓线</strong></td><td>表单默认outline</td><td>outline 轮廓线，我们一般直接去掉，border是边框，我们会经常用</td></tr><tr><td>防止拖拽</td><td>主要针对文本域resize</td><td>防止用户随意拖拽文本域，造成页面布局混乱，我们resize:none</td></tr></tbody></table><h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><ul><li>有宽度的块级元素居中对齐，是margin: 0 auto;</li><li>让文字居中对齐，是 text-align: center;</li></ul><p>但是我们从来没有讲过有垂直居中的属性。</p><p>vertical-align 垂直对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p><p><img src="/前端笔记/css-day07/xian.jpg" alt></p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : baseline |top |middle |bottom</span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。</p><ul><li><p>注意：</p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p><p>特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p></li></ul><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><p> <img src="/前端笔记/css-day07/%E5%9F%BA%E7%BA%BF%E5%AF%B9%E9%BD%90.jpg" alt></p><p><img src="/前端笔记/css-day07/1498467742995.png" alt></p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p><img src="/前端笔记/css-day07/35vertical.png" alt></p><ul><li><p>原因：</p><p>图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。</p><p>就是图片底侧会有一个空白缝隙。</p></li><li><p>解决的方法就是：  </p><ul><li>给img vertical-align:middle | top| bottom等等。  让图片不要和基线对齐。<img src="/前端笔记/css-day07/1633.png" alt></li></ul></li></ul><ul><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src="/前端笔记/css-day07/sina1.png" alt></li></ul><h2 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h2><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><ul><li>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">white-space:normal ；默认处理方式</span><br><span class="line"></span><br><span class="line">white-space:nowrap ；　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure><h3 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h3><ul><li>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-overflow : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><p><img src="/前端笔记/css-day07/dot.png" alt></p><h3 id="总结三步曲"><a href="#总结三步曲" class="headerlink" title="总结三步曲"></a>总结三步曲</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">    <span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">nowrap</span>;</span><br><span class="line"><span class="hljs-comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">    <span class="hljs-selector-tag">overflow</span>: <span class="hljs-selector-tag">hidden</span>;</span><br><span class="line"><span class="hljs-comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">    <span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">ellipsis</span>;</span><br></pre></td></tr></table></figure><h2 id="CSS精灵技术（sprite-重点"><a href="#CSS精灵技术（sprite-重点" class="headerlink" title="CSS精灵技术（sprite) 重点"></a>CSS精灵技术（sprite) 重点</h2><h3 id="为什么需要精灵技术"><a href="#为什么需要精灵技术" class="headerlink" title="为什么需要精灵技术"></a>为什么需要精灵技术</h3><p><img src="/前端笔记/css-day07/sss.png" alt></p><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</p><p><strong>pink老师告诉你我们为什么需要精灵技术：</strong></p><blockquote><p> <strong>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。</strong></p></blockquote><p>出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="精灵技术讲解"><a href="#精灵技术讲解" class="headerlink" title="精灵技术讲解"></a>精灵技术讲解</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。</p><p><img src="/前端笔记/css-day07/jds.png" alt></p><p>这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p><p>我们需要使用CSS的</p><ul><li>background-image、</li><li>background-repeat</li><li>background-position属性进行背景定位，</li><li>其中最关键的是使用background-position 属性精确地定位。</li></ul><h3 id="精灵技术使用的核心总结"><a href="#精灵技术使用的核心总结" class="headerlink" title="精灵技术使用的核心总结"></a>精灵技术使用的核心总结</h3><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p><ol><li>精确测量，每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时， 背景定位基本都是 负值。</li></ol><h3 id="制作精灵图-了解"><a href="#制作精灵图-了解" class="headerlink" title="制作精灵图(了解)"></a>制作精灵图(了解)</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间留有适当的空隙</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure><p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src="/前端笔记/css-day07/h.gif" alt></p><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="/前端笔记/css-day07/wxx.jpg" alt></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><p><a href="http://weixin.qq.com/" target="_blank" rel="noopener">http://weixin.qq.com/</a></p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>导航栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css样式</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">      <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="line">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="line">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(images/wx.jpg) repeat-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">padding-top</span>:<span class="hljs-number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">33px</span>;</span><br><span class="line">      <span class="hljs-attribute">float</span>: left;</span><br><span class="line">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">33px</span>;</span><br><span class="line">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>  <span class="hljs-number">10px</span>;</span><br><span class="line">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(./images/to.png) no-repeat left ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">33px</span>;</span><br><span class="line">      <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">      <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="line">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(./images/to.png) no-repeat right ;</span><br><span class="line">      <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>,</span><br><span class="line">     <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(./images/ao.png);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展@"></a>拓展@</h2><h3 id="margin负值之美"><a href="#margin负值之美" class="headerlink" title="margin负值之美"></a>margin负值之美</h3><h4 id="负边距-定位：水平垂直居中"><a href="#负边距-定位：水平垂直居中" class="headerlink" title="负边距+定位：水平垂直居中"></a>负边距+定位：水平垂直居中</h4><p>咱们前面讲过， 一个绝对定位的盒子， 利用  父级盒子的 50%，  然后 往左(上) 走 自己宽度的一半 ，可以实现盒子水平垂直居中。</p><h4 id="压住盒子相邻边框"><a href="#压住盒子相邻边框" class="headerlink" title="压住盒子相邻边框"></a>压住盒子相邻边框</h4><p><img src="/前端笔记/css-day07/margin.png" alt></p><h3 id="CSS三角形之美"><a href="#CSS三角形之美" class="headerlink" title="CSS三角形之美"></a>CSS三角形之美</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>; </span><br><span class="line"></span><br><span class="line">   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="line">   <span class="hljs-attribute">line-height</span>:<span class="hljs-number">0</span>；</span><br><span class="line">   font-size: <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-right</span>: <span class="hljs-number">10px</span> solid green;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> solid blue;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-left</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#000</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一张图， 你就知道 css 三角是怎么来的了, 做法如下：</p><p> <img src="/前端笔记/css-day07/arr.png" alt></p><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.CSS高级技巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;CSS高级技巧&quot;&gt;&lt;a href=&quot;#CSS高级技巧&quot; class=&quot;headerlink&quot; title=&quot;CSS高级技巧&quot;&gt;&lt;/a&gt;CSS高级技巧&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解&lt;ul&gt;
&lt;li&gt;能说出元素显示隐藏最常见的写法&lt;/li&gt;
&lt;li&gt;能说出精灵图产生的目的&lt;/li&gt;
&lt;li&gt;能说出去除图片底侧空白缝隙的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用&lt;ul&gt;
&lt;li&gt;能写出最常见的鼠标样式&lt;/li&gt;
&lt;li&gt;能使用精灵图技术&lt;/li&gt;
&lt;li&gt;能用滑动门做导航栏案例&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day06/"/>
    <id>http://www.itfool.cn/前端笔记/css-day06/</id>
    <published>2020-05-22T02:10:22.000Z</published>
    <updated>2020-05-22T02:21:38.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.定位(position)</p></blockquote><h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>理解</strong><ul><li>能说出为什么要用定位</li><li>能说出定位的4种分类</li><li>能说出四种定位的各自特点</li><li>能说出我们为什么常用子绝父相布局</li></ul></li><li><strong>应用</strong><ul><li>能写出淘宝轮播图布局<a id="more"></a><h2 id="CSS-布局的三种机制"><a href="#CSS-布局的三种机制" class="headerlink" title="CSS 布局的三种机制"></a>CSS 布局的三种机制</h2></li></ul></li></ul><blockquote><p>网页布局的核心 —— 就是<strong>用 CSS 来摆放盒子位置</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>、<strong>浮动</strong>和<strong>定位</strong>，其中：</p><ol><li><p><strong>普通流</strong>（<strong>标准流</strong>）</p></li><li><p><strong>浮动</strong></p><ul><li>让盒子从普通流中<strong>浮</strong>起来 —— <strong>让多个盒子(div)水平排列成一行</strong>。</li></ul></li><li><p><strong>定位</strong></p><ul><li>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子的上面  —— CSS 离不开定位，特别是后面的 js 特效。</li></ul></li></ol><h2 id="为什么使用定位"><a href="#为什么使用定位" class="headerlink" title="为什么使用定位"></a>为什么使用定位</h2><blockquote><p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p></blockquote><p><strong>1. 小黄色块</strong>在图片上移动，<strong>吸引用户的眼球</strong>。</p><p><img src="/前端笔记/css-day06/01_%E5%AE%9A%E4%BD%8D%E7%A4%BA%E4%BE%8B1.gif" alt></p><p><img src="/前端笔记/css-day06/03_%E5%AE%9A%E4%BD%8D%E7%A4%BA%E4%BE%8B3.png" alt></p><p><strong>2. 当我们滚动窗口的时候，盒子是固定屏幕某个位置的</strong></p><p><img src="/前端笔记/css-day06/ding.png" alt></p><blockquote><p><strong>结论</strong>：要实现以上效果，<strong>标准流</strong>或<strong>浮动</strong>都无法快速实现</p></blockquote><p>pink老师一句话说出定位：</p><blockquote><p>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子(包括标准流和浮动)的上面 </p></blockquote><p>所以，我们脑海应该有三种布局机制的上下顺序</p><p>标准流在最底层 (海底)  ——-    浮动 的盒子 在 中间层  (海面)  ——-   定位的盒子 在 最上层  （天空）</p><h2 id="定位详解"><a href="#定位详解" class="headerlink" title="定位详解"></a>定位详解</h2><p>定位也是用来布局的，它有两部分组成：</p><blockquote><p><code>定位 = 定位模式 + 边偏移</code></p></blockquote><h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><p>简单说， 我们定位的盒子，是通过边偏移来移动位置的。</p><p>在 CSS 中，通过 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性定义元素的<strong>边偏移</strong>：（方位名词）</p><table><thead><tr><th>边偏移属性</th><th align="left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td align="left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td align="left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td align="left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td align="left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p><h3 id="定位模式-position"><a href="#定位模式-position" class="headerlink" title="定位模式 (position)"></a>定位模式 (position)</h3><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="hljs-attribute">position</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table><p> <img src="/前端笔记/css-day06/26%E5%AE%9A%E4%BD%8D%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt></p><h4 id="静态定位-static-了解"><a href="#静态定位-static-了解" class="headerlink" title="静态定位(static) - 了解"></a>静态定位(static) - 了解</h4><ul><li><strong>静态定位</strong>是元素的默认定位方式，无定位的意思。它相当于 border 里面的none， 不要定位的时候用。</li><li>静态定位 按照标准流特性摆放位置，它没有边偏移。</li><li>静态定位在布局时我们几乎不用的 </li></ul><h4 id="相对定位-relative-重要"><a href="#相对定位-relative-重要" class="headerlink" title="相对定位(relative) - 重要"></a>相对定位(relative) - 重要</h4><ul><li><strong>相对定位</strong>是元素<strong>相对</strong>于它  原来在标准流中的位置 来说的。（自恋型）</li></ul><p><strong>效果图</strong>：</p><p><img src="/前端笔记/css-day06/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt></p><p>相对定位的特点：（务必记住）</p><ul><li>相对于 自己原来在标准流中位置来移动的</li><li>原来<strong>在标准流的区域继续占有</strong>，后面的盒子仍然以标准流的方式对待它。</li></ul><h4 id="绝对定位-absolute-重要"><a href="#绝对定位-absolute-重要" class="headerlink" title="绝对定位(absolute) - 重要"></a>绝对定位(absolute) - 重要</h4><p><strong>绝对定位</strong>是元素以带有定位的父级元素来移动位置 （拼爹型）</p><ol><li><p><strong>完全脱标</strong> —— 完全不占位置；  </p></li><li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p><p><img src="/前端笔记/css-day06/05_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D_%E7%88%B6%E7%BA%A7%E6%97%A0%E5%AE%9A%E4%BD%8D.png" alt></p></li><li><p><strong>父元素要有定位</strong></p><ul><li>将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li></ul></li></ol><p><img src="/前端笔记/css-day06/06_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D_%E7%88%B6%E7%BA%A7%E6%9C%89%E5%AE%9A%E4%BD%8D.png" alt></p><p>绝对定位的特点：（务必记住）</p><ul><li>绝对是以带有定位的父级元素来移动位置 （拼爹型） 如果父级都没有定位，则以浏览器文档为准移动位置</li><li>不保留原来的位置，完全是脱标的。</li></ul><p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p><h5 id="定位口诀-——-子绝父相"><a href="#定位口诀-——-子绝父相" class="headerlink" title="定位口诀 —— 子绝父相"></a>定位口诀 —— 子绝父相</h5><p>刚才咱们说过，绝对定位，要和带有定位的父级搭配使用，那么父级要用什么定位呢？</p><p><strong>子绝父相</strong> —— <strong>子级</strong>是<strong>绝对</strong>定位，<strong>父级</strong>要用<strong>相对</strong>定位。</p><blockquote><p><strong>子绝父相</strong>是使用绝对定位的口诀，要牢牢记住！</p></blockquote><p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p><p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p><p><img src="/前端笔记/css-day06/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png" alt></p><p><img src="/前端笔记/css-day06/27%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8.png" alt></p><p><strong>分析</strong>：</p><ol><li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul><li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li></ul></li></ol><p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p><h4 id="固定定位-fixed-重要"><a href="#固定定位-fixed-重要" class="headerlink" title="固定定位(fixed) - 重要"></a>固定定位(fixed) - 重要</h4><p><strong>固定定位</strong>是<strong>绝对定位</strong>的一种特殊形式： （认死理型）   如果说绝对定位是一个矩形 那么 固定定位就类似于正方形</p><ol><li><strong>完全脱标</strong> —— 完全不占位置；</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul><li>跟父元素没有任何关系；单独使用的</li><li>不随滚动条滚动。</li></ul></li></ol><blockquote><p>案例演练：固定定位案例。</p></blockquote><p><img src="/前端笔记/css-day06/08_%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt></p><p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p><h2 id="定位-position-的案例"><a href="#定位-position-的案例" class="headerlink" title="定位(position)的案例"></a>定位(position)的案例</h2><h3 id="哈根达斯"><a href="#哈根达斯" class="headerlink" title="哈根达斯"></a>哈根达斯</h3><p><strong>案例截图</strong>：</p><p><img src="/前端笔记/css-day06/09_%E5%93%88%E6%A0%B9%E8%BE%BE%E6%96%AF%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><h4 id="哈根达斯分析"><a href="#哈根达斯分析" class="headerlink" title="哈根达斯分析"></a>哈根达斯分析</h4><ol><li>一个大的 <code>div</code> 中包含 <code>3</code> 张图片；</li><li>大的 <code>div</code> 水平居中；</li><li><code>2</code> 张小图片<strong>重叠</strong>在<strong>广告</strong>图片上方 —— 脱标，不占位置，需要使用<strong>绝对定位</strong>；</li><li><code>2</code> 张小图片分别显示在<strong>左上角</strong>和<strong>右下角</strong> —— 需要<strong>使用边偏移确定准确位置</strong>。</li></ol><p><strong>案例小结</strong>：</p><ol><li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>，<strong>父元素</strong>使用<strong>相对定位</strong>；</li><li><strong>与浮动的对比</strong>：<ul><li><strong>绝对定位</strong>：脱标，<strong>利用边偏移指定准确位置</strong>；</li><li><strong>浮动</strong>：脱标，不能指定准确位置，<strong>让多个块级元素在一行显示</strong>。</li></ul></li></ol><blockquote><p>课堂练习：模拟老师的随堂案例完成<strong>哈根达斯</strong>案例（5 分钟）。</p></blockquote><h3 id="仿新浪头部和广告"><a href="#仿新浪头部和广告" class="headerlink" title="仿新浪头部和广告"></a>仿新浪头部和广告</h3><p><img src="/前端笔记/css-day06/xl.png" alt></p><h4 id="新浪案例分析"><a href="#新浪案例分析" class="headerlink" title="新浪案例分析"></a>新浪案例分析</h4><ol><li>顶部图片<strong>固定</strong>在浏览器可视窗口顶部，不会随窗口一起滚动；</li><li>左右两侧的广告图片<strong>固定</strong>在浏览器可视窗口的左右两侧，不会随窗口一起滚动；</li><li>注意：<strong>底部的内容图片</strong>初始<strong>显示在顶部图片的下方</strong>，如何解决？</li></ol><h4 id="步骤-1-——-顶部图片和底部内容"><a href="#步骤-1-——-顶部图片和底部内容" class="headerlink" title="步骤 1 —— 顶部图片和底部内容"></a>步骤 1 —— 顶部图片和底部内容</h4><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.top</span> &#123;</span><br><span class="line">    <span class="hljs-comment">/* 注意：使用固定定位时，如果盒子中没有内容，需要指定宽度 */</span></span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="line">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(images/top.png) no-repeat top center;</span><br><span class="line">    <span class="hljs-attribute">position</span>: fixed;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1002px</span>;</span><br><span class="line">    <span class="hljs-comment">/* 顶部的 44px 的 margin 可以让 box 显示在顶部图片下方 */</span></span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">44px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>在使用固定定位时，如果盒子中没有内容，需要指定宽度</li><li>设置底部内容图片的<strong>顶部 <code>margin</code></strong>，可以让底部盒子初始显示在顶部图片的下方。</li></ol><h4 id="步骤-2-——-左右两侧广告"><a href="#步骤-2-——-左右两侧广告" class="headerlink" title="步骤 2 —— 左右两侧广告"></a>步骤 2 —— 左右两侧广告</h4><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.ad-left</span>,</span><br><span class="line"><span class="hljs-selector-class">.ad-right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: fixed;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.ad-left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.ad-right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不要同时使用 <code>left</code> 和 <code>right</code> 和边偏移属性。</p><p><strong>案例小结</strong>：</p><ol><li><strong>固定定位</strong>的应用场景：<strong>固定在浏览器可视窗口某个位置的布局</strong>；</li><li>在使用固定和绝对定位时，如果盒子中没有内容，需要指定宽度（稍后就讲）。</li></ol><blockquote><p>课堂练习：模拟老师的随堂案例完成<strong>仿新浪头部和广告</strong>案例（5 分钟）。</p></blockquote><h2 id="定位-position-的扩展"><a href="#定位-position-的扩展" class="headerlink" title="定位(position)的扩展"></a>定位(position)的扩展</h2><h3 id="绝对定位的盒子居中"><a href="#绝对定位的盒子居中" class="headerlink" title="绝对定位的盒子居中"></a>绝对定位的盒子居中</h3><blockquote><p><strong>注意</strong>：<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p></blockquote><p>在使用<strong>绝对定位</strong>时要想实现水平居中，可以按照下图的方法：</p><p><img src="/前端笔记/css-day06/10_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png" alt></p><ol><li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li><li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li></ol><blockquote><p>案例演示：相对定位案例。</p></blockquote><h4 id="盒子居中定位示意图"><a href="#盒子居中定位示意图" class="headerlink" title="盒子居中定位示意图"></a>盒子居中定位示意图</h4><p><img src="/前端笔记/css-day06/11_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><blockquote><p>课堂练习：实现<strong>盒子左中、右中、中上、中下、中中定位</strong>（5 分钟）。</p></blockquote><h3 id="堆叠顺序（z-index）"><a href="#堆叠顺序（z-index）" class="headerlink" title="堆叠顺序（z-index）"></a>堆叠顺序（z-index）</h3><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。</p><p>加了定位的盒子，默认<strong>后来者居上</strong>， 后面的盒子会压住前面的盒子。</p><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</p><p><img src="/前端笔记/css-day06/12_zindex%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p><code>z-index</code> 的特性如下：</p><ol><li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；</li><li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li><li><strong>数字后面不能加单位</strong>。</li></ol><p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p><blockquote><p>案例演示：堆叠顺序。</p></blockquote><h3 id="定位改变display属性"><a href="#定位改变display属性" class="headerlink" title="定位改变display属性"></a>定位改变display属性</h3><p> 前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p><ul><li>可以用inline-block  转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li></ul><p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p><blockquote><p>完善新浪导航案例</p></blockquote><p><strong>同时注意：</strong></p><p>浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p><p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题了。</p><h2 id="综合演练-淘宝轮播图"><a href="#综合演练-淘宝轮播图" class="headerlink" title="综合演练 - 淘宝轮播图"></a>综合演练 - 淘宝轮播图</h2><p><img src="/前端笔记/css-day06/28%E6%B7%98%E5%AE%9D.png" alt></p><h4 id="圆角矩形设置4个角"><a href="#圆角矩形设置4个角" class="headerlink" title="圆角矩形设置4个角"></a>圆角矩形设置4个角</h4><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius:20px;</span><br><span class="line">border-top-right-radius:20px;</span><br><span class="line">border-bottom-right-radius:20px;</span><br><span class="line">border-bottom-left-radius:20px;</span><br></pre></td></tr></table></figure><ul><li><p>如果4个角，数值相同</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border-radius</span>: 15<span class="hljs-selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p></li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><p>还是遵循的顺时针。</p><h2 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h2><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th align="left">移动位置基准</th><th>模式转换（行内块）</th><th>使用情况</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td align="left">正常模式</td><td>不能</td><td>几乎不用</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td align="left">相对自身位置移动</td><td>不能</td><td>基本单独使用</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td align="left">相对于定位父级移动位置</td><td>能</td><td>要和定位父级元素搭配使用</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td align="left">相对于浏览器移动位置</td><td>能</td><td>单独使用，不需要父级</td></tr></tbody></table><p><strong>注意</strong>：</p><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><h2 id="学成网定位总结添加"><a href="#学成网定位总结添加" class="headerlink" title="学成网定位总结添加"></a>学成网定位总结添加</h2><p>一个小技巧:</p><p><img src="/前端笔记/css-day06/dingwei.png" alt></p><h2 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h2><p>一个完整的网页，有标准流 、 浮动 、 定位 一起完成布局的。每个都有自己的专门用法。</p><h4 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h4><p>可以让盒子上下排列 或者 左右排列的</p><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>可以让多个块级元素一行显示  或者 左右对齐盒子   浮动的盒子就是按照顺序左右排列 </p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>定位最大的特点是有层叠的概念，就是可以让多个盒子 前后 叠压来显示。 但是每个盒子需要测量数值。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.定位(position)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;定位-position&quot;&gt;&lt;a href=&quot;#定位-position&quot; class=&quot;headerlink&quot; title=&quot;定位(position)&quot;&gt;&lt;/a&gt;定位(position)&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;理解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能说出为什么要用定位&lt;/li&gt;
&lt;li&gt;能说出定位的4种分类&lt;/li&gt;
&lt;li&gt;能说出四种定位的各自特点&lt;/li&gt;
&lt;li&gt;能说出我们为什么常用子绝父相布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能写出淘宝轮播图布局&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day05/"/>
    <id>http://www.itfool.cn/前端笔记/css-day05/</id>
    <published>2020-05-21T07:06:08.000Z</published>
    <updated>2020-05-22T02:09:57.337Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.页面制作</p></blockquote><h1 id="实战-demo"><a href="#实战-demo" class="headerlink" title="实战|demo"></a>实战|demo</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>理解</strong><ul><li>能够说写单页面我们基本的流程</li><li>能说出常见的css初始化语句</li><li><strong>能说出我们CSS属性书写顺序</strong></li></ul></li><li><strong>应用</strong><ul><li>能利用ps切图</li><li>能引入外部样式表</li><li>能把psd文件转换为html页面</li></ul></li></ul><p>学成在线的目的就是为了串联前面的所有知识。来一个春晚大联欢。</p><p><strong>pink老师：</strong></p><p>取义<strong>学有所成</strong>，为师之期望，君等成才者也，故曰学成网是也~~</p><a id="more"></a><h2 id="前期准备素材"><a href="#前期准备素材" class="headerlink" title="前期准备素材"></a>前期准备素材</h2><ul><li>学成在线PSD源文件 <a href="https://itfool.cn/前端笔记/css-day05/学成网首页.psd" target="_blank" rel="noopener">https://itfool.cn/前端笔记/css-day05/学成网首页.psd</a></li><li>开发工具  =  PS（切图） +  sublime（代码） + chrome（测试）</li></ul><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><p>欲先善其事，必先利其器。 先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。</p><ol><li>创建 study 目录文件夹 (用于存放我们这个页面的相关内容)</li><li>study目录内新建images 文件夹 用于保存图片。</li><li>新建index.html 首页html 文件（以后我们的网站首页统一规定为index.html)</li><li>新建style.css 样式文件。 我们本次采用外链样式表。</li><li>将样式引入到我们HTML页面文件中。</li><li>样式表写入 清除内外边距样式，来检测样式表是否引入成功。</li></ol><h2 id="CSS属性书写顺序-重点"><a href="#CSS属性书写顺序-重点" class="headerlink" title="CSS属性书写顺序(重点)"></a>CSS属性书写顺序(重点)</h2><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">display</span>: block;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">font-family</span>: Arial, <span class="hljs-string">'Helvetica Neue'</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="line">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">    <span class="hljs-attribute">-webkit-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">-moz-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">-o-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">-ms-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常有以下的布局流程，具体如下：</p><p>1、必须确定页面的版心（可视区）， 我们测量可得知。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。其实页面布局，就是一行行罗列而成</p><p>3、制作HTML结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。</p><p>4、然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h2 id="页面制作"><a href="#页面制作" class="headerlink" title="页面制作"></a>页面制作</h2><p>这个页面的版心是 1200像素   每个版心都要水平居中对齐，所以，我们干脆把版心定义为：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.w</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头部制作"><a href="#头部制作" class="headerlink" title="头部制作"></a>头部制作</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/1.png" alt></p><ul><li>1号是版心盒子header  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。</li><li>版心盒子 里面包含 2号盒子 logo</li><li>版心盒子 里面包含 3号盒子 nav导航栏</li><li>版心盒子 里面包含 4号盒子 search搜索框</li><li>版心盒子 里面包含 5号盒子 user个人信息</li><li>注意，要求里面的 4个盒子 必须都浮动</li></ul><h4 id="banner制作"><a href="#banner制作" class="headerlink" title="banner制作"></a>banner制作</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/2.png" alt></p><ul><li>1号盒子是通栏的大盒子banner， 不给宽度，给高度，给一个蓝色背景。</li><li>2号盒子是版心， 要水平居中对齐。</li><li>3号盒子版心内，左对齐 subnav侧导航栏。</li><li>4号盒子版心内，右对齐  course 课程。</li></ul><h4 id="课程表模块"><a href="#课程表模块" class="headerlink" title="课程表模块"></a>课程表模块</h4><p>结构图如下：</p><p> <img src="/前端笔记/css-day05/6.png" alt></p><ul><li>1号盒子 是  228 * 300 的盒子 右浮动  注意 浮动的元素 不会有外边距塌陷的问题</li><li>1号盒子内 分为 上下 两个 子盒子</li><li>2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)</li><li>3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)</li></ul><h4 id="精品推荐小模块"><a href="#精品推荐小模块" class="headerlink" title="精品推荐小模块"></a>精品推荐小模块</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/3.png" alt></p><ul><li><strong>复习点：</strong>  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color</li><li>大盒子水平居中 goods  精品 ，注意此处有个盒子阴影</li><li>1号盒子是标题 H3  左侧浮动</li><li>2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）</li><li>3号盒子 右浮动 mod 修改</li></ul><h4 id="精品推荐大模块"><a href="#精品推荐大模块" class="headerlink" title="精品推荐大模块"></a>精品推荐大模块</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/4.png" alt></p><ul><li>1号盒子为最大的盒子 box  版心水平居中对齐</li><li>2号盒子为上面部分 box-hd  – 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动</li><li>3号盒子为底下部分 box-bd — 里面是无序列表 有 10个 小li 组成</li><li>小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了</li><li>复习点：  我们用到清除浮动  因为 box-hd 里面的盒子个数不一定多少，我们就不给高度了，但是里面的盒子浮动了， 影响下面的布局，此时需要浮动</li></ul><h4 id="底部模块制作"><a href="#底部模块制作" class="headerlink" title="底部模块制作"></a>底部模块制作</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/5.png" alt></p><ul><li>1号盒子通栏大盒子 底部 footer  给高度  底色是白色</li><li>2号盒子版心水平居中</li><li>3号盒子版权 copyright  左对齐 </li><li>4号盒子 链接组 links  右对齐</li></ul><h1 id="chrome调试工具"><a href="#chrome调试工具" class="headerlink" title="chrome调试工具"></a>chrome调试工具</h1><p>“工欲善其事，必先利其器”</p><p>Chrome浏览器不仅可以调试页面、JS、请求、资源、cookie，还可以模拟手机进行调试。我们现在只是使用html和css，我们先讲一下现在常用的调试。</p><h2 id="怎样打开Chrome的开发者工具？"><a href="#怎样打开Chrome的开发者工具？" class="headerlink" title="怎样打开Chrome的开发者工具？"></a>怎样打开Chrome的开发者工具？</h2><p>直接在页面上点击右键，然后选择  “检查”     快捷键    F12  或者   ctrl+shift+i</p><p> <img src="/前端笔记/css-day05/chrome1.png" alt></p><p>基本的结构布局是左边html 右边是 css</p><p><img src="/前端笔记/css-day05/chrome2.png" alt></p><h3 id="chrome调试数值"><a href="#chrome调试数值" class="headerlink" title="chrome调试数值"></a>chrome调试数值</h3><p>可以鼠标点击后面的数值，  按下键盘  上箭头 是 调大 数值， 下箭头是 调小数值</p><p><img src="/前端笔记/css-day05/chrome5.png" alt></p><h3 id="快速定位css所在行数"><a href="#快速定位css所在行数" class="headerlink" title="快速定位css所在行数"></a>快速定位css所在行数</h3><p><img src="/前端笔记/css-day05/chrome6.png" alt></p><h2 id="Chrome提示的常见布局错误"><a href="#Chrome提示的常见布局错误" class="headerlink" title="Chrome提示的常见布局错误"></a>Chrome提示的常见布局错误</h2><h3 id="css单词书写错误提示"><a href="#css单词书写错误提示" class="headerlink" title="css单词书写错误提示"></a>css单词书写错误提示</h3><p>用下图所示的黑色箭头，点击我们需要的 html 元素。</p><p><img src="/前端笔记/css-day05/chrome3.png" alt></p><h3 id="css无显示"><a href="#css无显示" class="headerlink" title="css无显示"></a>css无显示</h3><p>声明类名和html调用名不一致   或者   css文件引入不对  或者  这个样式的前面 多余了一些符号影响的</p><p><img src="/前端笔记/css-day05/chrome4.png" alt></p><h3 id="html-结构不匹配-重要"><a href="#html-结构不匹配-重要" class="headerlink" title="html 结构不匹配(重要)"></a>html 结构不匹配(重要)</h3><p>左侧   展开可以看到html 标签是否匹配</p><p> <img src="/前端笔记/css-day05/chrome7.png" alt></p><h3 id="通过颜色判断盒子"><a href="#通过颜色判断盒子" class="headerlink" title="通过颜色判断盒子"></a>通过颜色判断盒子</h3><p>蓝色是 盒子的 宽度高度     青色是 内边距     橙色 是外边距   通过这个很方便的看到盒子给的范围</p><p> <img src="/前端笔记/css-day05/chrome8.png" alt></p><h3 id="看看你有如下错误吗"><a href="#看看你有如下错误吗" class="headerlink" title="看看你有如下错误吗"></a>看看你有如下错误吗</h3><p> <img src="/前端笔记/css-day05/a.png" alt></p><p> <img src="/前端笔记/css-day05/b.png" alt></p><p> <img src="/前端笔记/css-day05/c.png" alt></p><p> <img src="/前端笔记/css-day05/d.png" alt></p><p> <img src="/前端笔记/css-day05/e.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.页面制作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;实战-demo&quot;&gt;&lt;a href=&quot;#实战-demo&quot; class=&quot;headerlink&quot; title=&quot;实战|demo&quot;&gt;&lt;/a&gt;实战|demo&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;理解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够说写单页面我们基本的流程&lt;/li&gt;
&lt;li&gt;能说出常见的css初始化语句&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;能说出我们CSS属性书写顺序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能利用ps切图&lt;/li&gt;
&lt;li&gt;能引入外部样式表&lt;/li&gt;
&lt;li&gt;能把psd文件转换为html页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学成在线的目的就是为了串联前面的所有知识。来一个春晚大联欢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pink老师：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;取义&lt;strong&gt;学有所成&lt;/strong&gt;，为师之期望，君等成才者也，故曰学成网是也~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day04/"/>
    <id>http://www.itfool.cn/前端笔记/css-day04/</id>
    <published>2020-05-21T06:47:13.000Z</published>
    <updated>2020-05-21T07:49:02.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.浮动</p></blockquote><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li><strong>记忆</strong><ul><li>能够说出 CSS 的布局的三种机制</li></ul></li><li><strong>理解</strong><ul><li>能够说出普通流在布局中的特点</li><li>能够说出我们为什么用浮动</li><li>能够说出我们为什么要清除浮动</li></ul></li><li><strong>应用</strong><ul><li>能够利用浮动完成导航栏案例</li><li>能够清除浮动</li><li>能够使用PS切图工具<a id="more"></a><h3 id="CSS-布局的三种机制"><a href="#CSS-布局的三种机制" class="headerlink" title="CSS 布局的三种机制"></a>CSS 布局的三种机制</h3></li></ul></li></ul><blockquote><p>网页布局的核心——就是<strong>用 CSS 来摆放盒子</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>（标准流）、<strong>浮动</strong>和<strong>定位</strong>，其中： </p><ol><li><strong>普通流</strong>（标准流）<ul><li><strong>块级元素</strong>会独占一行，<strong>从上向下</strong>顺序排列；<ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul></li><li><strong>行内元素</strong>会按照顺序，<strong>从左到右</strong>顺序排列，碰到父元素边缘则自动换行；<ul><li>常用元素：span、a、i、em等</li></ul></li></ul></li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位，特别是后面的 js 特效。</li></ul></li></ol><h3 id="为什么需要浮动？"><a href="#为什么需要浮动？" class="headerlink" title="为什么需要浮动？"></a>为什么需要浮动？</h3><p>思考题：</p><p> 我们首先要思考以下2个布局中最常见的问题？</p><ol><li><p>如何让多个盒子(div)水平排列成一行？</p><p><img src="/前端笔记/css-day04/03_%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97div.png" alt></p></li><li><p>如何实现盒子的左右对齐？</p></li></ol><p><img src="/前端笔记/css-day04/float1.png" alt></p><p>虽然我们前面学过行内块（inline-block） 但是他却有自己的缺陷：</p><ol><li>它可以实现多个元素一行显示，但是中间会有空白缝隙，不能满足以上第一个问题。</li><li>它不能实现以上第二个问题，盒子左右对齐 </li></ol><p><strong>pink老师一句话总结他们</strong></p><blockquote><p>因为一些网页布局要求，标准流不能满足我们的需要了，因此我们需要浮动来完成网页布局。</p></blockquote><h3 id="什么是浮动-float"><a href="#什么是浮动-float" class="headerlink" title="什么是浮动(float)"></a>什么是浮动(float)</h3><p><strong>概念</strong>：元素的浮动是指<strong>设置了浮动属性的元素</strong>会</p><ol><li>脱离标准普通流的控制</li><li>移动到指定位置。</li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li><strong>让多个盒子(div)水平排列成一行</strong>，使得浮动成为布局的重要手段。</li><li>可以实现盒子的左右对齐等等..</li><li>浮动最早是用来<strong>控制图片</strong>，实现<strong>文字环绕图片的效果</strong>。</li></ol><p><img src="/前端笔记/css-day04/01_%E6%96%87%E5%AD%97%E7%8E%AF%E7%BB%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>在 CSS 中，通过 <code>float</code>  中文，  浮 漏 特    属性定义浮动，语法如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>none</strong></td><td>元素不浮动（<strong>默认值</strong>）</td></tr><tr><td><strong>left</strong></td><td>元素向<strong>左</strong>浮动</td></tr><tr><td><strong>right</strong></td><td>元素向<strong>右</strong>浮动</td></tr></tbody></table><p>pink老师教你学浮动口诀。通过 <code>float</code>   —–  浮 漏 特</p><h4 id="浮动口诀之-浮"><a href="#浮动口诀之-浮" class="headerlink" title="浮动口诀之 浮"></a>浮动口诀之 浮</h4><p>浮动——浮<del>浮</del>浮<figure class="highlight plain hljs"><figcaption><span>脱离标准流。 俗称 “脱标”   </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ![](CSS-Day04/23%E6%B5%AE%E5%8A%A8%E8%84%B1%E6%A0%87.png)</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">.box1 &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgba(255, 0, 0, 0.5);</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**小结**：</span><br><span class="line"></span><br><span class="line">- `float` 属性会让盒子漂浮在标准流的上面，所以第二个标准流的盒子跑到浮动盒子的底下了。</span><br><span class="line"></span><br><span class="line">####   浮动口诀之 漏</span><br><span class="line"></span><br><span class="line">浮动——漏~漏~漏~  浮动的盒子，把自己原来的位置漏给下面标准流的盒子，就是不占有原来位置，是脱离标准流的，我们俗称 “脱标”。</span><br><span class="line"></span><br><span class="line">~~~css</span><br><span class="line">.box1 &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgba(255, 0, 0, 0.5);</span><br><span class="line">    /* 让第 1 个盒子漂浮起来，不占位置 */</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 所以，box2下面的其实就是跑到box1盒子下面了， 被box1给压住了，遮挡起来了</p><p>来来来，我们看个立体图</p><p><img src="/前端笔记/css-day04/zou.gif" alt></p><h4 id="浮动口诀之-特"><a href="#浮动口诀之-特" class="headerlink" title="浮动口诀之 特"></a>浮动口诀之 特</h4><p>浮动——特性  float属性会改变元素display属性。</p><p>任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。</p><p>体验案例——div 水平排列</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* display: inline-block; */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.two</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">background-color</span>: hotpink;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/css-day04/24%E6%B5%AE%E5%8A%A8%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA.png" alt></p><p><strong>注意： 浮动的元素互相贴靠一起的，但是如果父级宽度装不下这些浮动的盒子， 多出的盒子会另起一行对齐</strong></p><h3 id="浮动-float-小结"><a href="#浮动-float-小结" class="headerlink" title="浮动(float)小结"></a>浮动(float)小结</h3><blockquote><p>我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式</p></blockquote><p><strong>float</strong> —— <strong>浮漏特</strong></p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>浮</td><td>加了浮动的盒子<strong>是浮起来</strong>的，漂浮在其他标准流盒子的上面。</td></tr><tr><td>漏</td><td>加了浮动的盒子<strong>是不占位置的</strong>，它原来的位置<strong>漏给了标准流的盒子</strong>。</td></tr><tr><td>特</td><td><strong>特别注意</strong>：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td></tr></tbody></table><h3 id="浮动-float-的应用（重要）"><a href="#浮动-float-的应用（重要）" class="headerlink" title="浮动(float)的应用（重要）"></a>浮动(float)的应用（重要）</h3><h4 id="浮动和标准流的父盒子搭配"><a href="#浮动和标准流的父盒子搭配" class="headerlink" title="浮动和标准流的父盒子搭配"></a>浮动和标准流的父盒子搭配</h4><p>我们知道，浮动是脱标的，会影响下面的标准流元素，此时，我们需要给浮动的元素添加一个标准流的父亲，这样，最大化的减小了对其他标准流的影响。</p><p><strong>pink老师说：</strong></p><blockquote><p>一个完整的网页，是 标准流 +  浮动 +  我们后面要讲的定位 一起完成的。</p></blockquote><h4 id="浮动应用案例"><a href="#浮动应用案例" class="headerlink" title="浮动应用案例"></a>浮动应用案例</h4><p><img src="/前端笔记/css-day04/mii.png" alt></p><h4 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h4><p><img src="/前端笔记/css-day04/nav.png" alt></p><p>注意，实际重要的导航栏中，我们不会直接用链接a 而是用 li  包含链接(li+a)的做法。</p><ol><li>li+a 语义更清晰，一看这就是有条理的列表型内容。</li><li>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li></ol><h3 id="浮动-float-的扩展"><a href="#浮动-float-的扩展" class="headerlink" title="浮动(float)的扩展"></a>浮动(float)的扩展</h3><h4 id="浮动元素与父盒子的关系"><a href="#浮动元素与父盒子的关系" class="headerlink" title="浮动元素与父盒子的关系"></a>浮动元素与父盒子的关系</h4><ul><li>子盒子的浮动参照父盒子对齐</li><li>不会与父盒子的边框重叠，也不会超过父盒子的内边距<br><img src="/前端笔记/css-day04/05_%E7%88%B6%E5%AD%90%E7%9B%92%E5%AD%90%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt><br>​</li></ul><h4 id="浮动元素与兄弟盒子的关系"><a href="#浮动元素与兄弟盒子的关系" class="headerlink" title="浮动元素与兄弟盒子的关系"></a>浮动元素与兄弟盒子的关系</h4><p>在一个父级盒子中，如果<strong>前一个兄弟盒子</strong>是：</p><ul><li><strong>浮动</strong>的，那么<strong>当前盒子</strong>会与前一个盒子的顶部对齐；</li><li><strong>普通流</strong>的，那么<strong>当前盒子</strong>会显示在前一个兄弟盒子的下方。 </li></ul><p><strong>pink老师 要你记住：</strong></p><blockquote><p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。</p></blockquote><p> <img src="/前端笔记/css-day04/two1.jpg" alt></p><p><strong>建议</strong></p><p><strong>如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</strong></p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><h3 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h3><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p><p><img src="/前端笔记/css-day04/n-1590044092695.jpg" alt></p><p><img src="/前端笔记/css-day04/no.jpg" alt></p><ul><li>总结：<ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></li></ul></li></ul><h3 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h3><p><strong>听pink老师说清除浮动本质：</strong></p><p>​    <strong>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><p>在CSS中，clear属性用于清除浮动，在这里，我们先记住清除浮动的方法，具体的原理，等我们学完css会再回头分析。</p><ul><li>语法：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;   clear 清除</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>但是我们实际工作中， 几乎只用 clear: both;</p><h4 id="额外标签法-隔墙法"><a href="#额外标签法-隔墙法" class="headerlink" title="额外标签法(隔墙法)"></a>额外标签法(隔墙法)</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">”clear:both”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><ul><li>优点： 通俗易懂，书写方便</li><li>缺点： 添加许多无意义的标签，结构化较差。</li></ul><h4 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h4><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。</span><br></pre></td></tr></table></figure><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h4 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</strong> </p><p>使用方法：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;  <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>; <span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">clear</span>: both; <span class="hljs-attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure><ul><li>优点： 符合闭合浮动思想  结构语义化正确</li><li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li><li>代表网站： 百度、淘宝网、网易等</li></ul><p><img src="/前端笔记/css-day04/163.png" alt></p><h4 id="使用双伪元素清除浮动"><a href="#使用双伪元素清除浮动" class="headerlink" title="使用双伪元素清除浮动"></a>使用双伪元素清除浮动</h4><p>使用方法：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="hljs-attribute">content</span>:<span class="hljs-string">""</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="hljs-attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点：  代码更简洁</p></li><li><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p></li><li><p>代表网站： 小米、腾讯等</p></li></ul><h3 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h3><p><strong>pink老师告诉你我们以后什么时候用清除浮动呢？</strong></p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了。</li></ol><table><thead><tr><th>清除浮动的方式</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td align="left">通俗易懂，书写方便</td><td align="left">添加许多无意义的标签，结构化较差。</td></tr><tr><td>父级overflow:hidden;</td><td align="left">书写简单</td><td align="left">溢出隐藏</td></tr><tr><td>父级after伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after，兼容性问题</td></tr></tbody></table><p>后面两种伪元素清除浮动，大家暂且会使用就好， 深入原理，我们后面学完伪元素再讲。</p><h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p><strong>常见的图片格式</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. jpg图像格式： </span><br><span class="line">JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们产品类的图片经常用jpg格式的</span><br><span class="line">2. gif图像格式：</span><br><span class="line">GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果</span><br><span class="line">3. png图像格式</span><br><span class="line">是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景</span><br><span class="line">4. PSD图像格式</span><br><span class="line">PSD格式是Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计草稿。</span><br></pre></td></tr></table></figure><p>PS切图   可以 分为   利用切片工具切图 以及   利用PS的插件快速切图。</p><h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p> <img src="/前端笔记/css-day04/1498466173246.png" alt></p><p>ps切图片，分两大步：</p><p><strong>1). 用切片选中图片</strong></p><ul><li><p>利用切片工具手动划出</p></li><li><p>图层菜单—新建基于图层的切片</p></li><li><p>利用辅助线 来切图 –    基于参考线的切片 </p></li></ul><p>   <img src="/前端笔记/css-day04/1498466734205.png" alt></p><p><strong>2). 导出切片</strong></p><p>  文件菜单   – 存储为web设备所用格式 —-   选择  我们要的图片格式 —-  点存储  —   别忘了选中的切片</p><h4 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h4><p>视图菜单– 清除 辅助线/ 清除切片</p><h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">http://www.cutterman.cn/zh/cutterman</a></p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><p><img src="/前端笔记/css-day04/sample1.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.浮动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;浮动-float&quot;&gt;&lt;a href=&quot;#浮动-float&quot; class=&quot;headerlink&quot; title=&quot;浮动(float)&quot;&gt;&lt;/a&gt;浮动(float)&lt;/h2&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;记忆&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够说出 CSS 的布局的三种机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够说出普通流在布局中的特点&lt;/li&gt;
&lt;li&gt;能够说出我们为什么用浮动&lt;/li&gt;
&lt;li&gt;能够说出我们为什么要清除浮动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够利用浮动完成导航栏案例&lt;/li&gt;
&lt;li&gt;能够清除浮动&lt;/li&gt;
&lt;li&gt;能够使用PS切图工具&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day03/"/>
    <id>http://www.itfool.cn/前端笔记/css-day03/</id>
    <published>2020-05-20T09:13:08.000Z</published>
    <updated>2020-05-20T09:25:31.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.盒子模型</p></blockquote><p><img src="/前端笔记/css-day03/day3.png" alt></p><a id="more"></a><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>css学习三大重点： css 盒子模型   、  浮动  、  定位  </p><p>主题思路：</p><p>目标： </p><ul><li>理解：<ul><li>能说出盒子模型有那四部分组成</li><li>能说出内边距的作用以及对盒子的影响</li><li>能说出padding设置不同数值个数分别代表的意思</li><li>能说出块级盒子居中对齐需要的2个条件</li><li>能说出外边距合并的解决方法</li></ul></li><li>应用：<ul><li>能利用边框复合写法给元素添加边框</li><li>能计算盒子的实际大小</li><li>能利用盒子模型布局模块案例</li></ul></li></ul><h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p><p><img src="/前端笔记/css-day03/t.png" alt></p><ul><li><p>看透网页布局的本质：</p><ul><li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等，放入盒子里面。</li><li>以上两步 就是网页布局的本质</li></ul><p><img src="/前端笔记/css-day03/t1.png" alt></p></li></ul><p>我们明白了，盒子是网页布局的关键点，所以我们更应该弄明白 这个盒子有什么特点。</p><h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><ul><li><p>所谓盒子模型：</p><ul><li>就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li></ul><p><img src="/前端笔记/css-day03/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt></p><p> <img src="/前端笔记/css-day03/boxs.png" alt></p><p><strong>pink老师总结：</strong></p><ul><li>盒子模型有元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li><li>盒子里面的文字和图片等元素是 内容区域</li><li>盒子的厚度 我们成为 盒子的边框 </li><li>盒子内容与边框的距离是内边距（类似单元格的 cellpadding)</li><li>盒子与盒子之间的距离是外边距（类似单元格的 cellspacing）</li></ul></li></ul><p><strong>标准盒子模型</strong></p><p> <img src="/前端笔记/css-day03/%E6%A0%87%E5%87%86%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt></p><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>​    <img src="/前端笔记/css-day03/%E7%9B%92%E5%AD%90%E8%BE%B9%E6%A1%86.png" alt></p><ul><li>语法：</li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th align="center">作用</th></tr></thead><tbody><tr><td>border-width</td><td align="center">定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td align="center">边框的样式</td></tr><tr><td>border-color</td><td align="center">边框颜色</td></tr></tbody></table><ul><li>边框的样式：<ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线  </li><li>dotted：边框为点线</li></ul></li></ul><h3 id="边框综合设置"><a href="#边框综合设置" class="headerlink" title="边框综合设置"></a>边框综合设置</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">red</span>;  没有顺序</span><br></pre></td></tr></table></figure><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p><table><thead><tr><th align="left">上边框</th><th align="left">下边框</th><th align="left">左边框</th><th align="left">右边框</th></tr></thead><tbody><tr><td align="left">border-top-style:样式;</td><td align="left">border-bottom-style:样式;</td><td align="left">border-left-style:样式;</td><td align="left">border-right-style:样式;</td></tr><tr><td align="left">border-top-width:宽度;</td><td align="left">border- bottom-width:宽度;</td><td align="left">border-left-width:宽度;</td><td align="left">border-right-width:宽度;</td></tr><tr><td align="left">border-top-color:颜色;</td><td align="left">border- bottom-color:颜色;</td><td align="left">border-left-color:颜色;</td><td align="left">border-right-color:颜色;</td></tr><tr><td align="left">border-top:宽度 样式 颜色;</td><td align="left">border-bottom:宽度 样式 颜色;</td><td align="left">border-left:宽度 样式 颜色;</td><td align="left">border-right:宽度 样式 颜色;</td></tr></tbody></table><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p> <img src="/前端笔记/css-day03/%E8%A1%A8%E6%A0%BC%E8%BE%B9%E6%A1%86.png" alt></p><ul><li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</p></li><li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p></li><li><p>通过css属性：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table&#123; border-collapse:collapse; &#125;</span><br></pre></td></tr></table></figure><ul><li>collapse 单词是合并的意思</li><li>border-collapse:collapse; 表示相邻边框合并在一起。</li></ul></li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line"><span class="hljs-selector-tag">table</span> &#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">td</span> &#123;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="line"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="line"><span class="hljs-attribute">border-collapse</span>: collapse;  <span class="hljs-comment">/*合并相邻边框*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p> <img src="/前端笔记/css-day03/16%E5%86%85%E8%BE%B9%E8%B7%9D.png" alt></p><h3 id="内边距："><a href="#内边距：" class="headerlink" title="内边距："></a>内边距：</h3><p>​    padding属性用于设置内边距。 <strong>是指 边框与内容之间的距离。</strong></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>padding-left</td><td align="left">左内边距</td></tr><tr><td>padding-right</td><td align="left">右内边距</td></tr><tr><td>padding-top</td><td align="left">上内边距</td></tr><tr><td>padding-bottom</td><td align="left">下内边距</td></tr></tbody></table><p>当我们给盒子指定padding值之后， 发生了2件事情：</p><ol><li><p>内容和边框 有了距离，添加了内边距。</p></li><li><p>盒子会变大了。</p><p><img src="/前端笔记/css-day03/w.jpg" alt><strong>注意：  后面跟几个数值表示的意思是不一样的。</strong></p></li></ol><p>我们分开写有点麻烦，我们可以不可以简写呢？</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右内边距;</td></tr><tr><td>2个值</td><td>padding: 上下内边距    左右内边距 ；</td></tr><tr><td>3个值</td><td>padding：上内边距   左右内边距   下内边距；</td></tr><tr><td>4个值</td><td>padding: 上内边距 右内边距 下内边距 左内边距 ；</td></tr></tbody></table><p><img src="/前端笔记/css-day03/%E9%A1%BA%E6%97%B6%E9%92%88.jpg" alt></p><p><strong>课堂一练：</strong></p><p>请写出如下内边距：</p><ol><li>要求盒子有一个左边内边距是 5像素</li><li>要求简写的形式写出  一个盒子上下是 25像素   左右是15像素。</li><li>要求简写的形式写出 一个盒子  上内边距是 12像素  下内边距是 0  左内边距是 25像素  右内边距是 10像素</li></ol><h3 id="课堂案例：-新浪导航"><a href="#课堂案例：-新浪导航" class="headerlink" title="课堂案例：  新浪导航"></a>课堂案例：  新浪导航</h3><p>新浪导航栏的核心就是因为里面的字数不一样多，所以我们不方便给宽度，还是给padding ，撑开盒子的。</p><p> <img src="/前端笔记/css-day03/al.gif" alt></p><h3 id="内盒尺寸计算（元素实际大小）"><a href="#内盒尺寸计算（元素实际大小）" class="headerlink" title="内盒尺寸计算（元素实际大小）"></a>内盒尺寸计算（元素实际大小）</h3><p><img src="/前端笔记/css-day03/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%A4%A7%E5%B0%8F.png" alt></p><ul><li><p>宽度</p><p>Element Height = content height + padding + border （Height为内容高度）</p></li><li><p>高度</p><p>Element Width = content width + padding + border （Width为内容宽度）</p></li><li><p>盒子的实际的大小 =   内容的宽度和高度 +  内边距   +  边框   </p></li></ul><h3 id="内边距产生的问题"><a href="#内边距产生的问题" class="headerlink" title="内边距产生的问题"></a>内边距产生的问题</h3><ul><li><p>问题</p><p><img src="/前端笔记/css-day03/31padding%E9%97%AE%E9%A2%98.png" alt></p><p>会撑大原来的盒子</p></li><li><p>解决：</p><p>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小</p><p><img src="/前端笔记/css-day03/32padding%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.png" alt></p></li></ul><p><strong>课堂一练</strong></p><ol><li>一个盒子宽度为100， padding为 10， 边框为5像素，问这个盒子实际的宽度的是（）</li></ol><ul><li><input checked disabled type="checkbox"> <p>(A) 130</p></li><li><input disabled type="checkbox"> <p>(B) 135 </p></li><li><input disabled type="checkbox"> <p>(C) 125</p></li><li><input disabled type="checkbox"> <p>(D) 115</p><p>100 +  20 + 10 </p></li></ul><ol start="2"><li>关于根据下列代码计算 盒子宽高下列说法正确的是（）</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line">         <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-top</span>: <span class="hljs-number">5px</span> solid blue;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> (A) 宽度为200px 高度为200px</li><li><input checked disabled type="checkbox"> (B) 宽度为352px 高度为306px</li><li><input disabled type="checkbox"> (C) 宽度为302px 高度为307px</li><li><input disabled type="checkbox"> (D) 宽度为302px 高度为252px</li></ul><p>w  200 +   150   + 2   =  352</p><p>h   200 +  100 +  6   =  306 </p><h3 id="padding不影响盒子大小情况"><a href="#padding不影响盒子大小情况" class="headerlink" title="padding不影响盒子大小情况"></a>padding不影响盒子大小情况</h3><blockquote><p>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p></blockquote><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p><img src="/前端笔记/css-day03/18margin%E5%A4%96%E8%BE%B9%E8%B7%9D.png" alt></p><h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>​    margin属性用于设置外边距。  margin就是控制<strong>盒子和盒子之间的距离</strong></p><h3 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h3><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>margin-left</td><td align="left">左外边距</td></tr><tr><td>margin-right</td><td align="left">右外边距</td></tr><tr><td>margin-top</td><td align="left">上外边距</td></tr><tr><td>margin-bottom</td><td align="left">下外边距</td></tr></tbody></table><p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p><h3 id="块级盒子水平居中"><a href="#块级盒子水平居中" class="headerlink" title="块级盒子水平居中"></a>块级盒子水平居中</h3><ul><li>可以让一个块级盒子实现水平居中必须：<ul><li>盒子必须指定了宽度（width）</li><li>然后就给<strong>左右的外边距都设置为auto</strong>，</li></ul></li></ul><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.header</span>&#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">960px</span>; <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>常见的写法，以下下三种都可以。</p><ul><li>margin-left: auto;   margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;</li></ul><h3 id="文字居中和盒子居中区别"><a href="#文字居中和盒子居中区别" class="headerlink" title="文字居中和盒子居中区别"></a>文字居中和盒子居中区别</h3><ol><li>盒子内的文字水平居中是  text-align: center,  而且还可以让 行内元素和行内块居中对齐</li><li>块级盒子水平居中  左右margin 改为 auto </li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">text-align</span>: <span class="hljs-selector-tag">center</span>; <span class="hljs-comment">/*  文字 行内元素 行内块元素水平居中 */</span></span><br><span class="line"><span class="hljs-selector-tag">margin</span>: 10<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">auto</span>;  <span class="hljs-comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span></span><br></pre></td></tr></table></figure><h3 id="插入图片和背景图片区别"><a href="#插入图片和背景图片区别" class="headerlink" title="插入图片和背景图片区别"></a>插入图片和背景图片区别</h3><ol><li>插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">img</span> &#123;  </span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">210px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;  <span class="hljs-comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid purple;</span><br><span class="line"><span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">30px</span> <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 背景图片更改位置 我用 background-position */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除元素的默认内外边距-重要"><a href="#清除元素的默认内外边距-重要" class="headerlink" title="清除元素的默认内外边距(重要)"></a>清除元素的默认内外边距(重要)</h3><p><img src="/前端笔记/css-day03/19%E6%B8%85%E9%99%A4%E5%86%85%E5%A4%96%E8%BE%B9%E8%B7%9D.png" alt></p><p>为了更灵活方便地控制网页中的元素，制作网页时，我们需要将元素的默认内外边距清除</p><p>代码： </p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;         <span class="hljs-comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;          <span class="hljs-comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：  </p><ul><li>行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。</li></ul><h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><p>使用margin定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p><h4 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h4><ul><li><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</p></li><li><p>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</p></li><li><p><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><p><img src="/前端笔记/css-day03/www.png" alt></p></li></ul><p><strong>解决方案：尽量给只给一个盒子添加margin值</strong>。</p><h4 id="嵌套块元素垂直外边距的合并（塌陷）"><a href="#嵌套块元素垂直外边距的合并（塌陷）" class="headerlink" title="嵌套块元素垂直外边距的合并（塌陷）"></a>嵌套块元素垂直外边距的合并（塌陷）</h4><ul><li><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框</p></li><li><p>父元素的上外边距会与子元素的上外边距发生合并</p></li><li><p>合并后的外边距为两者中的较大者</p><p><img src="/前端笔记/css-day03/n.png" alt></p></li></ul><p><strong>解决方案：</strong></p><ol><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow:hidden。</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><ul><li><p>学习完盒子模型，内边距和外边距，什么情况下用内边距，什么情况下用外边距？</p><ul><li>大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</li></ul></li></ul><p>我们根据稳定性来分，建议如下：</p><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure><ul><li>原因：<ul><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li><li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li><li>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li></ul></li></ul><h2 id="ps基本操作以及常用快捷键："><a href="#ps基本操作以及常用快捷键：" class="headerlink" title="ps基本操作以及常用快捷键："></a>ps基本操作以及常用快捷键：</h2><p>因为网页美工大部分效果图都是利用ps 来做的，所以，以后我们大部分切图工作都是在ps里面完成。</p><ul><li>文件–打开 –  可以打开 我们要测量的图片</li><li>ctrl+r 可以打开标尺  或者  视图 –  标尺</li><li>右击标尺，  把里面的单位改为  像素  </li><li>ctrl+ 加号 键  可以 放大  视图  ctrl+ 减号 缩小视图</li><li>按住空格键，  鼠标可以 变成小手 ，拖动 ps 视图</li><li>用选区 拖动  可以 测量 大小 </li><li>ctrl+ d  可以取消选区  或者旁边空白处点击一下也可以取消选区</li></ul><p><img src="/前端笔记/css-day03/ps2.png" alt></p><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p><img src="/前端笔记/css-day03/lieb.png" alt></p><h4 id="去掉列表默认的样式"><a href="#去掉列表默认的样式" class="headerlink" title="去掉列表默认的样式"></a>去掉列表默认的样式</h4><p>无序和有序列表前面默认的列表样式，在不同浏览器显示效果不一样，而且也比较难看，所以，我们一般上来就直接去掉这些列表样式就行了。 代码如下</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">li</span> &#123; <span class="hljs-attribute">list-style</span>: none; &#125;</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展@"></a>拓展@</h1><p>以下我们讲的CSS3部分新属性， 但是我们遵循的原则是，以下内容，不会影响我们页面布局， 只是样式更好看了而已。</p><h2 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h2><p><img src="/前端笔记/css-day03/%E5%9C%86%E8%A7%92.png" alt></p><ul><li>语法：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border-radius</span><span class="hljs-selector-pseudo">:length</span>;</span><br></pre></td></tr></table></figure><ul><li><p>其中每一个值可以为 数值或百分比的形式。 </p></li><li><p>技巧： 让一个正方形  变成圆圈 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-radius: 50%;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day03/radio.png" alt></p></li></ul><ul><li><img src="/前端笔记/css-day03/%E5%9C%86%E8%A7%92-1589966481971.png" alt></li><li>以上效果图矩形的圆角， 就不要用 百分比了，因为百分比会是表示高度和宽度的一半。</li><li>而我们这里矩形就只用 用 高度的一半就好了。精确单位。</li></ul><h2 id="盒子阴影-CSS3"><a href="#盒子阴影-CSS3" class="headerlink" title="盒子阴影(CSS3)"></a>盒子阴影(CSS3)</h2><p><img src="/前端笔记/css-day03/%E9%98%B4%E5%BD%B1.png" alt></p><ul><li>语法:</li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day03/1498467567011.png" alt></p><ul><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 是默认的 但是不能写           想要内阴影可以写  inset </li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="line"><span class="hljs-comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line"><span class="hljs-comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line"><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>  <span class="hljs-built_in">rgba</span>(0, 0, 0, .4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业的开始。</p><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例： </p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">font-size</span>: 12<span class="hljs-selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 并集选择器，每个选择器声明必须独占一行。</p><p>示例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【建议】 一般情况情况下，选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* good */</span></span><br><span class="line"><span class="hljs-selector-id">#username</span> <span class="hljs-selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="hljs-selector-class">.comment</span> <span class="hljs-selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* bad */</span></span><br><span class="line"><span class="hljs-selector-class">.page</span> <span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.login</span>  <span class="hljs-selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="hljs-selector-class">.comment</span> <span class="hljs-selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* good */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* bad */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性定义后必须以分号结尾。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* good */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* bad */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.盒子模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/css-day03/day3.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day02/"/>
    <id>http://www.itfool.cn/前端笔记/css-day02/</id>
    <published>2020-05-20T08:06:33.000Z</published>
    <updated>2020-05-20T09:07:46.761Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.CSS选择器</p></blockquote><p><img src="/前端笔记/css-day02/day2.png" alt></p><a id="more"></a><p>今天我们围绕一个 导航栏案例进行学习知识点。</p><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><h2 id="今日重点："><a href="#今日重点：" class="headerlink" title="今日重点："></a>今日重点：</h2><ul><li>复合选择器<ul><li>后代选择器</li><li>并集选择器</li></ul></li><li>标签显示模式</li><li>CSS背景<ul><li>背景位置</li></ul></li><li>CSS三大特性<ul><li>优先级</li></ul></li></ul><p> 目标</p><ul><li><p>理解</p><ul><li>理解css复合选择器分别的应用场景</li></ul></li><li><p>应用</p><ul><li>使用后代选择器给元素添加样式</li><li>使用并集选择器给元素添加样式</li><li>使用伪类选择器</li></ul></li></ul><p><strong>为什么要学习css复合选择器</strong></p><p>  CSS选择器分为 基础选择器 和 复合选择器 ，但是基础选择器不能满足我们实际开发中，快速高效的选择标签。</p><ul><li>目的是为了可以选择更准确更精细的目标元素标签。</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li></ul><h2 id="后代选择器（重点）"><a href="#后代选择器（重点）" class="headerlink" title="后代选择器（重点）"></a>后代选择器（重点）</h2><ul><li><p>概念：</p><p>后代选择器又称为包含选择器</p></li><li><p>作用：</p><p>用来选择元素或元素组的<strong>子孙后代</strong></p></li><li><p>其写法就是把外层标签写在前面，内层标签写在后面，中间用<strong>空格</strong>分隔，先写父亲爷爷，在写儿子孙子。 </p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父级 子级&#123;属性:属性值;属性:属性值;&#125;</span><br></pre></td></tr></table></figure><ul><li>语法：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class h3&#123;color:red;font-size:16px;&#125;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/hou.png" alt></p><ul><li>当标签发生嵌套时，内层标签就成为外层标签的后代。</li><li>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。</li></ul><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><ul><li><p>作用：</p><p>子元素选择器只能选择作为某元素<strong>子元素(亲儿子)</strong>的元素。</p></li><li><p>其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 <code>&gt;</code> 进行连接</p></li><li><p>语法：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class&gt;h3&#123;color:red;font-size:14px;&#125;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/zi1.png" alt></p><p><strong>pink老师一句话说出他们</strong></p><blockquote><p>这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p></blockquote><p>白话：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><ul><li><p>条件</p><p>交集选择器由两个选择器构成，找到的标签必须满足：既有标签一的特点，也有标签二的特点。</p></li></ul><p><img src="/前端笔记/css-day02/jiaoji.png" alt></p><ul><li>语法：</li></ul><p><img src="/前端笔记/css-day02/jiao.png" alt></p><ul><li>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<strong>不能有空格</strong>，如h3.special。</li></ul><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。  即…又…的意思</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。</span><br></pre></td></tr></table></figure><p>用的相对来说比较少，不太建议使用。</p><h2 id="并集选择器（重点）"><a href="#并集选择器（重点）" class="headerlink" title="并集选择器（重点）"></a>并集选择器（重点）</h2><ul><li>应用：<ul><li>如果某些选择器定义的相同样式，就可以利用并集选择器，可以让代码更简洁。</li></ul></li><li>并集选择器（CSS选择器分组）是各个选择器通过<code>,</code>连接而成的，通常用于集体声明。</li><li>语法：</li></ul><p><img src="/前端笔记/css-day02/bing.png" alt></p><ul><li><p>任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。</p></li><li><p>记忆技巧：</p><p>并集选择器通常用于集体声明  ，逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为 和的意思。</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  </span><br><span class="line">表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 </span><br><span class="line">通常用于集体声明。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/hu.gif" alt>他和他，在一起， 在一起    一起的意思</p><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav"</span>&gt;</span>   </span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>公司首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>公司简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>公司产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sitenav"</span>&gt;</span>    </span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"site-l"</span>&gt;</span>左侧侧导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"site-r"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不修改以上结构代码的前提下，完成以下任务：</p><ol><li>链接 登录 的颜色为红色</li><li>主导航栏里面的所有的链接改为橙色    </li><li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。</li></ol><h2 id="链接伪类选择器（重点）"><a href="#链接伪类选择器（重点）" class="headerlink" title="链接伪类选择器（重点）"></a>链接伪类选择器（重点）</h2><p> 伪类选择器：</p><p> 为了和我们刚才学的类选择器相区别<br>类选择器是一个点 比如 .demo {}<br>而我们的伪类 用 2个点 就是 冒号  比如  :link{}    伪娘 </p><p>作用：</p><p>用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><p>因为伪类选择器很多，比如链接伪类，结构伪类等等。我们这里先给大家讲解链接伪类选择器。</p><ul><li>a:link      /* 未访问的链接 */</li><li>a:visited   /* 已访问的链接 */</li><li>a:hover     /* 鼠标移动到链接上 */</li><li>a:active    /* 选定的链接 */</li></ul><p>  <strong>注意</strong></p><ul><li>写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。否则可能引起错误。  </li><li>记忆法  <ul><li><strong>l</strong>o<strong>v</strong>e   <strong>ha</strong>te     爱上了讨厌    </li><li><strong>lv *<em>包包   非常 *</em>ha</strong>o   </li></ul></li><li>因为叫链接伪类，所以都是 利用交集选择器  a:link    a:hover  </li><li>因为a链接浏览器具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li><li>实际工作开发中，我们很少写全四个状态，一般我们写法如下：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">a</span> &#123;   <span class="hljs-comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line"><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="line"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="line"><span class="hljs-attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;   <span class="hljs-comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="hljs-attribute">color</span>: red; <span class="hljs-comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择元素后代</td><td>是选择所有的子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr><tr><td>子代选择器</td><td>选择 最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>&gt;</strong>   .nav&gt;p</td></tr><tr><td>交集选择器</td><td>选择两个标签交集的部分</td><td>既是 又是</td><td>较少</td><td><strong>没有符号</strong>  p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的选择器</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .header</td></tr><tr><td>链接伪类选择器</td><td>给链接更改状态</td><td></td><td>较多</td><td>重点记住 a{} 和 a:hover  实际开发的写法</td></tr></tbody></table><h1 id="标签显示模式（display）重点"><a href="#标签显示模式（display）重点" class="headerlink" title="标签显示模式（display）重点"></a>标签显示模式（display）重点</h1><p>目标：</p><ul><li>理解<ul><li>标签的三种显示模式</li><li>三种显示模式的特点以及区别</li><li>理解三种显示模式的相互转化</li></ul></li><li>应用<ul><li>实现三种显示模式的相互转化</li></ul></li></ul><h2 id="什么是标签显示模式"><a href="#什么是标签显示模式" class="headerlink" title="什么是标签显示模式"></a>什么是标签显示模式</h2><ul><li><p>什么是标签的显示模式？</p><p>标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个</p></li><li><p>作用： </p><p>我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p></li><li><p>标签的类型(分类)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。</p></li></ul><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><ul><li>例：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/12%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0.png" alt></p><ul><li>块级元素的特点</li></ul><p>（1）比较霸道，自己独占一行</p><p>（2）高度，宽度、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器（父级宽度）的100%</p><p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p><ul><li>注意：<ul><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，特别是 p 不能放div </li><li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li></ul></li></ul><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><ul><li>例：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/13%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0.png" alt></p><ul><li>行内元素的特点：</li></ul><p>（1）相邻行内元素在一行上，一行可以显示多个。</p><p>（2）高、宽直接设置是无效的。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p><p>  <img src="/前端笔记/css-day02/w-1589962975224.jpg" alt>    注意：</p><ul><li>链接里面不能再放链接。</li><li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li></ul><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><ul><li>例：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/14%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0.png" alt></p><ul><li><p>行内块元素的特点：</p><p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p></li></ul><h2 id="三种模式总结区别"><a href="#三种模式总结区别" class="headerlink" title="三种模式总结区别"></a>三种模式总结区别</h2><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><ul><li>块转行内：display:inline;</li><li>行内转块：display:block;</li><li>块、行内元素转换为行内块： display: inline-block;</li></ul><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h1 id="行高那些事（line-height）"><a href="#行高那些事（line-height）" class="headerlink" title="行高那些事（line-height）"></a>行高那些事（line-height）</h1><p>目标</p><ul><li>理解<ul><li>能说出 行高  和 高度  三种关系</li><li>能简单理解为什么行高等于高度单行文字会垂直居中</li></ul></li><li>应用<ul><li>使用行高实现单行文字垂直居中</li><li>能会测量行高</li></ul></li></ul><h2 id="行高测量"><a href="#行高测量" class="headerlink" title="行高测量"></a>行高测量</h2><p>行高的测量方法：</p><p> <img src="/前端笔记/css-day02/line1.png" alt></p><p><img src="/前端笔记/css-day02/line2.png" alt></p><h2 id="单行文本垂直居中"><a href="#单行文本垂直居中" class="headerlink" title="单行文本垂直居中"></a>单行文本垂直居中</h2><p> 行高我们利用最多的一个地方是： 可以让单行文本在盒子中垂直居中对齐。</p><blockquote><p><strong>文字的行高等于盒子的高度。</strong></p></blockquote><p>这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。</p><p>行高   =  上距离 +  内容高度  + 下距离 </p><p> <img src="/前端笔记/css-day02/1.png" alt></p><p>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p><p><strong>行高和高度的三种关系</strong></p><ul><li>如果 行高 等 高度  文字会 垂直居中</li><li>如果行高 大于 高度   文字会 偏下 </li><li>如果行高小于高度   文字会  偏上 </li></ul><h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>目标</p><ul><li>理解<ul><li>背景的作用</li><li>css背景图片和插入图片的区别</li></ul></li><li>应用<ul><li>通过css背景属性，给页面元素添加背景样式</li><li>能设置不同的背景图片位置</li></ul></li></ul><h2 id="背景颜色-color"><a href="#背景颜色-color" class="headerlink" title="背景颜色(color)"></a>背景颜色(color)</h2><ul><li><p>语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color:颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure></li></ul><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><ul><li>语法： </li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : none | url (url)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>none</td><td align="center">无背景图（默认的）</td></tr><tr><td>url</td><td align="center">使用绝对或相对地址指定背景图像</td></tr></tbody></table><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : url(images/demo.png);</span><br></pre></td></tr></table></figure><ul><li>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</li></ul><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><ul><li>语法： </li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>repeat</td><td align="center">背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td align="center">背景图像不平铺</td></tr><tr><td>repeat-x</td><td align="center">背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td align="center">背景图像在纵向平铺</td></tr></tbody></table><h2 id="背景位置-position-重点"><a href="#背景位置-position-重点" class="headerlink" title="背景位置(position) 重点"></a>背景位置(position) 重点</h2><ul><li>语法： </li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th align="center">值</th></tr></thead><tbody><tr><td>length</td><td align="center">百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td align="center">top | center | bottom | left | center | right   方位名词</td></tr></tbody></table><ul><li>注意：<ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词，另一个值默认居中对齐。</li><li>如果position 后面是精确坐标， 那么第一个，肯定是 x  第二的一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul></li></ul><p><strong>实际工作用的最多的，就是背景图片居中对齐了。</strong></p><p>练习1：</p><p>背景大图</p><p>练习2：</p><p>小图片在盒子左侧垂直居中</p><h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><ul><li><p>背景附着就是解释背景是滚动的还是固定的</p></li><li><p>语法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>scroll</td><td align="center">背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td align="center">背景图像固定</td></tr></tbody></table><h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><ul><li>background：属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</li><li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li><li>语法：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">transparent</span> <span class="hljs-selector-tag">url</span>(<span class="hljs-selector-tag">image</span><span class="hljs-selector-class">.jpg</span>) <span class="hljs-selector-tag">repeat-y</span>  <span class="hljs-selector-tag">scroll</span> <span class="hljs-selector-tag">center</span> <span class="hljs-selector-tag">top</span> ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>导航栏案例</p><h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><ul><li>语法：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">rgba</span>(0, 0, 0, 0<span class="hljs-selector-class">.3</span>);</span><br></pre></td></tr></table></figure><ul><li>最后一个参数是alpha 透明度  取值范围 0~1之间</li><li>我们习惯把0.3 的 0 省略掉  这样写  background: rgba(0, 0, 0, .3);</li><li>注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</li><li>因为是CSS3 ，所以 低于 ie9 的版本是不支持的。</li></ul><h2 id="背景总结"><a href="#背景总结" class="headerlink" title="背景总结"></a>背景总结</h2><table><thead><tr><th>属性</th><th align="left">作用</th><th align="left">值</th></tr></thead><tbody><tr><td>background-color</td><td align="left">背景颜色</td><td align="left">预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td align="left">背景图片</td><td align="left">url(图片路径)</td></tr><tr><td>background-repeat</td><td align="left">是否平铺</td><td align="left">repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td align="left">背景位置</td><td align="left">length/position    分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td></tr><tr><td>background-attachment</td><td align="left">背景固定还是滚动</td><td align="left">scroll/fixed</td></tr><tr><td>背景简写</td><td align="left">更简单</td><td align="left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td></tr><tr><td>背景透明</td><td align="left">让盒子半透明</td><td align="left">background: rgba(0,0,0,0.3);   后面必须是 4个值</td></tr></tbody></table><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>目标：</p><ul><li>理解<ul><li>能说出css样式冲突采取的原则</li><li>能说出那些常见的样式会有继承</li></ul></li><li>应用<ul><li>能写出CSS优先级的算法</li><li>能会计算常见选择器的叠加值</li></ul></li></ul><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p><img src="/前端笔记/css-day02/20%E5%B1%82%E5%8F%A0%E6%80%A7.png" alt></p><ul><li><p>概念：</p><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p></li><li><p>原则：</p><ul><li>样式冲突，遵循的原则是<strong>就近原则。</strong> 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ul></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS层叠性最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/css-day02/hai.gif" alt></p><h2 id="5-2-CSS继承性"><a href="#5-2-CSS继承性" class="headerlink" title="5.2 CSS继承性"></a>5.2 CSS继承性</h2><p><img src="/前端笔记/css-day02/21%E7%BB%A7%E6%89%BF%E6%80%A7.png" alt></p><ul><li><p>概念：</p><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p><p> 想要设置一个可继承的属性，只需将它应用于父元素即可。</p></li></ul><p>简单的理解就是：  子承父业。</p><ul><li><strong>注意</strong>：<ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li><li>子元素可以继承父元素的样式（<strong>text-，font-，line-这些元素开头的可以继承，以及color属性</strong>）</li></ul></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS继承性口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/css-day02/shu.gif" alt></p><h2 id="CSS优先级（重点）"><a href="#CSS优先级（重点）" class="headerlink" title="CSS优先级（重点）"></a>CSS优先级（重点）</h2><p><img src="/前端笔记/css-day02/22%E4%BC%98%E5%85%88%E7%BA%A7.png" alt></p><ul><li><p>概念：</p><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时，</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题。</li></ul></li></ul><h4 id="权重计算公式"><a href="#权重计算公式" class="headerlink" title="权重计算公式"></a>权重计算公式</h4><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</p><table><thead><tr><th>标签选择器</th><th>计算权重公式</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0,0,0,0</td></tr><tr><td>每个元素（标签选择器）</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式 style=””</td><td>1,0,0,0</td></tr><tr><td>每个!important  重要的</td><td>∞ 无穷大</td></tr></tbody></table><ul><li>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </li><li>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</li><li>div {<pre><code>color: pink!important;  </code></pre>}</li></ul><h4 id="权重叠加"><a href="#权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h4><p>我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。</p><p>就是一个简单的加法计算</p><ul><li><p>div ul  li   ——&gt;      0,0,0,3</p></li><li><p>.nav ul li   ——&gt;      0,0,1,2</p></li><li><p>a:hover      —–—&gt;   0,0,1,1</p></li><li><p>.nav a       ——&gt;      0,0,1,1</p><p><img src="/前端笔记/css-day02/w.jpg" alt> 注意： </p></li></ul><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li></ol><h4 id="继承的权重是0"><a href="#继承的权重是0" class="headerlink" title="继承的权重是0"></a>继承的权重是0</h4><p>这个不难，但是忽略很容易绕晕。其实，我们修改样式，一定要看该标签有没有被选中。</p><p>1） 如果选中了，那么以上面的公式来计权重。谁大听谁的。<br>2） 如果没有选中，那么权重是0，因为继承的权重为0.</p><h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><p><strong>CSS注释规则：</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 &quot;/*&quot; 标记开始注释，在内容的结尾使用 &quot;*/&quot;结束。</span><br></pre></td></tr></table></figure><p>   例如：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line"> <span class="hljs-comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.CSS选择器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/css-day02/day2.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day01/"/>
    <id>http://www.itfool.cn/前端笔记/css-day01/</id>
    <published>2020-05-20T08:02:20.000Z</published>
    <updated>2020-05-20T09:11:23.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.CSS初识</p></blockquote><p><img src="/前端笔记/css-day01/zong1.jpg" alt></p><a id="more"></a><h1 id="CSS层叠样式表"><a href="#CSS层叠样式表" class="headerlink" title="CSS层叠样式表"></a>CSS层叠样式表</h1><p> 目标</p><ul><li>理解<ul><li>css的目的作用</li><li>css的三种引入方式</li></ul></li><li>应用<ul><li>css三种引用方式的书写</li><li>通过样式规则给标签添加简单的样式</li></ul></li></ul><h1 id="HTML的局限性"><a href="#HTML的局限性" class="headerlink" title="HTML的局限性"></a>HTML的局限性</h1><p>说起HTML，这其实是个非常单纯的家伙， 他只关注内容的语义， </p><p>很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点： <strong>丑</strong>。</p><p>这个是一个外国比较早的购物网站</p><p> <img src="/前端笔记/css-day01/640.webp" alt></p><p>有些人就忍受不了了，你就不能把自己打扮得漂亮一点吗？</p><p>HTML说，我试试…</p><p>如果要改变下 高度或者变一个颜色，就需要大量重复操作</p><p> <img src="/前端笔记/css-day01/css.png" alt></p><p><strong>总结：</strong></p><ul><li>HTML满足不了设计者的需求</li><li>操作html属性不方便</li><li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li></ul><h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><ul><li>让我们的网页更加丰富多彩，布局更加灵活自如。   </li><li>CSS的最大贡献就是：  让 HTML 从样式中脱离，  实现了 HTML 专注去做 结构呈现，样式交给css </li></ul><blockquote><p><strong>我们理想中的结果： 结构(html)与样式(css)相分离</strong>  这句话要记住</p></blockquote><p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p><p> <img src="/前端笔记/css-day01/baby.jpeg" alt></p><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><ul><li><p>概念：</p><p>​    CSS(Cascading Style Sheets)  ，通常称为CSS样式表或层叠样式表（级联样式表）</p></li><li><p>作用：</p><ul><li>主要用于<strong>设置</strong> HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及<strong>版面的布局和外观显示样式。</strong></li><li>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</li></ul></li></ul><h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要书写css样式，那css样式书写的位置在哪呢？</span><br></pre></td></tr></table></figure><h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><ul><li><p>概念：</p><p>​    称行内样式、行间样式.</p><p>​    是通过标签的style属性来设置元素的样式</p></li></ul><ul><li>其基本语法格式如下：</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际上任何HTML标签都拥有style属性，用来设置行内式。</p><ul><li>案例：</li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style="color: red; font-size: 12px;"&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>style其实就是标签的属性</li><li>样式属性和值中间是<code>:</code></li><li>多组属性值之间用<code>;</code>隔开。</li><li>只能控制当前的标签和以及嵌套在其中的字标签，造成代码冗余</li></ul></li><li>缺点：<ul><li>没有实现样式和结构相分离</li></ul></li></ul><h2 id="内部样式表（内嵌样式表）"><a href="#内部样式表（内嵌样式表）" class="headerlink" title="内部样式表（内嵌样式表）"></a>内部样式表（内嵌样式表）</h2><ul><li><p>概念：</p><p>​    称内嵌式</p><p>​    是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义</p></li><li><p>其基本语法格式如下：</p></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/CSS"</span>&gt;</span></span><br><span class="line">    选择器（选择的标签） &#123; </span><br><span class="line">      属性1: 属性值1;</span><br><span class="line">      属性2: 属性值2; </span><br><span class="line">      属性3: 属性值3;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line"> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"> <span class="hljs-attribute">color</span>: red;</span><br><span class="line"> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><ul><li>style标签一般位于head标签中，当然理论上他可以放在HTML文档的任何地方。</li><li>type=”text/css”  在html5中可以省略。</li><li>只能控制当前的页面</li></ul></li><li><p>缺点：</p><p>没有彻底分离</p></li></ul><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line">   <span class="hljs-comment">/*选择器&#123;属性:值；&#125;*/</span></span><br><span class="line">   <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">     <span class="hljs-attribute">color</span>:<span class="hljs-number">#06C</span>; </span><br><span class="line">     <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;  </span><br><span class="line">   &#125;  <span class="hljs-comment">/*文字的颜色是 蓝色*/</span></span><br><span class="line">   <span class="hljs-selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">color</span>:<span class="hljs-number">#900</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">color</span>:<span class="hljs-number">#090</span>; </span><br><span class="line">    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-selector-tag">body</span> &#123; </span><br><span class="line">    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(bg2.jpg);</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>展示</strong></p><p><img src="/前端笔记/css-day01/tihui.png" alt></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思考：</span><br><span class="line"> 1. 如何实现结构与样式完全分离？</span><br><span class="line"> 2. 如何实现<span class="hljs-selector-tag">css</span>样式共享？</span><br></pre></td></tr></table></figure><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><ul><li><p>概念：</p><p>​    称链入式</p><p>​    是将所有的样式放在一个或多个以<strong>.CSS</strong>为扩展名的外部样式表文件中，</p><p>​    通过link标签将外部样式表文件链接到HTML文档中</p></li><li><p>其基本语法格式如下：</p></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"css文件路径"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：  <ul><li>link 是个单标签</li><li>link标签需要放在head头部标签中，并且指定link标签的三个属性</li></ul></li></ul><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>rel</td><td align="left">定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</td></tr><tr><td>type</td><td align="left">定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。我们都可以省略</td></tr><tr><td>href</td><td align="left">定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</td></tr></tbody></table><p><img src="/前端笔记/css-day01/10css%E5%A4%96%E9%93%BE%E5%BC%8F.jpg" alt></p><h2 id="三种样式表总结（位置）"><a href="#三种样式表总结（位置）" class="headerlink" title="三种样式表总结（位置）"></a>三种样式表总结（位置）</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h3 id="团队约定-代码风格"><a href="#团队约定-代码风格" class="headerlink" title="团队约定-代码风格"></a>团队约定-代码风格</h3><p>样式书写一般有两种：</p><ul><li>一种是紧凑格式 (Compact)</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">color</span>: deeppink;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>一种是展开格式（推荐）</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="line"><span class="hljs-attribute">color</span>: deeppink;</span><br><span class="line">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="团队约定-代码大小写"><a href="#团队约定-代码大小写" class="headerlink" title="团队约定-代码大小写"></a>团队约定-代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 推荐 */</span></span><br><span class="line"><span class="hljs-selector-tag">h3</span>&#123;</span><br><span class="line"><span class="hljs-attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 不推荐 */</span></span><br><span class="line"><span class="hljs-selector-tag">H3</span>&#123;</span><br><span class="line"><span class="hljs-attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结CSS样式规则"><a href="#总结CSS样式规则" class="headerlink" title="总结CSS样式规则"></a>总结CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，</p><p>具体格式如下：                                          </p><p><img src="/前端笔记/css-day01/gz.png" alt></p><p><strong>总结：</strong></p><ol><li>选择器用于指定CSS样式作用的HTML标签，花括号内是对该对象设置的具体样式。</li><li>属性和属性值以“键值对”的形式出现。</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</li><li>属性和属性值之间用英文“:”连接。</li><li>多个“键值对”之间用英文“;”进行区分。</li></ol><h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="@拓展阅读"></a>@拓展阅读</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNTAzMjcxNg%3D%3D&mid=2651424749&idx=1&sn=f58bca144f50bff00ba7d1675cc8b8e7&scene=4" target="_blank" rel="noopener">CSS的发展史</a></p><blockquote><p>第01阶段.前端基础.CSS基础选择器</p></blockquote><h1 id="CSS选择器（重点）"><a href="#CSS选择器（重点）" class="headerlink" title="CSS选择器（重点）"></a>CSS选择器（重点）</h1><p> 学习目标：</p><ul><li>理解<ul><li>能说出选择器的作用</li><li>id选择器和类选择器的区别</li></ul></li><li>应用<ul><li>能够使用基础选择器给页面元素添加样式</li></ul></li></ul><h2 id="CSS选择器作用（重点）"><a href="#CSS选择器作用（重点）" class="headerlink" title="CSS选择器作用（重点）"></a>CSS选择器作用（重点）</h2><p><img src="/前端笔记/css-day01/ax.png" alt></p><p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p><p>很多， 比如 一只眼睛的一组，剩下的一组  </p><h3 id="选择器的作用"><a href="#选择器的作用" class="headerlink" title="选择器的作用"></a>选择器的作用</h3><p>​    找到特定的HTML页面元素</p><p><strong>pink老师一句话说出他们： ※※※※</strong></p><blockquote><p>*<em>CSS选择器干啥的？   选择标签用的， 把我们想要的标签选择出来 *</em>  必须记住的</p></blockquote><p>css 就是 分两件事， 选对人，  做对事。 </p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">h3</span> &#123; </span><br><span class="line"><span class="hljs-attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是2件事， 把  h3选出来， 然后 把它变成了 红色。 以后我们都这么干。</p><p>选择器分为基础选择器和 复合选择器，我们这里先讲解一下 基础选择器。</p><h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul><li><p>概念：</p><p>标签选择器（元素选择器）是指用<strong>HTML标签名</strong>称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p></li><li><p>语法：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><ul><li><p>作用：</p><p>标签选择器 可以把某一类标签<strong>全部</strong>选择出来  比如所有的div标签  和 所有的 span标签</p></li><li><p>优点：</p><p>是能快速为页面中同类型的标签统一样式</p></li><li><p>缺点：</p><p>不能设计差异化样式。</p></li></ul><p><strong>总结 口诀：</strong></p><p>   标签选择器，<br>   页面同选起。<br>   直接写标签，<br>   全部不放弃。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思考： 如果想要差异化选择不同的标签，怎么办呢？ 就是说 我想单独选一个或者某几个标签呢？</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名.</p><ul><li><p>语法：</p><ul><li>类名选择器</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.类名  &#123;   </span><br><span class="line">    属性1:属性值1; </span><br><span class="line">    属性2:属性值2; </span><br><span class="line">    属性3:属性值3;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>标签</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&apos;类名&apos;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>优点：</p><ul><li>可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 </li></ul></li><li><p>注意</p><ul><li>类选择器使用“.”（英文点号）进行标识，后面紧跟类名(自定义，我们自己命名的)</li><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不要纯数字、中文等命名， 尽量使用英文字母来表示。</li></ul></li></ul><p>命名规范：  见附件（Web前端开发规范手册.doc）</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><ul><li><p><strong>记忆口诀</strong></p><p>差异化选择<br>一个或多个<br>上面点定义<br>类名别写错<br>谁用谁调用<br>class来做。</p><p>嘿嘿，工作类最多。</p></li></ul><p><strong>课堂案例：</strong></p><p> <img src="/前端笔记/css-day01/go.png" alt></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.blue</span> &#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.red</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.orange</span> &#123;</span></span><br><span class="line">color: orange;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css"><span class="hljs-selector-class">.green</span> &#123;</span></span><br><span class="line">color: green;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"blue"</span>&gt;</span>G<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>o<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"orange"</span>&gt;</span>o<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"blue"</span>&gt;</span>g<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"green"</span>&gt;</span>l<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>e<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类选择器特殊用法-多类名"><a href="#类选择器特殊用法-多类名" class="headerlink" title="类选择器特殊用法- 多类名"></a>类选择器特殊用法- 多类名</h3><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><p><img src="/前端笔记/css-day01/lei.png" alt></p><p>注意：</p><ul><li>各个类名中间用空格隔开。</li><li>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pink fontWeight font20"</span>&gt;</span>亚瑟<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"font20"</span>&gt;</span>刘备<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"font14 pink"</span>&gt;</span>安其拉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"font14"</span>&gt;</span>貂蝉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>id选择器使用<code>#</code>进行标识，后面紧跟id名</p><ul><li><p>其基本语法格式如下：</p><ul><li><p>id选择器</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></li><li><p>标签</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;id名&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p></li><li><p>用法基本和类选择器相同。</p></li></ul><h4 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h4><p> <img src="/前端笔记/css-day01/zfb.jpg" alt></p><ul><li>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。<ul><li>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</li><li>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</li></ul></li></ul><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><p><strong>pink老师 总结他们</strong></p><ul><li>类选择器我们在修改样式中，用的最多。</li><li>id选择器一般用于页面唯一性的元素身上，经常和我们后面学习的javascript 搭配使用。</li></ul><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul><li><p>概念</p><p>通配符选择器用<code>*</code>号表示，  *   就是 选择所有的标签      他是所有选择器中作用范围最广的，能匹配页面中所有的元素。</p></li><li><p>其基本语法格式如下：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;                    <span class="hljs-comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;                   <span class="hljs-comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><p>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p></li></ul><h3 id="基础选择器总结"><a href="#基础选择器总结" class="headerlink" title="基础选择器总结"></a>基础选择器总结</h3><table><thead><tr><th>选择器</th><th>作用</th><th>缺点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签，比如p</td><td>不能差异化选择</td><td>较多</td><td>p { color：red;}</td></tr><tr><td>类选择器</td><td>可以选出1个或者多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav { color: red; }</td></tr><tr><td>id选择器</td><td>一次只能选择器1个标签</td><td>只能使用一次</td><td>不推荐使用</td><td>#nav {color: red;}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多，有部分不需要</td><td>不推荐使用</td><td>* {color: red;}</td></tr></tbody></table><p>基础选择器我们一共学了4个，  每个都有自己的价值， 可能再某个地方都能用到。但是如果说，一定要找个最常用的，那么，肯定是类选择器。</p><h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><p>选择器</p><ul><li>尽量少用通用选择器 <code>*</code></li><li>尽量少用 ID 选择器</li><li>不使用无具体语义定义的标签选择器 div span </li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">li &#123;&#125;</span><br><span class="line">p&#123;&#125;</span><br><span class="line"></span><br><span class="line">/* 不推荐 */</span><br><span class="line">*&#123;&#125;</span><br><span class="line">#jdc &#123;&#125;</span><br><span class="line">div&#123;&#125;   因为div 没有语义，我们尽量少用</span><br></pre></td></tr></table></figure><blockquote><p>第01阶段.前端基础.CSS字体样式</p></blockquote><h1 id="CSS字体样式属性调试工具"><a href="#CSS字体样式属性调试工具" class="headerlink" title="CSS字体样式属性调试工具"></a>CSS字体样式属性调试工具</h1><p> 目标</p><ul><li>应用<ul><li>使用css字体样式完成对字体的设置</li><li>使用css外观属性给页面元素添加样式</li><li>使用常用的emment语法</li><li>能够使用开发人员工具代码调试</li></ul></li></ul><h1 id="1-font字体"><a href="#1-font字体" class="headerlink" title="1.font字体"></a>1.font字体</h1><h2 id="font-size-大小"><a href="#font-size-大小" class="headerlink" title="font-size:大小"></a>font-size:大小</h2><ul><li><p>作用：</p><p>font-size属性用于设置字号</p></li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>单位：</p><ul><li>可以使用相对长度单位，也可以使用绝对长度单位。</li><li>相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。</li></ul></li></ul><p><img src="/前端笔记/css-day01/dd.png" alt></p><p><strong>注意：</strong></p><ul><li>我们文字大小以后，基本就用px了，其他单位很少使用</li><li>谷歌浏览器默认的文字大小为16px</li><li>但是不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小</li></ul><h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><ul><li><p>作用：</p><p>font-family属性用于设置哪一种字体。</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123; font-family:&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li>网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑</li><li>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体， 如果都没有，则以我们电脑默认的字体为准。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/前端笔记/css-day01/good.png" alt>常用技巧：</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">2. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">3. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">4. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure><h3 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h3><p><img src="/前端笔记/css-day01/shs.png" alt></p><ul><li><p>为什么使用 Unicode字体</p><ul><li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li><li>xp 系统不支持 类似微软雅黑的中文。</li></ul></li><li><p>解决：</p><ul><li><p>方案一： 你可以使用英文来替代。 比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。</p></li><li><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure></li></ul></li></ul><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><ul><li>在html中如何将字体加粗我们可以用标签来实现<ul><li>使用 b  和 strong 标签是文本加粗。</li></ul></li><li>可以使用CSS 来实现，但是CSS 是没有语义的。</li></ul><table><thead><tr><th>属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td>normal</td><td align="left">默认值（不加粗的）</td></tr><tr><td>bold</td><td align="left">定义粗体（加粗的）</td></tr><tr><td>100~900</td><td align="left">400 等同于 normal，而 700 等同于 bold  我们重点记住这句话</td></tr></tbody></table><p>提倡：</p><p>  我们平时更喜欢用数字来表示加粗和不加粗。</p><h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><ul><li>在html中如何将字体倾斜我们可以用标签来实现<ul><li>字体倾斜除了用 i  和 em 标签，</li></ul></li><li>可以使用CSS 来实现，但是CSS 是没有语义的</li></ul><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>normal</td><td align="left">默认值，浏览器会显示标准的字体样式  font-style: normal;</td></tr><tr><td>italic</td><td align="left">浏览器会显示斜体的字体样式。</td></tr></tbody></table><p><img src="/前端笔记/css-day01/good-1589961647864.png" alt>小技巧： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure><h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置</p><ul><li>基本语法格式如下：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="hljs-attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<strong>空格</strong>隔开。</li><li>其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</li></ul></li></ul><h2 id="font总结"><a href="#font总结" class="headerlink" title="font总结"></a>font总结</h2><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">font-size</td><td align="left">字号</td><td align="left">我们通常用的单位是px 像素，一定要跟上单位</td></tr><tr><td align="left">font-family</td><td align="left">字体</td><td align="left">实际工作中按照团队约定来写字体</td></tr><tr><td align="left">font-weight</td><td align="left">字体粗细</td><td align="left">记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td></tr><tr><td align="left">font-style</td><td align="left">字体样式</td><td align="left">记住倾斜是 italic     不倾斜 是 normal  工作中我们最常用 normal</td></tr><tr><td align="left">font</td><td align="left">字体连写</td><td align="left">1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td></tr></tbody></table><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><ul><li><p>作用：</p><p>color属性用于定义文本的颜色，</p></li><li><p>其取值方式有如下3种：</p></li></ul><table><thead><tr><th align="left">表示表示</th><th align="left">属性值</th></tr></thead><tbody><tr><td align="left">预定义的颜色值</td><td align="left">red，green，blue，还有我们的御用色 pink</td></tr><tr><td align="left">十六进制</td><td align="left">#FF0000，#FF6600，#29D794</td></tr><tr><td align="left">RGB代码</td><td align="left">rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><ul><li><p>注意</p><p>我们实际工作中， 用 16进制的写法是最多的，而且我们更喜欢简写方式比如  #f00 代表红色</p></li></ul><h2 id="text-align-文本水平对齐方式"><a href="#text-align-文本水平对齐方式" class="headerlink" title="text-align:文本水平对齐方式"></a>text-align:文本水平对齐方式</h2><ul><li><p>作用：</p><p>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性</p></li><li><p>其可用属性值如下：</p></li></ul><table><thead><tr><th>属性</th><th align="center">解释</th></tr></thead><tbody><tr><td>left</td><td align="center">左对齐（默认值）</td></tr><tr><td>right</td><td align="center">右对齐</td></tr><tr><td>center</td><td align="center">居中对齐</td></tr></tbody></table><ul><li><p>注意：</p><p>是让盒子里面的内容水平居中， 而不是让盒子居中对齐</p></li></ul><h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><ul><li><p>作用：</p><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p></li><li><p>单位：</p><ul><li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li></ul></li><li><p>技巧：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，行距比字号大7.8像素左右就可以了。</span><br><span class="line">line-height: 24px;</span><br></pre></td></tr></table></figure><h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><ul><li><p>作用：</p><p>text-indent属性用于设置首行文本的缩进，</p></li><li><p>属性值</p><ul><li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值,</li><li>建议使用em作为设置单位。</li></ul></li></ul><p><strong>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</strong></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">      <span class="hljs-comment">/*行间距*/</span></span><br><span class="line">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="line">      <span class="hljs-comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class="line">      <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="text-decoration-文本的装饰"><a href="#text-decoration-文本的装饰" class="headerlink" title="text-decoration 文本的装饰"></a>text-decoration 文本的装饰</h2><p>text-decoration   通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。 取消下划线（最常用）</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td></tr><tr><td>overline</td><td>定义文本上的一条线。（不用）</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。（不常用）</td></tr></tbody></table><h2 id="CSS外观属性总结"><a href="#CSS外观属性总结" class="headerlink" title="CSS外观属性总结"></a>CSS外观属性总结</h2><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">color</td><td align="left">颜色</td><td align="left">我们通常用  十六进制   比如 而且是简写形式 #fff</td></tr><tr><td align="left">line-height</td><td align="left">行高</td><td align="left">控制行与行之间的距离</td></tr><tr><td align="left">text-align</td><td align="left">水平对齐</td><td align="left">可以设定文字水平的对齐方式</td></tr><tr><td align="left">text-indent</td><td align="left">首行缩进</td><td align="left">通常我们用于段落首行缩进2个字的距离   text-indent: 2em;</td></tr><tr><td align="left">text-decoration</td><td align="left">文本修饰</td><td align="left">记住 添加 下划线  underline  取消下划线  none</td></tr></tbody></table><h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p><strong>此工具是我们的必备工具，以后代码出了问题</strong></p><p><strong>我们首先第一反应就是：</strong></p><ul><li>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</li><li>菜单：   右击网页空白出—检查</li></ul><p><img src="/前端笔记/css-day01/11%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%B7%A5%E5%85%B7.jpg" alt></p><ul><li>通过开发人员工具小指针工具，查找页面元素</li><li>左侧是html页面结构，右侧是css样式</li></ul><p><img src="/前端笔记/css-day01/good-1589961690478.png" alt>小技巧：</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li><li>ctrl + 0  复原浏览器大小</li></ol><h1 id="sublime快捷操作emmet语法"><a href="#sublime快捷操作emmet语法" class="headerlink" title="sublime快捷操作emmet语法"></a>sublime快捷操作emmet语法</h1><p>Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。</p><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p></li><li><p>如果生成的div 类名是有顺序的， 可以用 自增符号  $     </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.demo$*3        </span><br><span class="line">&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h1><p><img src="/前端笔记/css-day01/css1.png" alt></p><h1 id="拓展阅读-1"><a href="#拓展阅读-1" class="headerlink" title="拓展阅读@"></a>拓展阅读@</h1><p><a href="https://www.w3cplus.com/tools/emmet-cheat-sheet.html" target="_blank" rel="noopener">emment语法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.CSS初识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/css-day01/zong1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
</feed>
