<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>It Fool - 前端小白</title>
  
  <subtitle>前端blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itfool.cn/"/>
  <updated>2020-05-22T02:29:05.242Z</updated>
  <id>http://www.itfool.cn/</id>
  
  <author>
    <name>董冬懂冻</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS-Day07</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day07/"/>
    <id>http://www.itfool.cn/前端笔记/css-day07/</id>
    <published>2020-05-22T02:19:33.000Z</published>
    <updated>2020-05-22T02:29:05.242Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.CSS高级技巧</p></blockquote><h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><p><strong>目标</strong></p><ul><li>理解<ul><li>能说出元素显示隐藏最常见的写法</li><li>能说出精灵图产生的目的</li><li>能说出去除图片底侧空白缝隙的方法</li></ul></li><li>应用<ul><li>能写出最常见的鼠标样式</li><li>能使用精灵图技术</li><li>能用滑动门做导航栏案例<a id="more"></a><h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2></li></ul></li></ul><ul><li><p>目的</p><p>让一个元素在页面中消失或者显示出来</p></li><li><p>场景</p><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p></li></ul><h3 id="display-显示（重点）"><a href="#display-显示（重点）" class="headerlink" title="display 显示（重点）"></a>display 显示（重点）</h3><ul><li><p>display 设置或检索对象是否及如何显示。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br></pre></td></tr></table></figure></li><li><p>特点： 隐藏之后，不再保留位置。</p></li></ul><p><img src="/前端笔记/css-day07/29none.png" alt></p><p>实际开发场景：</p><blockquote><p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p></blockquote><h3 id="visibility-可见性-了解"><a href="#visibility-可见性-了解" class="headerlink" title="visibility 可见性 (了解)"></a>visibility 可见性 (了解)</h3><ul><li><p>设置或检索是否显示对象。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visibility：visible ; 　对象可视</span><br><span class="line"></span><br><span class="line">visibility：hidden; 　  对象隐藏</span><br></pre></td></tr></table></figure></li><li><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p></li></ul><p><img src="/前端笔记/css-day07/30visibility.png" alt></p><h3 id="overflow-溢出-重点"><a href="#overflow-溢出-重点" class="headerlink" title="overflow 溢出(重点)"></a>overflow 溢出(重点)</h3><ul><li>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p> <img src="/前端笔记/css-day07/33overflow.png" alt></p><p>实际开发场景：</p><ol><li>清除浮动</li><li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li></ol><h3 id="显示与隐藏总结"><a href="#显示与隐藏总结" class="headerlink" title="显示与隐藏总结"></a>显示与隐藏总结</h3><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display</strong></td><td>隐藏对象，不保留位置</td><td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td></tr><tr><td><strong>visibility</strong></td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><ul><li>所谓的界面样式， 就是更改一些用户操作样式，以便提高更好的用户体验。<ul><li>更改用户的鼠标样式 (滚动条因为兼容性非常差，我们不研究) </li><li>表单轮廓等。</li><li>防止表单域拖拽</li></ul></li></ul><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>default</strong></td><td>小白  默认</td></tr><tr><td><strong>pointer</strong></td><td>小手</td></tr><tr><td><strong>move</strong></td><td>移动</td></tr><tr><td><strong>text</strong></td><td>文本</td></tr><tr><td><strong>not-allowed</strong></td><td>禁止</td></tr></tbody></table><p> 鼠标放我身上查看效果哦：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:default"</span>&gt;</span>我是小白<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:pointer"</span>&gt;</span>我是小手<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:move"</span>&gt;</span>我是移动<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:text"</span>&gt;</span>我是文本<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"cursor:not-allowed"</span>&gt;</span>我是文本<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线 outline"></a>轮廓线 outline</h3><p><img src="/前端笔记/css-day07/outline.png" alt></p><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 </p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width</span><br></pre></td></tr></table></figure><p> 但是我们都不关心可以设置多少，我们平时都是去掉的。 li  </p><p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"outline: 0;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p><img src="/前端笔记/css-day07/34textarea.png" alt></p><p>实际开发中，我们文本域右下角是不可以拖拽： </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"resize: none;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用户界面样式总结"><a href="#用户界面样式总结" class="headerlink" title="用户界面样式总结"></a>用户界面样式总结</h3><table><thead><tr><th>属性</th><th>用途</th><th>用途</th></tr></thead><tbody><tr><td><strong>鼠标样式</strong></td><td>更改鼠标样式cursor</td><td>样式很多，重点记住 pointer</td></tr><tr><td><strong>轮廓线</strong></td><td>表单默认outline</td><td>outline 轮廓线，我们一般直接去掉，border是边框，我们会经常用</td></tr><tr><td>防止拖拽</td><td>主要针对文本域resize</td><td>防止用户随意拖拽文本域，造成页面布局混乱，我们resize:none</td></tr></tbody></table><h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><ul><li>有宽度的块级元素居中对齐，是margin: 0 auto;</li><li>让文字居中对齐，是 text-align: center;</li></ul><p>但是我们从来没有讲过有垂直居中的属性。</p><p>vertical-align 垂直对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p><p><img src="/前端笔记/css-day07/xian.jpg" alt></p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : baseline |top |middle |bottom</span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。</p><ul><li><p>注意：</p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p><p>特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p></li></ul><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><p> <img src="/前端笔记/css-day07/%E5%9F%BA%E7%BA%BF%E5%AF%B9%E9%BD%90.jpg" alt></p><p><img src="/前端笔记/css-day07/1498467742995.png" alt></p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p><img src="/前端笔记/css-day07/35vertical.png" alt></p><ul><li><p>原因：</p><p>图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。</p><p>就是图片底侧会有一个空白缝隙。</p></li><li><p>解决的方法就是：  </p><ul><li>给img vertical-align:middle | top| bottom等等。  让图片不要和基线对齐。<img src="/前端笔记/css-day07/1633.png" alt></li></ul></li></ul><ul><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src="/前端笔记/css-day07/sina1.png" alt></li></ul><h2 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h2><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><ul><li>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">white-space:normal ；默认处理方式</span><br><span class="line"></span><br><span class="line">white-space:nowrap ；　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure><h3 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h3><ul><li>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-overflow : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><p><img src="/前端笔记/css-day07/dot.png" alt></p><h3 id="总结三步曲"><a href="#总结三步曲" class="headerlink" title="总结三步曲"></a>总结三步曲</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">    <span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">nowrap</span>;</span><br><span class="line"><span class="hljs-comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">    <span class="hljs-selector-tag">overflow</span>: <span class="hljs-selector-tag">hidden</span>;</span><br><span class="line"><span class="hljs-comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">    <span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">ellipsis</span>;</span><br></pre></td></tr></table></figure><h2 id="CSS精灵技术（sprite-重点"><a href="#CSS精灵技术（sprite-重点" class="headerlink" title="CSS精灵技术（sprite) 重点"></a>CSS精灵技术（sprite) 重点</h2><h3 id="为什么需要精灵技术"><a href="#为什么需要精灵技术" class="headerlink" title="为什么需要精灵技术"></a>为什么需要精灵技术</h3><p><img src="/前端笔记/css-day07/sss.png" alt></p><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</p><p><strong>pink老师告诉你我们为什么需要精灵技术：</strong></p><blockquote><p> <strong>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。</strong></p></blockquote><p>出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="精灵技术讲解"><a href="#精灵技术讲解" class="headerlink" title="精灵技术讲解"></a>精灵技术讲解</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。</p><p><img src="/前端笔记/css-day07/jds.png" alt></p><p>这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p><p>我们需要使用CSS的</p><ul><li>background-image、</li><li>background-repeat</li><li>background-position属性进行背景定位，</li><li>其中最关键的是使用background-position 属性精确地定位。</li></ul><h3 id="精灵技术使用的核心总结"><a href="#精灵技术使用的核心总结" class="headerlink" title="精灵技术使用的核心总结"></a>精灵技术使用的核心总结</h3><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p><ol><li>精确测量，每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时， 背景定位基本都是 负值。</li></ol><h3 id="制作精灵图-了解"><a href="#制作精灵图-了解" class="headerlink" title="制作精灵图(了解)"></a>制作精灵图(了解)</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间留有适当的空隙</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure><p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src="/前端笔记/css-day07/h.gif" alt></p><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="/前端笔记/css-day07/wxx.jpg" alt></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><p><a href="http://weixin.qq.com/" target="_blank" rel="noopener">http://weixin.qq.com/</a></p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>导航栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css样式</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">      <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="line">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="line">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(images/wx.jpg) repeat-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">padding-top</span>:<span class="hljs-number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">33px</span>;</span><br><span class="line">      <span class="hljs-attribute">float</span>: left;</span><br><span class="line">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">33px</span>;</span><br><span class="line">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>  <span class="hljs-number">10px</span>;</span><br><span class="line">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(./images/to.png) no-repeat left ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">      <span class="hljs-attribute">height</span>: <span class="hljs-number">33px</span>;</span><br><span class="line">      <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">      <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="line">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(./images/to.png) no-repeat right ;</span><br><span class="line">      <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>,</span><br><span class="line">     <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="line">      <span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(./images/ao.png);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展@"></a>拓展@</h2><h3 id="margin负值之美"><a href="#margin负值之美" class="headerlink" title="margin负值之美"></a>margin负值之美</h3><h4 id="负边距-定位：水平垂直居中"><a href="#负边距-定位：水平垂直居中" class="headerlink" title="负边距+定位：水平垂直居中"></a>负边距+定位：水平垂直居中</h4><p>咱们前面讲过， 一个绝对定位的盒子， 利用  父级盒子的 50%，  然后 往左(上) 走 自己宽度的一半 ，可以实现盒子水平垂直居中。</p><h4 id="压住盒子相邻边框"><a href="#压住盒子相邻边框" class="headerlink" title="压住盒子相邻边框"></a>压住盒子相邻边框</h4><p><img src="/前端笔记/css-day07/margin.png" alt></p><h3 id="CSS三角形之美"><a href="#CSS三角形之美" class="headerlink" title="CSS三角形之美"></a>CSS三角形之美</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>; </span><br><span class="line"></span><br><span class="line">   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="line">   <span class="hljs-attribute">line-height</span>:<span class="hljs-number">0</span>；</span><br><span class="line">   font-size: <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-right</span>: <span class="hljs-number">10px</span> solid green;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> solid blue;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-left</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#000</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一张图， 你就知道 css 三角是怎么来的了, 做法如下：</p><p> <img src="/前端笔记/css-day07/arr.png" alt></p><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.CSS高级技巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;CSS高级技巧&quot;&gt;&lt;a href=&quot;#CSS高级技巧&quot; class=&quot;headerlink&quot; title=&quot;CSS高级技巧&quot;&gt;&lt;/a&gt;CSS高级技巧&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解&lt;ul&gt;
&lt;li&gt;能说出元素显示隐藏最常见的写法&lt;/li&gt;
&lt;li&gt;能说出精灵图产生的目的&lt;/li&gt;
&lt;li&gt;能说出去除图片底侧空白缝隙的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用&lt;ul&gt;
&lt;li&gt;能写出最常见的鼠标样式&lt;/li&gt;
&lt;li&gt;能使用精灵图技术&lt;/li&gt;
&lt;li&gt;能用滑动门做导航栏案例&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day06/"/>
    <id>http://www.itfool.cn/前端笔记/css-day06/</id>
    <published>2020-05-22T02:10:22.000Z</published>
    <updated>2020-05-22T02:21:38.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.定位(position)</p></blockquote><h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>理解</strong><ul><li>能说出为什么要用定位</li><li>能说出定位的4种分类</li><li>能说出四种定位的各自特点</li><li>能说出我们为什么常用子绝父相布局</li></ul></li><li><strong>应用</strong><ul><li>能写出淘宝轮播图布局<a id="more"></a><h2 id="CSS-布局的三种机制"><a href="#CSS-布局的三种机制" class="headerlink" title="CSS 布局的三种机制"></a>CSS 布局的三种机制</h2></li></ul></li></ul><blockquote><p>网页布局的核心 —— 就是<strong>用 CSS 来摆放盒子位置</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>、<strong>浮动</strong>和<strong>定位</strong>，其中：</p><ol><li><p><strong>普通流</strong>（<strong>标准流</strong>）</p></li><li><p><strong>浮动</strong></p><ul><li>让盒子从普通流中<strong>浮</strong>起来 —— <strong>让多个盒子(div)水平排列成一行</strong>。</li></ul></li><li><p><strong>定位</strong></p><ul><li>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子的上面  —— CSS 离不开定位，特别是后面的 js 特效。</li></ul></li></ol><h2 id="为什么使用定位"><a href="#为什么使用定位" class="headerlink" title="为什么使用定位"></a>为什么使用定位</h2><blockquote><p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p></blockquote><p><strong>1. 小黄色块</strong>在图片上移动，<strong>吸引用户的眼球</strong>。</p><p><img src="/前端笔记/css-day06/01_%E5%AE%9A%E4%BD%8D%E7%A4%BA%E4%BE%8B1.gif" alt></p><p><img src="/前端笔记/css-day06/03_%E5%AE%9A%E4%BD%8D%E7%A4%BA%E4%BE%8B3.png" alt></p><p><strong>2. 当我们滚动窗口的时候，盒子是固定屏幕某个位置的</strong></p><p><img src="/前端笔记/css-day06/ding.png" alt></p><blockquote><p><strong>结论</strong>：要实现以上效果，<strong>标准流</strong>或<strong>浮动</strong>都无法快速实现</p></blockquote><p>pink老师一句话说出定位：</p><blockquote><p>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子(包括标准流和浮动)的上面 </p></blockquote><p>所以，我们脑海应该有三种布局机制的上下顺序</p><p>标准流在最底层 (海底)  ——-    浮动 的盒子 在 中间层  (海面)  ——-   定位的盒子 在 最上层  （天空）</p><h2 id="定位详解"><a href="#定位详解" class="headerlink" title="定位详解"></a>定位详解</h2><p>定位也是用来布局的，它有两部分组成：</p><blockquote><p><code>定位 = 定位模式 + 边偏移</code></p></blockquote><h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><p>简单说， 我们定位的盒子，是通过边偏移来移动位置的。</p><p>在 CSS 中，通过 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性定义元素的<strong>边偏移</strong>：（方位名词）</p><table><thead><tr><th>边偏移属性</th><th align="left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td align="left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td align="left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td align="left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td align="left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p><h3 id="定位模式-position"><a href="#定位模式-position" class="headerlink" title="定位模式 (position)"></a>定位模式 (position)</h3><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="hljs-attribute">position</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table><p> <img src="/前端笔记/css-day06/26%E5%AE%9A%E4%BD%8D%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt></p><h4 id="静态定位-static-了解"><a href="#静态定位-static-了解" class="headerlink" title="静态定位(static) - 了解"></a>静态定位(static) - 了解</h4><ul><li><strong>静态定位</strong>是元素的默认定位方式，无定位的意思。它相当于 border 里面的none， 不要定位的时候用。</li><li>静态定位 按照标准流特性摆放位置，它没有边偏移。</li><li>静态定位在布局时我们几乎不用的 </li></ul><h4 id="相对定位-relative-重要"><a href="#相对定位-relative-重要" class="headerlink" title="相对定位(relative) - 重要"></a>相对定位(relative) - 重要</h4><ul><li><strong>相对定位</strong>是元素<strong>相对</strong>于它  原来在标准流中的位置 来说的。（自恋型）</li></ul><p><strong>效果图</strong>：</p><p><img src="/前端笔记/css-day06/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt></p><p>相对定位的特点：（务必记住）</p><ul><li>相对于 自己原来在标准流中位置来移动的</li><li>原来<strong>在标准流的区域继续占有</strong>，后面的盒子仍然以标准流的方式对待它。</li></ul><h4 id="绝对定位-absolute-重要"><a href="#绝对定位-absolute-重要" class="headerlink" title="绝对定位(absolute) - 重要"></a>绝对定位(absolute) - 重要</h4><p><strong>绝对定位</strong>是元素以带有定位的父级元素来移动位置 （拼爹型）</p><ol><li><p><strong>完全脱标</strong> —— 完全不占位置；  </p></li><li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p><p><img src="/前端笔记/css-day06/05_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D_%E7%88%B6%E7%BA%A7%E6%97%A0%E5%AE%9A%E4%BD%8D.png" alt></p></li><li><p><strong>父元素要有定位</strong></p><ul><li>将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li></ul></li></ol><p><img src="/前端笔记/css-day06/06_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D_%E7%88%B6%E7%BA%A7%E6%9C%89%E5%AE%9A%E4%BD%8D.png" alt></p><p>绝对定位的特点：（务必记住）</p><ul><li>绝对是以带有定位的父级元素来移动位置 （拼爹型） 如果父级都没有定位，则以浏览器文档为准移动位置</li><li>不保留原来的位置，完全是脱标的。</li></ul><p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p><h5 id="定位口诀-——-子绝父相"><a href="#定位口诀-——-子绝父相" class="headerlink" title="定位口诀 —— 子绝父相"></a>定位口诀 —— 子绝父相</h5><p>刚才咱们说过，绝对定位，要和带有定位的父级搭配使用，那么父级要用什么定位呢？</p><p><strong>子绝父相</strong> —— <strong>子级</strong>是<strong>绝对</strong>定位，<strong>父级</strong>要用<strong>相对</strong>定位。</p><blockquote><p><strong>子绝父相</strong>是使用绝对定位的口诀，要牢牢记住！</p></blockquote><p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p><p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p><p><img src="/前端笔记/css-day06/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png" alt></p><p><img src="/前端笔记/css-day06/27%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8.png" alt></p><p><strong>分析</strong>：</p><ol><li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul><li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li></ul></li></ol><p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p><h4 id="固定定位-fixed-重要"><a href="#固定定位-fixed-重要" class="headerlink" title="固定定位(fixed) - 重要"></a>固定定位(fixed) - 重要</h4><p><strong>固定定位</strong>是<strong>绝对定位</strong>的一种特殊形式： （认死理型）   如果说绝对定位是一个矩形 那么 固定定位就类似于正方形</p><ol><li><strong>完全脱标</strong> —— 完全不占位置；</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul><li>跟父元素没有任何关系；单独使用的</li><li>不随滚动条滚动。</li></ul></li></ol><blockquote><p>案例演练：固定定位案例。</p></blockquote><p><img src="/前端笔记/css-day06/08_%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt></p><p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p><h2 id="定位-position-的案例"><a href="#定位-position-的案例" class="headerlink" title="定位(position)的案例"></a>定位(position)的案例</h2><h3 id="哈根达斯"><a href="#哈根达斯" class="headerlink" title="哈根达斯"></a>哈根达斯</h3><p><strong>案例截图</strong>：</p><p><img src="/前端笔记/css-day06/09_%E5%93%88%E6%A0%B9%E8%BE%BE%E6%96%AF%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><h4 id="哈根达斯分析"><a href="#哈根达斯分析" class="headerlink" title="哈根达斯分析"></a>哈根达斯分析</h4><ol><li>一个大的 <code>div</code> 中包含 <code>3</code> 张图片；</li><li>大的 <code>div</code> 水平居中；</li><li><code>2</code> 张小图片<strong>重叠</strong>在<strong>广告</strong>图片上方 —— 脱标，不占位置，需要使用<strong>绝对定位</strong>；</li><li><code>2</code> 张小图片分别显示在<strong>左上角</strong>和<strong>右下角</strong> —— 需要<strong>使用边偏移确定准确位置</strong>。</li></ol><p><strong>案例小结</strong>：</p><ol><li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>，<strong>父元素</strong>使用<strong>相对定位</strong>；</li><li><strong>与浮动的对比</strong>：<ul><li><strong>绝对定位</strong>：脱标，<strong>利用边偏移指定准确位置</strong>；</li><li><strong>浮动</strong>：脱标，不能指定准确位置，<strong>让多个块级元素在一行显示</strong>。</li></ul></li></ol><blockquote><p>课堂练习：模拟老师的随堂案例完成<strong>哈根达斯</strong>案例（5 分钟）。</p></blockquote><h3 id="仿新浪头部和广告"><a href="#仿新浪头部和广告" class="headerlink" title="仿新浪头部和广告"></a>仿新浪头部和广告</h3><p><img src="/前端笔记/css-day06/xl.png" alt></p><h4 id="新浪案例分析"><a href="#新浪案例分析" class="headerlink" title="新浪案例分析"></a>新浪案例分析</h4><ol><li>顶部图片<strong>固定</strong>在浏览器可视窗口顶部，不会随窗口一起滚动；</li><li>左右两侧的广告图片<strong>固定</strong>在浏览器可视窗口的左右两侧，不会随窗口一起滚动；</li><li>注意：<strong>底部的内容图片</strong>初始<strong>显示在顶部图片的下方</strong>，如何解决？</li></ol><h4 id="步骤-1-——-顶部图片和底部内容"><a href="#步骤-1-——-顶部图片和底部内容" class="headerlink" title="步骤 1 —— 顶部图片和底部内容"></a>步骤 1 —— 顶部图片和底部内容</h4><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.top</span> &#123;</span><br><span class="line">    <span class="hljs-comment">/* 注意：使用固定定位时，如果盒子中没有内容，需要指定宽度 */</span></span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="line">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(images/top.png) no-repeat top center;</span><br><span class="line">    <span class="hljs-attribute">position</span>: fixed;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1002px</span>;</span><br><span class="line">    <span class="hljs-comment">/* 顶部的 44px 的 margin 可以让 box 显示在顶部图片下方 */</span></span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">44px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>在使用固定定位时，如果盒子中没有内容，需要指定宽度</li><li>设置底部内容图片的<strong>顶部 <code>margin</code></strong>，可以让底部盒子初始显示在顶部图片的下方。</li></ol><h4 id="步骤-2-——-左右两侧广告"><a href="#步骤-2-——-左右两侧广告" class="headerlink" title="步骤 2 —— 左右两侧广告"></a>步骤 2 —— 左右两侧广告</h4><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.ad-left</span>,</span><br><span class="line"><span class="hljs-selector-class">.ad-right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: fixed;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.ad-left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.ad-right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不要同时使用 <code>left</code> 和 <code>right</code> 和边偏移属性。</p><p><strong>案例小结</strong>：</p><ol><li><strong>固定定位</strong>的应用场景：<strong>固定在浏览器可视窗口某个位置的布局</strong>；</li><li>在使用固定和绝对定位时，如果盒子中没有内容，需要指定宽度（稍后就讲）。</li></ol><blockquote><p>课堂练习：模拟老师的随堂案例完成<strong>仿新浪头部和广告</strong>案例（5 分钟）。</p></blockquote><h2 id="定位-position-的扩展"><a href="#定位-position-的扩展" class="headerlink" title="定位(position)的扩展"></a>定位(position)的扩展</h2><h3 id="绝对定位的盒子居中"><a href="#绝对定位的盒子居中" class="headerlink" title="绝对定位的盒子居中"></a>绝对定位的盒子居中</h3><blockquote><p><strong>注意</strong>：<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p></blockquote><p>在使用<strong>绝对定位</strong>时要想实现水平居中，可以按照下图的方法：</p><p><img src="/前端笔记/css-day06/10_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png" alt></p><ol><li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li><li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li></ol><blockquote><p>案例演示：相对定位案例。</p></blockquote><h4 id="盒子居中定位示意图"><a href="#盒子居中定位示意图" class="headerlink" title="盒子居中定位示意图"></a>盒子居中定位示意图</h4><p><img src="/前端笔记/css-day06/11_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><blockquote><p>课堂练习：实现<strong>盒子左中、右中、中上、中下、中中定位</strong>（5 分钟）。</p></blockquote><h3 id="堆叠顺序（z-index）"><a href="#堆叠顺序（z-index）" class="headerlink" title="堆叠顺序（z-index）"></a>堆叠顺序（z-index）</h3><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。</p><p>加了定位的盒子，默认<strong>后来者居上</strong>， 后面的盒子会压住前面的盒子。</p><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</p><p><img src="/前端笔记/css-day06/12_zindex%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p><code>z-index</code> 的特性如下：</p><ol><li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；</li><li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li><li><strong>数字后面不能加单位</strong>。</li></ol><p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p><blockquote><p>案例演示：堆叠顺序。</p></blockquote><h3 id="定位改变display属性"><a href="#定位改变display属性" class="headerlink" title="定位改变display属性"></a>定位改变display属性</h3><p> 前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p><ul><li>可以用inline-block  转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li></ul><p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p><blockquote><p>完善新浪导航案例</p></blockquote><p><strong>同时注意：</strong></p><p>浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p><p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题了。</p><h2 id="综合演练-淘宝轮播图"><a href="#综合演练-淘宝轮播图" class="headerlink" title="综合演练 - 淘宝轮播图"></a>综合演练 - 淘宝轮播图</h2><p><img src="/前端笔记/css-day06/28%E6%B7%98%E5%AE%9D.png" alt></p><h4 id="圆角矩形设置4个角"><a href="#圆角矩形设置4个角" class="headerlink" title="圆角矩形设置4个角"></a>圆角矩形设置4个角</h4><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius:20px;</span><br><span class="line">border-top-right-radius:20px;</span><br><span class="line">border-bottom-right-radius:20px;</span><br><span class="line">border-bottom-left-radius:20px;</span><br></pre></td></tr></table></figure><ul><li><p>如果4个角，数值相同</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border-radius</span>: 15<span class="hljs-selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p></li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><p>还是遵循的顺时针。</p><h2 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h2><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th align="left">移动位置基准</th><th>模式转换（行内块）</th><th>使用情况</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td align="left">正常模式</td><td>不能</td><td>几乎不用</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td align="left">相对自身位置移动</td><td>不能</td><td>基本单独使用</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td align="left">相对于定位父级移动位置</td><td>能</td><td>要和定位父级元素搭配使用</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td align="left">相对于浏览器移动位置</td><td>能</td><td>单独使用，不需要父级</td></tr></tbody></table><p><strong>注意</strong>：</p><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><h2 id="学成网定位总结添加"><a href="#学成网定位总结添加" class="headerlink" title="学成网定位总结添加"></a>学成网定位总结添加</h2><p>一个小技巧:</p><p><img src="/前端笔记/css-day06/dingwei.png" alt></p><h2 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h2><p>一个完整的网页，有标准流 、 浮动 、 定位 一起完成布局的。每个都有自己的专门用法。</p><h4 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h4><p>可以让盒子上下排列 或者 左右排列的</p><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>可以让多个块级元素一行显示  或者 左右对齐盒子   浮动的盒子就是按照顺序左右排列 </p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>定位最大的特点是有层叠的概念，就是可以让多个盒子 前后 叠压来显示。 但是每个盒子需要测量数值。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.定位(position)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;定位-position&quot;&gt;&lt;a href=&quot;#定位-position&quot; class=&quot;headerlink&quot; title=&quot;定位(position)&quot;&gt;&lt;/a&gt;定位(position)&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;理解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能说出为什么要用定位&lt;/li&gt;
&lt;li&gt;能说出定位的4种分类&lt;/li&gt;
&lt;li&gt;能说出四种定位的各自特点&lt;/li&gt;
&lt;li&gt;能说出我们为什么常用子绝父相布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能写出淘宝轮播图布局&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day05/"/>
    <id>http://www.itfool.cn/前端笔记/css-day05/</id>
    <published>2020-05-21T07:06:08.000Z</published>
    <updated>2020-05-22T02:09:57.337Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.页面制作</p></blockquote><h1 id="实战-demo"><a href="#实战-demo" class="headerlink" title="实战|demo"></a>实战|demo</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>理解</strong><ul><li>能够说写单页面我们基本的流程</li><li>能说出常见的css初始化语句</li><li><strong>能说出我们CSS属性书写顺序</strong></li></ul></li><li><strong>应用</strong><ul><li>能利用ps切图</li><li>能引入外部样式表</li><li>能把psd文件转换为html页面</li></ul></li></ul><p>学成在线的目的就是为了串联前面的所有知识。来一个春晚大联欢。</p><p><strong>pink老师：</strong></p><p>取义<strong>学有所成</strong>，为师之期望，君等成才者也，故曰学成网是也~~</p><a id="more"></a><h2 id="前期准备素材"><a href="#前期准备素材" class="headerlink" title="前期准备素材"></a>前期准备素材</h2><ul><li>学成在线PSD源文件 <a href="https://itfool.cn/前端笔记/css-day05/学成网首页.psd" target="_blank" rel="noopener">https://itfool.cn/前端笔记/css-day05/学成网首页.psd</a></li><li>开发工具  =  PS（切图） +  sublime（代码） + chrome（测试）</li></ul><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><p>欲先善其事，必先利其器。 先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。</p><ol><li>创建 study 目录文件夹 (用于存放我们这个页面的相关内容)</li><li>study目录内新建images 文件夹 用于保存图片。</li><li>新建index.html 首页html 文件（以后我们的网站首页统一规定为index.html)</li><li>新建style.css 样式文件。 我们本次采用外链样式表。</li><li>将样式引入到我们HTML页面文件中。</li><li>样式表写入 清除内外边距样式，来检测样式表是否引入成功。</li></ol><h2 id="CSS属性书写顺序-重点"><a href="#CSS属性书写顺序-重点" class="headerlink" title="CSS属性书写顺序(重点)"></a>CSS属性书写顺序(重点)</h2><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">display</span>: block;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">font-family</span>: Arial, <span class="hljs-string">'Helvetica Neue'</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="line">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">    <span class="hljs-attribute">-webkit-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">-moz-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">-o-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">-ms-border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常有以下的布局流程，具体如下：</p><p>1、必须确定页面的版心（可视区）， 我们测量可得知。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。其实页面布局，就是一行行罗列而成</p><p>3、制作HTML结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。</p><p>4、然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h2 id="页面制作"><a href="#页面制作" class="headerlink" title="页面制作"></a>页面制作</h2><p>这个页面的版心是 1200像素   每个版心都要水平居中对齐，所以，我们干脆把版心定义为：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.w</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头部制作"><a href="#头部制作" class="headerlink" title="头部制作"></a>头部制作</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/1.png" alt></p><ul><li>1号是版心盒子header  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。</li><li>版心盒子 里面包含 2号盒子 logo</li><li>版心盒子 里面包含 3号盒子 nav导航栏</li><li>版心盒子 里面包含 4号盒子 search搜索框</li><li>版心盒子 里面包含 5号盒子 user个人信息</li><li>注意，要求里面的 4个盒子 必须都浮动</li></ul><h4 id="banner制作"><a href="#banner制作" class="headerlink" title="banner制作"></a>banner制作</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/2.png" alt></p><ul><li>1号盒子是通栏的大盒子banner， 不给宽度，给高度，给一个蓝色背景。</li><li>2号盒子是版心， 要水平居中对齐。</li><li>3号盒子版心内，左对齐 subnav侧导航栏。</li><li>4号盒子版心内，右对齐  course 课程。</li></ul><h4 id="课程表模块"><a href="#课程表模块" class="headerlink" title="课程表模块"></a>课程表模块</h4><p>结构图如下：</p><p> <img src="/前端笔记/css-day05/6.png" alt></p><ul><li>1号盒子 是  228 * 300 的盒子 右浮动  注意 浮动的元素 不会有外边距塌陷的问题</li><li>1号盒子内 分为 上下 两个 子盒子</li><li>2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)</li><li>3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)</li></ul><h4 id="精品推荐小模块"><a href="#精品推荐小模块" class="headerlink" title="精品推荐小模块"></a>精品推荐小模块</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/3.png" alt></p><ul><li><strong>复习点：</strong>  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color</li><li>大盒子水平居中 goods  精品 ，注意此处有个盒子阴影</li><li>1号盒子是标题 H3  左侧浮动</li><li>2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）</li><li>3号盒子 右浮动 mod 修改</li></ul><h4 id="精品推荐大模块"><a href="#精品推荐大模块" class="headerlink" title="精品推荐大模块"></a>精品推荐大模块</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/4.png" alt></p><ul><li>1号盒子为最大的盒子 box  版心水平居中对齐</li><li>2号盒子为上面部分 box-hd  – 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动</li><li>3号盒子为底下部分 box-bd — 里面是无序列表 有 10个 小li 组成</li><li>小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了</li><li>复习点：  我们用到清除浮动  因为 box-hd 里面的盒子个数不一定多少，我们就不给高度了，但是里面的盒子浮动了， 影响下面的布局，此时需要浮动</li></ul><h4 id="底部模块制作"><a href="#底部模块制作" class="headerlink" title="底部模块制作"></a>底部模块制作</h4><p>结构图如下：</p><p><img src="/前端笔记/css-day05/5.png" alt></p><ul><li>1号盒子通栏大盒子 底部 footer  给高度  底色是白色</li><li>2号盒子版心水平居中</li><li>3号盒子版权 copyright  左对齐 </li><li>4号盒子 链接组 links  右对齐</li></ul><h1 id="chrome调试工具"><a href="#chrome调试工具" class="headerlink" title="chrome调试工具"></a>chrome调试工具</h1><p>“工欲善其事，必先利其器”</p><p>Chrome浏览器不仅可以调试页面、JS、请求、资源、cookie，还可以模拟手机进行调试。我们现在只是使用html和css，我们先讲一下现在常用的调试。</p><h2 id="怎样打开Chrome的开发者工具？"><a href="#怎样打开Chrome的开发者工具？" class="headerlink" title="怎样打开Chrome的开发者工具？"></a>怎样打开Chrome的开发者工具？</h2><p>直接在页面上点击右键，然后选择  “检查”     快捷键    F12  或者   ctrl+shift+i</p><p> <img src="/前端笔记/css-day05/chrome1.png" alt></p><p>基本的结构布局是左边html 右边是 css</p><p><img src="/前端笔记/css-day05/chrome2.png" alt></p><h3 id="chrome调试数值"><a href="#chrome调试数值" class="headerlink" title="chrome调试数值"></a>chrome调试数值</h3><p>可以鼠标点击后面的数值，  按下键盘  上箭头 是 调大 数值， 下箭头是 调小数值</p><p><img src="/前端笔记/css-day05/chrome5.png" alt></p><h3 id="快速定位css所在行数"><a href="#快速定位css所在行数" class="headerlink" title="快速定位css所在行数"></a>快速定位css所在行数</h3><p><img src="/前端笔记/css-day05/chrome6.png" alt></p><h2 id="Chrome提示的常见布局错误"><a href="#Chrome提示的常见布局错误" class="headerlink" title="Chrome提示的常见布局错误"></a>Chrome提示的常见布局错误</h2><h3 id="css单词书写错误提示"><a href="#css单词书写错误提示" class="headerlink" title="css单词书写错误提示"></a>css单词书写错误提示</h3><p>用下图所示的黑色箭头，点击我们需要的 html 元素。</p><p><img src="/前端笔记/css-day05/chrome3.png" alt></p><h3 id="css无显示"><a href="#css无显示" class="headerlink" title="css无显示"></a>css无显示</h3><p>声明类名和html调用名不一致   或者   css文件引入不对  或者  这个样式的前面 多余了一些符号影响的</p><p><img src="/前端笔记/css-day05/chrome4.png" alt></p><h3 id="html-结构不匹配-重要"><a href="#html-结构不匹配-重要" class="headerlink" title="html 结构不匹配(重要)"></a>html 结构不匹配(重要)</h3><p>左侧   展开可以看到html 标签是否匹配</p><p> <img src="/前端笔记/css-day05/chrome7.png" alt></p><h3 id="通过颜色判断盒子"><a href="#通过颜色判断盒子" class="headerlink" title="通过颜色判断盒子"></a>通过颜色判断盒子</h3><p>蓝色是 盒子的 宽度高度     青色是 内边距     橙色 是外边距   通过这个很方便的看到盒子给的范围</p><p> <img src="/前端笔记/css-day05/chrome8.png" alt></p><h3 id="看看你有如下错误吗"><a href="#看看你有如下错误吗" class="headerlink" title="看看你有如下错误吗"></a>看看你有如下错误吗</h3><p> <img src="/前端笔记/css-day05/a.png" alt></p><p> <img src="/前端笔记/css-day05/b.png" alt></p><p> <img src="/前端笔记/css-day05/c.png" alt></p><p> <img src="/前端笔记/css-day05/d.png" alt></p><p> <img src="/前端笔记/css-day05/e.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.页面制作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;实战-demo&quot;&gt;&lt;a href=&quot;#实战-demo&quot; class=&quot;headerlink&quot; title=&quot;实战|demo&quot;&gt;&lt;/a&gt;实战|demo&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;理解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够说写单页面我们基本的流程&lt;/li&gt;
&lt;li&gt;能说出常见的css初始化语句&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;能说出我们CSS属性书写顺序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能利用ps切图&lt;/li&gt;
&lt;li&gt;能引入外部样式表&lt;/li&gt;
&lt;li&gt;能把psd文件转换为html页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学成在线的目的就是为了串联前面的所有知识。来一个春晚大联欢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pink老师：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;取义&lt;strong&gt;学有所成&lt;/strong&gt;，为师之期望，君等成才者也，故曰学成网是也~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day04/"/>
    <id>http://www.itfool.cn/前端笔记/css-day04/</id>
    <published>2020-05-21T06:47:13.000Z</published>
    <updated>2020-05-21T07:49:02.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.浮动</p></blockquote><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li><strong>记忆</strong><ul><li>能够说出 CSS 的布局的三种机制</li></ul></li><li><strong>理解</strong><ul><li>能够说出普通流在布局中的特点</li><li>能够说出我们为什么用浮动</li><li>能够说出我们为什么要清除浮动</li></ul></li><li><strong>应用</strong><ul><li>能够利用浮动完成导航栏案例</li><li>能够清除浮动</li><li>能够使用PS切图工具<a id="more"></a><h3 id="CSS-布局的三种机制"><a href="#CSS-布局的三种机制" class="headerlink" title="CSS 布局的三种机制"></a>CSS 布局的三种机制</h3></li></ul></li></ul><blockquote><p>网页布局的核心——就是<strong>用 CSS 来摆放盒子</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>（标准流）、<strong>浮动</strong>和<strong>定位</strong>，其中： </p><ol><li><strong>普通流</strong>（标准流）<ul><li><strong>块级元素</strong>会独占一行，<strong>从上向下</strong>顺序排列；<ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul></li><li><strong>行内元素</strong>会按照顺序，<strong>从左到右</strong>顺序排列，碰到父元素边缘则自动换行；<ul><li>常用元素：span、a、i、em等</li></ul></li></ul></li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位，特别是后面的 js 特效。</li></ul></li></ol><h3 id="为什么需要浮动？"><a href="#为什么需要浮动？" class="headerlink" title="为什么需要浮动？"></a>为什么需要浮动？</h3><p>思考题：</p><p> 我们首先要思考以下2个布局中最常见的问题？</p><ol><li><p>如何让多个盒子(div)水平排列成一行？</p><p><img src="/前端笔记/css-day04/03_%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97div.png" alt></p></li><li><p>如何实现盒子的左右对齐？</p></li></ol><p><img src="/前端笔记/css-day04/float1.png" alt></p><p>虽然我们前面学过行内块（inline-block） 但是他却有自己的缺陷：</p><ol><li>它可以实现多个元素一行显示，但是中间会有空白缝隙，不能满足以上第一个问题。</li><li>它不能实现以上第二个问题，盒子左右对齐 </li></ol><p><strong>pink老师一句话总结他们</strong></p><blockquote><p>因为一些网页布局要求，标准流不能满足我们的需要了，因此我们需要浮动来完成网页布局。</p></blockquote><h3 id="什么是浮动-float"><a href="#什么是浮动-float" class="headerlink" title="什么是浮动(float)"></a>什么是浮动(float)</h3><p><strong>概念</strong>：元素的浮动是指<strong>设置了浮动属性的元素</strong>会</p><ol><li>脱离标准普通流的控制</li><li>移动到指定位置。</li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li><strong>让多个盒子(div)水平排列成一行</strong>，使得浮动成为布局的重要手段。</li><li>可以实现盒子的左右对齐等等..</li><li>浮动最早是用来<strong>控制图片</strong>，实现<strong>文字环绕图片的效果</strong>。</li></ol><p><img src="/前端笔记/css-day04/01_%E6%96%87%E5%AD%97%E7%8E%AF%E7%BB%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>在 CSS 中，通过 <code>float</code>  中文，  浮 漏 特    属性定义浮动，语法如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>none</strong></td><td>元素不浮动（<strong>默认值</strong>）</td></tr><tr><td><strong>left</strong></td><td>元素向<strong>左</strong>浮动</td></tr><tr><td><strong>right</strong></td><td>元素向<strong>右</strong>浮动</td></tr></tbody></table><p>pink老师教你学浮动口诀。通过 <code>float</code>   —–  浮 漏 特</p><h4 id="浮动口诀之-浮"><a href="#浮动口诀之-浮" class="headerlink" title="浮动口诀之 浮"></a>浮动口诀之 浮</h4><p>浮动——浮<del>浮</del>浮<figure class="highlight plain hljs"><figcaption><span>脱离标准流。 俗称 “脱标”   </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ![](CSS-Day04/23%E6%B5%AE%E5%8A%A8%E8%84%B1%E6%A0%87.png)</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">.box1 &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgba(255, 0, 0, 0.5);</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**小结**：</span><br><span class="line"></span><br><span class="line">- `float` 属性会让盒子漂浮在标准流的上面，所以第二个标准流的盒子跑到浮动盒子的底下了。</span><br><span class="line"></span><br><span class="line">####   浮动口诀之 漏</span><br><span class="line"></span><br><span class="line">浮动——漏~漏~漏~  浮动的盒子，把自己原来的位置漏给下面标准流的盒子，就是不占有原来位置，是脱离标准流的，我们俗称 “脱标”。</span><br><span class="line"></span><br><span class="line">~~~css</span><br><span class="line">.box1 &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgba(255, 0, 0, 0.5);</span><br><span class="line">    /* 让第 1 个盒子漂浮起来，不占位置 */</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 所以，box2下面的其实就是跑到box1盒子下面了， 被box1给压住了，遮挡起来了</p><p>来来来，我们看个立体图</p><p><img src="/前端笔记/css-day04/zou.gif" alt></p><h4 id="浮动口诀之-特"><a href="#浮动口诀之-特" class="headerlink" title="浮动口诀之 特"></a>浮动口诀之 特</h4><p>浮动——特性  float属性会改变元素display属性。</p><p>任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。</p><p>体验案例——div 水平排列</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* display: inline-block; */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.two</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">background-color</span>: hotpink;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/css-day04/24%E6%B5%AE%E5%8A%A8%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA.png" alt></p><p><strong>注意： 浮动的元素互相贴靠一起的，但是如果父级宽度装不下这些浮动的盒子， 多出的盒子会另起一行对齐</strong></p><h3 id="浮动-float-小结"><a href="#浮动-float-小结" class="headerlink" title="浮动(float)小结"></a>浮动(float)小结</h3><blockquote><p>我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式</p></blockquote><p><strong>float</strong> —— <strong>浮漏特</strong></p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>浮</td><td>加了浮动的盒子<strong>是浮起来</strong>的，漂浮在其他标准流盒子的上面。</td></tr><tr><td>漏</td><td>加了浮动的盒子<strong>是不占位置的</strong>，它原来的位置<strong>漏给了标准流的盒子</strong>。</td></tr><tr><td>特</td><td><strong>特别注意</strong>：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td></tr></tbody></table><h3 id="浮动-float-的应用（重要）"><a href="#浮动-float-的应用（重要）" class="headerlink" title="浮动(float)的应用（重要）"></a>浮动(float)的应用（重要）</h3><h4 id="浮动和标准流的父盒子搭配"><a href="#浮动和标准流的父盒子搭配" class="headerlink" title="浮动和标准流的父盒子搭配"></a>浮动和标准流的父盒子搭配</h4><p>我们知道，浮动是脱标的，会影响下面的标准流元素，此时，我们需要给浮动的元素添加一个标准流的父亲，这样，最大化的减小了对其他标准流的影响。</p><p><strong>pink老师说：</strong></p><blockquote><p>一个完整的网页，是 标准流 +  浮动 +  我们后面要讲的定位 一起完成的。</p></blockquote><h4 id="浮动应用案例"><a href="#浮动应用案例" class="headerlink" title="浮动应用案例"></a>浮动应用案例</h4><p><img src="/前端笔记/css-day04/mii.png" alt></p><h4 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h4><p><img src="/前端笔记/css-day04/nav.png" alt></p><p>注意，实际重要的导航栏中，我们不会直接用链接a 而是用 li  包含链接(li+a)的做法。</p><ol><li>li+a 语义更清晰，一看这就是有条理的列表型内容。</li><li>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li></ol><h3 id="浮动-float-的扩展"><a href="#浮动-float-的扩展" class="headerlink" title="浮动(float)的扩展"></a>浮动(float)的扩展</h3><h4 id="浮动元素与父盒子的关系"><a href="#浮动元素与父盒子的关系" class="headerlink" title="浮动元素与父盒子的关系"></a>浮动元素与父盒子的关系</h4><ul><li>子盒子的浮动参照父盒子对齐</li><li>不会与父盒子的边框重叠，也不会超过父盒子的内边距<br><img src="/前端笔记/css-day04/05_%E7%88%B6%E5%AD%90%E7%9B%92%E5%AD%90%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt><br>​</li></ul><h4 id="浮动元素与兄弟盒子的关系"><a href="#浮动元素与兄弟盒子的关系" class="headerlink" title="浮动元素与兄弟盒子的关系"></a>浮动元素与兄弟盒子的关系</h4><p>在一个父级盒子中，如果<strong>前一个兄弟盒子</strong>是：</p><ul><li><strong>浮动</strong>的，那么<strong>当前盒子</strong>会与前一个盒子的顶部对齐；</li><li><strong>普通流</strong>的，那么<strong>当前盒子</strong>会显示在前一个兄弟盒子的下方。 </li></ul><p><strong>pink老师 要你记住：</strong></p><blockquote><p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。</p></blockquote><p> <img src="/前端笔记/css-day04/two1.jpg" alt></p><p><strong>建议</strong></p><p><strong>如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</strong></p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><h3 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h3><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p><p><img src="/前端笔记/css-day04/n-1590044092695.jpg" alt></p><p><img src="/前端笔记/css-day04/no.jpg" alt></p><ul><li>总结：<ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></li></ul></li></ul><h3 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h3><p><strong>听pink老师说清除浮动本质：</strong></p><p>​    <strong>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><p>在CSS中，clear属性用于清除浮动，在这里，我们先记住清除浮动的方法，具体的原理，等我们学完css会再回头分析。</p><ul><li>语法：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;   clear 清除</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>但是我们实际工作中， 几乎只用 clear: both;</p><h4 id="额外标签法-隔墙法"><a href="#额外标签法-隔墙法" class="headerlink" title="额外标签法(隔墙法)"></a>额外标签法(隔墙法)</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">”clear:both”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><ul><li>优点： 通俗易懂，书写方便</li><li>缺点： 添加许多无意义的标签，结构化较差。</li></ul><h4 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h4><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。</span><br></pre></td></tr></table></figure><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h4 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</strong> </p><p>使用方法：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;  <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>; <span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">clear</span>: both; <span class="hljs-attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure><ul><li>优点： 符合闭合浮动思想  结构语义化正确</li><li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li><li>代表网站： 百度、淘宝网、网易等</li></ul><p><img src="/前端笔记/css-day04/163.png" alt></p><h4 id="使用双伪元素清除浮动"><a href="#使用双伪元素清除浮动" class="headerlink" title="使用双伪元素清除浮动"></a>使用双伪元素清除浮动</h4><p>使用方法：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="hljs-attribute">content</span>:<span class="hljs-string">""</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="hljs-attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点：  代码更简洁</p></li><li><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p></li><li><p>代表网站： 小米、腾讯等</p></li></ul><h3 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h3><p><strong>pink老师告诉你我们以后什么时候用清除浮动呢？</strong></p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了。</li></ol><table><thead><tr><th>清除浮动的方式</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td align="left">通俗易懂，书写方便</td><td align="left">添加许多无意义的标签，结构化较差。</td></tr><tr><td>父级overflow:hidden;</td><td align="left">书写简单</td><td align="left">溢出隐藏</td></tr><tr><td>父级after伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after，兼容性问题</td></tr></tbody></table><p>后面两种伪元素清除浮动，大家暂且会使用就好， 深入原理，我们后面学完伪元素再讲。</p><h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p><strong>常见的图片格式</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. jpg图像格式： </span><br><span class="line">JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们产品类的图片经常用jpg格式的</span><br><span class="line">2. gif图像格式：</span><br><span class="line">GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果</span><br><span class="line">3. png图像格式</span><br><span class="line">是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景</span><br><span class="line">4. PSD图像格式</span><br><span class="line">PSD格式是Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计草稿。</span><br></pre></td></tr></table></figure><p>PS切图   可以 分为   利用切片工具切图 以及   利用PS的插件快速切图。</p><h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p> <img src="/前端笔记/css-day04/1498466173246.png" alt></p><p>ps切图片，分两大步：</p><p><strong>1). 用切片选中图片</strong></p><ul><li><p>利用切片工具手动划出</p></li><li><p>图层菜单—新建基于图层的切片</p></li><li><p>利用辅助线 来切图 –    基于参考线的切片 </p></li></ul><p>   <img src="/前端笔记/css-day04/1498466734205.png" alt></p><p><strong>2). 导出切片</strong></p><p>  文件菜单   – 存储为web设备所用格式 —-   选择  我们要的图片格式 —-  点存储  —   别忘了选中的切片</p><h4 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h4><p>视图菜单– 清除 辅助线/ 清除切片</p><h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">http://www.cutterman.cn/zh/cutterman</a></p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><p><img src="/前端笔记/css-day04/sample1.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.浮动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;浮动-float&quot;&gt;&lt;a href=&quot;#浮动-float&quot; class=&quot;headerlink&quot; title=&quot;浮动(float)&quot;&gt;&lt;/a&gt;浮动(float)&lt;/h2&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;记忆&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够说出 CSS 的布局的三种机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够说出普通流在布局中的特点&lt;/li&gt;
&lt;li&gt;能够说出我们为什么用浮动&lt;/li&gt;
&lt;li&gt;能够说出我们为什么要清除浮动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;能够利用浮动完成导航栏案例&lt;/li&gt;
&lt;li&gt;能够清除浮动&lt;/li&gt;
&lt;li&gt;能够使用PS切图工具&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day03/"/>
    <id>http://www.itfool.cn/前端笔记/css-day03/</id>
    <published>2020-05-20T09:13:08.000Z</published>
    <updated>2020-05-20T09:25:31.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.盒子模型</p></blockquote><p><img src="/前端笔记/css-day03/day3.png" alt></p><a id="more"></a><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>css学习三大重点： css 盒子模型   、  浮动  、  定位  </p><p>主题思路：</p><p>目标： </p><ul><li>理解：<ul><li>能说出盒子模型有那四部分组成</li><li>能说出内边距的作用以及对盒子的影响</li><li>能说出padding设置不同数值个数分别代表的意思</li><li>能说出块级盒子居中对齐需要的2个条件</li><li>能说出外边距合并的解决方法</li></ul></li><li>应用：<ul><li>能利用边框复合写法给元素添加边框</li><li>能计算盒子的实际大小</li><li>能利用盒子模型布局模块案例</li></ul></li></ul><h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p><p><img src="/前端笔记/css-day03/t.png" alt></p><ul><li><p>看透网页布局的本质：</p><ul><li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等，放入盒子里面。</li><li>以上两步 就是网页布局的本质</li></ul><p><img src="/前端笔记/css-day03/t1.png" alt></p></li></ul><p>我们明白了，盒子是网页布局的关键点，所以我们更应该弄明白 这个盒子有什么特点。</p><h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><ul><li><p>所谓盒子模型：</p><ul><li>就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li></ul><p><img src="/前端笔记/css-day03/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt></p><p> <img src="/前端笔记/css-day03/boxs.png" alt></p><p><strong>pink老师总结：</strong></p><ul><li>盒子模型有元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li><li>盒子里面的文字和图片等元素是 内容区域</li><li>盒子的厚度 我们成为 盒子的边框 </li><li>盒子内容与边框的距离是内边距（类似单元格的 cellpadding)</li><li>盒子与盒子之间的距离是外边距（类似单元格的 cellspacing）</li></ul></li></ul><p><strong>标准盒子模型</strong></p><p> <img src="/前端笔记/css-day03/%E6%A0%87%E5%87%86%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt></p><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>​    <img src="/前端笔记/css-day03/%E7%9B%92%E5%AD%90%E8%BE%B9%E6%A1%86.png" alt></p><ul><li>语法：</li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th align="center">作用</th></tr></thead><tbody><tr><td>border-width</td><td align="center">定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td align="center">边框的样式</td></tr><tr><td>border-color</td><td align="center">边框颜色</td></tr></tbody></table><ul><li>边框的样式：<ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线  </li><li>dotted：边框为点线</li></ul></li></ul><h3 id="边框综合设置"><a href="#边框综合设置" class="headerlink" title="边框综合设置"></a>边框综合设置</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">red</span>;  没有顺序</span><br></pre></td></tr></table></figure><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p><table><thead><tr><th align="left">上边框</th><th align="left">下边框</th><th align="left">左边框</th><th align="left">右边框</th></tr></thead><tbody><tr><td align="left">border-top-style:样式;</td><td align="left">border-bottom-style:样式;</td><td align="left">border-left-style:样式;</td><td align="left">border-right-style:样式;</td></tr><tr><td align="left">border-top-width:宽度;</td><td align="left">border- bottom-width:宽度;</td><td align="left">border-left-width:宽度;</td><td align="left">border-right-width:宽度;</td></tr><tr><td align="left">border-top-color:颜色;</td><td align="left">border- bottom-color:颜色;</td><td align="left">border-left-color:颜色;</td><td align="left">border-right-color:颜色;</td></tr><tr><td align="left">border-top:宽度 样式 颜色;</td><td align="left">border-bottom:宽度 样式 颜色;</td><td align="left">border-left:宽度 样式 颜色;</td><td align="left">border-right:宽度 样式 颜色;</td></tr></tbody></table><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p> <img src="/前端笔记/css-day03/%E8%A1%A8%E6%A0%BC%E8%BE%B9%E6%A1%86.png" alt></p><ul><li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</p></li><li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p></li><li><p>通过css属性：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table&#123; border-collapse:collapse; &#125;</span><br></pre></td></tr></table></figure><ul><li>collapse 单词是合并的意思</li><li>border-collapse:collapse; 表示相邻边框合并在一起。</li></ul></li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line"><span class="hljs-selector-tag">table</span> &#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">td</span> &#123;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="line"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="line"><span class="hljs-attribute">border-collapse</span>: collapse;  <span class="hljs-comment">/*合并相邻边框*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p> <img src="/前端笔记/css-day03/16%E5%86%85%E8%BE%B9%E8%B7%9D.png" alt></p><h3 id="内边距："><a href="#内边距：" class="headerlink" title="内边距："></a>内边距：</h3><p>​    padding属性用于设置内边距。 <strong>是指 边框与内容之间的距离。</strong></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>padding-left</td><td align="left">左内边距</td></tr><tr><td>padding-right</td><td align="left">右内边距</td></tr><tr><td>padding-top</td><td align="left">上内边距</td></tr><tr><td>padding-bottom</td><td align="left">下内边距</td></tr></tbody></table><p>当我们给盒子指定padding值之后， 发生了2件事情：</p><ol><li><p>内容和边框 有了距离，添加了内边距。</p></li><li><p>盒子会变大了。</p><p><img src="/前端笔记/css-day03/w.jpg" alt><strong>注意：  后面跟几个数值表示的意思是不一样的。</strong></p></li></ol><p>我们分开写有点麻烦，我们可以不可以简写呢？</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右内边距;</td></tr><tr><td>2个值</td><td>padding: 上下内边距    左右内边距 ；</td></tr><tr><td>3个值</td><td>padding：上内边距   左右内边距   下内边距；</td></tr><tr><td>4个值</td><td>padding: 上内边距 右内边距 下内边距 左内边距 ；</td></tr></tbody></table><p><img src="/前端笔记/css-day03/%E9%A1%BA%E6%97%B6%E9%92%88.jpg" alt></p><p><strong>课堂一练：</strong></p><p>请写出如下内边距：</p><ol><li>要求盒子有一个左边内边距是 5像素</li><li>要求简写的形式写出  一个盒子上下是 25像素   左右是15像素。</li><li>要求简写的形式写出 一个盒子  上内边距是 12像素  下内边距是 0  左内边距是 25像素  右内边距是 10像素</li></ol><h3 id="课堂案例：-新浪导航"><a href="#课堂案例：-新浪导航" class="headerlink" title="课堂案例：  新浪导航"></a>课堂案例：  新浪导航</h3><p>新浪导航栏的核心就是因为里面的字数不一样多，所以我们不方便给宽度，还是给padding ，撑开盒子的。</p><p> <img src="/前端笔记/css-day03/al.gif" alt></p><h3 id="内盒尺寸计算（元素实际大小）"><a href="#内盒尺寸计算（元素实际大小）" class="headerlink" title="内盒尺寸计算（元素实际大小）"></a>内盒尺寸计算（元素实际大小）</h3><p><img src="/前端笔记/css-day03/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%A4%A7%E5%B0%8F.png" alt></p><ul><li><p>宽度</p><p>Element Height = content height + padding + border （Height为内容高度）</p></li><li><p>高度</p><p>Element Width = content width + padding + border （Width为内容宽度）</p></li><li><p>盒子的实际的大小 =   内容的宽度和高度 +  内边距   +  边框   </p></li></ul><h3 id="内边距产生的问题"><a href="#内边距产生的问题" class="headerlink" title="内边距产生的问题"></a>内边距产生的问题</h3><ul><li><p>问题</p><p><img src="/前端笔记/css-day03/31padding%E9%97%AE%E9%A2%98.png" alt></p><p>会撑大原来的盒子</p></li><li><p>解决：</p><p>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小</p><p><img src="/前端笔记/css-day03/32padding%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.png" alt></p></li></ul><p><strong>课堂一练</strong></p><ol><li>一个盒子宽度为100， padding为 10， 边框为5像素，问这个盒子实际的宽度的是（）</li></ol><ul><li><input checked disabled type="checkbox"> <p>(A) 130</p></li><li><input disabled type="checkbox"> <p>(B) 135 </p></li><li><input disabled type="checkbox"> <p>(C) 125</p></li><li><input disabled type="checkbox"> <p>(D) 115</p><p>100 +  20 + 10 </p></li></ul><ol start="2"><li>关于根据下列代码计算 盒子宽高下列说法正确的是（）</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line">         <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">border-top</span>: <span class="hljs-number">5px</span> solid blue;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> (A) 宽度为200px 高度为200px</li><li><input checked disabled type="checkbox"> (B) 宽度为352px 高度为306px</li><li><input disabled type="checkbox"> (C) 宽度为302px 高度为307px</li><li><input disabled type="checkbox"> (D) 宽度为302px 高度为252px</li></ul><p>w  200 +   150   + 2   =  352</p><p>h   200 +  100 +  6   =  306 </p><h3 id="padding不影响盒子大小情况"><a href="#padding不影响盒子大小情况" class="headerlink" title="padding不影响盒子大小情况"></a>padding不影响盒子大小情况</h3><blockquote><p>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p></blockquote><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p><img src="/前端笔记/css-day03/18margin%E5%A4%96%E8%BE%B9%E8%B7%9D.png" alt></p><h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>​    margin属性用于设置外边距。  margin就是控制<strong>盒子和盒子之间的距离</strong></p><h3 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h3><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>margin-left</td><td align="left">左外边距</td></tr><tr><td>margin-right</td><td align="left">右外边距</td></tr><tr><td>margin-top</td><td align="left">上外边距</td></tr><tr><td>margin-bottom</td><td align="left">下外边距</td></tr></tbody></table><p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p><h3 id="块级盒子水平居中"><a href="#块级盒子水平居中" class="headerlink" title="块级盒子水平居中"></a>块级盒子水平居中</h3><ul><li>可以让一个块级盒子实现水平居中必须：<ul><li>盒子必须指定了宽度（width）</li><li>然后就给<strong>左右的外边距都设置为auto</strong>，</li></ul></li></ul><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.header</span>&#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">960px</span>; <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>常见的写法，以下下三种都可以。</p><ul><li>margin-left: auto;   margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;</li></ul><h3 id="文字居中和盒子居中区别"><a href="#文字居中和盒子居中区别" class="headerlink" title="文字居中和盒子居中区别"></a>文字居中和盒子居中区别</h3><ol><li>盒子内的文字水平居中是  text-align: center,  而且还可以让 行内元素和行内块居中对齐</li><li>块级盒子水平居中  左右margin 改为 auto </li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">text-align</span>: <span class="hljs-selector-tag">center</span>; <span class="hljs-comment">/*  文字 行内元素 行内块元素水平居中 */</span></span><br><span class="line"><span class="hljs-selector-tag">margin</span>: 10<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">auto</span>;  <span class="hljs-comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span></span><br></pre></td></tr></table></figure><h3 id="插入图片和背景图片区别"><a href="#插入图片和背景图片区别" class="headerlink" title="插入图片和背景图片区别"></a>插入图片和背景图片区别</h3><ol><li>插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">img</span> &#123;  </span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">210px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;  <span class="hljs-comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid purple;</span><br><span class="line"><span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">30px</span> <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 背景图片更改位置 我用 background-position */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除元素的默认内外边距-重要"><a href="#清除元素的默认内外边距-重要" class="headerlink" title="清除元素的默认内外边距(重要)"></a>清除元素的默认内外边距(重要)</h3><p><img src="/前端笔记/css-day03/19%E6%B8%85%E9%99%A4%E5%86%85%E5%A4%96%E8%BE%B9%E8%B7%9D.png" alt></p><p>为了更灵活方便地控制网页中的元素，制作网页时，我们需要将元素的默认内外边距清除</p><p>代码： </p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;         <span class="hljs-comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;          <span class="hljs-comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：  </p><ul><li>行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。</li></ul><h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><p>使用margin定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p><h4 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h4><ul><li><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</p></li><li><p>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</p></li><li><p><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><p><img src="/前端笔记/css-day03/www.png" alt></p></li></ul><p><strong>解决方案：尽量给只给一个盒子添加margin值</strong>。</p><h4 id="嵌套块元素垂直外边距的合并（塌陷）"><a href="#嵌套块元素垂直外边距的合并（塌陷）" class="headerlink" title="嵌套块元素垂直外边距的合并（塌陷）"></a>嵌套块元素垂直外边距的合并（塌陷）</h4><ul><li><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框</p></li><li><p>父元素的上外边距会与子元素的上外边距发生合并</p></li><li><p>合并后的外边距为两者中的较大者</p><p><img src="/前端笔记/css-day03/n.png" alt></p></li></ul><p><strong>解决方案：</strong></p><ol><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow:hidden。</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><ul><li><p>学习完盒子模型，内边距和外边距，什么情况下用内边距，什么情况下用外边距？</p><ul><li>大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</li></ul></li></ul><p>我们根据稳定性来分，建议如下：</p><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure><ul><li>原因：<ul><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li><li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li><li>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li></ul></li></ul><h2 id="ps基本操作以及常用快捷键："><a href="#ps基本操作以及常用快捷键：" class="headerlink" title="ps基本操作以及常用快捷键："></a>ps基本操作以及常用快捷键：</h2><p>因为网页美工大部分效果图都是利用ps 来做的，所以，以后我们大部分切图工作都是在ps里面完成。</p><ul><li>文件–打开 –  可以打开 我们要测量的图片</li><li>ctrl+r 可以打开标尺  或者  视图 –  标尺</li><li>右击标尺，  把里面的单位改为  像素  </li><li>ctrl+ 加号 键  可以 放大  视图  ctrl+ 减号 缩小视图</li><li>按住空格键，  鼠标可以 变成小手 ，拖动 ps 视图</li><li>用选区 拖动  可以 测量 大小 </li><li>ctrl+ d  可以取消选区  或者旁边空白处点击一下也可以取消选区</li></ul><p><img src="/前端笔记/css-day03/ps2.png" alt></p><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p><img src="/前端笔记/css-day03/lieb.png" alt></p><h4 id="去掉列表默认的样式"><a href="#去掉列表默认的样式" class="headerlink" title="去掉列表默认的样式"></a>去掉列表默认的样式</h4><p>无序和有序列表前面默认的列表样式，在不同浏览器显示效果不一样，而且也比较难看，所以，我们一般上来就直接去掉这些列表样式就行了。 代码如下</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">li</span> &#123; <span class="hljs-attribute">list-style</span>: none; &#125;</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展@"></a>拓展@</h1><p>以下我们讲的CSS3部分新属性， 但是我们遵循的原则是，以下内容，不会影响我们页面布局， 只是样式更好看了而已。</p><h2 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h2><p><img src="/前端笔记/css-day03/%E5%9C%86%E8%A7%92.png" alt></p><ul><li>语法：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">border-radius</span><span class="hljs-selector-pseudo">:length</span>;</span><br></pre></td></tr></table></figure><ul><li><p>其中每一个值可以为 数值或百分比的形式。 </p></li><li><p>技巧： 让一个正方形  变成圆圈 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-radius: 50%;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day03/radio.png" alt></p></li></ul><ul><li><img src="/前端笔记/css-day03/%E5%9C%86%E8%A7%92-1589966481971.png" alt></li><li>以上效果图矩形的圆角， 就不要用 百分比了，因为百分比会是表示高度和宽度的一半。</li><li>而我们这里矩形就只用 用 高度的一半就好了。精确单位。</li></ul><h2 id="盒子阴影-CSS3"><a href="#盒子阴影-CSS3" class="headerlink" title="盒子阴影(CSS3)"></a>盒子阴影(CSS3)</h2><p><img src="/前端笔记/css-day03/%E9%98%B4%E5%BD%B1.png" alt></p><ul><li>语法:</li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day03/1498467567011.png" alt></p><ul><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 是默认的 但是不能写           想要内阴影可以写  inset </li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="line"><span class="hljs-comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line"><span class="hljs-comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line"><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>  <span class="hljs-built_in">rgba</span>(0, 0, 0, .4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业的开始。</p><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例： </p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">font-size</span>: 12<span class="hljs-selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 并集选择器，每个选择器声明必须独占一行。</p><p>示例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【建议】 一般情况情况下，选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* good */</span></span><br><span class="line"><span class="hljs-selector-id">#username</span> <span class="hljs-selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="hljs-selector-class">.comment</span> <span class="hljs-selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* bad */</span></span><br><span class="line"><span class="hljs-selector-class">.page</span> <span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.login</span>  <span class="hljs-selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="hljs-selector-class">.comment</span> <span class="hljs-selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* good */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* bad */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性定义后必须以分号结尾。</p><p>示例：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* good */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* bad */</span></span><br><span class="line"><span class="hljs-selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.盒子模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/css-day03/day3.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day02/"/>
    <id>http://www.itfool.cn/前端笔记/css-day02/</id>
    <published>2020-05-20T08:06:33.000Z</published>
    <updated>2020-05-20T09:07:46.761Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.CSS选择器</p></blockquote><p><img src="/前端笔记/css-day02/day2.png" alt></p><a id="more"></a><p>今天我们围绕一个 导航栏案例进行学习知识点。</p><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><h2 id="今日重点："><a href="#今日重点：" class="headerlink" title="今日重点："></a>今日重点：</h2><ul><li>复合选择器<ul><li>后代选择器</li><li>并集选择器</li></ul></li><li>标签显示模式</li><li>CSS背景<ul><li>背景位置</li></ul></li><li>CSS三大特性<ul><li>优先级</li></ul></li></ul><p> 目标</p><ul><li><p>理解</p><ul><li>理解css复合选择器分别的应用场景</li></ul></li><li><p>应用</p><ul><li>使用后代选择器给元素添加样式</li><li>使用并集选择器给元素添加样式</li><li>使用伪类选择器</li></ul></li></ul><p><strong>为什么要学习css复合选择器</strong></p><p>  CSS选择器分为 基础选择器 和 复合选择器 ，但是基础选择器不能满足我们实际开发中，快速高效的选择标签。</p><ul><li>目的是为了可以选择更准确更精细的目标元素标签。</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li></ul><h2 id="后代选择器（重点）"><a href="#后代选择器（重点）" class="headerlink" title="后代选择器（重点）"></a>后代选择器（重点）</h2><ul><li><p>概念：</p><p>后代选择器又称为包含选择器</p></li><li><p>作用：</p><p>用来选择元素或元素组的<strong>子孙后代</strong></p></li><li><p>其写法就是把外层标签写在前面，内层标签写在后面，中间用<strong>空格</strong>分隔，先写父亲爷爷，在写儿子孙子。 </p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父级 子级&#123;属性:属性值;属性:属性值;&#125;</span><br></pre></td></tr></table></figure><ul><li>语法：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class h3&#123;color:red;font-size:16px;&#125;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/hou.png" alt></p><ul><li>当标签发生嵌套时，内层标签就成为外层标签的后代。</li><li>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。</li></ul><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><ul><li><p>作用：</p><p>子元素选择器只能选择作为某元素<strong>子元素(亲儿子)</strong>的元素。</p></li><li><p>其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 <code>&gt;</code> 进行连接</p></li><li><p>语法：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class&gt;h3&#123;color:red;font-size:14px;&#125;</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/zi1.png" alt></p><p><strong>pink老师一句话说出他们</strong></p><blockquote><p>这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p></blockquote><p>白话：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><ul><li><p>条件</p><p>交集选择器由两个选择器构成，找到的标签必须满足：既有标签一的特点，也有标签二的特点。</p></li></ul><p><img src="/前端笔记/css-day02/jiaoji.png" alt></p><ul><li>语法：</li></ul><p><img src="/前端笔记/css-day02/jiao.png" alt></p><ul><li>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<strong>不能有空格</strong>，如h3.special。</li></ul><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。  即…又…的意思</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。</span><br></pre></td></tr></table></figure><p>用的相对来说比较少，不太建议使用。</p><h2 id="并集选择器（重点）"><a href="#并集选择器（重点）" class="headerlink" title="并集选择器（重点）"></a>并集选择器（重点）</h2><ul><li>应用：<ul><li>如果某些选择器定义的相同样式，就可以利用并集选择器，可以让代码更简洁。</li></ul></li><li>并集选择器（CSS选择器分组）是各个选择器通过<code>,</code>连接而成的，通常用于集体声明。</li><li>语法：</li></ul><p><img src="/前端笔记/css-day02/bing.png" alt></p><ul><li><p>任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。</p></li><li><p>记忆技巧：</p><p>并集选择器通常用于集体声明  ，逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为 和的意思。</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  </span><br><span class="line">表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 </span><br><span class="line">通常用于集体声明。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/hu.gif" alt>他和他，在一起， 在一起    一起的意思</p><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav"</span>&gt;</span>   </span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>公司首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>公司简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>公司产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sitenav"</span>&gt;</span>    </span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"site-l"</span>&gt;</span>左侧侧导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"site-r"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不修改以上结构代码的前提下，完成以下任务：</p><ol><li>链接 登录 的颜色为红色</li><li>主导航栏里面的所有的链接改为橙色    </li><li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。</li></ol><h2 id="链接伪类选择器（重点）"><a href="#链接伪类选择器（重点）" class="headerlink" title="链接伪类选择器（重点）"></a>链接伪类选择器（重点）</h2><p> 伪类选择器：</p><p> 为了和我们刚才学的类选择器相区别<br>类选择器是一个点 比如 .demo {}<br>而我们的伪类 用 2个点 就是 冒号  比如  :link{}    伪娘 </p><p>作用：</p><p>用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><p>因为伪类选择器很多，比如链接伪类，结构伪类等等。我们这里先给大家讲解链接伪类选择器。</p><ul><li>a:link      /* 未访问的链接 */</li><li>a:visited   /* 已访问的链接 */</li><li>a:hover     /* 鼠标移动到链接上 */</li><li>a:active    /* 选定的链接 */</li></ul><p>  <strong>注意</strong></p><ul><li>写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。否则可能引起错误。  </li><li>记忆法  <ul><li><strong>l</strong>o<strong>v</strong>e   <strong>ha</strong>te     爱上了讨厌    </li><li><strong>lv *<em>包包   非常 *</em>ha</strong>o   </li></ul></li><li>因为叫链接伪类，所以都是 利用交集选择器  a:link    a:hover  </li><li>因为a链接浏览器具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li><li>实际工作开发中，我们很少写全四个状态，一般我们写法如下：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">a</span> &#123;   <span class="hljs-comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line"><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="line"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="line"><span class="hljs-attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;   <span class="hljs-comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="hljs-attribute">color</span>: red; <span class="hljs-comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择元素后代</td><td>是选择所有的子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr><tr><td>子代选择器</td><td>选择 最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>&gt;</strong>   .nav&gt;p</td></tr><tr><td>交集选择器</td><td>选择两个标签交集的部分</td><td>既是 又是</td><td>较少</td><td><strong>没有符号</strong>  p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的选择器</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .header</td></tr><tr><td>链接伪类选择器</td><td>给链接更改状态</td><td></td><td>较多</td><td>重点记住 a{} 和 a:hover  实际开发的写法</td></tr></tbody></table><h1 id="标签显示模式（display）重点"><a href="#标签显示模式（display）重点" class="headerlink" title="标签显示模式（display）重点"></a>标签显示模式（display）重点</h1><p>目标：</p><ul><li>理解<ul><li>标签的三种显示模式</li><li>三种显示模式的特点以及区别</li><li>理解三种显示模式的相互转化</li></ul></li><li>应用<ul><li>实现三种显示模式的相互转化</li></ul></li></ul><h2 id="什么是标签显示模式"><a href="#什么是标签显示模式" class="headerlink" title="什么是标签显示模式"></a>什么是标签显示模式</h2><ul><li><p>什么是标签的显示模式？</p><p>标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个</p></li><li><p>作用： </p><p>我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p></li><li><p>标签的类型(分类)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。</p></li></ul><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><ul><li>例：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/12%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0.png" alt></p><ul><li>块级元素的特点</li></ul><p>（1）比较霸道，自己独占一行</p><p>（2）高度，宽度、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器（父级宽度）的100%</p><p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p><ul><li>注意：<ul><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，特别是 p 不能放div </li><li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li></ul></li></ul><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><ul><li>例：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/13%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0.png" alt></p><ul><li>行内元素的特点：</li></ul><p>（1）相邻行内元素在一行上，一行可以显示多个。</p><p>（2）高、宽直接设置是无效的。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p><p>  <img src="/前端笔记/css-day02/w-1589962975224.jpg" alt>    注意：</p><ul><li>链接里面不能再放链接。</li><li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li></ul><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><ul><li>例：</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/css-day02/14%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0.png" alt></p><ul><li><p>行内块元素的特点：</p><p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p></li></ul><h2 id="三种模式总结区别"><a href="#三种模式总结区别" class="headerlink" title="三种模式总结区别"></a>三种模式总结区别</h2><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><ul><li>块转行内：display:inline;</li><li>行内转块：display:block;</li><li>块、行内元素转换为行内块： display: inline-block;</li></ul><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h1 id="行高那些事（line-height）"><a href="#行高那些事（line-height）" class="headerlink" title="行高那些事（line-height）"></a>行高那些事（line-height）</h1><p>目标</p><ul><li>理解<ul><li>能说出 行高  和 高度  三种关系</li><li>能简单理解为什么行高等于高度单行文字会垂直居中</li></ul></li><li>应用<ul><li>使用行高实现单行文字垂直居中</li><li>能会测量行高</li></ul></li></ul><h2 id="行高测量"><a href="#行高测量" class="headerlink" title="行高测量"></a>行高测量</h2><p>行高的测量方法：</p><p> <img src="/前端笔记/css-day02/line1.png" alt></p><p><img src="/前端笔记/css-day02/line2.png" alt></p><h2 id="单行文本垂直居中"><a href="#单行文本垂直居中" class="headerlink" title="单行文本垂直居中"></a>单行文本垂直居中</h2><p> 行高我们利用最多的一个地方是： 可以让单行文本在盒子中垂直居中对齐。</p><blockquote><p><strong>文字的行高等于盒子的高度。</strong></p></blockquote><p>这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。</p><p>行高   =  上距离 +  内容高度  + 下距离 </p><p> <img src="/前端笔记/css-day02/1.png" alt></p><p>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p><p><strong>行高和高度的三种关系</strong></p><ul><li>如果 行高 等 高度  文字会 垂直居中</li><li>如果行高 大于 高度   文字会 偏下 </li><li>如果行高小于高度   文字会  偏上 </li></ul><h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>目标</p><ul><li>理解<ul><li>背景的作用</li><li>css背景图片和插入图片的区别</li></ul></li><li>应用<ul><li>通过css背景属性，给页面元素添加背景样式</li><li>能设置不同的背景图片位置</li></ul></li></ul><h2 id="背景颜色-color"><a href="#背景颜色-color" class="headerlink" title="背景颜色(color)"></a>背景颜色(color)</h2><ul><li><p>语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color:颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure></li></ul><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><ul><li>语法： </li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : none | url (url)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>none</td><td align="center">无背景图（默认的）</td></tr><tr><td>url</td><td align="center">使用绝对或相对地址指定背景图像</td></tr></tbody></table><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : url(images/demo.png);</span><br></pre></td></tr></table></figure><ul><li>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</li></ul><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><ul><li>语法： </li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>repeat</td><td align="center">背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td align="center">背景图像不平铺</td></tr><tr><td>repeat-x</td><td align="center">背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td align="center">背景图像在纵向平铺</td></tr></tbody></table><h2 id="背景位置-position-重点"><a href="#背景位置-position-重点" class="headerlink" title="背景位置(position) 重点"></a>背景位置(position) 重点</h2><ul><li>语法： </li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th align="center">值</th></tr></thead><tbody><tr><td>length</td><td align="center">百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td align="center">top | center | bottom | left | center | right   方位名词</td></tr></tbody></table><ul><li>注意：<ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词，另一个值默认居中对齐。</li><li>如果position 后面是精确坐标， 那么第一个，肯定是 x  第二的一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul></li></ul><p><strong>实际工作用的最多的，就是背景图片居中对齐了。</strong></p><p>练习1：</p><p>背景大图</p><p>练习2：</p><p>小图片在盒子左侧垂直居中</p><h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><ul><li><p>背景附着就是解释背景是滚动的还是固定的</p></li><li><p>语法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>scroll</td><td align="center">背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td align="center">背景图像固定</td></tr></tbody></table><h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><ul><li>background：属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</li><li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li><li>语法：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">transparent</span> <span class="hljs-selector-tag">url</span>(<span class="hljs-selector-tag">image</span><span class="hljs-selector-class">.jpg</span>) <span class="hljs-selector-tag">repeat-y</span>  <span class="hljs-selector-tag">scroll</span> <span class="hljs-selector-tag">center</span> <span class="hljs-selector-tag">top</span> ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>导航栏案例</p><h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><ul><li>语法：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">rgba</span>(0, 0, 0, 0<span class="hljs-selector-class">.3</span>);</span><br></pre></td></tr></table></figure><ul><li>最后一个参数是alpha 透明度  取值范围 0~1之间</li><li>我们习惯把0.3 的 0 省略掉  这样写  background: rgba(0, 0, 0, .3);</li><li>注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</li><li>因为是CSS3 ，所以 低于 ie9 的版本是不支持的。</li></ul><h2 id="背景总结"><a href="#背景总结" class="headerlink" title="背景总结"></a>背景总结</h2><table><thead><tr><th>属性</th><th align="left">作用</th><th align="left">值</th></tr></thead><tbody><tr><td>background-color</td><td align="left">背景颜色</td><td align="left">预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td align="left">背景图片</td><td align="left">url(图片路径)</td></tr><tr><td>background-repeat</td><td align="left">是否平铺</td><td align="left">repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td align="left">背景位置</td><td align="left">length/position    分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td></tr><tr><td>background-attachment</td><td align="left">背景固定还是滚动</td><td align="left">scroll/fixed</td></tr><tr><td>背景简写</td><td align="left">更简单</td><td align="left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td></tr><tr><td>背景透明</td><td align="left">让盒子半透明</td><td align="left">background: rgba(0,0,0,0.3);   后面必须是 4个值</td></tr></tbody></table><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>目标：</p><ul><li>理解<ul><li>能说出css样式冲突采取的原则</li><li>能说出那些常见的样式会有继承</li></ul></li><li>应用<ul><li>能写出CSS优先级的算法</li><li>能会计算常见选择器的叠加值</li></ul></li></ul><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p><img src="/前端笔记/css-day02/20%E5%B1%82%E5%8F%A0%E6%80%A7.png" alt></p><ul><li><p>概念：</p><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p></li><li><p>原则：</p><ul><li>样式冲突，遵循的原则是<strong>就近原则。</strong> 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ul></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS层叠性最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/css-day02/hai.gif" alt></p><h2 id="5-2-CSS继承性"><a href="#5-2-CSS继承性" class="headerlink" title="5.2 CSS继承性"></a>5.2 CSS继承性</h2><p><img src="/前端笔记/css-day02/21%E7%BB%A7%E6%89%BF%E6%80%A7.png" alt></p><ul><li><p>概念：</p><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p><p> 想要设置一个可继承的属性，只需将它应用于父元素即可。</p></li></ul><p>简单的理解就是：  子承父业。</p><ul><li><strong>注意</strong>：<ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li><li>子元素可以继承父元素的样式（<strong>text-，font-，line-这些元素开头的可以继承，以及color属性</strong>）</li></ul></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS继承性口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/css-day02/shu.gif" alt></p><h2 id="CSS优先级（重点）"><a href="#CSS优先级（重点）" class="headerlink" title="CSS优先级（重点）"></a>CSS优先级（重点）</h2><p><img src="/前端笔记/css-day02/22%E4%BC%98%E5%85%88%E7%BA%A7.png" alt></p><ul><li><p>概念：</p><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时，</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题。</li></ul></li></ul><h4 id="权重计算公式"><a href="#权重计算公式" class="headerlink" title="权重计算公式"></a>权重计算公式</h4><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</p><table><thead><tr><th>标签选择器</th><th>计算权重公式</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0,0,0,0</td></tr><tr><td>每个元素（标签选择器）</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式 style=””</td><td>1,0,0,0</td></tr><tr><td>每个!important  重要的</td><td>∞ 无穷大</td></tr></tbody></table><ul><li>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </li><li>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</li><li>div {<pre><code>color: pink!important;  </code></pre>}</li></ul><h4 id="权重叠加"><a href="#权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h4><p>我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。</p><p>就是一个简单的加法计算</p><ul><li><p>div ul  li   ——&gt;      0,0,0,3</p></li><li><p>.nav ul li   ——&gt;      0,0,1,2</p></li><li><p>a:hover      —–—&gt;   0,0,1,1</p></li><li><p>.nav a       ——&gt;      0,0,1,1</p><p><img src="/前端笔记/css-day02/w.jpg" alt> 注意： </p></li></ul><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li></ol><h4 id="继承的权重是0"><a href="#继承的权重是0" class="headerlink" title="继承的权重是0"></a>继承的权重是0</h4><p>这个不难，但是忽略很容易绕晕。其实，我们修改样式，一定要看该标签有没有被选中。</p><p>1） 如果选中了，那么以上面的公式来计权重。谁大听谁的。<br>2） 如果没有选中，那么权重是0，因为继承的权重为0.</p><h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><p><strong>CSS注释规则：</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 &quot;/*&quot; 标记开始注释，在内容的结尾使用 &quot;*/&quot;结束。</span><br></pre></td></tr></table></figure><p>   例如：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line"> <span class="hljs-comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.CSS选择器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/css-day02/day2.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/css-day01/"/>
    <id>http://www.itfool.cn/前端笔记/css-day01/</id>
    <published>2020-05-20T08:02:20.000Z</published>
    <updated>2020-05-20T09:11:23.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.CSS初识</p></blockquote><p><img src="/前端笔记/css-day01/zong1.jpg" alt></p><a id="more"></a><h1 id="CSS层叠样式表"><a href="#CSS层叠样式表" class="headerlink" title="CSS层叠样式表"></a>CSS层叠样式表</h1><p> 目标</p><ul><li>理解<ul><li>css的目的作用</li><li>css的三种引入方式</li></ul></li><li>应用<ul><li>css三种引用方式的书写</li><li>通过样式规则给标签添加简单的样式</li></ul></li></ul><h1 id="HTML的局限性"><a href="#HTML的局限性" class="headerlink" title="HTML的局限性"></a>HTML的局限性</h1><p>说起HTML，这其实是个非常单纯的家伙， 他只关注内容的语义， </p><p>很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点： <strong>丑</strong>。</p><p>这个是一个外国比较早的购物网站</p><p> <img src="/前端笔记/css-day01/640.webp" alt></p><p>有些人就忍受不了了，你就不能把自己打扮得漂亮一点吗？</p><p>HTML说，我试试…</p><p>如果要改变下 高度或者变一个颜色，就需要大量重复操作</p><p> <img src="/前端笔记/css-day01/css.png" alt></p><p><strong>总结：</strong></p><ul><li>HTML满足不了设计者的需求</li><li>操作html属性不方便</li><li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li></ul><h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><ul><li>让我们的网页更加丰富多彩，布局更加灵活自如。   </li><li>CSS的最大贡献就是：  让 HTML 从样式中脱离，  实现了 HTML 专注去做 结构呈现，样式交给css </li></ul><blockquote><p><strong>我们理想中的结果： 结构(html)与样式(css)相分离</strong>  这句话要记住</p></blockquote><p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p><p> <img src="/前端笔记/css-day01/baby.jpeg" alt></p><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><ul><li><p>概念：</p><p>​    CSS(Cascading Style Sheets)  ，通常称为CSS样式表或层叠样式表（级联样式表）</p></li><li><p>作用：</p><ul><li>主要用于<strong>设置</strong> HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及<strong>版面的布局和外观显示样式。</strong></li><li>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</li></ul></li></ul><h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要书写css样式，那css样式书写的位置在哪呢？</span><br></pre></td></tr></table></figure><h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><ul><li><p>概念：</p><p>​    称行内样式、行间样式.</p><p>​    是通过标签的style属性来设置元素的样式</p></li></ul><ul><li>其基本语法格式如下：</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际上任何HTML标签都拥有style属性，用来设置行内式。</p><ul><li>案例：</li></ul><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style="color: red; font-size: 12px;"&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>style其实就是标签的属性</li><li>样式属性和值中间是<code>:</code></li><li>多组属性值之间用<code>;</code>隔开。</li><li>只能控制当前的标签和以及嵌套在其中的字标签，造成代码冗余</li></ul></li><li>缺点：<ul><li>没有实现样式和结构相分离</li></ul></li></ul><h2 id="内部样式表（内嵌样式表）"><a href="#内部样式表（内嵌样式表）" class="headerlink" title="内部样式表（内嵌样式表）"></a>内部样式表（内嵌样式表）</h2><ul><li><p>概念：</p><p>​    称内嵌式</p><p>​    是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义</p></li><li><p>其基本语法格式如下：</p></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/CSS"</span>&gt;</span></span><br><span class="line">    选择器（选择的标签） &#123; </span><br><span class="line">      属性1: 属性值1;</span><br><span class="line">      属性2: 属性值2; </span><br><span class="line">      属性3: 属性值3;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line"> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line"> <span class="hljs-attribute">color</span>: red;</span><br><span class="line"> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><ul><li>style标签一般位于head标签中，当然理论上他可以放在HTML文档的任何地方。</li><li>type=”text/css”  在html5中可以省略。</li><li>只能控制当前的页面</li></ul></li><li><p>缺点：</p><p>没有彻底分离</p></li></ul><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-selector-tag">style</span>&gt;</span><br><span class="line">   <span class="hljs-comment">/*选择器&#123;属性:值；&#125;*/</span></span><br><span class="line">   <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">     <span class="hljs-attribute">color</span>:<span class="hljs-number">#06C</span>; </span><br><span class="line">     <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;  </span><br><span class="line">   &#125;  <span class="hljs-comment">/*文字的颜色是 蓝色*/</span></span><br><span class="line">   <span class="hljs-selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">color</span>:<span class="hljs-number">#900</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">color</span>:<span class="hljs-number">#090</span>; </span><br><span class="line">    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-selector-tag">body</span> &#123; </span><br><span class="line">    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(bg2.jpg);</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>展示</strong></p><p><img src="/前端笔记/css-day01/tihui.png" alt></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思考：</span><br><span class="line"> 1. 如何实现结构与样式完全分离？</span><br><span class="line"> 2. 如何实现<span class="hljs-selector-tag">css</span>样式共享？</span><br></pre></td></tr></table></figure><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><ul><li><p>概念：</p><p>​    称链入式</p><p>​    是将所有的样式放在一个或多个以<strong>.CSS</strong>为扩展名的外部样式表文件中，</p><p>​    通过link标签将外部样式表文件链接到HTML文档中</p></li><li><p>其基本语法格式如下：</p></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"css文件路径"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：  <ul><li>link 是个单标签</li><li>link标签需要放在head头部标签中，并且指定link标签的三个属性</li></ul></li></ul><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>rel</td><td align="left">定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</td></tr><tr><td>type</td><td align="left">定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。我们都可以省略</td></tr><tr><td>href</td><td align="left">定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</td></tr></tbody></table><p><img src="/前端笔记/css-day01/10css%E5%A4%96%E9%93%BE%E5%BC%8F.jpg" alt></p><h2 id="三种样式表总结（位置）"><a href="#三种样式表总结（位置）" class="headerlink" title="三种样式表总结（位置）"></a>三种样式表总结（位置）</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h3 id="团队约定-代码风格"><a href="#团队约定-代码风格" class="headerlink" title="团队约定-代码风格"></a>团队约定-代码风格</h3><p>样式书写一般有两种：</p><ul><li>一种是紧凑格式 (Compact)</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">color</span>: deeppink;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>一种是展开格式（推荐）</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="line"><span class="hljs-attribute">color</span>: deeppink;</span><br><span class="line">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="团队约定-代码大小写"><a href="#团队约定-代码大小写" class="headerlink" title="团队约定-代码大小写"></a>团队约定-代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 推荐 */</span></span><br><span class="line"><span class="hljs-selector-tag">h3</span>&#123;</span><br><span class="line"><span class="hljs-attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 不推荐 */</span></span><br><span class="line"><span class="hljs-selector-tag">H3</span>&#123;</span><br><span class="line"><span class="hljs-attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结CSS样式规则"><a href="#总结CSS样式规则" class="headerlink" title="总结CSS样式规则"></a>总结CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，</p><p>具体格式如下：                                          </p><p><img src="/前端笔记/css-day01/gz.png" alt></p><p><strong>总结：</strong></p><ol><li>选择器用于指定CSS样式作用的HTML标签，花括号内是对该对象设置的具体样式。</li><li>属性和属性值以“键值对”的形式出现。</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</li><li>属性和属性值之间用英文“:”连接。</li><li>多个“键值对”之间用英文“;”进行区分。</li></ol><h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="@拓展阅读"></a>@拓展阅读</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNTAzMjcxNg%3D%3D&mid=2651424749&idx=1&sn=f58bca144f50bff00ba7d1675cc8b8e7&scene=4" target="_blank" rel="noopener">CSS的发展史</a></p><blockquote><p>第01阶段.前端基础.CSS基础选择器</p></blockquote><h1 id="CSS选择器（重点）"><a href="#CSS选择器（重点）" class="headerlink" title="CSS选择器（重点）"></a>CSS选择器（重点）</h1><p> 学习目标：</p><ul><li>理解<ul><li>能说出选择器的作用</li><li>id选择器和类选择器的区别</li></ul></li><li>应用<ul><li>能够使用基础选择器给页面元素添加样式</li></ul></li></ul><h2 id="CSS选择器作用（重点）"><a href="#CSS选择器作用（重点）" class="headerlink" title="CSS选择器作用（重点）"></a>CSS选择器作用（重点）</h2><p><img src="/前端笔记/css-day01/ax.png" alt></p><p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p><p>很多， 比如 一只眼睛的一组，剩下的一组  </p><h3 id="选择器的作用"><a href="#选择器的作用" class="headerlink" title="选择器的作用"></a>选择器的作用</h3><p>​    找到特定的HTML页面元素</p><p><strong>pink老师一句话说出他们： ※※※※</strong></p><blockquote><p>*<em>CSS选择器干啥的？   选择标签用的， 把我们想要的标签选择出来 *</em>  必须记住的</p></blockquote><p>css 就是 分两件事， 选对人，  做对事。 </p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">h3</span> &#123; </span><br><span class="line"><span class="hljs-attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是2件事， 把  h3选出来， 然后 把它变成了 红色。 以后我们都这么干。</p><p>选择器分为基础选择器和 复合选择器，我们这里先讲解一下 基础选择器。</p><h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul><li><p>概念：</p><p>标签选择器（元素选择器）是指用<strong>HTML标签名</strong>称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p></li><li><p>语法：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><ul><li><p>作用：</p><p>标签选择器 可以把某一类标签<strong>全部</strong>选择出来  比如所有的div标签  和 所有的 span标签</p></li><li><p>优点：</p><p>是能快速为页面中同类型的标签统一样式</p></li><li><p>缺点：</p><p>不能设计差异化样式。</p></li></ul><p><strong>总结 口诀：</strong></p><p>   标签选择器，<br>   页面同选起。<br>   直接写标签，<br>   全部不放弃。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思考： 如果想要差异化选择不同的标签，怎么办呢？ 就是说 我想单独选一个或者某几个标签呢？</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名.</p><ul><li><p>语法：</p><ul><li>类名选择器</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.类名  &#123;   </span><br><span class="line">    属性1:属性值1; </span><br><span class="line">    属性2:属性值2; </span><br><span class="line">    属性3:属性值3;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>标签</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&apos;类名&apos;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>优点：</p><ul><li>可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 </li></ul></li><li><p>注意</p><ul><li>类选择器使用“.”（英文点号）进行标识，后面紧跟类名(自定义，我们自己命名的)</li><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不要纯数字、中文等命名， 尽量使用英文字母来表示。</li></ul></li></ul><p>命名规范：  见附件（Web前端开发规范手册.doc）</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><ul><li><p><strong>记忆口诀</strong></p><p>差异化选择<br>一个或多个<br>上面点定义<br>类名别写错<br>谁用谁调用<br>class来做。</p><p>嘿嘿，工作类最多。</p></li></ul><p><strong>课堂案例：</strong></p><p> <img src="/前端笔记/css-day01/go.png" alt></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.blue</span> &#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.red</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.orange</span> &#123;</span></span><br><span class="line">color: orange;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css"><span class="hljs-selector-class">.green</span> &#123;</span></span><br><span class="line">color: green;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"blue"</span>&gt;</span>G<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>o<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"orange"</span>&gt;</span>o<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"blue"</span>&gt;</span>g<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"green"</span>&gt;</span>l<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>e<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类选择器特殊用法-多类名"><a href="#类选择器特殊用法-多类名" class="headerlink" title="类选择器特殊用法- 多类名"></a>类选择器特殊用法- 多类名</h3><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><p><img src="/前端笔记/css-day01/lei.png" alt></p><p>注意：</p><ul><li>各个类名中间用空格隔开。</li><li>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pink fontWeight font20"</span>&gt;</span>亚瑟<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"font20"</span>&gt;</span>刘备<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"font14 pink"</span>&gt;</span>安其拉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"font14"</span>&gt;</span>貂蝉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>id选择器使用<code>#</code>进行标识，后面紧跟id名</p><ul><li><p>其基本语法格式如下：</p><ul><li><p>id选择器</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></li><li><p>标签</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;id名&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p></li><li><p>用法基本和类选择器相同。</p></li></ul><h4 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h4><p> <img src="/前端笔记/css-day01/zfb.jpg" alt></p><ul><li>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。<ul><li>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</li><li>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</li></ul></li></ul><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><p><strong>pink老师 总结他们</strong></p><ul><li>类选择器我们在修改样式中，用的最多。</li><li>id选择器一般用于页面唯一性的元素身上，经常和我们后面学习的javascript 搭配使用。</li></ul><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul><li><p>概念</p><p>通配符选择器用<code>*</code>号表示，  *   就是 选择所有的标签      他是所有选择器中作用范围最广的，能匹配页面中所有的元素。</p></li><li><p>其基本语法格式如下：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;                    <span class="hljs-comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;                   <span class="hljs-comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><p>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p></li></ul><h3 id="基础选择器总结"><a href="#基础选择器总结" class="headerlink" title="基础选择器总结"></a>基础选择器总结</h3><table><thead><tr><th>选择器</th><th>作用</th><th>缺点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签，比如p</td><td>不能差异化选择</td><td>较多</td><td>p { color：red;}</td></tr><tr><td>类选择器</td><td>可以选出1个或者多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav { color: red; }</td></tr><tr><td>id选择器</td><td>一次只能选择器1个标签</td><td>只能使用一次</td><td>不推荐使用</td><td>#nav {color: red;}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多，有部分不需要</td><td>不推荐使用</td><td>* {color: red;}</td></tr></tbody></table><p>基础选择器我们一共学了4个，  每个都有自己的价值， 可能再某个地方都能用到。但是如果说，一定要找个最常用的，那么，肯定是类选择器。</p><h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><p>选择器</p><ul><li>尽量少用通用选择器 <code>*</code></li><li>尽量少用 ID 选择器</li><li>不使用无具体语义定义的标签选择器 div span </li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">li &#123;&#125;</span><br><span class="line">p&#123;&#125;</span><br><span class="line"></span><br><span class="line">/* 不推荐 */</span><br><span class="line">*&#123;&#125;</span><br><span class="line">#jdc &#123;&#125;</span><br><span class="line">div&#123;&#125;   因为div 没有语义，我们尽量少用</span><br></pre></td></tr></table></figure><blockquote><p>第01阶段.前端基础.CSS字体样式</p></blockquote><h1 id="CSS字体样式属性调试工具"><a href="#CSS字体样式属性调试工具" class="headerlink" title="CSS字体样式属性调试工具"></a>CSS字体样式属性调试工具</h1><p> 目标</p><ul><li>应用<ul><li>使用css字体样式完成对字体的设置</li><li>使用css外观属性给页面元素添加样式</li><li>使用常用的emment语法</li><li>能够使用开发人员工具代码调试</li></ul></li></ul><h1 id="1-font字体"><a href="#1-font字体" class="headerlink" title="1.font字体"></a>1.font字体</h1><h2 id="font-size-大小"><a href="#font-size-大小" class="headerlink" title="font-size:大小"></a>font-size:大小</h2><ul><li><p>作用：</p><p>font-size属性用于设置字号</p></li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>单位：</p><ul><li>可以使用相对长度单位，也可以使用绝对长度单位。</li><li>相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。</li></ul></li></ul><p><img src="/前端笔记/css-day01/dd.png" alt></p><p><strong>注意：</strong></p><ul><li>我们文字大小以后，基本就用px了，其他单位很少使用</li><li>谷歌浏览器默认的文字大小为16px</li><li>但是不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小</li></ul><h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><ul><li><p>作用：</p><p>font-family属性用于设置哪一种字体。</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123; font-family:&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li>网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑</li><li>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体， 如果都没有，则以我们电脑默认的字体为准。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/前端笔记/css-day01/good.png" alt>常用技巧：</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">2. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">3. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">4. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure><h3 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h3><p><img src="/前端笔记/css-day01/shs.png" alt></p><ul><li><p>为什么使用 Unicode字体</p><ul><li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li><li>xp 系统不支持 类似微软雅黑的中文。</li></ul></li><li><p>解决：</p><ul><li><p>方案一： 你可以使用英文来替代。 比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。</p></li><li><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure></li></ul></li></ul><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><ul><li>在html中如何将字体加粗我们可以用标签来实现<ul><li>使用 b  和 strong 标签是文本加粗。</li></ul></li><li>可以使用CSS 来实现，但是CSS 是没有语义的。</li></ul><table><thead><tr><th>属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td>normal</td><td align="left">默认值（不加粗的）</td></tr><tr><td>bold</td><td align="left">定义粗体（加粗的）</td></tr><tr><td>100~900</td><td align="left">400 等同于 normal，而 700 等同于 bold  我们重点记住这句话</td></tr></tbody></table><p>提倡：</p><p>  我们平时更喜欢用数字来表示加粗和不加粗。</p><h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><ul><li>在html中如何将字体倾斜我们可以用标签来实现<ul><li>字体倾斜除了用 i  和 em 标签，</li></ul></li><li>可以使用CSS 来实现，但是CSS 是没有语义的</li></ul><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>normal</td><td align="left">默认值，浏览器会显示标准的字体样式  font-style: normal;</td></tr><tr><td>italic</td><td align="left">浏览器会显示斜体的字体样式。</td></tr></tbody></table><p><img src="/前端笔记/css-day01/good-1589961647864.png" alt>小技巧： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure><h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置</p><ul><li>基本语法格式如下：</li></ul><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="hljs-attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<strong>空格</strong>隔开。</li><li>其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</li></ul></li></ul><h2 id="font总结"><a href="#font总结" class="headerlink" title="font总结"></a>font总结</h2><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">font-size</td><td align="left">字号</td><td align="left">我们通常用的单位是px 像素，一定要跟上单位</td></tr><tr><td align="left">font-family</td><td align="left">字体</td><td align="left">实际工作中按照团队约定来写字体</td></tr><tr><td align="left">font-weight</td><td align="left">字体粗细</td><td align="left">记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td></tr><tr><td align="left">font-style</td><td align="left">字体样式</td><td align="left">记住倾斜是 italic     不倾斜 是 normal  工作中我们最常用 normal</td></tr><tr><td align="left">font</td><td align="left">字体连写</td><td align="left">1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td></tr></tbody></table><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><ul><li><p>作用：</p><p>color属性用于定义文本的颜色，</p></li><li><p>其取值方式有如下3种：</p></li></ul><table><thead><tr><th align="left">表示表示</th><th align="left">属性值</th></tr></thead><tbody><tr><td align="left">预定义的颜色值</td><td align="left">red，green，blue，还有我们的御用色 pink</td></tr><tr><td align="left">十六进制</td><td align="left">#FF0000，#FF6600，#29D794</td></tr><tr><td align="left">RGB代码</td><td align="left">rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><ul><li><p>注意</p><p>我们实际工作中， 用 16进制的写法是最多的，而且我们更喜欢简写方式比如  #f00 代表红色</p></li></ul><h2 id="text-align-文本水平对齐方式"><a href="#text-align-文本水平对齐方式" class="headerlink" title="text-align:文本水平对齐方式"></a>text-align:文本水平对齐方式</h2><ul><li><p>作用：</p><p>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性</p></li><li><p>其可用属性值如下：</p></li></ul><table><thead><tr><th>属性</th><th align="center">解释</th></tr></thead><tbody><tr><td>left</td><td align="center">左对齐（默认值）</td></tr><tr><td>right</td><td align="center">右对齐</td></tr><tr><td>center</td><td align="center">居中对齐</td></tr></tbody></table><ul><li><p>注意：</p><p>是让盒子里面的内容水平居中， 而不是让盒子居中对齐</p></li></ul><h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><ul><li><p>作用：</p><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p></li><li><p>单位：</p><ul><li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li></ul></li><li><p>技巧：</p></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，行距比字号大7.8像素左右就可以了。</span><br><span class="line">line-height: 24px;</span><br></pre></td></tr></table></figure><h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><ul><li><p>作用：</p><p>text-indent属性用于设置首行文本的缩进，</p></li><li><p>属性值</p><ul><li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值,</li><li>建议使用em作为设置单位。</li></ul></li></ul><p><strong>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</strong></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">      <span class="hljs-comment">/*行间距*/</span></span><br><span class="line">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="line">      <span class="hljs-comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class="line">      <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="text-decoration-文本的装饰"><a href="#text-decoration-文本的装饰" class="headerlink" title="text-decoration 文本的装饰"></a>text-decoration 文本的装饰</h2><p>text-decoration   通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。 取消下划线（最常用）</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td></tr><tr><td>overline</td><td>定义文本上的一条线。（不用）</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。（不常用）</td></tr></tbody></table><h2 id="CSS外观属性总结"><a href="#CSS外观属性总结" class="headerlink" title="CSS外观属性总结"></a>CSS外观属性总结</h2><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">color</td><td align="left">颜色</td><td align="left">我们通常用  十六进制   比如 而且是简写形式 #fff</td></tr><tr><td align="left">line-height</td><td align="left">行高</td><td align="left">控制行与行之间的距离</td></tr><tr><td align="left">text-align</td><td align="left">水平对齐</td><td align="left">可以设定文字水平的对齐方式</td></tr><tr><td align="left">text-indent</td><td align="left">首行缩进</td><td align="left">通常我们用于段落首行缩进2个字的距离   text-indent: 2em;</td></tr><tr><td align="left">text-decoration</td><td align="left">文本修饰</td><td align="left">记住 添加 下划线  underline  取消下划线  none</td></tr></tbody></table><h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p><strong>此工具是我们的必备工具，以后代码出了问题</strong></p><p><strong>我们首先第一反应就是：</strong></p><ul><li>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</li><li>菜单：   右击网页空白出—检查</li></ul><p><img src="/前端笔记/css-day01/11%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%B7%A5%E5%85%B7.jpg" alt></p><ul><li>通过开发人员工具小指针工具，查找页面元素</li><li>左侧是html页面结构，右侧是css样式</li></ul><p><img src="/前端笔记/css-day01/good-1589961690478.png" alt>小技巧：</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li><li>ctrl + 0  复原浏览器大小</li></ol><h1 id="sublime快捷操作emmet语法"><a href="#sublime快捷操作emmet语法" class="headerlink" title="sublime快捷操作emmet语法"></a>sublime快捷操作emmet语法</h1><p>Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。</p><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p></li><li><p>如果生成的div 类名是有顺序的， 可以用 自增符号  $     </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.demo$*3        </span><br><span class="line">&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h1><p><img src="/前端笔记/css-day01/css1.png" alt></p><h1 id="拓展阅读-1"><a href="#拓展阅读-1" class="headerlink" title="拓展阅读@"></a>拓展阅读@</h1><p><a href="https://www.w3cplus.com/tools/emmet-cheat-sheet.html" target="_blank" rel="noopener">emment语法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.CSS初识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/css-day01/zong1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://www.itfool.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html-day05/"/>
    <id>http://www.itfool.cn/前端笔记/html-day05/</id>
    <published>2020-05-20T07:24:23.000Z</published>
    <updated>2020-05-20T07:30:43.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.列表和表单</p></blockquote><h1 id="1-列表标签（重点）"><a href="#1-列表标签（重点）" class="headerlink" title="1. 列表标签（重点）"></a>1. 列表标签（重点）</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p>理解</p><ul><li>无序列表的应用场景</li><li>自定义列表的应用场景</li></ul></li><li><p>应用</p><ul><li><p>无序列表语法</p></li><li><p>自定义列表语法</p></li></ul></li></ul><a id="more"></a>    <p>问？</p><p>前面我们知道表格一般用于数据展示的，但是网页中还是有很多跟表格类似的布局，如下图~~ 我们用什么做呢？</p><p> <img src="/前端笔记/html-day05/lili.png" alt></p><p>答：</p><p>答案是列表， 那什么是列表？  表格是用来显示数据的，那么列表就是用来布局的。 因为非常整齐和自由</p><p> <img src="/前端笔记/html-day05/list.png" alt></p><ul><li><p>概念：</p><p>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表</p></li><li><p>特点：</p><p>列表最大的特点就是  整齐 、整洁、 有序，跟表格类似，但是他可组合自由度会更高。</p></li></ul><h2 id="1-1-无序列表-ul-（重点）"><a href="#1-1-无序列表-ul-（重点）" class="headerlink" title="1.1 无序列表 ul （重点）"></a>1.1 无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p><p> <img src="/前端笔记/html-day05/ul.png" alt></p><p><strong>脚下留心：</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</span><br></pre></td></tr></table></figure><h2 id="1-2-有序列表-ol-（了解）"><a href="#1-2-有序列表-ol-（了解）" class="headerlink" title="1.2  有序列表 ol （了解）"></a>1.2  有序列表 ol （了解）</h2><p><img src="/前端笔记/html-day05/gold.png" alt></p><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  所有特性基本与ul 一致。  但是实际中比 无序列表 用的少很多。</p><h2 id="1-3-自定义列表（理解）"><a href="#1-3-自定义列表（理解）" class="headerlink" title="1.3 自定义列表（理解）"></a>1.3 自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词2<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词2解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词2解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="/前端笔记/html-day05/2.jpg" alt> </p><p>用的还可以：</p><p><img src="/前端笔记/html-day05/mix.png" alt></p><p><img src="/前端笔记/html-day05/09%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8.jpg" alt></p><h2 id="1-4-列表总结"><a href="#1-4-列表总结" class="headerlink" title="1.4 列表总结"></a>1.4 列表总结</h2><table><thead><tr><th>标签名</th><th align="center">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><ul></ul></td><td align="center"><strong>无序标签</strong></td><td align="left">里面只能包含li    没有顺序，我们以后布局中最常用的列表</td></tr><tr><td><ol></ol></td><td align="center">有序标签</td><td align="left">里面只能包含li    有顺序， 使用情况较少</td></tr><tr><td><dl></dl></td><td align="center">自定义列表</td><td align="left">里面有2个兄弟， dt 和 dd</td></tr></tbody></table><p>我们现在还没有学布局，现在只要保证2个点：</p><ol><li>学会什么时候用无序列表， 学会什么时候用自定义列表</li><li>无序列表和自定义列表代码怎么写？</li><li>具体的我们刚才看的布局，等我们学了css 在来全面布局。</li></ol><h1 id="2-表单标签-掌握"><a href="#2-表单标签-掌握" class="headerlink" title="2. 表单标签(掌握)"></a>2. 表单标签(掌握)</h1><p>目标：</p><ul><li>能写出最常用的注册类表单</li><li>能说出input表单常见属性</li></ul><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p><p><img src="/前端笔记/html-day05/car.jpg" alt></p><p>*<em>作用： *</em></p><p>表单目的是为了收集用户信息。</p><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><blockquote><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p></blockquote><p><img src="/前端笔记/html-day05/bd.png" alt></p><p>  *<em>表单控件： *</em></p><p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>  <strong>提示信息：</strong></p><p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>  <strong>表单域：</strong>  </p><p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="2-1-input-控件-重点"><a href="#2-1-input-控件-重点" class="headerlink" title="2.1 input 控件(重点)"></a>2.1 input 控件(重点)</h2><ul><li><p>语法：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"属性值"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"你好"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>input 输入的意思 </li><li>&lt;input /&gt;标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li><li>除了type属性还有别的属性</li></ul></li><li><p>常用属性：</p></li></ul><p><img src="/前端笔记/html-day05/input.png" alt></p><h4 id="1-type-属性"><a href="#1-type-属性" class="headerlink" title="1. type 属性"></a>1. type 属性</h4><ul><li>这个属性通过改变值，可以决定了你属于那种input表单。</li><li>比如 type = ‘text’  就表示 文本框 可以做 用户名， 昵称等。</li><li>比如 type = ‘password’  就是表示密码框   用户输入的内容 是不可见的。</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> /&gt;</span> </span><br><span class="line">密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-value属性-值"><a href="#2-value属性-值" class="headerlink" title="2. value属性   值"></a>2. value属性   值</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入用户名"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li></ul><h4 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3. name属性"></a>3. name属性</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">“username”</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。  页面中的表单很多，name主要作用就是用于区别不同的表单。</p><ul><li>name属性后面的值，是我们自己定义的。</li></ul><ul><li>radio  如果是一组，我们必须给他们命名相同的名字 name   这样就可以多个选其中的一个啦</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span>  /&gt;</span>男</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><ul><li>name属性，我们现在用的较少， 但是，当我们学ajax 和后台的时候，是必须的。</li></ul><h4 id="4-checked属性"><a href="#4-checked属性" class="headerlink" title="4. checked属性"></a>4. checked属性</h4><ul><li>表示默认选中状态。  较常见于 单选按钮和复选按钮。</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">性    别:</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">"checked"</span> /&gt;</span>男</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><p>上面这个，表示就默认选中了 男 这个单选按钮</p><h4 id="5-input-属性小结"><a href="#5-input-属性小结" class="headerlink" title="5. input 属性小结"></a>5. input 属性小结</h4><table><thead><tr><th>属性</th><th align="left">说明</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td align="left">表单类型</td><td>用来指定不同的控件类型</td></tr><tr><td>value</td><td align="left">表单值</td><td>表单里面默认显示的文本</td></tr><tr><td>name</td><td align="left">表单名字</td><td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td></tr><tr><td>checked</td><td align="left">默认选中</td><td>表示那个单选或者复选按钮一开始就被选中了</td></tr></tbody></table><h2 id="2-2-label标签-理解"><a href="#2-2-label标签-理解" class="headerlink" title="2.2 label标签(理解)"></a>2.2 label标签(理解)</h2><p><strong>目标：</strong></p><p>label标签主要目的是为了提高用户体验。 为用户提高最优秀的服务。</p><p><strong>概念：</strong></p><p>label 标签为 input 元素定义标注（标签）。</p><p><strong>作用：</strong> </p><p> 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p><p><strong>如何绑定元素呢？</strong></p><ol><li>第一种用法就是用label直接包括input表单。</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span> 用户名： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"usename"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入用户名"</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   适合单个表单选择</p><ol start="2"><li>第二种用法 for 属性规定 label 与哪个表单元素绑定。</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sex"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">"sex"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p> 当我们鼠标点击 label标签里面的文字时， 光标会定位到指定的表单里面</p></blockquote><h2 id="2-3-textarea控件-文本域"><a href="#2-3-textarea控件-文本域" class="headerlink" title="2.3 textarea控件(文本域)"></a>2.3 textarea控件(文本域)</h2><p><img src="/前端笔记/html-day05/textarea.png" alt></p><ul><li>语法：</li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> &gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>作用：</p><p>通过textarea控件可以轻松地创建多行文本输入框.</p><p>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</p></li></ul><h4 id="文本框和文本域区别"><a href="#文本框和文本域区别" class="headerlink" title="文本框和文本域区别"></a>文本框和文本域区别</h4><table><thead><tr><th align="left">表单</th><th align="center">名称</th><th align="center">区别</th><th align="right">默认值显示</th><th align="right">用于场景</th></tr></thead><tbody><tr><td align="left">input type=”text”</td><td align="center">文本框</td><td align="center">只能显示一行文本</td><td align="right">单标签，通过value显示默认值</td><td align="right">用户名、昵称、密码等</td></tr><tr><td align="left">textarea</td><td align="center">文本域</td><td align="center">可以显示多行文本</td><td align="right">双标签，默认值写到标签中间</td><td align="right">留言板</td></tr></tbody></table><h2 id="2-4-select下拉列表"><a href="#2-4-select下拉列表" class="headerlink" title="2.4 select下拉列表"></a>2.4 select下拉列表</h2><p><strong>目的：</strong></p><p>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表.</p><p><img src="/前端笔记/html-day05/sele.png" alt></p><p><strong>语法：</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：</li></ul><ol><li>&lt;select&gt;  中至少包含一对 option </li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li><li>但是我们实际开发会用的比较少</li></ol><h1 id="3-form表单域"><a href="#3-form表单域" class="headerlink" title="3. form表单域"></a>3. form表单域</h1><ul><li><p>收集的用户信息怎么传递给服务器？</p><p>通过form表单域</p></li><li><p>目的：</p><p>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</p></li></ul><p>*<em>语法: *</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"url地址"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"提交方式"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><table><thead><tr><th>属性</th><th align="left">属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td align="left">url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td>method</td><td align="left">get/post</td><td>用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td>name</td><td align="left">名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单。</td></tr></tbody></table><p><strong>注意:</strong>  </p><p>每个表单都应该有自己表单域。我们现在做页面，不写看不到效果，但是 如果后面学 ajax 后台交互的时候，必须需要 form表单域。</p><h2 id="2-6-团队约定"><a href="#2-6-团队约定" class="headerlink" title="2.6 团队约定"></a>2.6 团队约定</h2><h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul><li>元素属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><p><em>推荐：</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">"checked"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text</span>  /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text'</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">checked</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-综合案例（注册页面）"><a href="#4-综合案例（注册页面）" class="headerlink" title="4.综合案例（注册页面）"></a>4.综合案例（注册页面）</h1><p><img src="/前端笔记/html-day05/bdd.png" alt></p><h1 id="5-查文档"><a href="#5-查文档" class="headerlink" title="5. 查文档"></a>5. 查文档</h1><p>经常查阅文档是一个非常好的学习习惯。</p><p>W3C :  <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.列表和表单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-列表标签（重点）&quot;&gt;&lt;a href=&quot;#1-列表标签（重点）&quot; class=&quot;headerlink&quot; title=&quot;1. 列表标签（重点）&quot;&gt;&lt;/a&gt;1. 列表标签（重点）&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表的应用场景&lt;/li&gt;
&lt;li&gt;自定义列表的应用场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;无序列表语法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义列表语法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://www.itfool.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html-day04/"/>
    <id>http://www.itfool.cn/前端笔记/html-day04/</id>
    <published>2020-05-20T07:05:52.000Z</published>
    <updated>2020-05-20T07:16:01.395Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.表格</p></blockquote><h1 id="HTML-第二天目标"><a href="#HTML-第二天目标" class="headerlink" title="HTML 第二天目标"></a>HTML 第二天目标</h1><p> 能够利用表格、列表和表单完成注册页面的综合案例</p><ul><li>能出说表格用来做什么的</li><li>能说出列表用来做什么的</li><li>能说出表单用来做什么的</li></ul><p>为了让我们页面显示的更加整齐，我们需要学习三个表（表格、表单、列表）</p><a id="more"></a><p><img src="/前端笔记/html-day04/guifan-1589958612551.png" alt></p><h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p>目标：</p><ul><li>理解：<ul><li>能说出表格用来做什么的</li><li>表格的基本结构组成</li></ul></li><li>应用：<ul><li>能够熟练写出n行n列的表格</li><li>能简单的合并单元格<br>​<br><img src="/前端笔记/html-day04/tt-1589958592186.png" alt></li></ul></li></ul><p><strong>表格作用：</strong></p><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，<strong>常见显示、展示表格式数据。</strong></p><p>因为它可以让数据显示的非常的规整，可读性非常好。</p><p><strong>特别是后台展示数据的时候表格运用是否熟练就显得很重要</strong>，一个清爽简约的表格能够把繁杂的数据表现得很有条理，虽然 div 布局也可以做到，但是总没有表格来得方便。</p><p><img src="/前端笔记/html-day04/table-1589958564036.png" alt></p><p>ps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  </p><h2 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1. 创建表格"></a>1. 创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。</p><p><strong>创建表格的基本语法：</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要深刻体会表格、行、单元格他们的构成。</p><p>在上面的语法中包含基本的三对HTML标签，分别为 table、tr、td，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释</p><ol><li><p>table用于定义一个表格标签。</p></li><li><p>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</p></li><li><p>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</p></li><li><p>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。</p></li></ol><p><img src="/前端笔记/html-day04/07table%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7.jpg" alt></p><p>*<em>总结： *</em></p><ul><li>表格的主要目的是用来显示特殊数据的</li><li>一个完整的表格有表格标签（table），行标签（tr），单元格标签（td）组成，没有列的标签</li></ul><ul><li><tr></tr>中只能嵌套<td></td> 类的单元格</li><li><td></td>标签，他就像一个容器，可以容纳所有的元素</li></ul><h2 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2. 表格属性"></a>2. 表格属性</h2><p>表格有部分属性我们不常用，这里重点记住 cellspacing 、 cellpadding。</p><p><img src="/前端笔记/html-day04/tt-1589958646349.png" alt></p><p>我们经常有个说法，是三参为0，  平时开发的我们这三个参数    border  cellpadding  cellspacing  为  0</p><p><img src="/前端笔记/html-day04/07table%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7-1589958668773.jpg" alt></p><p><strong>案例1：</strong></p><p><img src="/前端笔记/html-day04/%E8%A1%A8%E6%A0%BC%E6%95%88%E6%9E%9C01.png" alt></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"500"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>55<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郭富城<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>52<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>58<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>黎明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>刘晓庆<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>63<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-表头单元格标签th"><a href="#3-表头单元格标签th" class="headerlink" title="3. 表头单元格标签th"></a>3. 表头单元格标签th</h2><ul><li><p>作用：</p><ul><li>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中</li></ul></li><li><p>语法：</p><ul><li>只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。 </li></ul><p><img src="/前端笔记/html-day04/th.png" alt></p></li></ul><p><strong>案例2：</strong></p><p>​    效果图</p><p><img src="/前端笔记/html-day04/tht.png" alt></p><p>​    代码：</p><hr><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"500"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">"0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电话<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小王<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>110<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>th 也是一个单元格   只不过和普通的 td单元格不一样，它会让自己里面的文字居中且加粗</p></blockquote><h2 id="4-表格标题caption"><a href="#4-表格标题caption" class="headerlink" title="4. 表格标题caption"></a>4. 表格标题caption</h2><p><strong>定义和用法</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>我是表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>*<em>注意： *</em></p><ol><li>caption 元素定义<strong>表格标题</strong>，通常这个标题会被居中且显示于表格之上。</li><li>caption 标签必须紧随 table 标签之后。</li><li>这个标签只存在 表格里面才有意义。你是风儿我是沙</li></ol><p><strong>案例3：</strong></p><p>根据要求完成以下案例：</p><p><img src="/前端笔记/html-day04/pa.png" alt></p><h2 id="5-合并单元格-难点"><a href="#5-合并单元格-难点" class="headerlink" title="5. 合并单元格(难点)"></a>5. 合并单元格(难点)</h2><p>合并单元格是我们比较常用的一个操作，但是不会合并的很复杂。</p><p><img src="/前端笔记/html-day04/he.jpg" alt></p><h3 id="5-1-合并单元格2种方式"><a href="#5-1-合并单元格2种方式" class="headerlink" title="5.1 合并单元格2种方式"></a>5.1 合并单元格2种方式</h3><ul><li>跨行合并：rowspan=”合并单元格的个数”      </li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p><img src="/前端笔记/html-day04/08table%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC.jpg" alt></p><h3 id="5-2-合并单元格顺序"><a href="#5-2-合并单元格顺序" class="headerlink" title="5.2 合并单元格顺序"></a>5.2 合并单元格顺序</h3><blockquote><p>*<em>合并的顺序我们按照   先上 后下     先左  后右 的顺序 *</em></p></blockquote><p>跟我们以前学习汉字的书写顺序完全一致。</p><h3 id="5-3-合并单元格三步曲"><a href="#5-3-合并单元格三步曲" class="headerlink" title="5.3 合并单元格三步曲"></a>5.3 合并单元格三步曲</h3><ol><li>先确定是跨行还是跨列合并</li><li>根据 先上 后下   先左  后右的原则找到目标单元格    然后写上 合并方式 还有 要合并的单元格数量  比如 ： <td colspan="3">   </td></li><li>删除多余的单元格 单元格      </li></ol><h2 id="6-总结表格"><a href="#6-总结表格" class="headerlink" title="6. 总结表格"></a>6. 总结表格</h2><table><thead><tr><th>标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><table></table></td><td align="left">表格标签</td><td align="left">就是一个四方的盒子</td></tr><tr><td></td></tr><tr></tr><td align="left">表格行标签</td><td align="left">行标签要再table标签内部才有意义</td><tr><td></td><td></td><td align="left">单元格标签</td><td align="left">单元格标签是个容器级元素，可以放任何东西</td></tr><tr><td><th></th></td><td align="left">表头单元格标签</td><td align="left">它还是一个单元格，但是里面的文字会居中且加粗</td></tr><tr><td><caption></caption></td><td align="left">表格标题标签</td><td align="left">表格的标题，跟着表格一起走，和表格居中对齐</td></tr><tr><td>clospan 和 rowspan</td><td align="left">合并属性</td><td align="left">用来合并单元格的</td></tr></tbody></table><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。</li><li>表格的学习要求：  能手写表格结构，并且能简单合并单元格。</li></ol><h2 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7. 拓展阅读@"></a>7. 拓展阅读@</h2><h3 id="表格划分结构（了解）"><a href="#表格划分结构（了解）" class="headerlink" title="表格划分结构（了解）"></a>表格划分结构（了解）</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day04/thead.png" alt></p><p><strong>注意：</strong></p><ol><li><thead></thead>：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有 <tr> 标签！</tr></thead></li><li><tbody></tbody>：用于定义表格的主体。放数据本体 。</li><li><tfoot></tfoot>放表格的脚注之类。</li><li>以上标签都是放到table标签中。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.表格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;HTML-第二天目标&quot;&gt;&lt;a href=&quot;#HTML-第二天目标&quot; class=&quot;headerlink&quot; title=&quot;HTML 第二天目标&quot;&gt;&lt;/a&gt;HTML 第二天目标&lt;/h1&gt;&lt;p&gt; 能够利用表格、列表和表单完成注册页面的综合案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能出说表格用来做什么的&lt;/li&gt;
&lt;li&gt;能说出列表用来做什么的&lt;/li&gt;
&lt;li&gt;能说出表单用来做什么的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了让我们页面显示的更加整齐，我们需要学习三个表（表格、表单、列表）&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://www.itfool.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html-day03/"/>
    <id>http://www.itfool.cn/前端笔记/html-day03/</id>
    <published>2020-05-19T06:55:44.000Z</published>
    <updated>2020-05-19T08:48:51.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.HTML常用标签</p></blockquote><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p>理解：</p><ul><li>相对路径三种形式</li></ul></li><li><p>应用</p><ul><li>排版标签</li><li>文本格式化标签</li><li>图像标签</li><li>链接</li><li>相对路径，绝对路径的使用<a id="more"></a><h1 id="1-HTML常用标签"><a href="#1-HTML常用标签" class="headerlink" title="1. HTML常用标签"></a>1. HTML常用标签</h1></li></ul><p>首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p><p>HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p></li></ul><h2 id="1-1-排版标签"><a href="#1-1-排版标签" class="headerlink" title="1.1 排版标签"></a>1.1 排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="1）标题标签h-熟记"><a href="#1）标题标签h-熟记" class="headerlink" title="1）标题标签h (熟记)"></a>1）标题标签h (熟记)</h3><p> 单词缩写：  head   头部. 标题       title  文档标题</p><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p><p><strong>标题标签语义：</strong>  作为标题使用，并且依据重要性递减</p><p>其基本语法格式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p>  <img src="/前端笔记/html-day03/h.png" alt></p><p><strong>小结 :</strong></p><ul><li>加了标题的文字会变的加粗，字号也会依次变大</li><li>一行是只能放一个标题的</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">传智播客学前端，</span><br><span class="line">　　 前端入门亦简单。</span><br><span class="line">　　 简单知识简单看，</span><br><span class="line">　　 重点勤练写三遍。</span><br><span class="line">　　 标题一共六级选，</span><br><span class="line">　　 具体效果刷新见。</span><br><span class="line">　　        ------pink老师</span><br></pre></td></tr></table></figure><h3 id="2）段落标签p-熟记"><a href="#2）段落标签p-熟记" class="headerlink" title="2）段落标签p ( 熟记)"></a>2）段落标签p ( 熟记)</h3><p>单词缩写：  paragraph  段落  [ˈpærəgræf]    无须记这个单词</p><p><strong>作用语义：</strong></p><p>可以把 HTML 文档分割为若干段落</p><p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>  文本内容  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="3）水平线标签hr-认识"><a href="#3）水平线标签hr-认识" class="headerlink" title="3）水平线标签hr(认识)"></a>3）水平线标签hr(认识)</h3><p>单词缩写：  horizontal  横线    [ˌhɔrəˈzɑntl]    同上</p><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr>就是创建横跨网页水平线的标签。其基本语法格式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure><p> 在网页中显示默认样式的水平线。</p><p>课堂练习:新闻页面 </p><p><img src="/前端笔记/html-day03/sh.png" alt> </p><h3 id="4）换行标签br-熟记"><a href="#4）换行标签br-熟记" class="headerlink" title="4）换行标签br (熟记)"></a>4）换行标签br (熟记)</h3><p>单词缩写：  break   打断 ,换行</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这时如果还像在word中直接敲回车键换行就不起作用了。</p><p>此处有练习题</p><h3 id="5）div-和-span标签-重点"><a href="#5）div-和-span标签-重点" class="headerlink" title="5）div 和  span标签(重点)"></a>5）div 和  span标签(重点)</h3><p>div   span    是没有语义的     是我们网页布局主要的2个盒子   想必你听过  css+div</p><p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p><p>span   跨度，跨距；范围    </p><p>语法格式：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> 这是头部 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>今日价格<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他们两个都是盒子，用来装我们网页元素的， 只不过他们有区别，现在我们记住</p><ul><li>div标签  用来布局的，但是现在一行只能放一个div</li><li>span标签  用来布局的，一行上可以放好多个span</li></ul><p>后面后面讲显示模式的时候，会告诉大家</p><h3 id="排版标签总结"><a href="#排版标签总结" class="headerlink" title="排版标签总结"></a>排版标签总结</h3><table><thead><tr><th>标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><hx></hx></td><td align="left">标题标签</td><td align="left">作为标题使用，并且依据重要性递减</td></tr><tr><td><p></p></td><td align="left">段落标签</td><td align="left">可以把 HTML 文档分割为若干段落</td></tr><tr><td><hr></td><td align="left">水平线标签</td><td align="left">没啥可说的，就是一条线</td></tr><tr><td><br></td><td align="left">换行标签</td><td align="left"></td></tr><tr><td><div></div></td><td align="left">div标签</td><td align="left">用来布局的，但是现在一行只能放一个div</td></tr><tr><td><span></span></td><td align="left">span标签</td><td align="left">用来布局的，一行上可以放好多个span</td></tr></tbody></table><h2 id="1-2-文本格式化标签-熟记"><a href="#1-2-文本格式化标签-熟记" class="headerlink" title="1.2 文本格式化标签(熟记)"></a>1.2 文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><img src="/前端笔记/html-day03/BaiduNetdiskDownload/%25E9%25BB%2591%25E9%25A9%25AC/www.fxw.la_%2520WEB%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25A7%2586%25E9%25A2%2591%25E6%2595%2599%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580_9fxw.com/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/tab.png"><p><strong>区别：</strong></p><p> b  只是加粗        strong  除了可以加粗还有 强调的意思，  语义更强烈。</p><p>剩下的同理…    </p><blockquote><p>请同学们重点记住 前两组   加粗 和 倾斜   后面两组没记住回来查</p></blockquote><h2 id="1-3-标签属性"><a href="#1-3-标签属性" class="headerlink" title="1.3 标签属性"></a>1.3 标签属性</h2><p> <img src="/前端笔记/html-day03/ttt.jpg" alt></p><p>所谓属性就是<strong>外在特性</strong>  比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><ul><li>手机的颜色是黑色   </li><li>手机的尺寸是 8寸 </li><li>水平线的长度是 200  </li><li>图片的宽度 是  300    </li></ul><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> 属性<span class="hljs-attr">1</span>=<span class="hljs-string">"属性值1"</span> 属性<span class="hljs-attr">2</span>=<span class="hljs-string">"属性值2"</span> …&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">手机</span> 颜色=<span class="hljs-string">"红色"</span> 大小=<span class="hljs-string">"5寸"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">手机</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提倡：   尽量不使用 样式属性。   <img src="/前端笔记/html-day03/BaiduNetdiskDownload/%25E9%25BB%2591%25E9%25A9%25AC/www.fxw.la_%2520WEB%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25A7%2586%25E9%25A2%2591%25E6%2595%2599%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580_9fxw.com/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/sm.jpg"> </p><h2 id="1-4-图像标签img-重点"><a href="#1-4-图像标签img-重点" class="headerlink" title="1.4 图像标签img (重点)"></a>1.4 图像标签img (重点)</h2><p>单词缩写：   image  图像</p><p>要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img>以及和他相关的属性。（它是一个单身狗）</p><p>语法如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p><img src="/前端笔记/html-day03/BaiduNetdiskDownload/%25E9%25BB%2591%25E9%25A9%25AC/www.fxw.la_%2520WEB%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25A7%2586%25E9%25A2%2591%25E6%2595%2599%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580_9fxw.com/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/img.png"><p>border 后面我们会用css来做，这里童鞋们就记住这个border 单词就好了</p><p>*<em>注意: *</em></p><ol><li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>任何标签的属性都有默认值，省略该属性则取默认值。</li><li>采取  键值对 的格式   key=”value”  的格式  </li></ol><p>比如:  </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">正常的<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"cz.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">    带有边框的<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"cz.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"3"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">有提示文本的<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"cz.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"这是个小蒲公英"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">有替换文本的<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"cz.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"图片不存在"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>此处有练习题</p><p><strong>重点掌握点：</strong></p><ul><li><input disabled type="checkbox"> 请说出 图像标签那个属性是必须要写的？  img  src 图片的路径</li><li><input disabled type="checkbox"> 请说出 图像标签中 alt 和  title 属性区别？ alt 图片显示不出，文字就显示     title 鼠标经过图片的时候显示文字</li></ul><h2 id="1-5-链接标签-重点"><a href="#1-5-链接标签-重点" class="headerlink" title="1.5 链接标签(重点)"></a>1.5 链接标签(重点)</h2><p>单词缩写：  anchor 的缩写  [ˈæŋkə(r)] 。基本解释 锚, 铁锚 的</p><p>在HTML中创建超链接非常简单，只需用标签把文字包括起来就好。</p><p>语法格式：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"跳转目标"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>href</td><td align="left">用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td align="left">用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </li><li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><p><strong>重点掌握点：</strong></p><ul><li><input disabled type="checkbox"> 请说出 链接标签那个属性是必须要写的？  href</li><li><input disabled type="checkbox"> 请说出 如何新窗口打开这个一个链接网页的？ target=“_blank”</li></ul><h2 id="1-6-注释标签"><a href="#1-6-注释标签" class="headerlink" title="1.6 注释标签"></a>1.6 注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p><p>简单解释：</p><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><p>语法格式：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 注释语句 --&gt;</span>     快捷键是：    ctrl + /       或者 ctrl +shift + /</span><br></pre></td></tr></table></figure><p>注释重要性：</p><p><img src="/前端笔记/html-day03/zs.png" alt></p><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>注释是给人看的，目的是为了更好的解释这部分代码是干啥的， 程序是不执行这个代码的</p></blockquote><h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><p>一般用于简单的描述，如某些状态描述、属性描述等</p><p>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p><p><em>推荐：</em></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Comment Text --&gt;</span><br><span class="line">&lt;div&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;...&lt;/div&gt;&lt;!-- Comment Text --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&lt;!-- Comment Text --&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="2-路径-重点、难点"><a href="#2-路径-重点、难点" class="headerlink" title="2. 路径(重点、难点)"></a>2. 路径(重点、难点)</h1><p><img src="/前端笔记/html-day03/dt.png" alt></p><p>实际工作中，我们的文件不能随便乱放，否则用起来很难快速的找到他们，因此我们需要一个文件夹来管理他们。</p><p>*<em>目录文件夹： *</em></p><p>就是普通文件夹，里面只不过存放了我们做页面所需要的 相关素材，比如 html文件， 图片 等等。</p><p> <img src="/前端笔记/html-day03/g.png" alt></p><p>*<em>根目录 *</em>  </p><p>打开目录文件夹的第一层  就是 根目录 </p><p> <img src="/前端笔记/html-day03/gg.png" alt></p><p>页面中的图片会非常多， 通常我们再新建一个文件夹专门用于存放图像文件（images），这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。路径可以分为： 相对路径和绝对路径</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><table><thead><tr><th>路径分类</th><th align="center">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td>同一级路径</td><td align="center"></td><td align="left">只需输入图像文件的名称即可，如&lt;img src=”baidu.gif” /&gt;。<img src="/前端笔记/html-day03/04%E8%B7%AF%E5%BE%84%E5%90%8C%E7%9B%AE%E5%BD%95.jpg" alt></td></tr><tr><td>下一级路径</td><td align="center">“/”</td><td align="left">图像文件位于HTML文件同级文件夹下（例如文件夹名称为：images）                         如&lt;img src=”images/baidu.gif” /&gt;。  <img src="/前端笔记/html-day03/05%E4%B8%8B%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95.jpg" alt></td></tr><tr><td>上一级路径</td><td align="center">“../”</td><td align="left">在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，                    如&lt;img src=”../baidu.gif” /&gt;。 <img src="/前端笔记/html-day03/06%E8%B7%AF%E5%BE%84%E4%B8%8D%E5%90%8C-1589871777153.jpg" alt></td></tr></tbody></table><p>*<em>pink老师 一句话说出他们: *</em></p><blockquote><p>相对路径，是从代码所在的这个文件出发， 去寻找我们的目标文件的，而 我们所说的 上一级 下一级 同一级  简单说，就是 图片 位于 HTML 页面的位置</p></blockquote><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p><p><strong>注意：</strong></p><p>绝对路径用的较少，我们理解下就可以了。  但是要注意，它的写法 特别是符号  \  并不是 相对路径的   /    </p><h1 id="3-今日总结"><a href="#3-今日总结" class="headerlink" title="3. 今日总结"></a>3. 今日总结</h1><p>  每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;  能用常用标签，写出最简单的页面</p><p>学HTML 之前 觉得 很神秘  </p><p> <img src="/前端笔记/html-day03/z.png" alt></p><p>等你学完之后忽然发现</p><p> <img src="/前端笔记/html-day03/rh.jpg" alt></p><h1 id="5-拓展阅读"><a href="#5-拓展阅读" class="headerlink" title="5. @拓展阅读"></a>5. @拓展阅读</h1><h4 id="5-1-锚点定位-（难点）"><a href="#5-1-锚点定位-（难点）" class="headerlink" title="5.1 锚点定位 （难点）"></a>5.1 锚点定位 （难点）</h4><p>通过创建锚点链接，用户能够快速定位到目标内容。</p><p>创建锚点链接分为两步：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"two"</span>&gt;</span>第2集<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#id名"</span>&gt;</span>链接文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>创建链接文本（被点击的） （拉关系）  我也有一个姓毕的姥爷..</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#two"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day03/03a%E7%9B%AE%E6%A0%87.jpg" alt></p><p>快速记忆法：</p><p> 好比找个人办事，  首先找到他，然后拉关系，最后看效果。</p><h4 id="5-2-base-标签"><a href="#5-2-base-标签" class="headerlink" title="5.2 base 标签"></a>5.2 base 标签</h4><p><strong>语法：</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day03/base.png" alt></p><p>*<em>总结： *</em></p><ol><li>base 可以设置整体链接的打开状态   </li><li>base 写到  <head><meta name="generator" content="Hexo 3.9.0">  </head>  之间</li><li>把所有的连接 都默认添加 target=”_blank”</li></ol><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>全体链接~ 到 ~  全体集合  所有链接 以新窗口打开页面  ~   是 </p></blockquote><h4 id="5-3-预格式化文本pre标签"><a href="#5-3-预格式化文本pre标签" class="headerlink" title="5.3 预格式化文本pre标签"></a>5.3 预格式化文本pre标签</h4><pre> 标签可定义预格式化的文本。被包围在 <pre> 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  此例演示如何使用 pre 标签</span><br><span class="line"></span><br><span class="line">  对空行和 空格</span><br><span class="line"></span><br><span class="line">  进行控制</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>**pink老师 一句话说出他们:**> 所谓的预格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。 有了这个标签，里面的文字，会按照我们书写的模式显示，不需要段落和换行标签了。但是，比较少用，因为不好整体控制。#### 5.4 特殊字符 （理解） 一些特殊的符号，我们再html 里面很难或者 不方便直接 使用， 我们此时可以使用下面的替代代码。![](HTML-Day03/zifu.png)**虽然有很多，但是我们平时用的比较较少， 大家重点记住   空格    大于号 小于号   就可以了，剩下的回来查阅。****总结：**1. 是以**运算符**`&`开头,以**分号运算符**`;`结尾。2. 他们不是标签，而是符号。3. HTML 中不能使用小于号 “<” 和大于号 “>”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体**团队约定**   *推荐：*<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;more &amp;gt;&amp;gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>   *不推荐：*<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;more &gt;&gt; &lt;/a&gt;</span><br></pre></td></tr></table></figure>#### 5.5 html5发展之路 ![](HTML-Day03/html5.png)#### 5.6 什么是XHTMLXHTML 是更严格更纯净的 HTML 代码。- XHTML 指**可扩展超文本标签语言**（EXtensible HyperText Markup Language）。- XHTML 的目标是取代 HTML。- XHTML 与 HTML 4.01 几乎是相同的。- XHTML 是更严格更纯净的 HTML 版本。- XHTML 是作为一种 XML 应用被重新定义的 HTML。- XHTML 是一个 W3C 标准。#### 5.7 HTML和 XHTML之间有什么区别?- XHTML 指的是可扩展超文本标记语言- XHTML 与 HTML 4.01 几乎是相同的- XHTML 是更严格更纯净的 HTML 版本- XHTML 是以 XML 应用的方式定义的 HTML- XHTML 是 2001 年 1 月发布的 W3C 推荐标准- XHTML 得到所有主流浏览器的支持- XHTML 元素是以 XML 格式编写的 HTML 元素。XHTML是严格版本的HTML，例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。# 6. @深入阅读[HTML5的崛起之路](http://www.chinaz.com/manage/2015/0720/424831.shtml)# 7. 预习内容- 表格标签- 能够通过表格标签能够写出一个简版表格数据展示   例如：   ![](HTML-Day03/qq.png)    可以把你今天学习的内容放在表格内，再次作为总结</”></pre></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.HTML常用标签&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对路径三种形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排版标签&lt;/li&gt;
&lt;li&gt;文本格式化标签&lt;/li&gt;
&lt;li&gt;图像标签&lt;/li&gt;
&lt;li&gt;链接&lt;/li&gt;
&lt;li&gt;相对路径，绝对路径的使用&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://www.itfool.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html-day02/"/>
    <id>http://www.itfool.cn/前端笔记/html-day02/</id>
    <published>2020-05-18T09:06:54.000Z</published>
    <updated>2020-05-18T09:40:39.862Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.认识HTML</p></blockquote><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p>理解</p><ul><li>HTML标签的概念</li><li>HTML标签的分类</li><li>HTML标签的关系</li><li>HTML标签的语义化</li></ul></li><li><p>应用</p><ul><li>HTML骨架格式</li><li>sublime基本使用<a id="more"></a><h1 id="1-HTML-初识"><a href="#1-HTML-初识" class="headerlink" title="1. HTML 初识"></a>1. HTML 初识</h1></li></ul></li><li><p>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。</p></li><li><p>H（很）T（甜）M（蜜）L（啦）</p></li><li><p>HTML 不是一种编程语言，而是一种标记语言 (markup language)</p></li><li><p>标记语言是一套标记标签 (markup tag)</p></li></ul><p><strong>所谓超文本，有2层含义：</strong> </p><ol><li>因为它可以加入图片、声音、动画、多媒体等内容（*<em>超越文本限制 *</em>）</li><li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（*<em>超级链接文本 *</em>）。</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 我是一个大标题 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。</p></blockquote><p><strong>门外汉眼中的效果页面</strong></p><p><img src="/前端笔记/html-day02/title1.png" alt></p><p><strong>我们要做的html页面</strong></p><p><img src="/前端笔记/html-day02/title.png" alt></p><h2 id="1-1-HTML骨架格式"><a href="#1-1-HTML骨架格式" class="headerlink" title="1.1 HTML骨架格式"></a>1.1 HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p><p><img src="/前端笔记/html-day02/mess-1589793162385.png" alt></p><p>同理：HTML 有自己的语言语法骨架格式：（要遵循，要专业） 要求务必非常流畅的默写下来。。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>   </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>     </span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html骨架标签总结"><a href="#html骨架标签总结" class="headerlink" title="html骨架标签总结"></a>html骨架标签总结</h4><table><thead><tr><th>标签名</th><th align="center">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><html></html></td><td align="center">HTML标签</td><td align="left">页面中最大的标签，我们成为  根标签</td></tr><tr><td><head><meta name="generator" content="Hexo 3.9.0"></head></td><td align="center">文档的头部</td><td align="left">注意在head标签中我们必须要设置的标签是title</td></tr><tr><td><titile></titile></td><td align="center">文档的标题</td><td align="left">让页面拥有一个属于自己的网页标题</td></tr><tr><td><body></body></td><td align="center">文档的主体</td><td align="left">元素包含文档的所有内容，页面内容 基本都是放到body里面的</td></tr><tr><td><titile></titile></td><td align="center">文档的标题</td><td align="left">让页面拥有一个属于自己的网页标题</td></tr></tbody></table><p>*<em>课堂练习1： *</em>   </p><p>书写我们的第一个HTML 页面。</p><ol><li><p>新建一个demo 的 TXT 文件。</p></li><li><p>里面写入刚才的HTML 骨架。  </p></li><li><p>把后缀名改为 .HTML。</p></li><li><p>右击–谷歌浏览器打开。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>   </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>     </span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">          黑马洗练  一飞冲天  月薪过万 你我之间 </span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day02/01html%E9%AA%A8%E6%9E%B6.jpg" alt></p></li></ol><p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p><p><img src="/前端笔记/html-day02/pig.png" alt></p><h4 id="团队约定大小写"><a href="#团队约定大小写" class="headerlink" title="团队约定大小写"></a>团队约定大小写</h4><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p><p><em>推荐：</em></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;     </span><br><span class="line">        &lt;title&gt;我的第一个页面&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;HEAD&gt;     </span><br><span class="line">        &lt;TITLE&gt;我的第一个页面&lt;/TITLE&gt;</span><br><span class="line">&lt;/HEAD&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-HTML元素标签分类"><a href="#1-2-HTML元素标签分类" class="headerlink" title="1.2 HTML元素标签分类"></a>1.2 HTML元素标签分类</h2><p><strong>标签：</strong></p><p>在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;html&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。</p><p><strong>分类：</strong></p><ol><li>常规元素（双标签）</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span>   比如 <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  我是文字  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。</li><li>和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</li><li>我们以后接触的基本都是双标签</li></ul><ol start="2"><li>空元素（单标签）</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> /&gt;</span>  比如  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>空元素 用单标签来表示， 简单点说，就是里面不需要包含内容， 只有一个开始标签不需要关闭。</li><li>这种单身狗标签非常少，一共没多少，我们多记忆就好</li></ul><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>世界上单身狗毕竟是少数的， 大部分还是喜欢成双成对，不要拉下你的另外一半，对待一个双标签要有始有终。</p></blockquote><h2 id="1-3-HTML标签关系"><a href="#1-3-HTML标签关系" class="headerlink" title="1.3 HTML标签关系"></a>1.3 HTML标签关系</h2><p>主要针对于<strong>双标签</strong> 的相互关系分为两种：  请大家务必熟悉记住这种标签关系，因为后面我们标签嵌套特别多，很容易弄混他们的关系。</p><ol><li>嵌套关系</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day02/father.jpg" alt></p><p>2.并列关系</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day02/xiong.jpg" alt></p><p><strong>倡议：</strong> </p><blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>html双标签 可以分为  有 一种是 父子级 包含关系的标签      一种是 兄弟级 并列关系的标签</p></blockquote><h2 id="1-4-课堂一练"><a href="#1-4-课堂一练" class="headerlink" title="1.4 课堂一练"></a>1.4 课堂一练</h2><p>*<em>请问下列哪组标签关系是错误的？ *</em></p><ul><li><input disabled type="checkbox"> <head><meta name="generator" content="Hexo 3.9.0"> </head><body> </body></li></ul><ul><li><input disabled type="checkbox"> <div> <strong></strong> </div></li></ul><ul><li><input disabled type="checkbox"> <head><meta name="generator" content="Hexo 3.9.0"> <title></title></head> </li></ul><ul><li><input disabled type="checkbox"> <body> <div></div> </body></li></ul><h1 id="2-代码开发工具（书写代码）"><a href="#2-代码开发工具（书写代码）" class="headerlink" title="2. 代码开发工具（书写代码）"></a>2. 代码开发工具（书写代码）</h1><ul><li><p>为了提高我们的开发效率</p></li><li><p>减少代码的出错我们不提倡用记事本开发，我们有更好的犀利哥。</p><p><img src="/前端笔记/html-day02/s-1589793486979.png" alt></p></li><li><p>Dreamweaver</p></li><li><p>SublimeText</p></li><li><p>WebStorm</p></li><li><p>HBuilder</p></li><li><p>VScode</p></li></ul><p>有人说：</p><p>  普通青年    Dreamweaver</p><p>  文艺青年    sublime</p><p>  高手和傻子  用记事本</p><p>  其实。。。。</p><p>  <img src="/前端笔记/html-day02/node.png" alt></p><p>感觉： 这个feel 倍儿爽 feel feel倍儿爽 爽爽爽爽！</p><p> <img src="/前端笔记/html-day02/shuang.gif" alt></p><p>sublime有非常多的优点， 最开心的就是非常轻量级，打开速度超快，后面更高的功能，后面再接触。</p><p><strong>sublime生成html骨架小技巧</strong></p><ul><li>双击打开软件</li><li>新建文件（ctrl+n）</li><li>保存（ctrl+s）,保存为：文件名.html （ 注意 后缀名必须是 .html ) </li><li>放大缩小代码  ctrl+ 加号 键     和 ctrl +   减号键     或者 按住 ctrl  在 滚动鼠标滚轮</li><li>生成页面骨架结构<ul><li>html: 5    按下tab键    或者  </li><li>!    按下tab键</li></ul></li><li>在浏览器中预览页面<ul><li>右键在  浏览器中打开</li></ul></li></ul><h1 id="3-文档类型-lt-DOCTYPE-gt"><a href="#3-文档类型-lt-DOCTYPE-gt" class="headerlink" title="3. 文档类型&lt;!DOCTYPE&gt;"></a>3. 文档类型&lt;!DOCTYPE&gt;</h1><p>同学你用啥手机？你咋回答？</p><p><strong>用法：</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><!DOCTYPE><p> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</html></p><p>*<em>注意：  *</em></p><p>一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p><p><strong>pink老师 一句话说出他们:</strong></p>   <!DOCTYPE html><p>  就是告诉浏览器按照HTML5 规范解析页面.</p><p><strong>团队约定：</strong></p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="4-页面语言lang"><a href="#4-页面语言lang" class="headerlink" title="4. 页面语言lang"></a>4. 页面语言lang</h1><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>  指定html 语言种类</span><br></pre></td></tr></table></figure><p>最常见的2个：</p><ol><li><code>en</code>定义语言为英语</li><li><code>zh-CN</code>定义语言为中文</li></ol><p><strong>pink老师 一句话说出他们:</strong></p><blockquote> <html lang="zh-CN">  指定该html标签 内容 所用的语言为中文</html></blockquote><p><strong>团队约定：</strong></p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 考虑浏览器和操作系统的兼容性，目前仍然使用 zh-CN 属性值</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>@拓展阅读：</strong></p><p>简单来说，可能对于程序来说没有太大的作用，但是它可以告诉浏览器，搜索引擎，一些处理Html的程序对页面语言内容来做一些对应的处理或者事情。<br>比如可以</p><ul><li>根据根据lang属性来设定不同语言的css样式，或者字体</li><li>告诉搜索引擎做精确的识别</li><li>让语法检查程序做语言识别</li><li>帮助翻译工具做识别</li><li>帮助网页阅读程序做识别<br>等等</li></ul><h1 id="5-字符集"><a href="#5-字符集" class="headerlink" title="5. 字符集"></a>5. 字符集</h1><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符集(Character set)是多个字符的集合。</span><br><span class="line"></span><br><span class="line">计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</span><br></pre></td></tr></table></figure><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><ul><li>gb2312 简单中文  包括6763个汉字</li><li>BIG5   繁体中文 港澳台等用</li><li>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</li><li>UTF-8则基本包含全世界所有国家需要用到的字符</li><li><strong>这句代码非常关键， 是必须要写的代码，否则可能引起乱码的情况。</strong></li></ul><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>这句话是让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</p></blockquote><p><strong>团队约定：</strong></p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一般情况下统一使用 &quot;UTF-8&quot; 编码, 请尽量统一写成标准的 &quot;UTF-8&quot;，不要写成 &quot;utf-8&quot; 或 &quot;utf8&quot; 或 &quot;UTF8&quot;。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="6-HTML标签的语义化"><a href="#6-HTML标签的语义化" class="headerlink" title="6. HTML标签的语义化"></a>6. HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p><ol><li>方便代码的阅读和维护</li><li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </li><li>使用语义化标签会具有更好地搜索引擎优化 </li></ol><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>根据标签的语义，在合适的地方给一个最为合理的标签。</p></blockquote><p><img src="/前端笔记/html-day02/02%E8%AF%AD%E4%B9%89%E5%8C%96.jpg" alt></p><p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。(  裸奔起来一样好看 )</p><p>遵循的原则：先确定语义的HTML ，再选合适的CSS。所以，<strong>我们接下来学习html标签，要根据语义去记忆。</strong> HTML网页中任何元素的实现都要依靠HTML标签。</p><h1 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7. 拓展阅读@"></a>7. 拓展阅读@</h1><h2 id="单身狗的由来"><a href="#单身狗的由来" class="headerlink" title="单身狗的由来"></a>单身狗的由来</h2><p>单身狗一词最早是出自网络社区，起源与大话西游有关。</p><p>大话西游之大圣娶亲最后一幕“他好像一条狗”由来。</p><p> <img src="/前端笔记/html-day02/dog.jpg" alt><br> <img src="/前端笔记/html-day02/dog2.jpg" alt><br> <img src="/前端笔记/html-day02/dog3.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.认识HTML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML标签的概念&lt;/li&gt;
&lt;li&gt;HTML标签的分类&lt;/li&gt;
&lt;li&gt;HTML标签的关系&lt;/li&gt;
&lt;li&gt;HTML标签的语义化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML骨架格式&lt;/li&gt;
&lt;li&gt;sublime基本使用&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://www.itfool.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/html-day01/"/>
    <id>http://www.itfool.cn/前端笔记/html-day01/</id>
    <published>2020-05-18T07:39:00.000Z</published>
    <updated>2020-05-18T09:27:00.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第01阶段.前端基础.认识WEB</p></blockquote><h1 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h1><p><img src="/前端笔记/html-day01/kec.png" alt></p><a id="more"></a><h1 id="HTML-第一天目标"><a href="#HTML-第一天目标" class="headerlink" title="HTML 第一天目标"></a>HTML 第一天目标</h1><p>  能够写出基本的html页面（里面包含图片、链接、文字等网页元素标签）</p><p><img src="/前端笔记/html-day01/a.png" alt></p><h1 id="认识WEB"><a href="#认识WEB" class="headerlink" title="认识WEB"></a>认识WEB</h1><h2 id="1-认识网页"><a href="#1-认识网页" class="headerlink" title="1. 认识网页"></a>1. 认识网页</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day01/mi.png" alt></p><p><strong>思考：</strong> </p><p>网页是如何形成的呢?</p><p><img src="../images/HTML-Day01/web.png" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>网页有图片、链接、文字等元素组成，我们后面的任务就是要把这部分网页元素用代码写出来。。。</p><h2 id="2-浏览器（显示代码）"><a href="#2-浏览器（显示代码）" class="headerlink" title="2. 浏览器（显示代码）"></a>2. 浏览器（显示代码）</h2><p><img src="/前端笔记/html-day01/add.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/html-day01/b.png" alt></p><p>可能你最熟悉的是 IE浏览器，但是。。。</p><p><img src="/前端笔记/html-day01/liulan.jpg" alt></p><h3 id="2-1-查看浏览器占有的市场份额"><a href="#2-1-查看浏览器占有的市场份额" class="headerlink" title="2.1 查看浏览器占有的市场份额"></a>2.1 查看浏览器占有的市场份额</h3><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p><p><img src="/前端笔记/html-day01/count.png" alt></p><p> 2008年，大名鼎鼎的互联网巨头Google公司发布了它的首款浏览器Chrome浏览器。   </p><p> 跟王思聪一样，没办法，生下来人家就是富二代官二代啊，后台太强，而且确实先天能力得天独厚。 </p><p><strong>pink老师 一句话说出他们:</strong></p><blockquote><p>出自谷歌，唯我不败；一统江湖，千秋万代。 </p></blockquote><h3 id="2-2-常见浏览器内核（了解）"><a href="#2-2-常见浏览器内核（了解）" class="headerlink" title="2.2 常见浏览器内核（了解）"></a>2.2 常见浏览器内核（了解）</h3><p>首先解释一下浏览器内核是什么东西。英文叫做：Rendering Engine，中文翻译很多，排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">负责读取网页内容，整理讯息，计算网页的显示方式并显示页面.</span><br></pre></td></tr></table></figure><p>因为浏览器太多啦， 但是现在主要流行的就是下面几个：</p><table><thead><tr><th align="left">浏览器</th><th align="center">内核</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">IE</td><td align="center">Trident</td><td align="left">IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td align="left">firefox</td><td align="center">Gecko</td><td align="left">可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td align="left">Safari</td><td align="center">webkit</td><td align="left">现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</td></tr><tr><td align="left">chrome</td><td align="center">Chromium/Blink</td><td align="left">在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td align="left">Opera</td><td align="center">blink</td><td align="left">现在跟随chrome用blink内核。</td></tr></tbody></table><p><strong>拓展阅读：</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">移动端的浏览器内核主要说的是系统内置浏览器的内核。</span><br><span class="line"></span><br><span class="line">Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</span><br><span class="line"></span><br><span class="line">iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的</span><br></pre></td></tr></table></figure><h2 id="3-Web标准（重点）"><a href="#3-Web标准（重点）" class="headerlink" title="3. Web标准（重点）"></a>3. Web标准（重点）</h2><p>目标</p><ul><li>记忆<ul><li>能说出网页 中 web 标准三层组成</li></ul></li><li>理解<ul><li>能结合人来表述web标准三层</li></ul></li></ul><p>Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。</p><p>W3C 万维网联盟是国际最著名的标准化组织。1994年成立后，至今已发布近百项相关万维网的标准，对万维网发展做出了杰出的贡献。</p><p><strong>w3c就类似于现实世界中的联合国。</strong></p><h3 id="3-1-为什么要遵循WEB标准呢？"><a href="#3-1-为什么要遵循WEB标准呢？" class="headerlink" title="3.1 为什么要遵循WEB标准呢？"></a>3.1 为什么要遵循WEB标准呢？</h3><p> 通过以上浏览器不同内核不同，我们知道他们显示页面或者排版就有些许差异。</p><p><img src="/前端笔记/html-day01/bz.png" alt></p><h3 id="3-2-Web-标准的好处"><a href="#3-2-Web-标准的好处" class="headerlink" title="3.2 Web 标准的好处"></a>3.2 Web 标准的好处</h3><p>遵循web标准可以让不同我们写的页面更标准更统一外，还有许多优点</p><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h3 id="3-3-Web-标准构成"><a href="#3-3-Web-标准构成" class="headerlink" title="3.3 Web 标准构成"></a>3.3 Web 标准构成</h3><p><strong>构成：</strong> 主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><table><thead><tr><th align="left">标准</th><th align="left">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">结构</td><td align="left">结构用于对<strong>网页元素</strong>进行整理和分类，咱们主要学的是HTML。</td><td align="left"><img src="/前端笔记/html-day01/htmll.jpg" alt></td></tr><tr><td align="left">表现</td><td align="left">表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是CSS</td><td align="left"><img src="/前端笔记/html-day01/css.jpg" alt></td></tr><tr><td align="left">行为</td><td align="left">行为是指网页模型的定义及<strong>交互</strong>的编写，咱们主要学的是 Javascript</td><td align="left"><img src="/前端笔记/html-day01/search.gif" alt></td></tr></tbody></table><p> 理想状态我们的源码： .HTML      .css      .js </p><p><strong>结合人来记忆web标准：</strong></p><ul><li>结构标准：  <img src="/前端笔记/html-day01/hb1.png" alt> 是你天然的身体 </li></ul><ul><li>表现标准：   <img src="/前端笔记/html-day01/hb2.png" alt>  决定你是否打扮的美丽外观(衣服？化妆？)</li></ul><ul><li>行为标准：   <img src="/前端笔记/html-day01/hb3.jpg" alt>  决定你是否有吸引人的行为(动作)</li></ul><hr><h3 id="web标准小结"><a href="#web标准小结" class="headerlink" title="web标准小结"></a>web标准小结</h3><ul><li>web标准有三层结构，分别是结构（html）、表现（css）和行为（javascript）  </li><li>结构类似人的身体， 表现类似人的着装， 行为类似人的行为动作</li><li>理想状态下，他们三层都是独立的， 放到不同的文件里面</li></ul><h2 id="4-拓展"><a href="#4-拓展" class="headerlink" title="4. 拓展@"></a>4. 拓展@</h2><ul><li><p><strong>介绍一下你对浏览器内核的理解？常见的浏览器内核有哪些？</strong></p><p>浏览器内核包括两部分，渲染引擎和js引擎。渲染引擎负责读取网页内容，整理讯息，计算网页的显示方式并显示页面，js引擎是解析执行js获取网页的动态效果。 后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<br>IE：Trident<br>firefox：Gecko<br>chrom、safari：webkit<br>Opera：Presto<br>Microsoft Edge：EdgeHTML</p><p>深度阅读：<a href="http://blog.csdn.net/summer_15/article/details/71249203" target="_blank" rel="noopener">五大主流浏览器内核的源起以及国内各大浏览器内核总结</a> </p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第01阶段.前端基础.认识WEB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;课程安排&quot;&gt;&lt;a href=&quot;#课程安排&quot; class=&quot;headerlink&quot; title=&quot;课程安排&quot;&gt;&lt;/a&gt;课程安排&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/前端笔记/html-day01/kec.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://www.itfool.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.itfool.cn/JavaScript/hello-world/"/>
    <id>http://www.itfool.cn/JavaScript/hello-world/</id>
    <published>2019-10-16T10:07:50.768Z</published>
    <updated>2019-10-13T10:47:01.066Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="hljs-string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/categories/JavaScript/"/>
    
    
      <category term="hexo" scheme="http://www.itfool.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
