<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>It Fool - 董冬懂冻</title>
  
  <subtitle>前端blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itfool.cn/"/>
  <updated>2020-05-25T10:03:24.122Z</updated>
  <id>http://www.itfool.cn/</id>
  
  <author>
    <name>董冬懂冻</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AJAX-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/ajax-day02/"/>
    <id>http://www.itfool.cn/前端笔记/ajax-day02/</id>
    <published>2020-05-25T09:45:58.000Z</published>
    <updated>2020-05-25T10:03:24.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.AJAX拓展</p></blockquote><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="模板引擎概述"><a href="#模板引擎概述" class="headerlink" title="模板引擎概述"></a>模板引擎概述</h3><p>作用：使用模板引擎提供的模板语法，可以将数据和 HTML 拼接起来。</p><p>官方地址： <a href="https://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn/index.html</a></p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>下载 art-template 模板引擎库文件并在 HTML 页面中引入库文件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;lib/template-web.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>准备 art-template 模板</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/html&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>告诉模板引擎将哪一个模板和哪个数据进行拼接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var html = template(&apos;tpl&apos;, &#123;username: &apos;zhangsan&apos;, age: &apos;20&apos;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>将拼接好的html字符串添加到页面中</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&apos;container&apos;).innerHTML = html;</span><br></pre></td></tr></table></figure></li><li><p>通过模板语法告诉模板引擎，数据和html字符串要如何拼接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;tpl&quot; type=&quot;text/html&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt; &#123;&#123; username &#125;&#125; &lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="验证邮箱地址唯一性"><a href="#验证邮箱地址唯一性" class="headerlink" title="验证邮箱地址唯一性"></a>验证邮箱地址唯一性</h3><p><img src="/前端笔记/ajax-day02/image-20200525175308553.png" alt></p><ol><li>获取文本框并为其添加离开焦点事件</li><li>离开焦点时，检测用户输入的邮箱地址是否符合规则</li><li>如果不符合规则，阻止程序向下执行并给出提示信息</li><li>向服务器端发送请求，检测邮箱地址是否被别人注册</li><li>根据服务器端返回值决定客户端显示何种提示信息</li></ol><h3 id="搜索框内容自动提示"><a href="#搜索框内容自动提示" class="headerlink" title="搜索框内容自动提示"></a>搜索框内容自动提示</h3><p><img src="/前端笔记/ajax-day02/image-20200525175320091.png" alt></p><ol><li>获取搜索框并为其添加用户输入事件</li><li>获取用户输入的关键字</li><li>向服务器端发送请求并携带关键字作为请求参数</li><li>将响应数据显示在搜索框底部</li></ol><h3 id="省市区三级联动"><a href="#省市区三级联动" class="headerlink" title="省市区三级联动"></a>省市区三级联动</h3><p><img src="/前端笔记/ajax-day02/image-20200525175349180.png" alt></p><ol><li>通过接口获取省份信息</li><li>使用JavaScript获取到省市区下拉框元素</li><li>将服务器端返回的省份信息显示在下拉框中</li><li>为下拉框元素添加表单值改变事件（onchange）</li><li>当用户选择省份时，根据省份id获取城市信息</li><li>当用户选择城市时，根据城市id获取县城信息</li></ol><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。</li><li>异步上传二进制文件</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>准备 HTML 表单</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;form id=&quot;form&quot;&gt;</span><br><span class="line">     &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;</span><br><span class="line">     &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span><br><span class="line">     &lt;input type=&quot;button&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>将 HTML 表单转化为 formData 对象</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var form = document.getElementById(&apos;form&apos;); </span><br><span class="line">var formData = new FormData(form);</span><br></pre></td></tr></table></figure></li><li><p>删除表单对象中属性的值</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.delete(&apos;key&apos;);</span><br></pre></td></tr></table></figure></li><li><p>向表单对象中追加属性值</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.append(&apos;key&apos;, &apos;value&apos;);</span><br></pre></td></tr></table></figure></li></ol><p><strong><font color="#f00">注意</font></strong>：set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append会保留两个值。</p><h3 id="二进制文件上传"><a href="#二进制文件上传" class="headerlink" title="二进制文件上传"></a>二进制文件上传</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> var file = document.getElementById(&apos;file&apos;)</span><br><span class="line">// 当用户选择文件的时候</span><br><span class="line"> file.onchange = function () &#123;</span><br><span class="line">     // 创建空表单对象</span><br><span class="line">     var formData = new FormData();</span><br><span class="line">     // 将用户选择的二进制文件追加到表单对象中</span><br><span class="line">     formData.append(&apos;attrName&apos;, this.files[0]);</span><br><span class="line">     // 配置ajax对象，请求方式必须为post</span><br><span class="line">     xhr.open(&apos;post&apos;, &apos;www.example.com&apos;);</span><br><span class="line">     xhr.send(formData);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传进度展示"><a href="#文件上传进度展示" class="headerlink" title="文件上传进度展示"></a>文件上传进度展示</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 当用户选择文件的时候</span><br><span class="line">file.onchange = function () &#123;</span><br><span class="line">    // 文件上传过程中持续触发onprogress事件</span><br><span class="line">    xhr.upload.onprogress = function (ev) &#123;</span><br><span class="line">        // 当前上传文件大小/文件总大小 再将结果转换为百分数</span><br><span class="line">        // 将结果赋值给进度条的宽度属性 </span><br><span class="line">        bar.style.width = (ev.loaded / ev.total) * 100 + &apos;%&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传图片即时预览"><a href="#文件上传图片即时预览" class="headerlink" title="文件上传图片即时预览"></a>文件上传图片即时预览</h3><p>在我们将图片上传到服务器端以后，服务器端通常都会将图片地址做为响应数据传递到客户端，客户端可以从响应数据中获取图片地址，然后将图片再显示在页面中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = function () &#123;</span><br><span class="line">    var result = JSON.parse(xhr.responseText);</span><br><span class="line">    var img = document.createElement(&apos;img&apos;);</span><br><span class="line">    img.src = result.src;</span><br><span class="line">    img.onload = function () &#123;</span><br><span class="line">        document.body.appendChild(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h2><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>如果两个页面拥有相同的协议、域名和端口，那么这两个页面就属于同一个源，其中只要有一个不相同，就是不同源。<br><a href="http://www.example.com/dir/page.html" target="_blank" rel="noopener">http://www.example.com/dir/page.html</a></p><p><a href="http://www.example.com/dir2/other.html：同源" target="_blank" rel="noopener">http://www.example.com/dir2/other.html：同源</a><br><a href="http://example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://example.com/dir/other.html：不同源（域名不同）</a><br><a href="http://v2.www.example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a><br><a href="http://www.example.com:81/dir/other.html：不同源（端口不同）" target="_blank" rel="noopener">http://www.example.com:81/dir/other.html：不同源（端口不同）</a><br><a href="https://www.example.com/dir/page.html：不同源（协议不同）" target="_blank" rel="noopener">https://www.example.com/dir/page.html：不同源（协议不同）</a></p><h3 id="同源政策的目的"><a href="#同源政策的目的" class="headerlink" title="同源政策的目的"></a>同源政策的目的</h3><ul><li><p>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A 网站在客户端设置的 Cookie，B网站是不能访问的。</p></li><li><p>随着互联网的发展，同源政策也越来越严格，在不同源的情况下，其中有一项规定就是无法向非同源地址发送Ajax 请求，如果请求，浏览器就会报错。</p></li></ul><h3 id="使用-JSONP-解决同源限制问题"><a href="#使用-JSONP-解决同源限制问题" class="headerlink" title="使用 JSONP 解决同源限制问题"></a>使用 JSONP 解决同源限制问题</h3><p>jsonp 是 json with padding 的缩写，它不属于 Ajax 请求，但它可以模拟 Ajax 请求。</p><ol><li><p>将不同源的服务器端请求地址写在 script 标签的 src 属性中</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;www.example.com&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=“https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>服务器端响应数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const data = &apos;fn(&#123;name: &quot;张三&quot;, age: &quot;20&quot;&#125;)&apos;;</span><br><span class="line">res.send(data);</span><br></pre></td></tr></table></figure></li><li><p>在客户端全局作用域下定义函数 fn</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function fn (data) &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>在 fn 函数内部对服务器端返回的数据进行处理</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function fn (data) &#123; console.log(data); &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="JSONP-代码优化"><a href="#JSONP-代码优化" class="headerlink" title="JSONP 代码优化"></a>JSONP 代码优化</h3><ol><li>客户端需要将函数名称传递到服务器端。</li><li>将 script 请求的发送变成动态请求。</li><li>封装 jsonp 函数，方便请求发送。</li><li>服务器端代码优化之 res.jsonp 方法。</li></ol><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h3><p>CORS：全称为 Cross-origin resource sharing，即跨域资源共享，它允许浏览器向跨域服务器发送 Ajax 请求，克服了 Ajax 只能同源使用的限制。</p><p><img src="/前端笔记/ajax-day02/image-20200525180043706.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">origin: http://localhost:3000</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &apos;http://localhost:3000&apos;</span><br><span class="line">Access-Control-Allow-Origin: &apos;*&apos;</span><br></pre></td></tr></table></figure><p>Node 服务器端设置响应头示例代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">    res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);</span><br><span class="line">    res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;GET, POST&apos;);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="访问非同源数据-服务器端解决方案"><a href="#访问非同源数据-服务器端解决方案" class="headerlink" title="访问非同源数据 服务器端解决方案"></a>访问非同源数据 服务器端解决方案</h3><p>同源政策是浏览器给予Ajax技术的限制，服务器端是不存在同源政策限制。</p><p><img src="/前端笔记/ajax-day02/image-20200525180127863.png" alt></p><h3 id="cookie复习"><a href="#cookie复习" class="headerlink" title="cookie复习"></a>cookie复习</h3><p><img src="/前端笔记/ajax-day02/image-20200525180141222.png" alt></p><h3 id="withCredentials属性"><a href="#withCredentials属性" class="headerlink" title="withCredentials属性"></a>withCredentials属性</h3><ul><li>在使用Ajax技术发送跨域请求时，默认情况下不会在请求中携带cookie信息。</li><li>withCredentials：指定在涉及到跨域请求时，是否携带cookie信息，默认值为false</li><li>Access-Control-Allow-Credentials：true 允许客户端发送请求时携带cookie</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.AJAX拓展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;模板引擎&quot;&gt;&lt;a href=&quot;#模板引擎&quot; class=&quot;headerlink&quot; title=&quot;模板引擎&quot;&gt;&lt;/a&gt;模板引擎&lt;/h2&gt;&lt;h3 id=&quot;模板引擎概述&quot;&gt;&lt;a href=&quot;#模板引擎概述&quot; class=&quot;headerlink&quot; title=&quot;模板引擎概述&quot;&gt;&lt;/a&gt;模板引擎概述&lt;/h3&gt;&lt;p&gt;作用：使用模板引擎提供的模板语法，可以将数据和 HTML 拼接起来。&lt;/p&gt;
&lt;p&gt;官方地址： &lt;a href=&quot;https://aui.github.io/art-template/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aui.github.io/art-template/zh-cn/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="AJAX" scheme="http://www.itfool.cn/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>AJAX-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/ajax-day01/"/>
    <id>http://www.itfool.cn/前端笔记/ajax-day01/</id>
    <published>2020-05-25T09:18:09.000Z</published>
    <updated>2020-05-25T09:44:49.534Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.AJAX基础</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>Ajax 基础</li><li>Ajax 运行原理及实现</li><li>Ajax 异步编程</li></ul><a id="more"></a><h2 id="Ajax-基础"><a href="#Ajax-基础" class="headerlink" title="Ajax 基础"></a>Ajax 基础</h2><h3 id="传统网站中存在的问题"><a href="#传统网站中存在的问题" class="headerlink" title="传统网站中存在的问题"></a>传统网站中存在的问题</h3><ul><li>网速慢的情况下，页面加载时间长，用户只能等待</li><li>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</li><li>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Ajax：标准读音 [ˈeɪˌdʒæks] ，中文音译：阿贾克斯</p><p>它是浏览器提供的一套方法，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。</p><p><img src="/前端笔记/ajax-day01/image-20200525172336464.png" alt></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="/前端笔记/ajax-day01/image-20200525172406700.png" alt></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>Ajax 技术<strong><font color="#f00">需要运行在网站环境中</font></strong>才能生效，当前课程会使用Node创建的服务器作为网站服务器。</p><h2 id="Ajax-运行原理及实现"><a href="#Ajax-运行原理及实现" class="headerlink" title="Ajax 运行原理及实现"></a>Ajax 运行原理及实现</h2><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>Ajax 相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验。</p><p><img src="/前端笔记/ajax-day01/image-20200525172533946.png" alt></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>创建 Ajax 对象</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>告诉 Ajax 请求地址以及请求方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.example.com&apos;);</span><br></pre></td></tr></table></figure></li><li><p>发送请求</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></li><li><p>获取服务器端给与客户端的响应数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = function () &#123;</span><br><span class="line">    console.log(xhr.responseText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="服务器端响应的数据格式"><a href="#服务器端响应的数据格式" class="headerlink" title="服务器端响应的数据格式"></a>服务器端响应的数据格式</h3><p>在真实的项目中，服务器端<strong><font color="#f00">大多数情况下会以 JSON 对象作为响应数据的格式</font></strong>。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中。</p><p>在 http 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse() // 将 json 字符串转换为json对象</span><br></pre></td></tr></table></figure><h3 id="请求参数传递"><a href="#请求参数传递" class="headerlink" title="请求参数传递"></a>请求参数传递</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!– 传统网站表单提交 --&gt;</span><br><span class="line">&lt;form method=&quot;get&quot; action=&quot;http://www.example.com&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;!– http://www.example.com?username=zhangsan&amp;password=123456 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// GET 请求方式</span><br><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.example.com?name=zhangsan&amp;age=20&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// POST 请求方式</span><br><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;) xhr.send(&apos;name=zhangsan&amp;age=20&apos;);</span><br></pre></td></tr></table></figure><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>在 HTTP 请求和响应的过程中传递的数据块就叫<strong><font color="#f00">报文</font></strong>，包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式。</p><p><img src="/前端笔记/ajax-day01/image-20200525173334541.png" alt></p><h3 id="请求参数的格式"><a href="#请求参数的格式" class="headerlink" title="请求参数的格式"></a>请求参数的格式</h3><ol><li><p>application/x-www-form-urlencoded</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=zhangsan&amp;age=20&amp;sex=男</span><br></pre></td></tr></table></figure></li><li><p>application/json</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;name: &apos;zhangsan&apos;, age: &apos;20&apos;, sex: &apos;男&apos;&#125;</span><br></pre></td></tr></table></figure><p>在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify() // 将json对象转换为json字符串</span><br></pre></td></tr></table></figure><p><strong><font color="#f00">注意：get 请求是不能提交 json 对象数据格式的，传统网站的表单提交也是不支持 json 对象数据格式的。</font></strong></p></li></ol><h3 id="Ajax-状态码"><a href="#Ajax-状态码" class="headerlink" title="Ajax 状态码"></a>Ajax 状态码</h3><p>在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码。</p><p>0：请求未初始化(还没有调用open())<br>1：请求已经建立，但是还没有发送(还没有调用send())<br>2：请求已经发送<br>3：请求正在处理中，通常响应中已经有部分数据可以用了<br>4：响应已经完成，可以获取并使用服务器的响应了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.readyState // 获取Ajax状态码</span><br></pre></td></tr></table></figure><h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><p>当 Ajax 状态码发生变化时将自动触发该事件。</p><p>在事件处理函数中可以获取 Ajax 状态码并对其进行判断，当状态码为 <strong><font color="#f00">4</font></strong> 时就可以通过 xhr.responseText 获取服务器端的响应数据了。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 当Ajax状态码发生变化时</span><br><span class="line">xhr.onreadystatechange = function () &#123;</span><br><span class="line">    // 判断当Ajax状态码为4时</span><br><span class="line">    if (xhr.readyState == 4) &#123;</span><br><span class="line">        // 获取服务器端的响应数据</span><br><span class="line">        console.log(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种获取服务器端响应方式的区别</p><table><thead><tr><th><strong>区别描述</strong></th><th><strong>onload事件</strong></th><th><strong>onreadystatechange事件</strong></th></tr></thead><tbody><tr><td>是否兼容IE低版本</td><td>不兼容</td><td>兼容</td></tr><tr><td>是否需要判断Ajax状态码</td><td>不需要</td><td>需要</td></tr><tr><td>被调用次数</td><td>一次</td><td>多次</td></tr></tbody></table><h3 id="Ajax-错误处理"><a href="#Ajax-错误处理" class="headerlink" title="Ajax 错误处理"></a>Ajax 错误处理</h3><p><strong>1. 网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</strong></p><ul><li>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取http状态码</li></ul><p><strong>2. 网络畅通，服务器端没有接收到请求，返回404状态码。</strong> </p><ul><li>检查请求地址是否错误。</li></ul><p><strong>3. 网络畅通，服务器端能接收到请求，服务器端返回500状态码。</strong></p><ul><li>服务器端错误，找后端程序员进行沟通。</li></ul><p><strong>4. 网络中断，请求无法发送到服务器端。</strong></p><ul><li>会触发xhr对象下面的onerror事件，在onerror事件处理函数中对错误进行处理。</li></ul><h3 id="低版本-IE-浏览器的缓存问题"><a href="#低版本-IE-浏览器的缓存问题" class="headerlink" title="低版本 IE 浏览器的缓存问题"></a>低版本 IE 浏览器的缓存问题</h3><p><strong>问题：</strong>在低版本的 IE 浏览器中，Ajax 请求有严重的缓存问题，即在请求地址不发生变化的情况下，只有第一次请求会真正发送到服务器端，后续的请求都会从浏览器的缓存中获取结果。即使服务器端的数据更新了，客户端依然拿到的是缓存中的旧数据。</p><p><strong>解决方案：</strong>在请求地址的后面加请求参数，保证每一次请求中的请求参数的值不相同。 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.example.com?t=&apos; + Math.random());</span><br></pre></td></tr></table></figure><h2 id="Ajax-异步编程"><a href="#Ajax-异步编程" class="headerlink" title="Ajax 异步编程"></a>Ajax 异步编程</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li>一个人同一时间只能做一件事情，只有一件事情做完，才能做另外一件事情。</li><li>落实到代码中，就是上一行代码执行完成后，才能执行下一行代码，即代码逐行执行。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;); </span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>一个人一件事情做了一半，转而去做其他事情，当其他事情做完以后，再回过头来继续做之前未完成的事情。</li><li>落实到代码上，就是异步代码虽然需要花费时间去执行，但程序不会等待异步代码执行完成后再继续执行后续代码，而是直接执行后续代码，当后续代码执行完成后再回头看异步代码是否返回结果，如果已有返回结果，再调用事先准备好的回调函数处理异步代码执行的结果。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;);</span><br><span class="line">setTimeout(</span><br><span class="line">   () =&gt; &#123; console.log(&apos;last&apos;);</span><br><span class="line">&#125;, 2000);</span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><h3 id="Ajax-封装"><a href="#Ajax-封装" class="headerlink" title="Ajax 封装"></a>Ajax 封装</h3><p><strong>问题：</strong>发送一次请求代码过多，发送多次请求代码冗余且重复。</p><p><strong>解决方案：</strong>将请求代码封装到函数中，发请求时调用函数即可。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123; </span><br><span class="line">    type: &apos;get&apos;,</span><br><span class="line">    url: &apos;http://www.itfool.cn&apos;,</span><br><span class="line">    success: function (data) &#123; </span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.AJAX基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ajax 基础&lt;/li&gt;
&lt;li&gt;Ajax 运行原理及实现&lt;/li&gt;
&lt;li&gt;Ajax 异步编程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="AJAX" scheme="http://www.itfool.cn/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day06/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day06/</id>
    <published>2020-05-25T08:52:50.000Z</published>
    <updated>2020-05-25T09:08:59.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.Express框架</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够使用Express创建web服务器</li><li>能够使用Express处理请求参数</li><li>能够使用Express处理静态资源</li><li>能够使用中间件处理请求</li><li>能够在Express中集成art-template模板引擎</li></ul><a id="more"></a><h2 id="Express框架简介及初体验"><a href="#Express框架简介及初体验" class="headerlink" title="Express框架简介及初体验"></a>Express框架简介及初体验</h2><h3 id="Express框架是什么"><a href="#Express框架是什么" class="headerlink" title="Express框架是什么"></a>Express框架是什么</h3><p>Express是一个基于<strong><font color="#f00">Node平台</font></strong>的<strong><font color="#f00">web应用开发框架</font></strong>，它提供了一系列的强大特性，帮助你创建各种Web应用。我们可以使用 <strong><font color="#f00">npm install express</font></strong>  命令进行下载。</p><h3 id="Express框架特性"><a href="#Express框架特性" class="headerlink" title="Express框架特性"></a>Express框架特性</h3><ul><li>提供了方便<strong><font color="#f00">简洁的路由定义</font></strong>方式</li><li>对获取HTTP<strong><font color="#f00">请求参数</font></strong>进行了<strong><font color="#f00">简化处理</font></strong></li><li>对<strong><font color="#f00">模板引擎支持程度高</font></strong>，方便渲染动态HTML页面</li><li>提供了<strong><font color="#f00">中间件</font></strong>机制有效<strong><font color="#f00">控制HTTP请求</font></strong></li><li>拥有大量第三方中间件对功能进行扩展</li></ul><h3 id="原生Node-js与Express框架对比之路由"><a href="#原生Node-js与Express框架对比之路由" class="headerlink" title="原生Node.js与Express框架对比之路由"></a>原生Node.js与Express框架对比之路由</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取客户端的请求路径</span><br><span class="line">    let &#123; pathname &#125; = url.parse(req.url);</span><br><span class="line">    // 对请求路径进行判断 不同的路径地址响应不同的内容</span><br><span class="line">    if (pathname == &apos;/&apos; || pathname == &apos;index&apos;) &#123;</span><br><span class="line">       res.end(&apos;欢迎来到首页&apos;);</span><br><span class="line">    &#125; else if (pathname == &apos;/list&apos;) &#123;</span><br><span class="line">       res.end(&apos;欢迎来到列表页页&apos;);</span><br><span class="line">    &#125; else if (pathname == &apos;/about&apos;) &#123;</span><br><span class="line">       res.end(&apos;欢迎来到关于我们页面&apos;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       res.end(&apos;抱歉, 您访问的页面出游了&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 当客户端以get方式访问/时</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 对客户端做出响应</span><br><span class="line">    res.send(&apos;Hello Express&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 当客户端以post方式访问/add路由时</span><br><span class="line">app.post(&apos;/add&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   res.send(&apos;使用post方式请求了/add路由&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="原生Node-js与Express框架对比之获取请求参数"><a href="#原生Node-js与Express框架对比之获取请求参数" class="headerlink" title="原生Node.js与Express框架对比之获取请求参数"></a>原生Node.js与Express框架对比之获取请求参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 获取GET参数</span><br><span class="line">   let &#123;query&#125; = url.parse(req.url, true);</span><br><span class="line">   // 获取POST参数</span><br><span class="line">   let postData = &apos;&apos;;</span><br><span class="line">   req.on(&apos;data&apos;, (chunk) =&gt; &#123;</span><br><span class="line">       postData += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   req.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class="line">       console.log(querystring.parse(postData)</span><br><span class="line">   &#125;)); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 获取GET参数</span><br><span class="line">   console.log(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 获取POST参数</span><br><span class="line">   console.log(req.body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express初体验"><a href="#Express初体验" class="headerlink" title="Express初体验"></a>Express初体验</h3><p>使用Express框架创建web服务器及其简单，调用express模块返回的函数即可。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 引入Express框架</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">// 使用框架创建web服务器</span><br><span class="line">const app = express();</span><br><span class="line">// 当客户端以get方式访问/路由时</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 对客户端做出响应 send方法会根据内容的类型自动设置请求头</span><br><span class="line">   res.send(&apos;Hello Express&apos;); // &lt;h2&gt;Hello Express&lt;/h2&gt; &#123;say: &apos;hello&apos;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 程序监听3000端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h3><p>中间件就是一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。</p><p><img src="/前端笔记/node-js-day06/image-20200525170133469.png" alt></p><p>中间件主要由两部分构成，中间件方法以及请求处理函数。<br>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;请求路径&apos;, &apos;处理函数&apos;)   // 接收并处理get请求</span><br><span class="line">app.post(&apos;请求路径&apos;, &apos;处理函数&apos;)  // 接收并处理post请求</span><br></pre></td></tr></table></figure><p>可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。<br>默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。<br>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/request&apos;, (req, res, next) =&gt; &#123;</span><br><span class="line">    req.name = &quot;张三&quot;;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(&apos;/request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(req.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-use中间件用法"><a href="#app-use中间件用法" class="headerlink" title="app.use中间件用法"></a>app.use中间件用法</h3><p>app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/admin&apos;, (req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="中间件应用"><a href="#中间件应用" class="headerlink" title="中间件应用"></a>中间件应用</h3><ol><li>路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面。</li><li>网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中。</li><li>自定义404页面</li></ol><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><p>在程序执行的过程中，不可避免的会出现一些无法预料的错误，比如文件读取失败，数据库连接失败。<br>错误处理中间件是一个集中处理错误的地方。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use((err, req, res, next) =&gt; &#123;</span><br><span class="line">    res.status(500).send(&apos;服务器发生未知错误&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当程序出现错误时，调用next()方法，并且将错误信息通过参数的形式传递给next()方法，即可触发错误处理中间件。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> app.get(&quot;/&quot;, (req, res, next) =&gt; &#123;</span><br><span class="line">     fs.readFile(&quot;/file-does-not-exist&quot;, (err, data) =&gt; &#123;</span><br><span class="line">         if (err) &#123;</span><br><span class="line">            next(err);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h3><p>在node.js中，异步API的错误信息都是通过回调函数获取的，支持Promise对象的异步API发生错误可以通过catch方法捕获。<br>异步函数执行如果发生错误要如何捕获错误呢？</p><p>try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能其他类型的API发生的错误。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(&quot;/&quot;, async (req, res, next) =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await User.find(&#123;name: &apos;张三&apos;&#125;)</span><br><span class="line">    &#125;catch(ex) &#123;</span><br><span class="line">        next(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Express框架请求处理"><a href="#Express框架请求处理" class="headerlink" title="Express框架请求处理"></a>Express框架请求处理</h2><h3 id="构建模块化路由"><a href="#构建模块化路由" class="headerlink" title="构建模块化路由"></a>构建模块化路由</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;) </span><br><span class="line">// 创建路由对象</span><br><span class="line">const home = express.Router();</span><br><span class="line">// 将路由和请求路径进行匹配</span><br><span class="line">app.use(&apos;/home&apos;, home);</span><br><span class="line"> // 在home路由下继续创建路由</span><br><span class="line">home.get(&apos;/index&apos;, () =&gt; &#123;</span><br><span class="line">         //  /home/index</span><br><span class="line">        res.send(&apos;欢迎来到博客展示页面&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="构建模块化路由-1"><a href="#构建模块化路由-1" class="headerlink" title="构建模块化路由"></a>构建模块化路由</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// home.js</span><br><span class="line">const home = express.Router(); </span><br><span class="line">home.get(&apos;/index&apos;, () =&gt; &#123;</span><br><span class="line">    res.send(&apos;欢迎来到博客展示页面&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = home;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// admin.js</span><br><span class="line">const admin = express.Router();</span><br><span class="line">admin.get(&apos;/index&apos;, () =&gt; &#123;</span><br><span class="line">    res.send(&apos;欢迎来到博客管理页面&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = admin;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">const home = require(&apos;./route/home.js&apos;);</span><br><span class="line">const admin = require(&apos;./route/admin.js&apos;);</span><br><span class="line">app.use(&apos;/home&apos;, home);</span><br><span class="line">app.use(&apos;/admin&apos;, admin);</span><br></pre></td></tr></table></figure><h3 id="GET参数的获取"><a href="#GET参数的获取" class="headerlink" title="GET参数的获取"></a>GET参数的获取</h3><p>Express框架中使用<strong><font color="#f00">req.query</font></strong>即可获取GET参数，框架内部会将GET参数转换为对象并返回。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 接收地址栏中问号后面的参数</span><br><span class="line">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   console.log(req.query); // &#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: &quot;30&quot;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="POST参数的获取"><a href="#POST参数的获取" class="headerlink" title="POST参数的获取"></a>POST参数的获取</h3><p>Express中接收post请求参数需要借助第三方包 body-parser。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入body-parser模块</span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">// 配置body-parser模块</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">// 接收请求</span><br><span class="line">app.post(&apos;/add&apos;, (req, res) =&gt; &#123;</span><br><span class="line">   // 接收请求参数</span><br><span class="line">   console.log(req.body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express路由参数"><a href="#Express路由参数" class="headerlink" title="Express路由参数"></a>Express路由参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/find/:id&apos;, (req, res) =&gt; &#123; </span><br><span class="line">    console.log(req.params); // &#123;id: 123&#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:3000/find/123</span><br></pre></td></tr></table></figure><h3 id="静态资源的处理"><a href="#静态资源的处理" class="headerlink" title="静态资源的处理"></a>静态资源的处理</h3><p>通过Express内置的<strong><font color="#f00">express.static</font></strong>可以方便地托管静态文件，例如img、CSS、JavaScript 文件等。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;));</span><br></pre></td></tr></table></figure><p>现在，public 目录下面的文件就可以访问了。</p><ul><li><a href="http://localhost:3000/images/kitten.jpg" target="_blank" rel="noopener">http://localhost:3000/images/kitten.jpg</a></li><li><a href="http://localhost:3000/css/style.css" target="_blank" rel="noopener">http://localhost:3000/css/style.css</a></li><li><a href="http://localhost:3000/js/app.js" target="_blank" rel="noopener">http://localhost:3000/js/app.js</a></li><li><a href="http://localhost:3000/images/bg.png" target="_blank" rel="noopener">http://localhost:3000/images/bg.png</a></li><li><a href="http://localhost:3000/hello.html" target="_blank" rel="noopener">http://localhost:3000/hello.html</a> </li></ul><h2 id="express-art-template模板引擎"><a href="#express-art-template模板引擎" class="headerlink" title="express-art-template模板引擎"></a>express-art-template模板引擎</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul><li>为了使art-template模板引擎能够更好的和Express框架配合，模板引擎官方在原art-template模板引擎的基础上封装了express-art-template。</li><li>使用<strong><font color="#f00">npm install art-template express-art-template</font></strong>命令进行安装。</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> // 当渲染后缀为art的模板时 使用express-art-template</span><br><span class="line">app.engine(&apos;art&apos;, require(&apos;express-art-template&apos;));</span><br><span class="line"> // 设置模板存放目录</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line"> // 渲染模板时不写后缀 默认拼接art后缀</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;art&apos;);</span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 渲染模板</span><br><span class="line">    res.render(&apos;index&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-locals-对象"><a href="#app-locals-对象" class="headerlink" title="app.locals 对象"></a>app.locals 对象</h3><p>将变量设置到app.locals对象下面，这个数据在所有的模板中都可以获取到。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> app.locals.users = [&#123;</span><br><span class="line">     name: &apos;张三&apos;,</span><br><span class="line">     age: 20</span><br><span class="line"> &#125;,&#123;</span><br><span class="line">     name: &apos;李四&apos;,</span><br><span class="line">     age: 20</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.Express框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够使用Express创建web服务器&lt;/li&gt;
&lt;li&gt;能够使用Express处理请求参数&lt;/li&gt;
&lt;li&gt;能够使用Express处理静态资源&lt;/li&gt;
&lt;li&gt;能够使用中间件处理请求&lt;/li&gt;
&lt;li&gt;能够在Express中集成art-template模板引擎&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day05/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day05/</id>
    <published>2020-05-25T08:11:12.000Z</published>
    <updated>2020-05-25T08:51:39.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.模板引擎artTemplate</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够使用模板引擎渲染数据</li><li>能够使用模板引擎进行原文输出</li><li>能够使用循环输出数据</li><li>能够知道如何引用子模板</li><li>能够知道如何如何进行模板继承</li></ul><a id="more"></a><h2 id="模板引擎的基础概念"><a href="#模板引擎的基础概念" class="headerlink" title="模板引擎的基础概念"></a>模板引擎的基础概念</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板引擎是第三方模块。<br>让开发者以更加友好的方式拼接字符串，使项目代码更加清晰、更加易于维护。</p><p><img src="/前端笔记/node-js-day05/image-20200525163951964.png" alt></p><h3 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h3><ol><li>在命令行工具中使用 <strong><font color="#f00">npm install art-template</font></strong> 命令进行下载</li><li>使用const template = require(‘art-template’)引入模板引擎</li><li>告诉模板引擎要拼接的数据和模板在哪 const html = template(‘模板路径’, 数据);</li><li>使用模板语法告诉模板引擎，模板与数据应该如何进行拼接 </li></ol><h3 id="art-template代码示例"><a href="#art-template代码示例" class="headerlink" title="art-template代码示例"></a>art-template代码示例</h3><p><img src="/前端笔记/node-js-day05/image-20200525164205035.png" alt></p><h2 id="模板引擎的语法"><a href="#模板引擎的语法" class="headerlink" title="模板引擎的语法"></a>模板引擎的语法</h2><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><ul><li><p>art-template同时支持两种模板语法：标准语法和原始语法。</p></li><li><p>标准语法可以让模板更容易读写，原始语法具有强大的逻辑处理能力。</p></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>将某项数据输出在模板中，标准语法和原始语法如下：</p><p><img src="/前端笔记/node-js-day05/image-20200525164731879.png" alt></p><h3 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h3><p>如果数据中携带HTML标签，默认模板引擎不会解析标签，会将其转义后输出。</p><p><img src="/前端笔记/node-js-day05/image-20200525164745112.png" alt></p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><img src="/前端笔记/node-js-day05/image-20200525164554780.png" alt></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><img src="/前端笔记/node-js-day05/image-20200525164803095.png" alt></p><h3 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h3><p>使用子模板可以将网站公共区块(头部、底部)抽离到单独的文件中。</p><p><img src="/前端笔记/node-js-day05/image-20200525164823479.png" alt></p><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>使用模板继承可以将网站HTML骨架抽离到单独的文件中，其他页面模板可以继承骨架文件。</p><p><img src="/前端笔记/node-js-day05/image-20200525162036452.png" alt></p><p><img src="/前端笔记/node-js-day05/image-20200525162104183.png" alt></p><h3 id="模板继承示例"><a href="#模板继承示例" class="headerlink" title="模板继承示例"></a>模板继承示例</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;HTML骨架模板&lt;/title&gt;</span><br><span class="line">        &#123;&#123;block &apos;head&apos;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &#123;&#123;block &apos;content&apos;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--index.art 首页模板--&gt;</span><br><span class="line">&#123;&#123;extend &apos;./layout.art&apos;&#125;&#125;</span><br><span class="line">&#123;&#123;block &apos;head&apos;&#125;&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;custom.css&quot;&gt; &#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block &apos;content&apos;&#125;&#125; &lt;p&gt;This is just an awesome page.&lt;/p&gt; &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h3><ol><li>向模板中导入变量 template.defaults.imports.变量名 = 变量值;</li><li>设置模板根目录 template.defaults.root = 模板目录</li><li>设置模板默认后缀 template.defaults.extname = ‘.art’</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例介绍-–-学生档案管理"><a href="#案例介绍-–-学生档案管理" class="headerlink" title="案例介绍 – 学生档案管理"></a>案例介绍 – 学生档案管理</h3><p>目标：模板引擎应用，强化node.js项目制作流程。</p><p>知识点：http请求响应、数据库、模板引擎、静态资源访问。</p><p><img src="/前端笔记/node-js-day05/image-20200525162236571.png" alt></p><h3 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h3><ol><li>建立项目文件夹并生成项目描述文件</li><li>创建网站服务器实现客户端和服务器端通信</li><li>连接数据库并根据需求设计学员信息表</li><li>创建路由并实现页面模板呈递</li><li>实现静态资源访问</li><li>实现学生信息添加功能</li><li>实现学生信息展示功能</li></ol><h3 id="第三方模块-router"><a href="#第三方模块-router" class="headerlink" title="第三方模块 router"></a>第三方模块 router</h3><p><strong>功能：</strong>实现路由<br><strong>使用步骤：</strong></p><ol><li>获取路由对象</li><li>调用路由对象提供的方法创建路由</li><li>启用路由，使路由生效</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const serveStatic = require(&apos;serve-static&apos;)</span><br><span class="line">const serve = serveStatic(&apos;public&apos;)</span><br><span class="line">server.on(&apos;request&apos;, () =&gt; &#123; </span><br><span class="line">    serve(req, res)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(3000)</span><br></pre></td></tr></table></figure><h3 id="添加学生信息功能步骤分析"><a href="#添加学生信息功能步骤分析" class="headerlink" title="添加学生信息功能步骤分析"></a>添加学生信息功能步骤分析</h3><ol><li>在模板的表单中指定请求地址与请求方式</li><li>为每一个表单项添加name属性</li><li>添加实现学生信息功能路由</li><li>接收客户端传递过来的学生信息</li><li>将学生信息添加到数据库中</li><li>将页面重定向到学生信息列表页面</li></ol><h3 id="学生信息列表页面分析"><a href="#学生信息列表页面分析" class="headerlink" title="学生信息列表页面分析"></a>学生信息列表页面分析</h3><ol><li>从数据库中将所有的学生信息查询出来</li><li>通过模板引擎将学生信息和HTML模板进行拼接</li><li>将拼接好的HTML模板响应给客户端</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.模板引擎artTemplate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够使用模板引擎渲染数据&lt;/li&gt;
&lt;li&gt;能够使用模板引擎进行原文输出&lt;/li&gt;
&lt;li&gt;能够使用循环输出数据&lt;/li&gt;
&lt;li&gt;能够知道如何引用子模板&lt;/li&gt;
&lt;li&gt;能够知道如何如何进行模板继承&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day04/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day04/</id>
    <published>2020-05-25T07:36:41.000Z</published>
    <updated>2020-05-25T08:13:01.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.MongoDB数据库</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够安装数据库软件 </li><li>能够知道集合、文档的概念</li><li>能够使用mongoose创建集合的方法创建集合</li><li>能够对数据库中的数据进行增删改查操作</li></ul><a id="more"></a><h2 id="数据库概述及环境搭建"><a href="#数据库概述及环境搭建" class="headerlink" title="数据库概述及环境搭建"></a>数据库概述及环境搭建</h2><h3 id="为什么要使用数据库"><a href="#为什么要使用数据库" class="headerlink" title="为什么要使用数据库"></a>为什么要使用数据库</h3><ul><li>动态网站中的数据都是存储在数据库中的</li><li>数据库可以用来持久存储客户端通过表单收集的用户信息</li><li>数据库软件本身可以对数据进行高效的管理</li></ul><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库即存储数据的仓库，可以将数据进行有序的分门别类的存储。它是独立于语言之外的软件，可以通过API去操作它。<br>常见的数据库软件有：<strong>mysql</strong>、<strong>mongoDB</strong>、<strong>oracle</strong>。</p><p><img src="/前端笔记/node-js-day04/image-20200525154041354.png" alt></p><h3 id="MongoDB数据库下载安装"><a href="#MongoDB数据库下载安装" class="headerlink" title="MongoDB数据库下载安装"></a>MongoDB数据库下载安装</h3><p>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></p><p><img src="/前端笔记/node-js-day04/image-20200525154234793.png" alt></p><h3 id="MongoDB可视化软件"><a href="#MongoDB可视化软件" class="headerlink" title="MongoDB可视化软件"></a>MongoDB可视化软件</h3><p>MongoDB可视化操作软件，是使用图形界面操作数据库的一种方式。</p><p><img src="/前端笔记/node-js-day04/image-20200525154309472.png" alt></p><h3 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h3><p>在一个数据库软件中可以包含多个数据仓库，在每个数据仓库中可以包含多个数据集合，每个数据集合中可以包含多条文档（具体的数据）。</p><table><thead><tr><th align="left">术语</th><th align="left">解释说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">数据库，mongoDB数据库软件中可以建立多个数据库</td></tr><tr><td align="left">collection</td><td align="left">集合，一组数据的集合，可以理解为JavaScript中的数组</td></tr><tr><td align="left">document</td><td align="left">文档，一条具体的数据，可以理解为JavaScript中的对象</td></tr><tr><td align="left">field</td><td align="left">字段，文档中的属性名称，可以理解为JavaScript中的对象属性</td></tr></tbody></table><h3 id="Mongoose第三方包"><a href="#Mongoose第三方包" class="headerlink" title="Mongoose第三方包"></a>Mongoose第三方包</h3><ul><li>使用Node.js操作MongoDB数据库需要依赖Node.js第三方包mongoose</li><li>使用<strong><font color="#f00">npm install mongoose</font></strong>命令下载</li></ul><h3 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h3><p>在命令行工具中运行<strong><font color="#f00">net start mongoDB</font></strong>即可启动MongoDB，否则MongoDB将无法连接。</p><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>使用mongoose提供的<strong><font color="#f00">connect</font></strong>方法即可连接数据库。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(&apos;mongodb://localhost/playground&apos;)</span><br><span class="line">    .then(() =&gt; console.log(&apos;数据库连接成功&apos;))</span><br><span class="line">    .catch(err =&gt; console.log(&apos;数据库连接失败&apos;, err));</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在MongoDB中<strong><font color="#f00">不需要显式创建数据库</font></strong>，如果正在使用的数据库不存在，<strong><font color="#f00">MongoDB会自动创建</font></strong>。</p><h2 id="MongoDB增删改查操作"><a href="#MongoDB增删改查操作" class="headerlink" title="MongoDB增删改查操作"></a>MongoDB增删改查操作</h2><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>创建集合分为两步，一是对<strong><font color="#f00">对集合设定规则</font></strong>，二是<strong><font color="#f00">创建集合</font></strong>，创建mongoose.Schema构造函数的实例即可创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> // 设定集合规则</span><br><span class="line">const courseSchema = new mongoose.Schema(&#123;</span><br><span class="line">    name: String,</span><br><span class="line">    author: String,</span><br><span class="line">    isPublished: Boolean</span><br><span class="line">&#125;);</span><br><span class="line"> // 创建集合并应用规则</span><br><span class="line">const Course = mongoose.model(&apos;Course&apos;, courseSchema); // courses</span><br></pre></td></tr></table></figure><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>创建文档实际上就是<strong><font color="#f00">向集合中插入数据</font></strong>。<br>分为两步：</p><ol><li>创建集合实例。</li><li>调用实例对象下的save方法将数据保存到数据库中。</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> // 创建集合实例</span><br><span class="line">const course = new Course(&#123;</span><br><span class="line">    name: &apos;Node.js course&apos;,</span><br><span class="line">    author: &apos;董冬懂冻&apos;,</span><br><span class="line">    tags: [&apos;node&apos;, &apos;backend&apos;],</span><br><span class="line">    isPublished: true</span><br><span class="line">&#125;);</span><br><span class="line"> // 将数据保存到数据库中</span><br><span class="line">course.save();</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Course.create(&#123;name: &apos;JavaScript基础&apos;, author: &apos;董冬懂冻&apos;, isPublish: true&#125;, (err, doc) =&gt; &#123; </span><br><span class="line">     //  错误对象</span><br><span class="line">    console.log(err)</span><br><span class="line">     //  当前插入的文档</span><br><span class="line">    console.log(doc)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Course.create(&#123;name: &apos;JavaScript基础&apos;, author: &apos;董冬懂冻&apos;, isPublish: true&#125;)</span><br><span class="line">      .then(doc =&gt; console.log(doc))</span><br><span class="line">      .catch(err =&gt; console.log(err))</span><br></pre></td></tr></table></figure><h3 id="mongoDB数据库导入数据"><a href="#mongoDB数据库导入数据" class="headerlink" title="mongoDB数据库导入数据"></a>mongoDB数据库导入数据</h3><p>mongoimport –d 数据库名称 –c 集合名称 –file 要导入的数据文件<br>找到mongodb数据库的安装目录，将安装目录下的bin目录放置在环境变量中。</p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//  根据条件查找文档（条件为空则查找所有文档）</span><br><span class="line">Course.find().then(result =&gt; console.log(result))</span><br><span class="line"></span><br><span class="line">// 返回文档集合</span><br><span class="line">[&#123;</span><br><span class="line">    _id: 5c0917ed37ec9b03c07cf95f,</span><br><span class="line">    name: &apos;node.js基础&apos;,</span><br><span class="line">    author: &apos;董冬懂冻‘</span><br><span class="line">&#125;,&#123;</span><br><span class="line">     _id: 5c09dea28acfb814980ff827,</span><br><span class="line">     name: &apos;Javascript&apos;,</span><br><span class="line">     author: &apos;董冬懂冻‘</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//  根据条件查找文档</span><br><span class="line">Course.findOne(&#123;name: &apos;node.js基础&apos;&#125;).then(result =&gt; console.log(result))</span><br><span class="line"></span><br><span class="line">// 返回文档</span><br><span class="line"> &#123;</span><br><span class="line">    _id: 5c0917ed37ec9b03c07cf95f,</span><br><span class="line">    name: &apos;node.js基础&apos;,</span><br><span class="line">    author: &apos;董冬懂冻‘</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  匹配大于 小于</span><br><span class="line">User.find(&#123;age: &#123;$gt: 20, $lt: 50&#125;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  匹配包含</span><br><span class="line">User.find(&#123;hobbies: &#123;$in: [&apos;敲代码&apos;]&#125;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  选择要查询的字段  </span><br><span class="line">User.find().select(&apos;name email&apos;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将数据按照年龄进行排序</span><br><span class="line">User.find().sort(&apos;age&apos;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  skip 跳过多少条数据  limit 限制查询数量</span><br><span class="line">User.find().skip(2).limit(2).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> // 删除单个</span><br><span class="line">Course.findOneAndDelete(&#123;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> // 删除多个</span><br><span class="line">User.deleteMany(&#123;&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 更新单个</span><br><span class="line">User.updateOne(&#123;查询条件&#125;, &#123;要修改的值&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 更新多个</span><br><span class="line">User.updateMany(&#123;查询条件&#125;, &#123;要更改的值&#125;).then(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure><h3 id="mongoose验证"><a href="#mongoose验证" class="headerlink" title="mongoose验证"></a>mongoose验证</h3><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败。</p><ul><li>required: true 必传字段</li><li>minlength：3 字符串最小长度</li><li>maxlength: 20 字符串最大长度</li><li>min: 2 数值最小为2</li><li>max: 100 数值最大为100</li><li>enum: [‘html’, ‘css’, ‘javascript’, ‘node.js’]</li><li>trim: true 去除字符串两边的空格</li><li>validate: 自定义验证器</li><li>default: 默认值</li></ul><h3 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h3><p>通常<strong><font color="#f00">不同集合的数据之间是有关系的</font></strong>，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联。</p><ul><li>使用id对集合进行关联</li><li>使用populate方法进行关联集合查询</li></ul><p><img src="/前端笔记/node-js-day04/image-20200525155834084.png" alt></p><h3 id="集合关联实现"><a href="#集合关联实现" class="headerlink" title="集合关联实现"></a>集合关联实现</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 用户集合</span><br><span class="line">const User = mongoose.model(&apos;User&apos;, new mongoose.Schema(&#123; name: &#123; type: String &#125; &#125;)); </span><br><span class="line"></span><br><span class="line">// 文章集合</span><br><span class="line">const Post = mongoose.model(&apos;Post&apos;, new mongoose.Schema(&#123;</span><br><span class="line">    title: &#123; type: String &#125;,</span><br><span class="line">    // 使用ID将文章集合和作者集合进行关联</span><br><span class="line">    author: &#123; type: mongoose.Schema.Types.ObjectId, ref: &apos;User&apos; &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">//联合查询</span><br><span class="line">Post.find()</span><br><span class="line">      .populate(&apos;author&apos;)</span><br><span class="line">      .then((err, result) =&gt; console.log(result));</span><br></pre></td></tr></table></figure><h3 id="案例：用户信息增删改查"><a href="#案例：用户信息增删改查" class="headerlink" title="案例：用户信息增删改查"></a>案例：用户信息增删改查</h3><ol><li>搭建网站服务器，实现客户端与服务器端的通信</li><li>连接数据库，创建用户集合，向集合中插入文档</li><li>当用户访问/list时，将所有用户信息查询出来</li><li>将用户信息和表格HTML进行拼接并将拼接结果响应回客户端</li><li>当用户访问/add时，呈现表单页面，并实现添加用户信息功能</li><li>当用户访问/modify时，呈现修改页面，并实现修改用户信息功能</li><li>当用户访问/delete时，实现用户删除功能</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.MongoDB数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够安装数据库软件 &lt;/li&gt;
&lt;li&gt;能够知道集合、文档的概念&lt;/li&gt;
&lt;li&gt;能够使用mongoose创建集合的方法创建集合&lt;/li&gt;
&lt;li&gt;能够对数据库中的数据进行增删改查操作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day03/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day03/</id>
    <published>2020-05-25T06:44:49.000Z</published>
    <updated>2020-05-25T07:37:16.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.请求响应原理及HTTP协议</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><p>能够知道B/S软件体系结构 </p></li><li><p>能够搭建Web服务器</p></li><li><p>能够使用获取GET、POST参数的方式获取参数</p></li><li><p>能够掌握如何制作路由</p></li><li><p>能够知道同步异步的概念</p></li><li><p>能够知道回调函数的概念</p></li></ul><a id="more"></a><h2 id="服务器端基础概念"><a href="#服务器端基础概念" class="headerlink" title="服务器端基础概念"></a>服务器端基础概念</h2><h3 id="网站的组成"><a href="#网站的组成" class="headerlink" title="网站的组成"></a>网站的组成</h3><ul><li>网站应用程序主要分为两大部分：客户端和服务器端。</li><li>客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用HTML、CSS、JavaScript构建。</li><li>服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。</li></ul><p><img src="/前端笔记/node-js-day03/image-20200525144850186.png" alt></p><h3 id="Node网站服务器"><a href="#Node网站服务器" class="headerlink" title="Node网站服务器"></a>Node网站服务器</h3><p>能够提供网站访问服务的机器就是网站服务器，它能够接收客户端的<strong><font color="#f00">请求</font></strong>，能够对请求做出<strong><font color="#f00">响应</font></strong>。</p><p><img src="/前端笔记/node-js-day03/image-20200525145003480.png" alt></p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>互联网中设备的唯一标识。<br>IP是Internet Protocol Address的简写，代表互联网协议地址.</p><p><img src="/前端笔记/node-js-day03/image-20200525145132728.png" alt></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>由于IP地址难于记忆，所以产生了域名的概念，所谓域名就是平时上网所使用的网址。<br><a href="https://www.itfool.cn">https://www.itfool.cn</a><br>虽然在地址栏中输入的是网址, 但是最终还是会将域名转换为ip才能访问到指定的网站服务器。</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口是计算机与外界通讯交流的出口，用来区分服务器电脑中提供的不同的服务。</p><p><img src="/前端笔记/node-js-day03/image-20200525145530866.png" alt></p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符，又叫URL（Uniform Resource Locator），是专为标识Internet网上资源位置而设的一种编址方式，我们平时所说的网页地址指的即是URL。</p><p><strong>URL的组成</strong></p><ul><li><p>传输协议: //服务器IP或域名:端口/资源所在位置标识</p><p><a href="http://www.itfool.cn/前端笔记/node-js-day03/">http://www.itfool.cn/前端笔记/node-js-day03/</a></p></li><li><p>http：超文本传输协议，提供了一种发布和接收HTML页面的方法。</p></li></ul><h3 id="开发过程中客户端和服务器端说明"><a href="#开发过程中客户端和服务器端说明" class="headerlink" title="开发过程中客户端和服务器端说明"></a>开发过程中客户端和服务器端说明</h3><p>在开发阶段，客户端和服务器端使用同一台电脑，即开发人员电脑。</p><p><img src="/前端笔记/node-js-day03/image-20200525145818182.png" alt></p><h2 id="创建web服务器"><a href="#创建web服务器" class="headerlink" title="创建web服务器"></a>创建web服务器</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> // 引用系统模块</span><br><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line"> // 创建web服务器</span><br><span class="line">const app = http.createServer();</span><br><span class="line"> // 当客户端发送请求的时候</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">       //  响应</span><br><span class="line">      res.end(&apos;&lt;h1&gt;hi, user&lt;/h1&gt;&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"> // 监听3000端口</span><br><span class="line">app.listen(3000);</span><br><span class="line">console.log(&apos;服务器已启动，监听3000端口，请访问 localhost:3000&apos;)</span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="HTTP协议的概念"><a href="#HTTP协议的概念" class="headerlink" title="HTTP协议的概念"></a>HTTP协议的概念</h3><p><strong><font color="#f00">超文本传输协议</font></strong>（英文：HyperText Transfer Protocol，缩写：<strong><font color="#f00">HTTP</font></strong>）规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，是客户端（用户）和服务器端（网站）请求和应答的标准。</p><p><img src="/前端笔记/node-js-day03/image-20200525150058605.png" alt></p><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>在HTTP请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，并且要遵守规定好的格式。</p><p><img src="/前端笔记/node-js-day03/image-20200525150132970.png" alt></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p><strong>1. 请求方式 （Request Method）</strong></p><ul><li>GET     请求数据</li><li>POST   发送数据</li></ul><p><strong>2. 请求地址 （Request URL）</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    req.headers  // 获取请求报文</span><br><span class="line">    req.url      // 获取请求地址</span><br><span class="line">    req.method   // 获取请求方法</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><img src="/前端笔记/node-js-day03/image-20200525150505527.png" alt></p><p><strong>1. HTTP状态码</strong></p><ul><li>200 请求成功</li><li>404 请求的资源没有被找到</li><li>500 服务器端错误</li><li>400 客户端请求有语法错误</li></ul><p><strong>2.内容类型</strong></p><ul><li>200 请求成功</li><li>404 请求的资源没有被找到</li><li>500 服务器端错误</li><li>400 客户端请求有语法错误</li></ul><h2 id="HTTP请求与响应处理"><a href="#HTTP请求与响应处理" class="headerlink" title="HTTP请求与响应处理"></a>HTTP请求与响应处理</h2><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>客户端向服务器端发送请求时，有时需要携带一些客户信息，客户信息需要通过请求参数的形式传递到服务器端，比如登录操作。</p><p><img src="/前端笔记/node-js-day03/image-20200525150642680.png" alt></p><h3 id="GET请求参数"><a href="#GET请求参数" class="headerlink" title="GET请求参数"></a>GET请求参数</h3><ul><li>参数被放置在浏览器地址栏中，例如：<a href="http://localhost:3000/?name=zhangsan&amp;age=20" target="_blank" rel="noopener">http://localhost:3000/?name=zhangsan&amp;age=20</a></li><li>参数获取需要借助系统模块url，url模块用来处理url地址</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">// 导入url系统模块 用于处理url地址</span><br><span class="line">const url = require(&apos;url&apos;);</span><br><span class="line">const app = http.createServer();</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 将url路径的各个部分解析出来并返回对象</span><br><span class="line">        // true 代表将参数解析为对象格式</span><br><span class="line">    let &#123;query&#125; = url.parse(req.url, true);</span><br><span class="line">    console.log(query);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h3 id="POST请求参数"><a href="#POST请求参数" class="headerlink" title="POST请求参数"></a>POST请求参数</h3><ul><li>参数被放置在请求体中进行传输</li><li>获取POST参数需要使用data事件和end事件</li><li>使用querystring系统模块将参数转换为对象格式</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 导入系统模块querystring 用于将HTTP参数转换为对象格式</span><br><span class="line">const querystring = require(&apos;querystring&apos;);</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    let postData = &apos;&apos;;</span><br><span class="line">    // 监听参数传输事件</span><br><span class="line">    req.on(&apos;data&apos;, (chunk) =&gt; postData += chunk;);</span><br><span class="line">    // 监听参数传输完毕事件</span><br><span class="line">    req.on(&apos;end&apos;, () =&gt; &#123; </span><br><span class="line">        console.log(querystring.parse(postData)); </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><a href="http://localhost:3000/index" target="_blank" rel="noopener">http://localhost:3000/index</a><br><a href="http://localhost:3000/login" target="_blank" rel="noopener">http://localhost:3000/login</a><br>路由是指客户端请求地址与服务器端程序代码的对应关系。简单的说，就是请求什么响应什么。</p><p><img src="/前端笔记/node-js-day03/image-20200525150828958.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 当客户端发来请求的时候</span><br><span class="line">app.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取客户端的请求路径</span><br><span class="line">    let &#123; pathname &#125; = url.parse(req.url);</span><br><span class="line">    if (pathname == &apos;/&apos; || pathname == &apos;/index&apos;) &#123;</span><br><span class="line">        res.end(&apos;欢迎来到首页&apos;);</span><br><span class="line">    &#125; else if (pathname == &apos;/list&apos;) &#123;</span><br><span class="line">        res.end(&apos;欢迎来到列表页页&apos;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       res.end(&apos;抱歉, 您访问的页面出游了&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。</p><div style="text-align: center"><img src="https://itfool.cn/images/logo.png" alt="https://itfool.cn/"></div><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><p>相同的请求地址不同的响应资源，这种资源就是动态资源。</p><p><a href="https://itfool.cn/archives/" target="_blank" rel="noopener">https://itfool.cn/archives/</a></p><p><a href="https://itfool.cn/categories/" target="_blank" rel="noopener">https://itfool.cn/categories/</a></p><p><img src="/前端笔记/node-js-day03/image-20200525152441995.png" alt></p><h3 id="客户端请求途径"><a href="#客户端请求途径" class="headerlink" title="客户端请求途径"></a>客户端请求途径</h3><p><img src="/前端笔记/node-js-day03/image-20200525152738284.png" alt></p><h2 id="Node-js异步编程"><a href="#Node-js异步编程" class="headerlink" title="Node.js异步编程"></a>Node.js异步编程</h2><h3 id="同步API-异步API"><a href="#同步API-异步API" class="headerlink" title="同步API, 异步API"></a>同步API, 异步API</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 路径拼接</span><br><span class="line">const public = path.join(__dirname, &apos;public&apos;);</span><br><span class="line">// 请求地址解析</span><br><span class="line">const urlObj = url.parse(req.url);</span><br><span class="line">// 读取文件</span><br><span class="line">fs.readFile(&apos;./demo.txt&apos;, &apos;utf8&apos;, (err, result) =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>同步API：只有当前API执行完成后，才能继续执行下一个API</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;); </span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><p><strong>异步API：当前API的执行不会阻塞后续代码的执行</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;before&apos;);</span><br><span class="line">setTimeout(</span><br><span class="line">   () =&gt; &#123; console.log(&apos;last&apos;);</span><br><span class="line">&#125;, 2000);</span><br><span class="line">console.log(&apos;after&apos;);</span><br></pre></td></tr></table></figure><h3 id="同步API-异步API的区别（-获取返回值-）"><a href="#同步API-异步API的区别（-获取返回值-）" class="headerlink" title="同步API, 异步API的区别（ 获取返回值 ）"></a>同步API, 异步API的区别（ 获取返回值 ）</h3><p>同步API可以从返回值中拿到API执行的结果, 但是异步API是不可以的</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  // 同步</span><br><span class="line">function sum (n1, n2) &#123; </span><br><span class="line">    return n1 + n2;</span><br><span class="line">&#125; </span><br><span class="line">const result = sum (10, 20);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  // 异步</span><br><span class="line">function getMsg () &#123; </span><br><span class="line">    setTimeout(function () &#123; </span><br><span class="line">        return &#123; msg: &apos;Hello Node.js&apos; &#125;</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line">const msg = getMsg ();</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>自己定义函数让别人去调用。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> // getData函数定义</span><br><span class="line">function getData (callback) &#123;&#125;</span><br><span class="line"> // getData函数调用</span><br><span class="line">getData (() =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用回调函数获取异步API执行结果"><a href="#使用回调函数获取异步API执行结果" class="headerlink" title="使用回调函数获取异步API执行结果"></a>使用回调函数获取异步API执行结果</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getMsg (callback) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        callback (&#123; msg: &apos;Hello Node.js&apos; &#125;)</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line">getMsg (function (msg) &#123; </span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="同步API-异步API的区别（代码执行顺序）"><a href="#同步API-异步API的区别（代码执行顺序）" class="headerlink" title="同步API, 异步API的区别（代码执行顺序）"></a>同步API, 异步API的区别（代码执行顺序）</h3><p>同步API从上到下依次执行，前面代码会阻塞后面代码的执行</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 100000; i++) &#123; </span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;for循环后面的代码&apos;);</span><br></pre></td></tr></table></figure><p>异步API不会等待API执行完成后再向下执行代码</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;代码开始执行&apos;); </span><br><span class="line">setTimeout(() =&gt; &#123; console.log(&apos;2秒后执行的代码&apos;)&#125;, 2000);</span><br><span class="line">setTimeout(() =&gt; &#123; console.log(&apos;&quot;0秒&quot;后执行的代码&apos;)&#125;, 0); </span><br><span class="line">console.log(&apos;代码结束执行&apos;);</span><br></pre></td></tr></table></figure><h3 id="Node-js中的异步API"><a href="#Node-js中的异步API" class="headerlink" title="Node.js中的异步API"></a>Node.js中的异步API</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./demo.txt&apos;, (err, result) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var server = http.createServer();</span><br><span class="line">server.on(&apos;request&apos;, (req, res) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><p>如果异步API后面代码的执行依赖当前异步API的执行结果，但实际上后续代码在执行的时候异步API还没有返回结果，这个问题要怎么解决呢？</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./demo.txt&apos;, (err, result) =&gt; &#123;&#125;);</span><br><span class="line">console.log(&apos;文件读取结果&apos;);</span><br></pre></td></tr></table></figure><p>需求：依次读取A文件、B文件、C文件</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise出现的目的是解决Node.js异步编程中回调地狱的问题。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        if (true) &#123;</span><br><span class="line">            resolve(&#123;name: &apos;张三&apos;&#125;)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            reject(&apos;失败了&apos;) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(result =&gt; console.log(result); // &#123;name: &apos;张三&apos;&#125;)</span><br><span class="line">       .catch(error =&gt; console.log(error); // 失败了)</span><br></pre></td></tr></table></figure><h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fn = async () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">async function fn () &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>async关键字</strong></p><ol><li>普通函数定义前加async关键字 普通函数变成异步函数</li><li>异步函数默认返回promise对象</li><li>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</li><li>在异步函数内部使用throw关键字抛出程序异常</li><li>调用异步函数再链式调用then方法获取异步函数执行结果</li><li>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</li></ol><p><strong>await关键字</strong></p><ol><li><p>await关键字只能出现在异步函数中</p></li><li><p>await promise await后面只能写promise对象 写其他类型的API是不不可以的</p></li><li><p>await关键字可是暂停异步函数向下执行 直到promise返回结果</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.请求响应原理及HTTP协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;能够知道B/S软件体系结构 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够搭建Web服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够使用获取GET、POST参数的方式获取参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够掌握如何制作路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够知道同步异步的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够知道回调函数的概念&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day02/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day02/</id>
    <published>2020-05-25T03:43:45.000Z</published>
    <updated>2020-05-25T06:42:38.976Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.模块加载及第三方包</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够使用模块导入导出方法 </li><li>能够使用基本的系统模块</li><li>能够使用常用的第三方包</li><li>能够说出模块的加载机制</li><li>能够知道package.json文件的作用</li></ul><a id="more"></a><h2 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h2><h3 id="JavaScript开发弊端"><a href="#JavaScript开发弊端" class="headerlink" title="JavaScript开发弊端"></a>JavaScript开发弊端</h3><p>JavaScript在使用时存在两大问题，<strong><font color="#f00">文件依赖</font></strong>和<strong><font color="#f00">命名冲突</font></strong>。</p><p><img src="/前端笔记/node-js-day02/image-20200525114923070.png" alt></p><h3 id="生活中的模块化开发"><a href="#生活中的模块化开发" class="headerlink" title="生活中的模块化开发"></a>生活中的模块化开发</h3><p><img src="/前端笔记/node-js-day02/image-20200525114938653.png" alt>)<img src="/前端笔记/node-js-day02/image-20200525114943729.png" alt></p><h3 id="软件中的模块化开发"><a href="#软件中的模块化开发" class="headerlink" title="软件中的模块化开发"></a>软件中的模块化开发</h3><p>一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。</p><p><img src="/前端笔记/node-js-day02/image-20200525115010570.png" alt></p><h3 id="Node-js中模块化开发规范"><a href="#Node-js中模块化开发规范" class="headerlink" title="Node.js中模块化开发规范"></a>Node.js中模块化开发规范</h3><p>Node.js规定一个<strong><font style="color:#f00">JavaScript文件</font></strong>就是一个模块，模块<strong><font style="color:#f00">内部定义的变量和函数</font></strong>默认情况下在<strong><font style="color:#f00">外部无法得到</font></strong></p><p>模块内部可以使用<strong><font style="color:#f00">exports对象进行成员导出</font></strong>， 使用<strong><font style="color:#f00">require方法</font></strong>导入其他模块。</p><p><img src="/前端笔记/node-js-day02/image-20200525115217442.png" alt></p><p><strong>模块成员导出</strong><br><img src="/前端笔记/node-js-day02/image-20200525115505261.png" alt></p><p><strong>模块成员的导入</strong><br><img src="/前端笔记/node-js-day02/image-20200525115611832.png" alt="导入模块时后缀可以省略"></p><p><strong>模块成员导出的另一种方式</strong><br><img src="/前端笔记/node-js-day02/image-20200525115818472.png" alt></p><p><img src="/前端笔记/node-js-day02/image-20200525115827084.png" alt></p><p><strong>模块导出两种方式的联系与区别</strong></p><p><img src="/前端笔记/node-js-day02/image-20200525115944374.png" alt></p><h2 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h2><h3 id="什么是系统模块"><a href="#什么是系统模块" class="headerlink" title="什么是系统模块"></a>什么是系统模块</h3><p>Node运行环境提供的API. 因为这些API都是以模块化的方式进行开发的, 所以我们又称Node运行环境提供的API为系统模块</p><p><img src="/前端笔记/node-js-day02/image-20200525120045940.png" alt></p><h3 id="系统模块fs-文件操作"><a href="#系统模块fs-文件操作" class="headerlink" title="系统模块fs 文件操作"></a>系统模块fs 文件操作</h3><p>f：file 文件 ，s：system 系统，文件操作系统。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure><p><strong>读取文件内容</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.reaFile(&apos;文件路径/文件名称&apos;[,&apos;文件编码&apos;], callback);</span><br></pre></td></tr></table></figure><p><strong>写入文件内容</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(&apos;文件路径/文件名称&apos;, &apos;数据&apos;, callback);</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const content = &apos;&lt;h3&gt;正在使用fs.writeFile写入文件内容&lt;/h3&gt;&apos;;</span><br><span class="line"> fs.writeFile(&apos;../index.html&apos;, content, err =&gt; &#123;</span><br><span class="line">   if (err != null) &#123; </span><br><span class="line">       console.log(err);</span><br><span class="line">       return;</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(&apos;文件写入成功&apos;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="系统模块path-路径操作"><a href="#系统模块path-路径操作" class="headerlink" title="系统模块path 路径操作"></a>系统模块path 路径操作</h3><p><strong>为什么要进行路径拼接</strong></p><ul><li>不同操作系统的路径分隔符不统一</li><li>/public/uploads/avatar</li><li>Windows 上是 \   /</li><li>Linux 上是 /</li></ul><p><strong>路径拼接语法</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.join(&apos;路径&apos;, &apos;路径&apos;, ...)</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> // 导入path模块</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"> // 路径拼接</span><br><span class="line">let finialPath = path.join(&apos;itcast&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c.css&apos;);</span><br><span class="line"> // 输出结果 itcast\a\b\c.css</span><br><span class="line">console.log(finialPath);</span><br></pre></td></tr></table></figure><p><strong>相对路径VS绝对路径</strong> </p><ul><li>大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录</li><li>在读取文件或者设置文件路径时都会选择绝对路径</li><li>使用__dirname获取当前文件所在的绝对路径</li></ul><h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><h3 id="什么是第三方模块"><a href="#什么是第三方模块" class="headerlink" title="什么是第三方模块"></a>什么是第三方模块</h3><p> 别人写好的、具有特定功能的、我们能直接使用的模块即第三方模块，由于第三方模块通常都是由多个文件组成并且被放置在一个文件夹中，所以又名包。</p><p><strong>第三方模块有两种存在形式：</strong></p><ul><li>以js文件的形式存在，提供实现项目具体功能的API接口。</li><li>以命令行工具形式存在，辅助项目开发</li></ul><h3 id="获取第三方模块"><a href="#获取第三方模块" class="headerlink" title="获取第三方模块"></a>获取第三方模块</h3><p><strong>npmjs.com</strong>：第三方模块的存储和分发仓库</p><p><img src="/前端笔记/node-js-day02/image-20200525141557238.png" alt></p><p><strong>npm (node package manager) ：</strong> node的第三方模块管理工具</p><ul><li>下载：npm install 模块名称</li><li>卸载：npm unintall package 模块名称</li></ul><p>全局安装与本地安装</p><ul><li>命令行工具：全局安装</li><li>库文件：本地安装</li></ul><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>nodemon是一个命令行工具，用以辅助项目开发。<br>在Node.js中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐。</p><p><strong>使用步骤</strong></p><ol><li>使用npm install nodemon –g 下载它</li><li>在命令行工具中用nodemon命令替代node命令执行文件</li></ol><p><img src="/前端笔记/node-js-day02/image-20200525142103049.png" alt></p><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>nrm ( npm registry manager )：npm下载地址切换工具<br>npm默认的下载地址在国外，国内下载速度慢</p><p><strong>使用步骤</strong></p><ol><li>使用npm install nrm –g 下载它</li><li>查询可用下载地址列表 nrm ls</li><li>切换npm下载地址 nrm use 下载地址名称</li></ol><h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><p>基于node平台开发的前端构建工具<br>将机械化操作编写成任务, 想要执行机械化操作时执行一个命令行命令任务就能自动执行了<br>用机器代替手工，提高开发效率。</p><p><strong>Gulp能做什么</strong></p><ul><li>项目上线，HTML、CSS、JS文件压缩合并</li><li>语法转换（es6、less …）</li><li>公共文件抽离</li><li>修改文件浏览器自动刷新</li></ul><p><strong>Gulp使用</strong></p><ol><li>使用npm install gulp下载gulp库文件</li><li>在项目根目录下建立gulpfile.js文件</li><li>重构项目的文件夹结构 src目录放置源代码文件 dist目录放置构建后文件</li><li>在gulpfile.js文件中编写任务</li><li>在命令行工具中执行gulp任务</li></ol><p><strong>Gulp中提供的方法</strong></p><ul><li>gulp.src()：获取任务要处理的文件</li><li>gulp.dest()：输出文件</li><li>gulp.task()：建立gulp任务</li><li>gulp.watch()：监控文件的变化</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&apos;gulp&apos;);</span><br><span class="line"> // 使用gulp.task()方法建立任务</span><br><span class="line">gulp.task(&apos;first&apos;, () =&gt; &#123;</span><br><span class="line">   // 获取要处理的文件</span><br><span class="line">   gulp.src(&apos;./src/css/base.css&apos;) </span><br><span class="line">   // 将处理后的文件输出到dist目录</span><br><span class="line">   .pipe(gulp.dest(&apos;./dist/css&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Gulp插件</strong></p><ul><li>gulp-htmlmin ：html文件压缩</li><li>gulp-csso ：压缩css</li><li>gulp-babel ：JavaScript语法转化</li><li>gulp-less: less语法转化</li><li>gulp-uglify ：压缩混淆JavaScript</li><li>gulp-file-include 公共文件包含</li><li>browsersync 浏览器实时同步</li></ul><h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><h3 id="node-modules文件夹的问题"><a href="#node-modules文件夹的问题" class="headerlink" title="node_modules文件夹的问题"></a>node_modules文件夹的问题</h3><ol><li>文件夹以及文件过多过碎，当我们将项目整体拷贝给别人的时候,，传输速度会很慢很慢. </li><li>复杂的模块依赖关系需要被记录，确保模块的版本和当前保持一致，否则会导致当前项目运行报错</li></ol><h3 id="package-json文件的作用"><a href="#package-json文件的作用" class="headerlink" title="package.json文件的作用"></a>package.json文件的作用</h3><p>项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等。<br>使用<strong><font style="color:#f00">npm init -y</font></strong>命令生成。</p><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><ul><li>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包，称为项目依赖</li><li>使用npm install 包名命令下载的文件会默认被添加到 package.json 文件的 dependencies 字段中</li></ul><p><img src="/前端笔记/node-js-day02/image-20200525144007369.png" alt></p><h3 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h3><ul><li>在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖</li><li>使用npm install 包名 –save-dev命令将包添加到package.json文件的devDependencies字段中</li></ul><p><img src="/前端笔记/node-js-day02/image-20200525144050137.png" alt></p><h3 id="package-lock-json文件的作用"><a href="#package-lock-json文件的作用" class="headerlink" title="package-lock.json文件的作用"></a>package-lock.json文件的作用</h3><ul><li>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</li><li>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</li></ul><h2 id="Node-js中模块的加载机制"><a href="#Node-js中模块的加载机制" class="headerlink" title="Node.js中模块的加载机制"></a>Node.js中模块的加载机制</h2><h3 id="模块查找规则-当模块拥有路径但没有后缀时"><a href="#模块查找规则-当模块拥有路径但没有后缀时" class="headerlink" title="模块查找规则-当模块拥有路径但没有后缀时"></a>模块查找规则-当模块拥有路径但没有后缀时</h3><p><img src="/前端笔记/node-js-day02/image-20200525144157565.png" alt></p><h3 id="模块查找规则-当模块没有路径且没有后缀时"><a href="#模块查找规则-当模块没有路径且没有后缀时" class="headerlink" title="模块查找规则-当模块没有路径且没有后缀时"></a>模块查找规则-当模块没有路径且没有后缀时</h3><p><img src="/前端笔记/node-js-day02/image-20200525144223190.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.模块加载及第三方包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够使用模块导入导出方法 &lt;/li&gt;
&lt;li&gt;能够使用基本的系统模块&lt;/li&gt;
&lt;li&gt;能够使用常用的第三方包&lt;/li&gt;
&lt;li&gt;能够说出模块的加载机制&lt;/li&gt;
&lt;li&gt;能够知道package.json文件的作用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/node-js-day01/"/>
    <id>http://www.itfool.cn/前端笔记/node-js-day01/</id>
    <published>2020-05-25T02:44:02.000Z</published>
    <updated>2020-05-25T04:14:23.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第04阶段.前后端交互.Node.js基础</p></blockquote><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>能够知道Node是什么</li><li>能够安装Node运行环境</li><li>能够知道系统环境变量PATH的作用</li><li>能够使用Node环境执行代码</li></ul><a id="more"></a><h1 id="Node开发概述"><a href="#Node开发概述" class="headerlink" title="Node开发概述"></a>Node开发概述</h1><h2 id="为什么要学习服务器端开发基础"><a href="#为什么要学习服务器端开发基础" class="headerlink" title="为什么要学习服务器端开发基础"></a>为什么要学习服务器端开发基础</h2><ul><li>能够和后端程序员更加紧密的配合</li><li>网站业务逻辑前置，学习前端技术需要后端技术支撑（Ajax）</li><li>扩宽知识视野，能够站在更高的角度审视整个项目</li></ul><h2 id="服务器端开发要做的事情"><a href="#服务器端开发要做的事情" class="headerlink" title="服务器端开发要做的事情"></a>服务器端开发要做的事情</h2><ul><li>实现网站的业务逻辑</li><li>数据的增删改查</li></ul><h2 id="为什么选择Node"><a href="#为什么选择Node" class="headerlink" title="为什么选择Node"></a>为什么选择Node</h2><ul><li>使用JavaScript语法开发后端应用</li><li>一些公司要求前端工程师掌握Node开发</li><li>生态系统活跃，有大量开源库可以使用</li><li>前端开发工具大多基于Node开发</li></ul><h2 id="Node是什么"><a href="#Node是什么" class="headerlink" title="Node是什么"></a>Node是什么</h2><p>Node是一个基于Chrome V8引擎的JavaScript代码运行环境。</p><p><img src="/前端笔记/node-js-day01/image-20200525112125520.png" alt>)<img src="/前端笔记/node-js-day01/image-20200525112144698.png" alt></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li><p>浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境</p></li><li><p>Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境</p></li></ul><h1 id="Node运行环境搭建"><a href="#Node运行环境搭建" class="headerlink" title="Node运行环境搭建"></a>Node运行环境搭建</h1><h2 id="Node-js运行环境安装"><a href="#Node-js运行环境安装" class="headerlink" title="Node.js运行环境安装"></a>Node.js运行环境安装</h2><p>国内下载地址：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p><p><img src="/前端笔记/node-js-day01/image-20200525112700103.png" alt></p><h2 id="Node环境安装失败解决办法"><a href="#Node环境安装失败解决办法" class="headerlink" title="Node环境安装失败解决办法"></a>Node环境安装失败解决办法</h2><h3 id="错误代号2502、2503"><a href="#错误代号2502、2503" class="headerlink" title="错误代号2502、2503"></a>错误代号2502、2503</h3><p><img src="/前端笔记/node-js-day01/image-20200525112845407.png" alt><br>失败原因：系统帐户权限不足。<br>解决办法：</p><ul><li>以管理员身份运行powershell命令行工具</li><li>输入运行安装包命令 msiexec /package node安装包位置</li></ul><h3 id="执行命令报错"><a href="#执行命令报错" class="headerlink" title="执行命令报错"></a>执行命令报错</h3><p><img src="/前端笔记/node-js-day01/image-20200525113006006.png" alt></p><p>失败原因：Node安装目录写入环境变量失败<br>解决办法：将Node安装目录添加到环境变量中</p><h3 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h3><p>存储系统中的目录，在命令行中执行命令的时候系统会自动去这些目录中查找命令的位置。</p><p><img src="/前端笔记/node-js-day01/image-20200525113103968.png" alt></p><h1 id="Node-js快速入门"><a href="#Node-js快速入门" class="headerlink" title="Node.js快速入门"></a>Node.js快速入门</h1><h2 id="Node-js-的组成"><a href="#Node-js-的组成" class="headerlink" title="Node.js 的组成"></a>Node.js 的组成</h2><ul><li>JavaScript 由三部分组成，ECMAScript，DOM，BOM。</li><li>Node.js是由ECMAScript及Node 环境提供的一些附加API组成的，包括文件、网络、路径等等一些更加强大的 API。</li></ul><p><img src="/前端笔记/node-js-day01/image-20200525113214336.png" alt>)<img src="/前端笔记/node-js-day01/image-20200525113226035.png" alt></p><h2 id="Node-js基础语法"><a href="#Node-js基础语法" class="headerlink" title="Node.js基础语法"></a>Node.js基础语法</h2><p>所有ECMAScript语法在Node环境中都可以使用。<br>在Node环境下执行代码，使用Node命令执行后缀为.js的文件即可</p><p><img src="/前端笔记/node-js-day01/image-20200525113302254.png" alt></p><h2 id="Node-js全局对象global"><a href="#Node-js全局对象global" class="headerlink" title="Node.js全局对象global"></a>Node.js全局对象global</h2><p>在<font style="color:#f00">浏览器</font>中全局对象是window，在<font style="color:#f00">Node</font>中全局对象是global。</p><p>Node中全局对象下有以下方法，可以在任何地方使用，global可以省略。</p><ul><li>console.log()     在控制台中输出</li><li>setTimeout()     设置超时定时器</li><li>clearTimeout()  清除超时时定时器</li><li>setInterval()      设置间歇定时器</li><li>clearInterval()   清除间歇定时器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第04阶段.前后端交互.Node.js基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;能够知道Node是什么&lt;/li&gt;
&lt;li&gt;能够安装Node运行环境&lt;/li&gt;
&lt;li&gt;能够知道系统环境变量PATH的作用&lt;/li&gt;
&lt;li&gt;能够使用Node环境执行代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Node.js" scheme="http://www.itfool.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day05/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day05/</id>
    <published>2020-05-23T09:09:06.000Z</published>
    <updated>2020-05-23T09:12:24.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.ES6</p></blockquote><h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出使用let关键字声明变量的特点</li><li>能够使用解构赋值从数组中提取值</li><li>能够说出箭头函数拥有的特性</li><li>能够使用剩余参数接收剩余的函数参数</li><li>能够使用拓展运算符拆分数组</li><li>能够说出模板字符串拥有的特性<a id="more"></a><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2></li></ul><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p><img src="/前端笔记/javascript高级-day05/es-version.png" alt></p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; </span><br><span class="line">     <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a is not defined </span></span><br><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="hljs-string">'abc'</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> tmp; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="hljs-number">0</span>]();</span><br><span class="line">arr[<span class="hljs-number">1</span>]();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day05/let%E9%9D%A2%E8%AF%95%E9%A2%98.png" alt></p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> arr = [];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="hljs-number">0</span>]();</span><br><span class="line">arr[<span class="hljs-number">1</span>]();</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day05/let%E9%9D%A2%E8%AF%95%E9%A2%982.png" alt></p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; </span><br><span class="line">     <span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span></span><br></pre></td></tr></table></figure><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> PI; <span class="hljs-comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;</span><br><span class="line">PI = <span class="hljs-number">100</span>; <span class="hljs-comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];</span><br><span class="line">ary[<span class="hljs-number">0</span>] = <span class="hljs-string">'a'</span>;</span><br><span class="line">ary[<span class="hljs-number">1</span>] = <span class="hljs-string">'b'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">// ['a', 'b']; </span></span><br><span class="line">ary = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>]; <span class="hljs-comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="/前端笔记/javascript高级-day05/var&let&const%E5%8C%BA%E5%88%AB.png" alt></p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//1</span></span><br><span class="line"> <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">//2</span></span><br><span class="line"> <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">//3</span></span><br><span class="line"><span class="hljs-comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'zhangsan'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;; </span><br><span class="line"><span class="hljs-keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// 'zhangsan' </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge&#125; = person; <span class="hljs-comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(myName); <span class="hljs-comment">// 'zhangsan' </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(myAge); <span class="hljs-comment">// 20</span></span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="hljs-comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;&#125;<span class="hljs-comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//es6写法</span></span><br><span class="line"><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params">v</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-comment">//es6写法</span></span><br><span class="line"> <span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'张三'</span>&#125; </span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; </span><br><span class="line">         <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-keyword">const</span> resFn = fn.call(obj); </span><br><span class="line"> resFn();</span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> age = <span class="hljs-number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">age: <span class="hljs-number">20</span>,</span><br><span class="line">say: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">alert(<span class="hljs-keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.say();<span class="hljs-comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">first, ...args</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(first); <span class="hljs-comment">// 10</span></span><br><span class="line">     <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)</span><br></pre></td></tr></table></figure><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> students = [<span class="hljs-string">'wangwu'</span>, <span class="hljs-string">'zhangsan'</span>, <span class="hljs-string">'lisi'</span>];</span><br><span class="line"><span class="hljs-keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="hljs-built_in">console</span>.log(s1);  <span class="hljs-comment">// 'wangwu' </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(s2);  <span class="hljs-comment">// ['zhangsan', 'lisi']</span></span><br></pre></td></tr></table></figure><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line">...ary  <span class="hljs-comment">// 1, 2, 3</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(...ary);    <span class="hljs-comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 方法一 </span></span><br><span class="line"> <span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"> <span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="line"> <span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="hljs-comment">// 方法二 </span></span><br><span class="line"> ary1.push(...ary2);</span><br></pre></td></tr></table></figure><h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> oDivs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'div'</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//定义一个集合</span></span><br><span class="line"><span class="hljs-keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="hljs-string">'0'</span>: <span class="hljs-string">'a'</span>,</span><br><span class="line">    <span class="hljs-string">'1'</span>: <span class="hljs-string">'b'</span>,</span><br><span class="line">    <span class="hljs-string">'2'</span>: <span class="hljs-string">'c'</span>,</span><br><span class="line">    length: <span class="hljs-number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="hljs-comment">//转成数组</span></span><br><span class="line"><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="hljs-string">"0"</span>: <span class="hljs-number">1</span>,</span><br><span class="line">    <span class="hljs-string">"1"</span>: <span class="hljs-number">2</span>,</span><br><span class="line">    <span class="hljs-string">"length"</span>: <span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">let</span> newAry = <span class="hljs-built_in">Array</span>.from(arrayLike, item =&gt; item *<span class="hljs-number">2</span>)<span class="hljs-comment">//[2,4]</span></span><br></pre></td></tr></table></figure><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ary = [&#123;</span><br><span class="line">     id: <span class="hljs-number">1</span>,</span><br><span class="line">     name: <span class="hljs-string">'张三'</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     id: <span class="hljs-number">2</span>,</span><br><span class="line">     name: <span class="hljs-string">'李四'</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="hljs-keyword">let</span> target = ary.find(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item.id == <span class="hljs-number">2</span>);<span class="hljs-comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];</span><br><span class="line"><span class="hljs-keyword">let</span> index = ary.findIndex(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> value &gt; <span class="hljs-number">9</span>); </span><br><span class="line"><span class="hljs-built_in">console</span>.log(index); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>) <span class="hljs-comment">// true </span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> name = <span class="hljs-string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> name = <span class="hljs-string">'张三'</span>; </span><br><span class="line"><span class="hljs-keyword">let</span> sayHello = <span class="hljs-string">`hello,my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>; <span class="hljs-comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result = &#123; </span><br><span class="line">    name: <span class="hljs-string">'zhangsan'</span>, </span><br><span class="line">    age: <span class="hljs-number">20</span>,</span><br><span class="line">    sex: <span class="hljs-string">'男'</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">let</span> html = <span class="hljs-string">` &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/div&gt; `</span>;</span><br></pre></td></tr></table></figure><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'哈哈哈哈 追不到我吧 我就是这么强大'</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="hljs-keyword">let</span> greet = <span class="hljs-string">`<span class="hljs-subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(greet); <span class="hljs-comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> str = <span class="hljs-string">'Hello world!'</span>;</span><br><span class="line">str.startsWith(<span class="hljs-string">'Hello'</span>) <span class="hljs-comment">// true </span></span><br><span class="line">str.endsWith(<span class="hljs-string">'!'</span>)       <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'x'</span>.repeat(<span class="hljs-number">3</span>)      <span class="hljs-comment">// "xxx" </span></span><br><span class="line"><span class="hljs-string">'hello'</span>.repeat(<span class="hljs-number">2</span>)  <span class="hljs-comment">// "hellohello"</span></span><br></pre></td></tr></table></figure><h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set([1, 2, 3, 4, 4]);//&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();</span><br><span class="line">s.add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>); <span class="hljs-comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.delete(<span class="hljs-number">2</span>)             <span class="hljs-comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.has(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.clear()               <span class="hljs-comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="hljs-comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;ES6语法&quot;&gt;&lt;a href=&quot;#ES6语法&quot; class=&quot;headerlink&quot; title=&quot;ES6语法&quot;&gt;&lt;/a&gt;ES6语法&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够说出使用let关键字声明变量的特点&lt;/li&gt;
&lt;li&gt;能够使用解构赋值从数组中提取值&lt;/li&gt;
&lt;li&gt;能够说出箭头函数拥有的特性&lt;/li&gt;
&lt;li&gt;能够使用剩余参数接收剩余的函数参数&lt;/li&gt;
&lt;li&gt;能够使用拓展运算符拆分数组&lt;/li&gt;
&lt;li&gt;能够说出模板字符串拥有的特性&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://www.itfool.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day04/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day04/</id>
    <published>2020-05-23T09:04:53.000Z</published>
    <updated>2020-05-23T09:09:53.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.正则表达式</p></blockquote><h2 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h2><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p><a id="more"></a><h3 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   /^[a-z0-9_-]{3,16}$/<h2 id="正则表达式在js中的使用"><a href="#正则表达式在js中的使用" class="headerlink" title="正则表达式在js中的使用"></a>正则表达式在js中的使用</h2></li></ol><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过调用RegExp对象的构造函数创建 </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/123/</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(regexp);</span><br></pre></td></tr></table></figure><p>方式二：利用字面量创建 正则表达式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;</span><br></pre></td></tr></table></figure><h3 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-number">123</span>));<span class="hljs-comment">//匹配字符中是否出现123  出现结果为true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'abc'</span>));<span class="hljs-comment">//匹配字符中是否出现123 未出现结果为false</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day04/img4.png" alt></p><h2 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h2><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p><a href="<http://tool.oschina.net/regex">正则测试工具</a></p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/abc/</span>; <span class="hljs-comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="hljs-comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'abc'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'abcd'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'aabcd'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'---------------------------'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc/</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'abc'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'abcd'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'aabcd'</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'---------------------------'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^abc$/</span>; <span class="hljs-comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'abc'</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'abcd'</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'aabcd'</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">'abcabc'</span>)); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="方括号"><a href="#方括号" class="headerlink" title="[] 方括号"></a>[] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span>; <span class="hljs-comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'andy'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'baby'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'color'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">'red'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-keyword">var</span> rg1 = <span class="hljs-regexp">/^[abc]$/</span>; <span class="hljs-comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'aa'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'b'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'c'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">'abc'</span>));<span class="hljs-comment">//true</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-z]$/</span> <span class="hljs-comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'z'</span>));<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">'A'</span>));<span class="hljs-comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-comment">//字符组合</span></span><br><span class="line"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^[a-zA-Z0-9]$/</span>; <span class="hljs-comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">'B'</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-number">8</span>));<span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">'!'</span>));<span class="hljs-comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h4><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="用户名表单验证"><a href="#用户名表单验证" class="headerlink" title="用户名表单验证"></a>用户名表单验证</h4><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li></ol><p><img src="/前端笔记/javascript高级-day04/img2.png" alt></p><p><img src="/前端笔记/javascript高级-day04/img1.png" alt></p><p>分析:</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li><li>首先准备好这种正则表达式模式/$[a-zA-Z0-9-_]{6,16}^/</li><li>当表单失去焦点就开始验证. </li><li>如果符合正则规范, 则让后面的span标签添加 right类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"uname"</span>&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>请输入用户名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> <span class="hljs-comment">//  量词是设定某个模式出现的次数</span></span><br><span class="line"> <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="hljs-comment">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span></span><br><span class="line"> <span class="hljs-keyword">var</span> uname = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.uname'</span>);</span><br><span class="line"> <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'span'</span>);</span><br><span class="line"> uname.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-keyword">this</span>.value)) &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'正确的'</span>);</span><br><span class="line">   span.className = <span class="hljs-string">'right'</span>;</span><br><span class="line">   span.innerHTML = <span class="hljs-string">'用户名格式输入正确'</span>;</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'错误的'</span>);</span><br><span class="line">   span.className = <span class="hljs-string">'wrong'</span>;</span><br><span class="line">   span.innerHTML = <span class="hljs-string">'用户名格式输入不正确'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符. </p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/" target="_blank" rel="noopener">正则表达式在线测试</a></p><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p><p><img src="/前端笔记/javascript高级-day04/img3.png" alt></p><p><strong>案例:验证座机号码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br></pre></td></tr></table></figure><p><strong>表单验证案例</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span></span><br><span class="line"><span class="hljs-comment">//验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line"> <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-keyword">this</span>.value)) &#123;</span><br><span class="line">    <span class="hljs-comment">// console.log('正确的');</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'success'</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜您输入正确'</span>;</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">       <span class="hljs-comment">// console.log('不正确');</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'error'</span>;</span><br><span class="line">      <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="error_icon"&gt;&lt;/i&gt;格式不正确,请从新输入 '</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//QQ号验证: /^[1-9]\d&#123;4,&#125;$/; </span></span><br><span class="line"><span class="hljs-comment">//昵称验证:/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span></span><br><span class="line"><span class="hljs-comment">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">regexp</span>(<span class="hljs-params">ele, reg</span>) </span>&#123;</span><br><span class="line">    ele.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-keyword">this</span>.value)) &#123;</span><br><span class="line">        <span class="hljs-comment">// console.log('正确的');</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'success'</span>;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜您输入正确'</span>;</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">     <span class="hljs-comment">// console.log('不正确');</span></span><br><span class="line">     <span class="hljs-keyword">this</span>.nextElementSibling.className = <span class="hljs-string">'error'</span>;</span><br><span class="line">     <span class="hljs-keyword">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">'&lt;i class="error_icon"&gt;&lt;/i&gt; 格式不正确,请从新输入 '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//密码验证:/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span></span><br><span class="line"><span class="hljs-comment">//再次输入密码只需匹配与上次输入的密码值 是否一致</span></span><br></pre></td></tr></table></figure><h3 id="正则替换replace"><a href="#正则替换replace" class="headerlink" title="正则替换replace"></a>正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'andy和red'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> newStr = str.replace(<span class="hljs-string">'andy'</span>, <span class="hljs-string">'baby'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(newStr)<span class="hljs-comment">//baby和red</span></span><br><span class="line"><span class="hljs-comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="hljs-keyword">var</span> newStr2 = str.replace(<span class="hljs-regexp">/andy/</span>, <span class="hljs-string">'baby'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(newStr2)<span class="hljs-comment">//baby和red</span></span><br><span class="line"><span class="hljs-comment">//全部替换</span></span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'abcabc'</span></span><br><span class="line"><span class="hljs-keyword">var</span> nStr = str.replace(<span class="hljs-regexp">/a/</span>,<span class="hljs-string">'哈哈'</span>)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(nStr) <span class="hljs-comment">//哈哈bcabc</span></span><br><span class="line"><span class="hljs-comment">//全部替换g</span></span><br><span class="line"><span class="hljs-keyword">var</span> nStr = str.replace(<span class="hljs-regexp">/a/</span>a,<span class="hljs-string">'哈哈'</span>)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(nStr) <span class="hljs-comment">//哈哈bc哈哈bc</span></span><br><span class="line"><span class="hljs-comment">//忽略大小写i</span></span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'aAbcAba'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> newStr = str.replace(<span class="hljs-regexp">/a/gi</span>,<span class="hljs-string">'哈哈'</span>)<span class="hljs-comment">//"哈哈哈哈bc哈哈b哈哈"</span></span><br></pre></td></tr></table></figure><p><strong>案例:过滤敏感词汇</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=<span class="hljs-string">""</span> id=<span class="hljs-string">"message"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'textarea'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    div.innerHTML = text.value.replace(<span class="hljs-regexp">/激情|gay/g</span>, <span class="hljs-string">'**'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.正则表达式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正则表达式概述&quot;&gt;&lt;a href=&quot;#正则表达式概述&quot; class=&quot;headerlink&quot; title=&quot;正则表达式概述&quot;&gt;&lt;/a&gt;正则表达式概述&lt;/h2&gt;&lt;h3 id=&quot;什么是正则表达式&quot;&gt;&lt;a href=&quot;#什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是正则表达式&quot;&gt;&lt;/a&gt;什么是正则表达式&lt;/h3&gt;&lt;p&gt;正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。&lt;/p&gt;
&lt;p&gt;正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。&lt;/p&gt;
&lt;p&gt;其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day03/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day03/</id>
    <published>2020-05-23T09:00:45.000Z</published>
    <updated>2020-05-23T09:09:58.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.this指向和闭包</p></blockquote><h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ol><li><p>方式1 函数声明方式 function 关键字 (命名函数)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2 函数表达式(匿名函数)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式3 new Function() </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'console.log(a + b)'</span>);</span><br><span class="line">f(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'参数1'</span>,<span class="hljs-string">'参数2'</span>..., <span class="hljs-string">'函数体'</span>)</span><br><span class="line">注意</span><br><span class="line"><span class="hljs-comment">/*Function 里面参数都必须是字符串格式</span></span><br><span class="line"><span class="hljs-comment">第三种方式执行效率低，也不方便书写，因此较少使用</span></span><br><span class="line"><span class="hljs-comment">所有函数都是 Function 的实例(对象)  </span></span><br><span class="line"><span class="hljs-comment">函数也属于对象</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'人生的巅峰'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> fn(); </span><br><span class="line"><span class="hljs-comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">  sayHi: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'人生的巅峰'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.sayHi();</span><br><span class="line"><span class="hljs-comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">new</span> Star();</span><br><span class="line"><span class="hljs-comment">/* 4. 绑定事件函数*/</span></span><br><span class="line"> btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;   <span class="hljs-comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="hljs-comment">/* 5. 定时器函数*/</span></span><br><span class="line">setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;, <span class="hljs-number">1000</span>);  这个函数是定时器自动<span class="hljs-number">1</span>秒钟调用一次</span><br><span class="line"><span class="hljs-comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'人生的巅峰'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="函数内部的this指向"><a href="#函数内部的this指向" class="headerlink" title="函数内部的this指向"></a>函数内部的this指向</h3><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this 的指向不同</p><p>一般指向我们的调用者.</p><p><img src="/前端笔记/javascript高级-day03/img1.png" alt></p><h3 id="改变函数内部-this-指向"><a href="#改变函数内部-this-指向" class="headerlink" title="改变函数内部 this 指向"></a>改变函数内部 this 指向</h3><h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p><p>应用场景:  经常做继承. </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="hljs-string">'andy'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(a+b)</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">//此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span></span><br></pre></td></tr></table></figure><p>以上代码运行结果为:</p><p><img src="/前端笔记/javascript高级-day03/img4.png" alt></p><h4 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p>应用场景:  经常跟数组有关系</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="hljs-string">'andy'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(a+b)</span><br><span class="line">&#125;;</span><br><span class="line">fn()<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.apply(o,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day03/img4.png" alt></p><h4 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p><p>应用场景:不调用函数,但是还想改变this指向</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line"> name: <span class="hljs-string">'andy'</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a + b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> f = fn.bind(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//此处的f是bind返回的新函数</span></span><br><span class="line">f();<span class="hljs-comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day03/img5.png" alt></p><h4 id="call、apply、bind三者的异同"><a href="#call、apply、bind三者的异同" class="headerlink" title="call、apply、bind三者的异同"></a>call、apply、bind三者的异同</h4><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li></ol></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><h3 id="什么是严格模式"><a href="#什么是严格模式" class="headerlink" title="什么是严格模式"></a>什么是严格模式</h3><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript变体的一种方式，即在严格的条件下运行 JS 代码。</p><p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>严格模式对正常的 JavaScript 语义做了一些更改： </p><p>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</p><p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p><p>3.提高编译器效率，增加运行速度。</p><p>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p><h3 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h3><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><ul><li><p>情况一 :为脚本开启严格模式</p><ul><li><p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他<br>script 脚本文件。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line"><span class="hljs-meta">　　　　"use strict"</span>;</span><br><span class="line">       <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="line">　　　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="hljs-comment">//或者 </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-meta">  　"use strict"</span>; <span class="hljs-comment">//当前script标签开启了严格模式</span></span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/当前script标签未开启严格模式</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>情况二: 为函数开启严格模式</p><ul><li><p>要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-meta">　　"use strict"</span>;</span><br><span class="line">　　<span class="hljs-keyword">return</span> <span class="hljs-string">"123"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-comment">//当前fn函数开启了严格模式</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="严格模式中的变化"><a href="#严格模式中的变化" class="headerlink" title="严格模式中的变化"></a>严格模式中的变化</h3><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">'use strict'</span></span><br><span class="line">num = <span class="hljs-number">10</span> </span><br><span class="line"><span class="hljs-built_in">console</span>.log(num)<span class="hljs-comment">//严格模式后使用未声明的变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">delete</span> num2;<span class="hljs-comment">//严格模式不允许删除变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn();  </span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"> <span class="hljs-keyword">this</span>.sex = <span class="hljs-string">'男'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh.sex);</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//严格模式下，定时器 this 还是指向 window</span></span><br><span class="line">&#125;, <span class="hljs-number">2000</span>);</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">更多严格模式要求参考</a></p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><p><img src="F:/BaiduNetdiskDownload/%25E9%25BB%2591%25E9%25A9%25AC/www.fxw.la_%2520WEB%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25A7%2586%25E9%25A2%2591%25E6%2595%2599%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/07-10%2520JavaScript%25E7%25BD%2591%25E9%25A1%25B5%25E7%25BC%2596%25E7%25A8%258B_9fxw.com/07-10%2520JavaScript%25E7%25BD%2591%25E9%25A1%25B5%25E7%25BC%2596%25E7%25A8%258B/04-JavaScript%25E9%25AB%2598%25E7%25BA%25A7%25E8%25B5%2584%25E6%2596%2599/JavaScript%2520%25E9%25AB%2598%25E7%25BA%25A7_day03/4-%25E7%25AC%2594%25E8%25AE%25B0/images/img2.png" alt></p><p>此时fn 就是一个高阶函数</p><p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数。</p><p>同理函数也可以作为返回值传递回来</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="变量的作用域复习"><a href="#变量的作用域复习" class="headerlink" title="变量的作用域复习"></a>变量的作用域复习</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><ol><li>函数内部可以使用全局变量。</li><li>函数外部不可以使用局部变量。</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。 </p><p><img src="/前端笔记/javascript高级-day03/img3.png" alt></p><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><p>作用：延伸变量的作用范围。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(num);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> fun;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-keyword">var</span> f = fn();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h3 id="闭包的案例"><a href="#闭包的案例" class="headerlink" title="闭包的案例"></a>闭包的案例</h3><ol><li>利用闭包的方式得到当前li 的索引号</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"><span class="hljs-comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line"><span class="hljs-comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;</span><br><span class="line">    lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>闭包应用-3秒钟之后,打印所有li元素的内容</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">   (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;</span><br><span class="line">     setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="line">     &#125;, <span class="hljs-number">3000</span>)</span><br><span class="line">   &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>闭包应用-计算打车价格 </li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*需求分析</span></span><br><span class="line"><span class="hljs-comment">打车起步价13(3公里内),  之后每多一公里增加 5块钱.  用户输入公里数就可以计算打车价格</span></span><br><span class="line"><span class="hljs-comment">如果有拥堵情况,总价格多收取10块钱拥堵费*/</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-keyword">var</span> car = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">var</span> start = <span class="hljs-number">13</span>; <span class="hljs-comment">// 起步价  局部变量</span></span><br><span class="line">     <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总价  局部变量</span></span><br><span class="line">     <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">       <span class="hljs-comment">// 正常的总价</span></span><br><span class="line">       price: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">         <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;</span><br><span class="line">           total = start;</span><br><span class="line">         &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">           total = start + (n - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-keyword">return</span> total;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="hljs-comment">// 拥堵之后的费用</span></span><br><span class="line">       yd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">flag</span>) </span>&#123;</span><br><span class="line">         <span class="hljs-keyword">return</span> flag ? total + <span class="hljs-number">10</span> : total;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;)();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(car.price(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 23</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(car.yd(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// 33</span></span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">var</span> name = <span class="hljs-string">"The Window"</span>;</span><br><span class="line">   <span class="hljs-keyword">var</span> object = &#123;</span><br><span class="line">     name: <span class="hljs-string">"My Object"</span>,</span><br><span class="line">     getNameFunc: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(object.getNameFunc()())</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="hljs-keyword">var</span> name = <span class="hljs-string">"The Window"</span>;　　</span><br><span class="line">  <span class="hljs-keyword">var</span> object = &#123;　　　　</span><br><span class="line">    name: <span class="hljs-string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p><strong>递归：</strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p><strong>注意：</strong>递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p><h3 id="利用递归求1-n的阶乘"><a href="#利用递归求1-n的阶乘" class="headerlink" title="利用递归求1~n的阶乘"></a>利用递归求1~n的阶乘</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//结束条件</span></span><br><span class="line">       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> n * fn(n - <span class="hljs-number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-built_in">console</span>.log(fn(<span class="hljs-number">3</span>));</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day03/img6.png" alt></p><h3 id="利用递归求斐波那契数列"><a href="#利用递归求斐波那契数列" class="headerlink" title="利用递归求斐波那契数列"></a>利用递归求斐波那契数列</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 利用递归函数求斐波那契数列(兔子序列)  1、1、2、3、5、8、13、21...</span></span><br><span class="line"><span class="hljs-comment">// 用户输入一个数字 n 就可以求出 这个数字对应的兔子序列值</span></span><br><span class="line"><span class="hljs-comment">// 我们只需要知道用户输入的n 的前面两项(n-1 n-2)就可以计算出n 对应的序列值</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span> || n === <span class="hljs-number">2</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> fb(n - <span class="hljs-number">1</span>) + fb(n - <span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(fb(<span class="hljs-number">3</span>));</span><br></pre></td></tr></table></figure><h3 id="利用递归遍历数据"><a href="#利用递归遍历数据" class="headerlink" title="利用递归遍历数据"></a>利用递归遍历数据</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 我们想要做输入id号,就可以返回的数据对象</span></span><br><span class="line"> <span class="hljs-keyword">var</span> data = [&#123;</span><br><span class="line">   id: <span class="hljs-number">1</span>,</span><br><span class="line">   name: <span class="hljs-string">'家电'</span>,</span><br><span class="line">   goods: [&#123;</span><br><span class="line">     id: <span class="hljs-number">11</span>,</span><br><span class="line">     gname: <span class="hljs-string">'冰箱'</span>,</span><br><span class="line">     goods: [&#123;</span><br><span class="line">       id: <span class="hljs-number">111</span>,</span><br><span class="line">       gname: <span class="hljs-string">'海尔'</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       id: <span class="hljs-number">112</span>,</span><br><span class="line">       gname: <span class="hljs-string">'美的'</span></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">     id: <span class="hljs-number">12</span>,</span><br><span class="line">     gname: <span class="hljs-string">'洗衣机'</span></span><br><span class="line">   &#125;]</span><br><span class="line"> &#125;, &#123;</span><br><span class="line">   id: <span class="hljs-number">2</span>,</span><br><span class="line">   name: <span class="hljs-string">'服饰'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="hljs-comment">//1.利用 forEach 去遍历里面的每一个对象</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getID</span>(<span class="hljs-params">json, id</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">var</span> o = &#123;&#125;;</span><br><span class="line">   json.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-comment">// console.log(item); // 2个数组元素</span></span><br><span class="line">     <span class="hljs-keyword">if</span> (item.id == id) &#123;</span><br><span class="line">       <span class="hljs-comment">// console.log(item);</span></span><br><span class="line">       o = item;</span><br><span class="line">       <span class="hljs-keyword">return</span> o;</span><br><span class="line">       <span class="hljs-comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span></span><br><span class="line">       <span class="hljs-comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span></span><br><span class="line">     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.goods &amp;&amp; item.goods.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">       o = getID(item.goods, id);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="hljs-keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.this指向和闭包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;函数的定义和调用&quot;&gt;&lt;a href=&quot;#函数的定义和调用&quot; class=&quot;headerlink&quot; title=&quot;函数的定义和调用&quot;&gt;&lt;/a&gt;函数的定义和调用&lt;/h2&gt;&lt;h3 id=&quot;函数的定义方式&quot;&gt;&lt;a href=&quot;#函数的定义方式&quot; class=&quot;headerlink&quot; title=&quot;函数的定义方式&quot;&gt;&lt;/a&gt;函数的定义方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;方式1 函数声明方式 function 关键字 (命名函数)&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式2 函数表达式(匿名函数)&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式3 new Function() &lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;console.log(a + b)&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;参数1&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&#39;参数2&#39;&lt;/span&gt;..., &lt;span class=&quot;hljs-string&quot;&gt;&#39;函数体&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*Function 里面参数都必须是字符串格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;第三种方式执行效率低，也不方便书写，因此较少使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;所有函数都是 Function 的实例(对象)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;函数也属于对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day02/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day02/</id>
    <published>2020-05-23T08:55:49.000Z</published>
    <updated>2020-05-23T09:10:05.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.构造函数和原型</p></blockquote><h2 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h2><h3 id="1对象的三种创建方式–复习"><a href="#1对象的三种创建方式–复习" class="headerlink" title="1对象的三种创建方式–复习"></a>1对象的三种创建方式–复习</h3><ol><li><p>字面量方式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();</span><br></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">  <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'zs'</span>,<span class="hljs-number">12</span>);</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">     <span class="hljs-keyword">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span></span><br></pre></td></tr></table></figure><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">     <span class="hljs-keyword">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Star.sex = <span class="hljs-string">'男'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="/前端笔记/javascript高级-day02/img1.png" alt></p><h3 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的。</p><p>JavaScript 规定，每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p><p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'张学友'</span>, <span class="hljs-number">19</span>);</span><br><span class="line">ldh.sing();<span class="hljs-comment">//我会唱歌</span></span><br><span class="line">zxy.sing();<span class="hljs-comment">//我会唱歌</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img7.png" alt></p><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在。</span><br><span class="line">__proto__对象原型和原型对象 prototype 是等价的</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img2.png" alt></p><p><img src="/前端笔记/javascript高级-day02/img3.png" alt></p><h3 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="line">constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</span><br><span class="line">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数如:</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line"> Star.prototype = &#123;</span><br><span class="line"> <span class="hljs-comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">   <span class="hljs-keyword">constructor</span>: Star, // 手动设置指回原来的构造函数</span><br><span class="line">   sing: function() &#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   movie: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会演电影'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'张学友'</span>, <span class="hljs-number">19</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(zxy)</span><br></pre></td></tr></table></figure><p>以上代码运行结果,设置constructor属性如图:</p><p><img src="/前端笔记/javascript高级-day02/img8.png" alt>如果未设置constructor属性,如图:</p><p><img src="/前端笔记/javascript高级-day02/img9.png" alt></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>​    每一个实例对象又有一个<strong>proto</strong>属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有<strong>proto</strong>属性，这样一层一层往上找就形成了原型链。</p><p><img src="/前端笔记/javascript高级-day02/img5.png" alt></p><h3 id="构造函数实例和原型对象三角关系"><a href="#构造函数实例和原型对象三角关系" class="headerlink" title="构造函数实例和原型对象三角关系"></a>构造函数实例和原型对象三角关系</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1.</span>构造函数的prototype属性指向了构造函数原型对象</span><br><span class="line"><span class="hljs-number">2.</span>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</span><br><span class="line"><span class="hljs-number">3.</span>构造函数的原型对象的<span class="hljs-keyword">constructor</span>属性指向了构造函数,实例对象的原型的<span class="hljs-keyword">constructor</span>属性也指向了构造函数</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img4.png" alt></p><h3 id="原型链和成员的查找机制"><a href="#原型链和成员的查找机制" class="headerlink" title="原型链和成员的查找机制"></a>原型链和成员的查找机制</h3><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有<strong>proto</strong>属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找原型对象的原型（Object的原型对象）。</span><br><span class="line">依此类推一直找到 Object 为止（null）。</span><br><span class="line">__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</span><br></pre></td></tr></table></figure><h3 id="原型对象中this指向"><a href="#原型对象中this指向" class="headerlink" title="原型对象中this指向"></a>原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> that;</span><br><span class="line">Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我会唱歌'</span>);</span><br><span class="line">    that = <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(that === ldh);<span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img6.png" alt></p><h3 id="通过原型为数组扩展内置方法"><a href="#通过原型为数组扩展内置方法" class="headerlink" title="通过原型为数组扩展内置方法"></a>通过原型为数组扩展内置方法</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.length; i++) &#123;</span><br><span class="line">  sum += <span class="hljs-keyword">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><ul><li>call()可以调用函数</li><li>call()可以修改this的指向,使用call()的时候 参数一是修改后的this指向,参数2,参数3..使用逗号隔开连接</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="hljs-keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="hljs-string">'andy'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  fn.call(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//调用了函数此时的this指向了对象o,</span></span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img10.png" alt></p><h3 id="子构造函数继承父构造函数中的属性"><a href="#子构造函数继承父构造函数中的属性" class="headerlink" title="子构造函数继承父构造函数中的属性"></a>子构造函数继承父构造函数中的属性</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 1. 父构造函数</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">   <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">   <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="hljs-comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">  <span class="hljs-number">3.</span>使用call方式实现子继承父的属性</span><br><span class="line">  Father.call(<span class="hljs-keyword">this</span>, uname, age);</span><br><span class="line">  <span class="hljs-keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p><img src="/前端笔记/javascript高级-day02/img11.png" alt></p><h3 id="借用原型对象继承方法"><a href="#借用原型对象继承方法" class="headerlink" title="借用原型对象继承方法"></a>借用原型对象继承方法</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 父构造函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">  <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">  <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.money = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100000</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="hljs-comment">// 2 .子构造函数 </span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">      Father.call(<span class="hljs-keyword">this</span>, uname, age);</span><br><span class="line">      <span class="hljs-keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="hljs-comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line">  Son.prototype = <span class="hljs-keyword">new</span> Father();</span><br><span class="line">  <span class="hljs-comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line">  Son.prototype.constructor = Son;</span><br><span class="line">  <span class="hljs-comment">// 这个是子构造函数专门的方法</span></span><br><span class="line">  Son.prototype.exam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'孩子要考试'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p>如上代码结果如图:</p><p><img src="/前端笔记/javascript高级-day02/img12.png" alt></p><h2 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h2><h3 id="数组方法forEach遍历数组"><a href="#数组方法forEach遍历数组" class="headerlink" title="数组方法forEach遍历数组"></a>数组方法forEach遍历数组</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, array</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">//参数一是:数组元素</span></span><br><span class="line">      <span class="hljs-comment">//参数二是:数组元素的索引</span></span><br><span class="line">      <span class="hljs-comment">//参数三是:当前的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"> <span class="hljs-comment">//相当于数组遍历的 for循环 没有返回值</span></span><br></pre></td></tr></table></figure><h3 id="数组方法filter过滤数组"><a href="#数组方法filter过滤数组" class="headerlink" title="数组方法filter过滤数组"></a>数组方法filter过滤数组</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">66</span>, <span class="hljs-number">4</span>, <span class="hljs-number">88</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];</span><br><span class="line"><span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index,array</span>) </span>&#123;</span><br><span class="line"> <span class="hljs-comment">//参数一是:数组元素</span></span><br><span class="line">   <span class="hljs-comment">//参数二是:数组元素的索引</span></span><br><span class="line">   <span class="hljs-comment">//参数三是:当前的数组</span></span><br><span class="line">   <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(newArr);<span class="hljs-comment">//[66,88] //返回值是一个新数组</span></span><br></pre></td></tr></table></figure><h3 id="数组方法some"><a href="#数组方法some" class="headerlink" title="数组方法some"></a>数组方法some</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">some 查找数组中是否有满足条件的元素 </span><br><span class="line"> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>];</span><br><span class="line"> <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//参数一是:数组元素</span></span><br><span class="line">     <span class="hljs-comment">//参数二是:数组元素的索引</span></span><br><span class="line">     <span class="hljs-comment">//参数三是:当前的数组</span></span><br><span class="line">     <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span></span><br></pre></td></tr></table></figure><h3 id="筛选商品案例"><a href="#筛选商品案例" class="headerlink" title="筛选商品案例"></a>筛选商品案例</h3><ol><li><p>定义数组对象数据</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> data = [&#123;</span><br><span class="line">            id: <span class="hljs-number">1</span>,</span><br><span class="line">            pname: <span class="hljs-string">'小米'</span>,</span><br><span class="line">            price: <span class="hljs-number">3999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="hljs-number">2</span>,</span><br><span class="line">            pname: <span class="hljs-string">'oppo'</span>,</span><br><span class="line">            price: <span class="hljs-number">999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="hljs-number">3</span>,</span><br><span class="line">            pname: <span class="hljs-string">'荣耀'</span>,</span><br><span class="line">            price: <span class="hljs-number">1299</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="hljs-number">4</span>,</span><br><span class="line">            pname: <span class="hljs-string">'华为'</span>,</span><br><span class="line">            price: <span class="hljs-number">1999</span></span><br><span class="line">        &#125;, ];</span><br></pre></td></tr></table></figure></li><li><p>使用forEach遍历数据并渲染到页面中</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'tr'</span>);</span><br><span class="line">  tr.innerHTML = <span class="hljs-string">'&lt;td&gt;'</span> + value.id + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="hljs-string">'&lt;/td&gt;'</span>;</span><br><span class="line">  tbody.appendChild(tr);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据价格筛选数据</p><ol><li><p>获取到搜索按钮并为其绑定点击事件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_price.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用filter将用户输入的价格信息筛选出来</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search_price.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">var</span> newDate = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//start.value是开始区间</span></span><br><span class="line">        <span class="hljs-comment">//end.value是结束的区间</span></span><br><span class="line">      <span class="hljs-keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(newDate);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>将筛选出来的数据重新渲染到表格中</p><ol><li><p>将渲染数据的逻辑封装到一个函数中</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setDate</span>(<span class="hljs-params">mydata</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 先清空原来tbody 里面的数据</span></span><br><span class="line">  tbody.innerHTML = <span class="hljs-string">''</span>;</span><br><span class="line">  mydata.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'tr'</span>);</span><br><span class="line">    tr.innerHTML = <span class="hljs-string">'&lt;td&gt;'</span> + value.id + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname + <span class="hljs-string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="hljs-string">'&lt;/td&gt;'</span>;</span><br><span class="line">      tbody.appendChild(tr);</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>将筛选之后的数据重新渲染</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> search_price.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">var</span> newDate = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(newDate);</span><br><span class="line">     <span class="hljs-comment">// 把筛选完之后的对象渲染到页面中</span></span><br><span class="line">     setDate(newDate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>根据商品名称筛选</p><ol><li><p>获取用户输入的商品名称</p></li><li><p>为查询按钮绑定点击事件,将输入的商品名称与这个数据进行筛选</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> search_pro.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">var</span> arr = [];</span><br><span class="line">     data.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">       <span class="hljs-keyword">if</span> (value.pname === product.value) &#123;</span><br><span class="line">         <span class="hljs-comment">// console.log(value);</span></span><br><span class="line">         arr.push(value);</span><br><span class="line">         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// return 后面必须写true  </span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="hljs-comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">     setDate(arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="some和forEach区别"><a href="#some和forEach区别" class="headerlink" title="some和forEach区别"></a>some和forEach区别</h3><ul><li>如果查询数组中唯一的元素, 用some方法更合适,在some 里面 遇到 return true 就是终止遍历 迭代效率更高</li><li>在forEach 里面 return 不会终止迭代</li></ul><h3 id="trim方法去除字符串两端的空格"><a href="#trim方法去除字符串两端的空格" class="headerlink" title="trim方法去除字符串两端的空格"></a>trim方法去除字符串两端的空格</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">'   hello   '</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str.trim()）  <span class="hljs-comment">//hello 去除两端空格</span></span><br><span class="line"><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">'   he l l o   '</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str.trim()）  <span class="hljs-comment">//he l l o  去除两端空格</span></span><br></pre></td></tr></table></figure><h3 id="获取对象的属性名"><a href="#获取对象的属性名" class="headerlink" title="获取对象的属性名"></a>获取对象的属性名</h3><p>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">     id: <span class="hljs-number">1</span>,</span><br><span class="line">     pname: <span class="hljs-string">'小米'</span>,</span><br><span class="line">     price: <span class="hljs-number">1999</span>,</span><br><span class="line">     num: <span class="hljs-number">2000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(result)<span class="hljs-comment">//[id，pname,price,num]</span></span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>Object.defineProperty设置或修改对象中的属性</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;</span><br><span class="line">value:修改或新增的属性的值,</span><br><span class="line">writable:<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<span class="hljs-comment">//如果值为false 不允许修改这个属性值</span></span><br><span class="line">enumerable: <span class="hljs-literal">false</span>,<span class="hljs-comment">//enumerable 如果值为false 则不允许遍历</span></span><br><span class="line">        configurable: <span class="hljs-literal">false</span>  <span class="hljs-comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.构造函数和原型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;构造函数和原型&quot;&gt;&lt;a href=&quot;#构造函数和原型&quot; class=&quot;headerlink&quot; title=&quot;构造函数和原型&quot;&gt;&lt;/a&gt;构造函数和原型&lt;/h2&gt;&lt;h3 id=&quot;1对象的三种创建方式–复习&quot;&gt;&lt;a href=&quot;#1对象的三种创建方式–复习&quot; class=&quot;headerlink&quot; title=&quot;1对象的三种创建方式–复习&quot;&gt;&lt;/a&gt;1对象的三种创建方式–复习&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;字面量方式&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new关键字&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造函数方式&lt;/p&gt;
&lt;figure class=&quot;highlight js hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-string&quot;&gt;&#39;zs&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/javascript%E9%AB%98%E7%BA%A7-day01/"/>
    <id>http://www.itfool.cn/前端笔记/javascript高级-day01/</id>
    <published>2020-05-23T08:46:28.000Z</published>
    <updated>2020-05-23T08:55:21.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript高级.面向对象</p></blockquote><h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li></ul><h3 id="面向过程与面向对象对比"><a href="#面向过程与面向对象对比" class="headerlink" title="面向过程与面向对象对比"></a>面向过程与面向对象对比</h3><table><thead><tr><th></th><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>优点</td><td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td><td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td></tr><tr><td>缺点</td><td>不易维护、不易复用、不易扩展</td><td>性能比面向过程低</td></tr></tbody></table><a id="more"></a><h2 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//以下代码是对对象的复习</span></span><br><span class="line"><span class="hljs-comment">//字面量创建对象</span></span><br><span class="line"><span class="hljs-keyword">var</span> ldh = &#123;</span><br><span class="line">    name: <span class="hljs-string">'刘德华'</span>,</span><br><span class="line">    age: <span class="hljs-number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//构造函数创建对象</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>)<span class="hljs-comment">//实例化对象</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure><p>如上两行代码运行结果为:<img src="/前端笔记/javascript高级-day01/img3.png" alt></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</li></ul><h4 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h4><ol><li>语法:</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//步骤1 使用class关键字</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// class body</span></span><br><span class="line">&#125;     </span><br><span class="line"><span class="hljs-comment">//步骤2使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="hljs-keyword">var</span> xx = <span class="hljs-keyword">new</span> name();</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name, age) &#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">  <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="hljs-comment">// 2. 利用类创建对象 new</span></span><br><span class="line">  <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure><p>以上代码运行结果: </p><p><img src="/前端笔记/javascript高级-day01/img4.png" alt></p><p>通过结果我们可以看出,运行结果和使用构造函数方式一样</p><h4 id="类创建添加属性和方法"><a href="#类创建添加属性和方法" class="headerlink" title="类创建添加属性和方法"></a>类创建添加属性和方法</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 1. 创建类 class  创建一个类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 类的共有属性放到 constructor 里面 constructor是 构造器或者构造函数</span></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(uname, age) &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.uname = uname;</span><br><span class="line">      <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">    &#125;<span class="hljs-comment">//-------------------------------------------&gt;注意,方法与方法之间不需要添加逗号</span></span><br><span class="line">    sing(song) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.uname + <span class="hljs-string">'唱'</span> + song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">'刘德华'</span>, <span class="hljs-number">18</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(ldh); <span class="hljs-comment">// Star &#123;uname: "刘德华", age: 18&#125;</span></span><br><span class="line">ldh.sing(<span class="hljs-string">'冰雨'</span>); <span class="hljs-comment">// 刘德华唱冰雨</span></span><br></pre></td></tr></table></figure><p> 以上代码运行结果:</p><p><img src="/前端笔记/javascript高级-day01/img5.png" alt></p><p><strong>注意哟:</strong></p><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><ol><li>语法</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 父类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;   </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 子类继承父类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Son</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">constructor</span>(surname) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.surname= surname;</span><br><span class="line">      &#125;</span><br><span class="line">      say() &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你的姓是'</span> + <span class="hljs-keyword">this</span>.surname);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;  <span class="hljs-comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> damao= <span class="hljs-keyword">new</span> Son(<span class="hljs-string">'刘'</span>);</span><br><span class="line">damao.say();      <span class="hljs-comment">//结果为 你的姓是刘</span></span><br></pre></td></tr></table></figure><p>以上代码运行结果:</p><p><img src="/前端笔记/javascript高级-day01/img6.png" alt></p><ul><li><p>子类使用super关键字访问父类的方法</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//定义了父类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">   <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   sum() &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-comment">//子元素继承父类</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</span><br><span class="line">    son.sum(); <span class="hljs-comment">//结果为3</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li><p>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p></li><li><p>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p></li><li><p>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">// 父类有加法方法</span></span><br><span class="line"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">   <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   sum() &#123;</span><br><span class="line">   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-keyword">this</span>.y);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span></span><br><span class="line">   <span class="hljs-keyword">super</span>(x, y);</span><br><span class="line">   <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">   <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  subtract() &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x - <span class="hljs-keyword">this</span>.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);</span><br><span class="line">son.subtract(); <span class="hljs-comment">//2</span></span><br><span class="line">son.sum();<span class="hljs-comment">//8</span></span><br></pre></td></tr></table></figure><p>以上代码运行结果为:</p><p><img src="/前端笔记/javascript高级-day01/img7.png" alt></p></li><li><p>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.</p><ol><li>constructor中的this指向的是new出来的实例对象 </li><li>自定义的方法,一般也指向的new出来的实例对象</li><li>绑定事件之后this指向的就是触发事件的事件源</li></ol></li><li><p>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象<img src="/前端笔记/javascript高级-day01/img2.png" alt></p><p> <img src="/前端笔记/javascript高级-day01/img1.png" alt></p></li></ol></li></ul><h2 id="面向对象版tab-栏切换"><a href="#面向对象版tab-栏切换" class="headerlink" title="面向对象版tab 栏切换"></a>面向对象版tab 栏切换</h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ol><li>点击 tab栏,可以切换效果.</li><li>点击 + 号, 可以添加 tab 项和内容项.</li><li>点击 x 号, 可以删除当前的tab项和内容项.</li><li>双击tab项文字或者内容项文字可以修改里面的文字内容</li></ol><h3 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h3><ol><li>获取到标题元素</li><li>获取到内容元素</li><li>获取到删除的小按钮 x号</li><li>新建js文件,定义类,添加需要的属性方法(切换,删除,增加,修改)</li><li>时刻注意this的指向问题</li></ol><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><ul><li><p>为获取到的标题绑定点击事件,展示对应的内容区域,存储对应的索引</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.lis[i].index = i;</span><br><span class="line"><span class="hljs-keyword">this</span>.lis[i].onclick = <span class="hljs-keyword">this</span>.toggleTab;</span><br></pre></td></tr></table></figure></li><li><p>使用排他,实现只有一个元素的显示</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">toggleTab() &#123;</span><br><span class="line">  <span class="hljs-comment">//将所有的标题与内容类样式全部移除</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.lis.length; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.lis[i].className = <span class="hljs-string">''</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.sections[i].className = <span class="hljs-string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">//为当前的标题添加激活样式</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.className = <span class="hljs-string">'liactive'</span>;</span><br><span class="line">   <span class="hljs-comment">//为当前的内容添加激活样式</span></span><br><span class="line">    that.sections[<span class="hljs-keyword">this</span>.index].className = <span class="hljs-string">'conactive'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ul><li><p>为添加按钮+ 绑定点击事件 </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.add.onclick = <span class="hljs-keyword">this</span>.addTab;</span><br></pre></td></tr></table></figure></li><li><p>实现标题与内容的添加,做好排他处理</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addTab() &#123;</span><br><span class="line">    that.clearClass();</span><br><span class="line">    <span class="hljs-comment">// (1) 创建li元素和section元素 </span></span><br><span class="line">    <span class="hljs-keyword">var</span> random = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">    <span class="hljs-keyword">var</span> li = <span class="hljs-string">'&lt;li class="liactive"&gt;&lt;span&gt;新选项卡&lt;/span&gt;&lt;span class="iconfont icon-guanbi"&gt;&lt;/span&gt;&lt;/li&gt;'</span>;</span><br><span class="line">    <span class="hljs-keyword">var</span> section = <span class="hljs-string">'&lt;section class="conactive"&gt;测试 '</span> + random + <span class="hljs-string">'&lt;/section&gt;'</span>;</span><br><span class="line">    <span class="hljs-comment">// (2) 把这两个元素追加到对应的父元素里面</span></span><br><span class="line">    that.ul.insertAdjacentHTML(<span class="hljs-string">'beforeend'</span>, li);</span><br><span class="line">    that.fsection.insertAdjacentHTML(<span class="hljs-string">'beforeend'</span>, section);</span><br><span class="line">    that.init();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p>为元素的删除按钮x绑定点击事件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.remove[i].onclick = <span class="hljs-keyword">this</span>.removeTab;</span><br></pre></td></tr></table></figure></li><li><p>获取到点击的删除按钮的所在的父元素的所有,删除对应的标题与内容</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">removeTab(e) &#123;</span><br><span class="line">    e.stopPropagation(); <span class="hljs-comment">// 阻止冒泡 防止触发li 的切换点击事件</span></span><br><span class="line">    <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.parentNode.index;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(index);</span><br><span class="line">    <span class="hljs-comment">// 根据索引号删除对应的li 和section   remove()方法可以直接删除指定的元素</span></span><br><span class="line">    that.lis[index].remove();</span><br><span class="line">    that.sections[index].remove();</span><br><span class="line">    that.init();</span><br><span class="line">    <span class="hljs-comment">// 当我们删除的不是选中状态的li 的时候,原来的选中状态li保持不变</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.liactive'</span>)) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-comment">// 当我们删除了选中状态的这个li 的时候, 让它的前一个li 处于选定状态</span></span><br><span class="line">    index--;</span><br><span class="line">    <span class="hljs-comment">// 手动调用我们的点击事件  不需要鼠标触发</span></span><br><span class="line">    that.lis[index] &amp;&amp; that.lis[index].click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li><p>为元素(标题与内容)绑定双击事件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.spans[i].ondblclick = <span class="hljs-keyword">this</span>.editTab;</span><br><span class="line"><span class="hljs-keyword">this</span>.sections[i].ondblclick = <span class="hljs-keyword">this</span>.editTab;</span><br></pre></td></tr></table></figure></li><li><p>在双击事件处理文本选中状态,修改内部DOM节点,实现新旧value值的传递</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">editTab() &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> str = <span class="hljs-keyword">this</span>.innerHTML;</span><br><span class="line">    <span class="hljs-comment">// 双击禁止选定文字</span></span><br><span class="line">    <span class="hljs-built_in">window</span>.getSelection ? <span class="hljs-built_in">window</span>.getSelection().removeAllRanges() :     <span class="hljs-built_in">document</span>.selection.empty();</span><br><span class="line">    <span class="hljs-comment">// alert(11);</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.innerHTML = <span class="hljs-string">'&lt;input type="text" /&gt;'</span>;</span><br><span class="line">      <span class="hljs-keyword">var</span> input = <span class="hljs-keyword">this</span>.children[<span class="hljs-number">0</span>];</span><br><span class="line">      input.value = str;</span><br><span class="line">      input.select(); <span class="hljs-comment">// 文本框里面的文字处于选定状态</span></span><br><span class="line">      <span class="hljs-comment">// 当我们离开文本框就把文本框里面的值给span </span></span><br><span class="line">      input.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.parentNode.innerHTML = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="hljs-comment">// 按下回车也可以把文本框里面的值给span</span></span><br><span class="line">      input.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">13</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// 手动调用表单失去焦点事件  不需要鼠标离开操作</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.blur();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript高级.面向对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;面向过程与面向对象&quot;&gt;&lt;a href=&quot;#面向过程与面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向过程与面向对象&quot;&gt;&lt;/a&gt;面向过程与面向对象&lt;/h2&gt;&lt;h3 id=&quot;面向过程&quot;&gt;&lt;a href=&quot;#面向过程&quot; class=&quot;headerlink&quot; title=&quot;面向过程&quot;&gt;&lt;/a&gt;面向过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;面向过程与面向对象对比&quot;&gt;&lt;a href=&quot;#面向过程与面向对象对比&quot; class=&quot;headerlink&quot; title=&quot;面向过程与面向对象对比&quot;&gt;&lt;/a&gt;面向过程与面向对象对比&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;面向过程&lt;/th&gt;
&lt;th&gt;面向对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;优点&lt;/td&gt;
&lt;td&gt;性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。&lt;/td&gt;
&lt;td&gt;易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缺点&lt;/td&gt;
&lt;td&gt;不易维护、不易复用、不易扩展&lt;/td&gt;
&lt;td&gt;性能比面向过程低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-Day03</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day03/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day03/</id>
    <published>2020-05-23T08:06:42.000Z</published>
    <updated>2020-05-23T08:10:15.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.jQuery事件</p></blockquote><p><img src="/前端笔记/jquery-day03/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够说出4种常见的注册事件<br>能够说出 on 绑定事件的优势<br>能够说出 jQuery 事件委派的优点以及方式<br>能够说出绑定事件与解绑事件<br>能够说出 jQuery 对象的拷贝方法<br>能够说出 jQuery 多库共存的2种方法<br>能够使用 jQuery 插件</p></blockquote><h2 id="jQuery-事件注册"><a href="#jQuery-事件注册" class="headerlink" title="jQuery 事件注册"></a>jQuery 事件注册</h2><p>​    jQuery 为我们提供了方便的事件注册机制，是开发人员抑郁操作优缺点如下：</p><ul><li>优点: 操作简单，且不用担心事件覆盖等问题。</li><li>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</li></ul><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/register.png" alt="register"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. 单个事件注册</span></span><br><span class="line">            $(<span class="hljs-string">"div"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"purple"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="hljs-string">"div"</span>).mouseenter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"skyblue"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件处理"><a href="#jQuery-事件处理" class="headerlink" title="jQuery 事件处理"></a>jQuery 事件处理</h2><p>​    因为普通注册事件方法的不足，jQuery又开发了多个处理方法，重点讲解如下：</p><ul><li>on(): 用于事件绑定，目前最好用的事件绑定方法</li><li>off(): 事件解绑</li><li>trigger() / triggerHandler(): 事件触发</li></ul><h3 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h3><p>​    因为普通注册事件方法的不足，jQuery又创建了多个新的事件绑定方法bind() / live() / delegate() / on()等，其中最好用的是: on()</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/on1.png" alt="on1"></p><p><img src="/前端笔记/jquery-day03/on2.png" alt="on2"></p><p><img src="/前端笔记/jquery-day03/on3.png" alt="on3"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我们都是好孩子&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;ol&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">            <span class="hljs-comment">// $("div").on(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     mouseenter: function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//         $(this).css("background", "skyblue");</span></span><br><span class="line">            <span class="hljs-comment">//     &#125;,</span></span><br><span class="line">            <span class="hljs-comment">//     click: function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//         $(this).css("background", "purple");</span></span><br><span class="line">            <span class="hljs-comment">//     &#125;</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"mouseenter mouseleave"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-keyword">this</span>).toggleClass(<span class="hljs-string">"current"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">  </span><br><span class="line">            <span class="hljs-comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">            <span class="hljs-comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">            <span class="hljs-comment">// $("ul li").click();</span></span><br><span class="line">            $(<span class="hljs-string">"ul"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"li"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="hljs-number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// (3) on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">            $(<span class="hljs-string">"ol"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"li"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="hljs-number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">"&lt;li&gt;我是后来创建的&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol"</span>).append(li);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：发布微博案例"><a href="#案例：发布微博案例" class="headerlink" title="案例：发布微博案例"></a>案例：发布微博案例</h3><blockquote><p>1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中。<br>2.点击的删除按钮，可以删除当前的微博留言。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h3><p>​    当某个事件上面的逻辑，在特定需求下不需要的时候，可以把该事件上的逻辑移除，这个过程我们称为事件解绑。jQuery 为我们提供 了多种事件解绑方法：die() / undelegate() / off() 等，甚至还有只触发一次的事件绑定方法 one()，在这里我们重点讲解一下 off() ;</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/off.png" alt="off"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我们都是好孩子&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;p&gt;我是一个P标签&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ 事件绑定</span></span><br><span class="line"><span class="hljs-regexp">            $("div").on(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                click: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    console.log("我点击了");</span></span><br><span class="line"><span class="hljs-regexp">                &#125;,</span></span><br><span class="line"><span class="hljs-regexp">                mouseover: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    console.log('我鼠标经过了');</span></span><br><span class="line"><span class="hljs-regexp">                &#125;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").on("click", "li", function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                alert(11);</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">  </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. 事件解绑 off </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("div").off();  /</span><span class="hljs-regexp">/ 这个是解除了div身上的所有事件</span></span><br><span class="line"><span class="hljs-regexp">            $("div").off("click"); /</span><span class="hljs-regexp">/ 这个是解除了div身上的点击事件</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").off("click", "li");</span></span><br><span class="line"><span class="hljs-regexp">  </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. one() 但是它只能触发事件一次</span></span><br><span class="line"><span class="hljs-regexp">            $("p").one("click", function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                alert(11);</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件处理-trigger-自动触发事件"><a href="#事件处理-trigger-自动触发事件" class="headerlink" title="事件处理 trigger() 自动触发事件"></a>事件处理 trigger() 自动触发事件</h3><p>​    有些时候，在某些特定的条件下，我们希望某些事件能够自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。由此 jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler() ; </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/t1.png" alt="t1"></p><p><img src="/前端笔记/jquery-day03/t2.png" alt="t2"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;input type=<span class="hljs-string">"text"</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 绑定事件</span></span><br><span class="line">      $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">11</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 自动触发事件</span></span><br><span class="line">      <span class="hljs-comment">// 1. 元素.事件()</span></span><br><span class="line">      <span class="hljs-comment">// $("div").click();会触发元素的默认行为</span></span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 2. 元素.trigger("事件")</span></span><br><span class="line">      <span class="hljs-comment">// $("div").trigger("click");会触发元素的默认行为</span></span><br><span class="line">      $(<span class="hljs-string">"input"</span>).trigger(<span class="hljs-string">"focus"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 3. 元素.triggerHandler("事件") 就是不会触发元素的默认行为</span></span><br><span class="line">      $(<span class="hljs-string">"input"</span>).on(<span class="hljs-string">"focus"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="hljs-keyword">this</span>).val(<span class="hljs-string">"你好吗"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-comment">// 一个会获取焦点，一个不会</span></span><br><span class="line">      $(<span class="hljs-string">"div"</span>).triggerHandler(<span class="hljs-string">"click"</span>);</span><br><span class="line">      <span class="hljs-comment">// $("input").triggerHandler("focus");</span></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件对象"><a href="#jQuery-事件对象" class="headerlink" title="jQuery 事件对象"></a>jQuery 事件对象</h2><p>​    jQuery 对DOM中的事件对象 event 进行了封装，兼容性更好，获取更方便，使用变化不大。事件被触发，就会有事件对象的产生。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/event.png" alt="event"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"点击了document"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"div"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(event);</span></span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"点击了div"</span>);</span><br><span class="line">                event.stopPropagation();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>注意：jQuery中的 event 对象使用，可以借鉴 API 和 DOM 中的 event 。</p><h2 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/extend.png" alt="extend"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 1.合并数据</span></span><br><span class="line">           <span class="hljs-keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">           <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="hljs-number">1</span>,</span><br><span class="line">               name: <span class="hljs-string">"andy"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(targetObj);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// 2. 会覆盖 targetObj 里面原来的数据</span></span><br><span class="line">           <span class="hljs-keyword">var</span> targetObj = &#123;</span><br><span class="line">               id: <span class="hljs-number">0</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="hljs-number">1</span>,</span><br><span class="line">               name: <span class="hljs-string">"andy"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="hljs-comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(targetObj); </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h2><p>​    实际开发中，很多项目连续开发十多年，jQuery版本不断更新，最初的 jQuery 版本无法满足需求，这时就需要保证在旧有版本正常运行的情况下，新的功能使用新的jQuery版本实现，这种情况被称为，jQuery 多库共存。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day03/noconfig.png" alt="noconfig"></p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">  <span class="hljs-keyword">var</span> suibian = jQuery.noConflict();</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(suibian(<span class="hljs-string">"span"</span>));</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h2><p>​    jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 这些插件也是依赖于jQuery来完成的，所以必须要先引入</p><p>jQuery文件，因此也称为 jQuery 插件。</p><p>​    jQuery 插件常用的网站：</p><ol><li><p>jQuery 插件库  <a href="http://www.jq22.com/" target="_blank" rel="noopener">http://www.jq22.com/</a>     </p></li><li><p>jQuery 之家   <a href="http://www.htmleaf.com/" target="_blank" rel="noopener">http://www.htmleaf.com/</a> </p><p>jQuery 插件使用步骤：</p></li><li><p>引入相关文件。（jQuery 文件 和 插件文件）    </p></li><li><p>复制相关html、css、js (调用插件)。</p></li></ol><h3 id="瀑布流插件（重点讲解）"><a href="#瀑布流插件（重点讲解）" class="headerlink" title="瀑布流插件（重点讲解）"></a>瀑布流插件（重点讲解）</h3><p>​    我们学习的第一个插件是jQuery之家的开源插件，瀑布流。我们将重点详细讲解，从找到插件所在网页，然后点击下载代码，到插件的使用等，后面的插件使用可参考瀑布流插件的使用。</p><p><strong>下载位置</strong></p><p><img src="/前端笔记/jquery-day03/water.png" alt="water"></p><p><img src="/前端笔记/jquery-day03/download.png" alt></p><p><strong>代码演示</strong></p><p>​    插件的使用三点：   1. 引入css.           2.引入JS            3.引入html。 （有的简单插件只需引入html和js，甚至有的只需引入js）</p><ul><li>1.引入css.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"css/normalize.css"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> type=<span class="hljs-string">"text/css"</span> href=<span class="hljs-string">"css/default.css"</span>&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- 下面的样式代码为页面布局，可以引入，也可以自己写，自己设计页面样式，一般为直接引入，方便 --&gt;</span><br><span class="line">&lt;style type=<span class="hljs-string">"text/css"</span>&gt;</span><br><span class="line">  #gallery-wrapper &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    max-width: <span class="hljs-number">75</span>%;</span><br><span class="line">    width: <span class="hljs-number">75</span>%;</span><br><span class="line">    margin: <span class="hljs-number">50</span>px auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img.thumb &#123;</span><br><span class="line">    width: <span class="hljs-number">100</span>%;</span><br><span class="line">    max-width: <span class="hljs-number">100</span>%;</span><br><span class="line">    height: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: white;</span><br><span class="line">    border-radius: <span class="hljs-number">5</span>px;</span><br><span class="line">    box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">1</span>px <span class="hljs-number">2</span>px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);</span><br><span class="line">    padding: <span class="hljs-number">10</span>px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 &#123;</span><br><span class="line">    font-size: <span class="hljs-number">1</span>em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 a &#123;</span><br><span class="line">    color: #A92733;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel:hover &#123;</span><br><span class="line">    box-shadow: <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px <span class="hljs-number">10</span>px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span><br><span class="line">    margin-top: <span class="hljs-number">-5</span>px;</span><br><span class="line">    -webkit-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    -moz-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    -o-transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">    transition: all <span class="hljs-number">0.3</span>s ease-<span class="hljs-keyword">in</span>-out;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入js.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 前两个必须引入 --&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"js/jquery-1.11.0.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"js/pinterest_grid.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 下面的为启动瀑布流代码，参数可调节属性，具体功能可参考readme.html --&gt;</span><br><span class="line">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="hljs-string">"#gallery-wrapper"</span>).pinterest_grid(&#123;</span><br><span class="line">          no_columns: <span class="hljs-number">5</span>,</span><br><span class="line">          padding_x: <span class="hljs-number">15</span>,</span><br><span class="line">          padding_y: <span class="hljs-number">10</span>,</span><br><span class="line">          margin_bottom: <span class="hljs-number">50</span>,</span><br><span class="line">          single_column_breakpoint: <span class="hljs-number">700</span></span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3.引入html.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html结构一般为事先写好，很难修改结构，但可以修改内容及图片的多少（article标签） --&gt;</span><br><span class="line">&lt;section id=<span class="hljs-string">"gallery-wrapper"</span>&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_000.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_005.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_006.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"white-panel"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="hljs-string">"images/P_007.jpg"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"thumb"</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>article&gt;</span><br><span class="line">   &lt;<span class="hljs-regexp">/section&gt;</span></span><br></pre></td></tr></table></figure><p>总结：jQuery插件就是引入别人写好的：html 、css、js  （有时也可以只引入一部分，读懂后也可以修改部分内容）</p><h3 id="图片懒加载插件"><a href="#图片懒加载插件" class="headerlink" title="图片懒加载插件"></a>图片懒加载插件</h3><p>​    图片的懒加载就是：当页面滑动到有图片的位置，图片才进行加载，用以提升页面打开的速度及用户体验。（下载略）</p><p><strong>代码演示</strong></p><p>​    懒加载只需引入html 和 js操作 即可，此插件不涉及css。</p><ul><li>1.引入js</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="hljs-string">"js/EasyLazyload.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   lazyLoadInit(&#123;</span><br><span class="line">   showTime: <span class="hljs-number">1100</span>,</span><br><span class="line">   onLoadBackEnd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"onLoadBackEnd:"</span> + i);</span><br><span class="line">   &#125;,</span><br><span class="line">   onLoadBackStart: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;</span><br><span class="line">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"onLoadBackStart:"</span> + i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入html</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img data-lazy-src=<span class="hljs-string">"upload/floor-1-3.png"</span> alt=<span class="hljs-string">""</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="全屏滚动插件"><a href="#全屏滚动插件" class="headerlink" title="全屏滚动插件"></a>全屏滚动插件</h3><p>​    全屏滚动插件比较大，所以，一般大型插件都会有帮助文档，或者网站。全屏滚动插件介绍比较详细的网站为：</p><p><a href="http://www.dowebok.com/demo/2014/77/" target="_blank" rel="noopener">http://www.dowebok.com/demo/2014/77/</a></p><p><strong>代码演示</strong></p><p>​    全屏滚动因为有多重形式，所以不一样的风格html和css也不一样，但是 js 变化不大。所以下面只演示js的引入，html和css引入根据自己实际</p><p>项目需要使用哪种风格引入对应的HTML和CSS。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="hljs-string">"js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"js/fullpage.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="hljs-string">'#dowebok'</span>).fullpage(&#123;</span><br><span class="line">    sectionsColor: [<span class="hljs-string">'pink'</span>, <span class="hljs-string">'#4BBFC3'</span>, <span class="hljs-string">'#7BAABE'</span>, <span class="hljs-string">'#f90'</span>],</span><br><span class="line">    navigation: <span class="hljs-literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注意：实际开发，一般复制文件，然后在文件中进行修改和添加功能。</p><h3 id="bootstrap组件"><a href="#bootstrap组件" class="headerlink" title="bootstrap组件"></a>bootstrap组件</h3><p>​    Bootstrap是 Twitter 公司设计的基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，他依靠jQuery实现，且支持响应式</p><p>布局，使得 Web 开发更加方便快捷。</p><p>​    <strong>凡是在软件开发中用到了软件的复用，被复用的部分都可以称为组件，凡是在应用程序中已经预留接口的组件就是插件</strong>。Bootstrap组件使</p><p>用非常方便:  1.引入bootstrap相关css和js        2.去官网复制html</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/bootstrap.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;</span><br><span class="line">       &lt;!-- Single button --&gt;</span><br><span class="line">       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn-group"</span>&gt;</span><br><span class="line">           &lt;button type=<span class="hljs-string">"button"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-default dropdown-toggle"</span> data-toggle=<span class="hljs-string">"dropdown"</span> aria-haspopup=<span class="hljs-string">"true"</span> aria-expanded=<span class="hljs-string">"false"</span>&gt;</span><br><span class="line">     Action &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"caret"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line">   &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">           &lt;ul class="dropdown-menu"&gt;</span></span><br><span class="line"><span class="hljs-regexp">               &lt;li&gt;&lt;a href="#"&gt;Action&lt;/</span>a&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li role=<span class="hljs-string">"separator"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"divider"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">               &lt;li&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">           &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap插件（JS）"><a href="#bootstrap插件（JS）" class="headerlink" title="bootstrap插件（JS）"></a>bootstrap插件（JS）</h3><p>​    bootstrap中的js插件其实也是组件的一部分，只不过是需要js调用功能的组件，所以一般bootstrap的js插件一般会伴随着js代码（有的也可以</p><p>省略js，用属性实现）。</p><p>​    步骤： 1.引入bootstrap相关css和js        2.去官网复制html        3.复制js代码，启动js插件。</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/jquery.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="hljs-string">"bootstrap/js/bootstrap.min.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 模态框 --&gt;</span><br><span class="line">&lt;!-- Large modal --&gt;</span><br><span class="line">&lt;button type=<span class="hljs-string">"button"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-primary"</span> data-toggle=<span class="hljs-string">"modal"</span> data-target=<span class="hljs-string">".bs-example-modal-lg"</span>&gt;Large modal&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="modal-dialog modal-lg" role="document"&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="hljs-regexp">            里面就是模态框</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>复制js代码，启动js插件。</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-comment">// 当我们点击了自己定义的按钮，就弹出模态框</span></span><br><span class="line">$(<span class="hljs-string">".myBtn"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// alert(11);</span></span><br><span class="line">$(<span class="hljs-string">'#btn'</span>).modal()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap案例-阿里百秀"><a href="#bootstrap案例-阿里百秀" class="headerlink" title="bootstrap案例-阿里百秀"></a>bootstrap案例-阿里百秀</h3><blockquote><p>1.通过调用组件实现导航栏<br>2.通过调用插件实现登录<br>3.通过调用插件标签页实现 tab 栏</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="综合案例-toDoList案例分析（代码略）"><a href="#综合案例-toDoList案例分析（代码略）" class="headerlink" title="综合案例: toDoList案例分析（代码略）"></a>综合案例: toDoList案例分析（代码略）</h2><h3 id="案例：案例介绍"><a href="#案例：案例介绍" class="headerlink" title="案例：案例介绍"></a>案例：案例介绍</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 文本框里面输入内容，按下回车，就可以生成待办事项。</span></span><br><span class="line"><span class="hljs-comment">// 2. 点击待办事项复选框，就可以把当前数据添加到已完成事项里面。</span></span><br><span class="line"><span class="hljs-comment">// 3. 点击已完成事项复选框，就可以把当前数据添加到待办事项里面。</span></span><br><span class="line"><span class="hljs-comment">// 4. 但是本页面内容刷新页面不会丢失。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-分析"><a href="#案例：toDoList-分析" class="headerlink" title="案例：toDoList 分析"></a>案例：toDoList 分析</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 刷新页面不会丢失数据，因此需要用到本地存储 localStorage</span></span><br><span class="line"><span class="hljs-comment">// 2. 核心思路： 不管按下回车，还是点击复选框，都是把本地存储的数据加载到页面中，这样保证刷新关闭页面不会丢失数据</span></span><br><span class="line"><span class="hljs-comment">// 3. 存储的数据格式：var todolist =  [&#123; title : ‘xxx’, done: false&#125;]</span></span><br><span class="line"><span class="hljs-comment">// 4. 注意点1： 本地存储 localStorage 里面只能存储字符串格式 ，因此需要把对象转换为字符串 JSON.stringify(data)。</span></span><br><span class="line"><span class="hljs-comment">// 5. 注意点2： 获取本地存储数据，需要把里面的字符串转换为对象格式JSON.parse() 我们才能使用里面的数据。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-按下回车把新数据添加到本地存储里面"><a href="#案例：toDoList-按下回车把新数据添加到本地存储里面" class="headerlink" title="案例：toDoList 按下回车把新数据添加到本地存储里面"></a>案例：toDoList 按下回车把新数据添加到本地存储里面</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.切记： 页面中的数据，都要从本地存储里面获取，这样刷新页面不会丢失数据，所以先要把数据保存到本地存储里面。</span></span><br><span class="line"><span class="hljs-comment">// 2.利用事件对象.keyCode判断用户按下回车键（13）。</span></span><br><span class="line"><span class="hljs-comment">// 3.声明一个数组，保存数据。</span></span><br><span class="line"><span class="hljs-comment">// 4.先要读取本地存储原来的数据（声明函数 getData()），放到这个数组里面。</span></span><br><span class="line"><span class="hljs-comment">// 5.之后把最新从表单获取过来的数据，追加到数组里面。</span></span><br><span class="line"><span class="hljs-comment">// 6.最后把数组存储给本地存储 (声明函数 savaDate())</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-本地存储数据渲染加载到页面"><a href="#案例：toDoList-本地存储数据渲染加载到页面" class="headerlink" title="案例：toDoList 本地存储数据渲染加载到页面"></a>案例：toDoList 本地存储数据渲染加载到页面</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.因为后面也会经常渲染加载操作，所以声明一个函数 load，方便后面调用</span></span><br><span class="line"><span class="hljs-comment">// 2.先要读取本地存储数据。（数据不要忘记转换为对象格式）</span></span><br><span class="line"><span class="hljs-comment">// 3.之后遍历这个数据（$.each()），有几条数据，就生成几个小li 添加到 ol 里面。</span></span><br><span class="line"><span class="hljs-comment">// 4.每次渲染之前，先把原先里面 ol 的内容清空，然后渲染加载最新的数据。</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-删除操作"><a href="#案例：toDoList-删除操作" class="headerlink" title="案例：toDoList 删除操作"></a>案例：toDoList 删除操作</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.点击里面的a链接，不是删除的li，而是删除本地存储对应的数据。</span></span><br><span class="line"><span class="hljs-comment">// 2.核心原理：先获取本地存储数据，删除对应的数据，保存给本地存储，重新渲染列表li</span></span><br><span class="line"><span class="hljs-comment">// 3.我们可以给链接自定义属性记录当前的索引号</span></span><br><span class="line"><span class="hljs-comment">// 4.根据这个索引号删除相关的数据----数组的splice(i, 1)方法</span></span><br><span class="line"><span class="hljs-comment">// 5.存储修改后的数据，然后存储给本地存储</span></span><br><span class="line"><span class="hljs-comment">// 6.重新渲染加载数据列表</span></span><br><span class="line"><span class="hljs-comment">// 7.因为a是动态创建的，我们使用on方法绑定事件</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-正在进行和已完成选项操作"><a href="#案例：toDoList-正在进行和已完成选项操作" class="headerlink" title="案例：toDoList  正在进行和已完成选项操作"></a>案例：toDoList  正在进行和已完成选项操作</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.当我们点击了小的复选框，修改本地存储数据，再重新渲染数据列表。</span></span><br><span class="line"><span class="hljs-comment">// 2.点击之后，获取本地存储数据。</span></span><br><span class="line"><span class="hljs-comment">// 3.修改对应数据属性 done 为当前复选框的checked状态。</span></span><br><span class="line"><span class="hljs-comment">// 4.之后保存数据到本地存储</span></span><br><span class="line"><span class="hljs-comment">// 5.重新渲染加载数据列表</span></span><br><span class="line"><span class="hljs-comment">// 6.load 加载函数里面，新增一个条件,如果当前数据的done为true 就是已经完成的，就把列表渲染加载到 ul 里面</span></span><br><span class="line"><span class="hljs-comment">// 7.如果当前数据的done 为false， 则是待办事项，就把列表渲染加载到 ol 里面</span></span><br></pre></td></tr></table></figure><h3 id="案例：toDoList-统计正在进行个数和已经完成个数"><a href="#案例：toDoList-统计正在进行个数和已经完成个数" class="headerlink" title="案例：toDoList 统计正在进行个数和已经完成个数"></a>案例：toDoList 统计正在进行个数和已经完成个数</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.在我们load 函数里面操作</span></span><br><span class="line"><span class="hljs-comment">// 2.声明2个变量 ：todoCount 待办个数  doneCount 已完成个数   </span></span><br><span class="line"><span class="hljs-comment">// 3.当进行遍历本地存储数据的时候， 如果 数据done为 false， 则 todoCount++, 否则 doneCount++</span></span><br><span class="line"><span class="hljs-comment">// 4.最后修改相应的元素 text()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.jQuery事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/jquery-day03/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-Day02</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day02/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day02/</id>
    <published>2020-05-23T07:57:16.000Z</published>
    <updated>2020-05-23T08:05:13.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.jQuery操作元素</p></blockquote><p><img src="/前端笔记/jquery-day02/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够操作  jQuery 属性<br>能够操作  jQuery 元素<br>能够操作  jQuery 元素尺寸、位置</p></blockquote><h2 id="jQuery-属性操作"><a href="#jQuery-属性操作" class="headerlink" title="jQuery 属性操作"></a>jQuery 属性操作</h2><p>​    jQuery 常用属性操作有三种：prop() / attr() / data() ;</p><h3 id="元素固有属性值-prop"><a href="#元素固有属性值-prop" class="headerlink" title="元素固有属性值 prop()"></a>元素固有属性值 prop()</h3><p>​    所谓元素固有属性就是元素本身自带的属性，比如 <a> 元素里面的 href ，比如 <input> 元素里面的 type。 </a></p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/prop.png" alt></p><p>​    注意：prop() 除了普通属性操作，更适合操作表单属性：disabled / checked / selected 等。</p><h3 id="元素自定义属性值-attr"><a href="#元素自定义属性值-attr" class="headerlink" title="元素自定义属性值 attr()"></a>元素自定义属性值 attr()</h3><p>​    用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =“1”。 </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/attr.png" alt></p><p>​    注意：attr() 除了普通属性操作，更适合操作自定义属性。（该方法也可以获取 H5 自定义属性）</p><h3 id="数据缓存-data"><a href="#数据缓存-data" class="headerlink" title="数据缓存 data()"></a>数据缓存 data()</h3><p>​    data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/data.png" alt></p><p>​    注意：同时，还可以读取 HTML5 自定义属性  data-index ，得到的是数字型。</p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=<span class="hljs-string">"http://www.itcast.cn"</span> title=<span class="hljs-string">"都挺好"</span>&gt;都挺好&lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;input type="checkbox" name="" id="" checked&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div index="1" data-index="2"&gt;我是div&lt;/</span>div&gt;</span><br><span class="line">    &lt;span&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/1. element.prop("属性名") 获取元素固有的属性值</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("a").prop("href"));</span></span><br><span class="line"><span class="hljs-regexp">            $("a").prop("title", "我们都挺好");</span></span><br><span class="line"><span class="hljs-regexp">            $("input").change(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">                console.log($(this).prop("checked"));</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ console.log($("div").prop("index"));</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. 元素的自定义属性 我们通过 attr()</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("div").attr("index"));</span></span><br><span class="line"><span class="hljs-regexp">            $("div").attr("index", 4);</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("div").attr("data-index"));</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span><br><span class="line"><span class="hljs-regexp">            $("span").data("uname", "andy");</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("span").data("uname"));</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("div").data("index"));</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-全选"><a href="#案例：购物车案例模块-全选" class="headerlink" title="案例：购物车案例模块-全选"></a>案例：购物车案例模块-全选</h3><blockquote><p>1.全选思路：里面3个小的复选框按钮（j-checkbox）选中状态（checked）跟着全选按钮（checkall）走。<br>2.因为checked 是复选框的固有属性，此时我们需要利用prop()方法获取和设置该属性。<br>3.把全选按钮状态赋值给3小复选框就可以了。<br>4.当我们每次点击小的复选框按钮，就来判断：<br>5.如果小复选框被选中的个数等于3 就应该把全选按钮选上，否则全选按钮不选。<br>6.:checked 选择器      :checked 查找被选中的表单元素。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-文本属性值"><a href="#jQuery-文本属性值" class="headerlink" title="jQuery 文本属性值"></a>jQuery 文本属性值</h2><p>​    jQuery的文本属性值常见操作有三种：html() / text() / val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性。</p><h3 id="jQuery内容文本值"><a href="#jQuery内容文本值" class="headerlink" title="jQuery内容文本值"></a>jQuery内容文本值</h3><p>​    常见操作有三种：html() / text() / val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性，主要针对元素的内容还有表单的值操作。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/html.png" alt></p><p>​    注意：html() 可识别标签，text() 不识别标签。</p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;我是内容&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;input type=<span class="hljs-string">"text"</span> value=<span class="hljs-string">"请输入内容"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 1. 获取设置元素内容 html()</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).html());</span><br><span class="line">        <span class="hljs-comment">// $("div").html("123");</span></span><br><span class="line">        <span class="hljs-comment">// 2. 获取设置元素文本内容 text()</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).text());</span><br><span class="line">        $(<span class="hljs-string">"div"</span>).text(<span class="hljs-string">"123"</span>);</span><br><span class="line">        <span class="hljs-comment">// 3. 获取设置表单值 val()</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"input"</span>).val());</span><br><span class="line">        $(<span class="hljs-string">"input"</span>).val(<span class="hljs-string">"123"</span>);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-增减商品数量"><a href="#案例：购物车案例模块-增减商品数量" class="headerlink" title="案例：购物车案例模块-增减商品数量"></a>案例：购物车案例模块-增减商品数量</h3><blockquote><p>1.核心思路：首先声明一个变量，当我们点击+号（increment），就让这个值++，然后赋值给文本框。<br>2.注意1： 只能增加本商品的数量， 就是当前+号的兄弟文本框（itxt）的值。<br>3.修改表单的值是val() 方法<br>4.注意2： 这个变量初始值应该是这个文本框的值，在这个值的基础上++。要获取表单的值<br>5.减号（decrement）思路同理，但是如果文本框的值是1，就不能再减了。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：购物车案例模块-修改商品小计"><a href="#案例：购物车案例模块-修改商品小计" class="headerlink" title="案例：购物车案例模块-修改商品小计"></a>案例：购物车案例模块-修改商品小计</h3><blockquote><p>1.核心思路：每次点击+号或者-号，根据文本框的值 乘以 当前商品的价格  就是 商品的小计<br>2.注意1： 只能增加本商品的小计， 就是当前商品的小计模块（p-sum）<br>3.修改普通元素的内容是text() 方法<br>4.注意2： 当前商品的价格，要把￥符号去掉再相乘 截取字符串 substr(1)<br>5.parents(‘选择器’) 可以返回指定祖先元素<br>6.最后计算的结果如果想要保留2位小数 通过 toFixed(2)  方法<br>7.用户也可以直接修改表单里面的值，同样要计算小计。 用表单change事件<br>8.用最新的表单内的值 乘以 单价即可  但是还是当前商品小计</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-元素操作"><a href="#jQuery-元素操作" class="headerlink" title="jQuery 元素操作"></a>jQuery 元素操作</h2><p>​    jQuery 元素操作主要讲的是用jQuery方法，操作标签的遍历、创建、添加、删除等操作。</p><h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><p>​    jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p><p><strong>语法1</strong></p><p><img src="/前端笔记/jquery-day02/each1.png" alt></p><p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p><p><strong>语法2</strong></p><p><img src="/前端笔记/jquery-day02/each2.png" alt></p><p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p><p><strong>演示代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span></span><br><span class="line"><span class="hljs-regexp">            var sum = 0;</span></span><br><span class="line"><span class="hljs-regexp">            var arr = ["red", "green", "blue"];</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. each() 方法遍历元素 </span></span><br><span class="line"><span class="hljs-regexp">            $("div").each(function(i, domEle) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ console.log(i);</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ 回调函数第二个参数一定是 dom 元素对象，也是自己命名</span></span><br><span class="line"><span class="hljs-regexp">                /</span><span class="hljs-regexp">/ console.log(domEle);  /</span><span class="hljs-regexp">/ 使用jQuery方法需要转换 $(domEle)</span></span><br><span class="line"><span class="hljs-regexp">                $(domEle).css("color", arr[i]);</span></span><br><span class="line"><span class="hljs-regexp">                sum += parseInt($(domEle).text());</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">            console.log(sum);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $.each($("div"), function(i, ele) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(i);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(ele);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $.each(arr, function(i, ele) &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(i);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/     console.log(ele);</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ &#125;)</span></span><br><span class="line"><span class="hljs-regexp">            $.each(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                name: "andy",</span></span><br><span class="line"><span class="hljs-regexp">                age: 18</span></span><br><span class="line"><span class="hljs-regexp">            &#125;, function(i, ele) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                console.log(i); /</span><span class="hljs-regexp">/ 输出的是 name age 属性名</span></span><br><span class="line"><span class="hljs-regexp">                console.log(ele); /</span><span class="hljs-regexp">/ 输出的是 andy  18 属性值</span></span><br><span class="line"><span class="hljs-regexp">            &#125;)</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-计算总计和总额"><a href="#案例：购物车案例模块-计算总计和总额" class="headerlink" title="案例：购物车案例模块-计算总计和总额"></a>案例：购物车案例模块-计算总计和总额</h3><blockquote><p>1.把所有文本框中的值相加就是总额数量，总计同理。<br>2.文本框里面的值不同，如果想要相加需要用 each() 遍历，声明一个变量做计数器，累加即可。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="创建、添加、删除"><a href="#创建、添加、删除" class="headerlink" title="创建、添加、删除"></a>创建、添加、删除</h3><p>​    jQuery方法操作元素的创建、添加、删除方法很多，则重点使用部分，如下：</p><p><strong>语法总和</strong></p><p><img src="/前端笔记/jquery-day02/create.png" alt></p><p><img src="/前端笔记/jquery-day02/append1.png" alt></p><p><img src="/前端笔记/jquery-day02/append2.png" alt></p><p><img src="/前端笔记/jquery-day02/remove.png" alt></p><p>​    注意：以上只是元素的创建、添加、删除方法的常用方法，其他方法请参详API。</p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;原先的li&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"test"</span>&gt;我是原先的div&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 1. 创建元素</span></span><br><span class="line"><span class="hljs-regexp">            var li = $("&lt;li&gt;我是后来创建的li&lt;/</span>li&gt;<span class="hljs-string">");</span></span><br><span class="line"><span class="hljs-string">      </span></span><br><span class="line"><span class="hljs-string">            // 2. 添加元素</span></span><br><span class="line"><span class="hljs-string">            // 2.1 内部添加</span></span><br><span class="line"><span class="hljs-string">            // $("</span>ul<span class="hljs-string">").append(li);  内部添加并且放到内容的最后面 </span></span><br><span class="line"><span class="hljs-string">            $("</span>ul<span class="hljs-string">").prepend(li); // 内部添加并且放到内容的最前面</span></span><br><span class="line"><span class="hljs-string">            //  2.2 外部添加</span></span><br><span class="line"><span class="hljs-string">            var div = $("</span>&lt;div&gt;我是后妈生的&lt;<span class="hljs-regexp">/div&gt;");</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $(".test").after(div);</span></span><br><span class="line"><span class="hljs-regexp">            $(".test").before(div);</span></span><br><span class="line"><span class="hljs-regexp">      </span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ 3. 删除元素</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("ul").remove(); 可以删除匹配的元素 自杀</span></span><br><span class="line"><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ $("ul").empty(); /</span><span class="hljs-regexp">/ 可以删除匹配的元素里面的子节点 孩子</span></span><br><span class="line"><span class="hljs-regexp">            $("ul").html(""); /</span><span class="hljs-regexp">/ 可以删除匹配的元素里面的子节点 孩子</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：购物车案例模块-删除商品模块"><a href="#案例：购物车案例模块-删除商品模块" class="headerlink" title="案例：购物车案例模块-删除商品模块"></a>案例：购物车案例模块-删除商品模块</h3><blockquote><p>1.核心思路：把商品remove() 删除元素即可<br>2.有三个地方需要删除： 1. 商品后面的删除按钮 2. 删除选中的商品 3. 清理购物车<br>3.商品后面的删除按钮： 一定是删除当前的商品，所以从 $(this) 出发<br>4.删除选中的商品： 先判断小的复选框按钮是否选中状态，如果是选中，则删除对应的商品<br>5.清理购物车： 则是把所有的商品全部删掉</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：购物车案例模块-选中商品添加背景"><a href="#案例：购物车案例模块-选中商品添加背景" class="headerlink" title="案例：购物车案例模块-选中商品添加背景"></a>案例：购物车案例模块-选中商品添加背景</h3><blockquote><p>1.核心思路：选中的商品添加背景，不选中移除背景即可<br>2.全选按钮点击：如果全选是选中的，则所有的商品添加背景，否则移除背景<br>3.小的复选框点击： 如果是选中状态，则当前商品添加背景，否则移除背景<br>4.这个背景，可以通过类名修改，添加类和删除类</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-尺寸、位置操作"><a href="#jQuery-尺寸、位置操作" class="headerlink" title="jQuery 尺寸、位置操作"></a>jQuery 尺寸、位置操作</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><h3 id="jQuery-尺寸操作"><a href="#jQuery-尺寸操作" class="headerlink" title="jQuery 尺寸操作"></a>jQuery 尺寸操作</h3><p>​     jQuery 尺寸操作包括元素宽高的获取和设置，且不一样的API对应不一样的盒子模型。</p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/size.png" alt></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. width() / height() 获取设置元素 width和height大小 </span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).width());</span><br><span class="line">            <span class="hljs-comment">// $("div").width(300);</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).innerWidth());</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).outerWidth());</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">"div"</span>).outerWidth(<span class="hljs-literal">true</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>​    注意：有了这套 API 我们将可以快速获取和子的宽高，至于其他属性想要获取和设置，还要使用 css() 等方法配合。</p><h3 id="jQuery-位置操作"><a href="#jQuery-位置操作" class="headerlink" title="jQuery 位置操作"></a>jQuery 位置操作</h3><p>​    jQuery的位置操作主要有三个： offset()、position()、scrollTop()/scrollLeft() , 具体介绍如下: </p><p><strong>语法</strong></p><p><img src="/前端笔记/jquery-day02/offset.png" alt></p><p><img src="/前端笔记/jquery-day02/position.png" alt></p><p><img src="/前端笔记/jquery-day02/scroll.png" alt></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"father"</span>&gt;</span><br><span class="line">        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"son"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        </span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="back"&gt;返回顶部&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">   </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 1. 获取设置距离文档的位置（偏移） offset</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">".son"</span>).offset());</span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">".son"</span>).offset().top);</span><br><span class="line">            <span class="hljs-comment">// $(".son").offset(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     top: 200,</span></span><br><span class="line">            <span class="hljs-comment">//     left: 200</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">      </span><br><span class="line">            <span class="hljs-comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span></span><br><span class="line">            <span class="hljs-comment">// 这个方法只能获取不能设置偏移</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">".son"</span>).position());</span><br><span class="line">            <span class="hljs-comment">// $(".son").position(&#123;</span></span><br><span class="line">            <span class="hljs-comment">//     top: 200,</span></span><br><span class="line">            <span class="hljs-comment">//     left: 200</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 3. 被卷去的头部</span></span><br><span class="line">      $(<span class="hljs-built_in">document</span>).scrollTop(<span class="hljs-number">100</span>);</span><br><span class="line">            <span class="hljs-comment">// 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span></span><br><span class="line">            <span class="hljs-comment">// 页面滚动事件</span></span><br><span class="line">            <span class="hljs-keyword">var</span> boxTop = $(<span class="hljs-string">".container"</span>).offset().top;</span><br><span class="line">            $(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">                <span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">document</span>).scrollTop());</span><br><span class="line">                <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">document</span>).scrollTop() &gt;= boxTop) &#123;</span><br><span class="line">                    $(<span class="hljs-string">".back"</span>).fadeIn();</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="hljs-string">".back"</span>).fadeOut();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-comment">// 返回顶部</span></span><br><span class="line">            $(<span class="hljs-string">".back"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// $(document).scrollTop(0);</span></span><br><span class="line">                $(<span class="hljs-string">"body, html"</span>).stop().animate(&#123;</span><br><span class="line">                    scrollTop: <span class="hljs-number">0</span></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="hljs-comment">// $(document).stop().animate(&#123;</span></span><br><span class="line">                <span class="hljs-comment">//     scrollTop: 0</span></span><br><span class="line">                <span class="hljs-comment">// &#125;); 不能是文档而是 html和body元素做动画</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="案例：带有动画的返回顶部"><a href="#案例：带有动画的返回顶部" class="headerlink" title="案例：带有动画的返回顶部"></a>案例：带有动画的返回顶部</h3><blockquote><p>1.核心原理： 使用animate动画返回顶部。<br>2.animate动画函数里面有个scrollTop 属性，可以设置位置<br>3.但是是元素做动画，因此 $(“body,html”).animate({scrollTop: 0})</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：-品优购电梯导航（上）"><a href="#案例：-品优购电梯导航（上）" class="headerlink" title="案例： 品优购电梯导航（上）"></a>案例： 品优购电梯导航（上）</h3><blockquote><p>1.当我们滚动到 今日推荐 模块，就让电梯导航显示出来<br>2.点击电梯导航页面可以滚动到相应内容区域<br>3.核心算法：因为电梯导航模块和内容区模块一一对应的<br>4.当我们点击电梯导航某个小模块，就可以拿到当前小模块的索引号<br>5.就可以把animate要移动的距离求出来：当前索引号内容区模块它的offset().top<br>6.然后执行动画即可</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="案例：品优购电梯导航（下）"><a href="#案例：品优购电梯导航（下）" class="headerlink" title="案例：品优购电梯导航（下）"></a>案例：品优购电梯导航（下）</h3><blockquote><p>1.当我们点击电梯导航某个小li， 当前小li 添加current类，兄弟移除类名<br>2.当我们页面滚动到内容区域某个模块， 左侧电梯导航，相对应的小li模块，也会添加current类， 兄弟移除current类。<br>3.触发的事件是页面滚动，因此这个功能要写到页面滚动事件里面。<br>4.需要用到each，遍历内容区域大模块。 each里面能拿到内容区域每一个模块元素和索引号<br>5.判断的条件：  被卷去的头部 大于等于 内容区域里面每个模块的offset().top<br>6.就利用这个索引号找到相应的电梯导航小li添加类。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.jQuery操作元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/前端笔记/jquery-day02/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-Day01</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/jquery-day01/"/>
    <id>http://www.itfool.cn/前端笔记/jquery-day01/</id>
    <published>2020-05-23T07:45:30.000Z</published>
    <updated>2020-05-23T07:55:56.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.jQuery基础.认识jQuery</p></blockquote><p> <img src="/前端笔记/jquery-day01/%E6%80%BB%E7%BB%93.png" alt></p><a id="more"></a><blockquote><p>学习目标：</p><p>能够说出什么是 jQuery<br>能够说出 jQuery 的优点<br>能够简单使用 jQuery<br>能够说出 DOM 对象和 jQuery 对象的区别<br>能够写出常用的 jQuery 选择器<br>能够操作 jQuery 样式<br>能够写出常用的 jQuery 动画 </p></blockquote><h2 id="jQuery-介绍"><a href="#jQuery-介绍" class="headerlink" title="jQuery 介绍"></a>jQuery 介绍</h2><h3 id="JavaScript-库"><a href="#JavaScript-库" class="headerlink" title="JavaScript 库"></a>JavaScript 库</h3><p>​    JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p><blockquote><p>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p><p>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p></blockquote><p>​    常见的JavaScript 库：jQuery、Prototype、YUI、Dojo、Ext JS、移动端的zepto等，这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</p><h3 id="jQuery的概念"><a href="#jQuery的概念" class="headerlink" title="jQuery的概念"></a>jQuery的概念</h3><p>​    jQuery总体概况如下 :</p><ul><li><p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p></li><li><p>j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p></li><li><p>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p></li><li><p>学习jQuery本质： 就是学习调用这些函数（方法）。</p></li><li><p>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p><p><img src="/前端笔记/jquery-day01/jQuery%E6%A6%82%E8%BF%B0.jpg" alt></p></li></ul><h3 id="jQuery的优点"><a href="#jQuery的优点" class="headerlink" title="jQuery的优点"></a>jQuery的优点</h3><ol><li>轻量级。核心文件才几十kb，不会影响页面加载速度。</li><li>跨浏览器兼容，基本兼容了现在主流的浏览器。</li><li>链式编程、隐式迭代。</li><li>对事件、样式、动画支持，大大简化了DOM操作。</li><li>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等。</li><li>免费、开源。</li></ol><h2 id="jQuery-的基本使用"><a href="#jQuery-的基本使用" class="headerlink" title="jQuery 的基本使用"></a>jQuery 的基本使用</h2><h3 id="jQuery-的下载"><a href="#jQuery-的下载" class="headerlink" title="jQuery 的下载"></a>jQuery 的下载</h3><p>​    jQuery的官网地址： <a href="https://jquery.com/，官网即可下载最新版本。" target="_blank" rel="noopener">https://jquery.com/，官网即可下载最新版本。</a></p><blockquote><p> 各个版本的下载：<a href="https://code.jquery.com/" target="_blank" rel="noopener">https://code.jquery.com/</a></p></blockquote><p>​    版本介绍：</p><blockquote><p>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</p><p>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</p><p>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p></blockquote><h3 id="体验jQuery"><a href="#体验jQuery" class="headerlink" title="体验jQuery"></a>体验jQuery</h3><p>​    步骤：</p><ul><li>引入jQuery文件。</li><li>在文档最末尾插入 script 标签，书写体验代码。</li><li>$(‘div’).hide() 可以隐藏盒子。</li></ul><h3 id="jQuery的入口函数"><a href="#jQuery的入口函数" class="headerlink" title="jQuery的入口函数"></a>jQuery的入口函数</h3><p>​    jQuery中常见的两种入口函数：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 第一种: 简单易用。</span></span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;   </span><br><span class="line">    ...  <span class="hljs-comment">// 此处是页面 DOM 加载完成的入口</span></span><br><span class="line">&#125;) ; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 第二种: 繁琐，但是也可以实现</span></span><br><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">   ...  <span class="hljs-comment">//  此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    总结：</p><ol><li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li><li>相当于原生 js 中的 DOMContentLoaded。</li><li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</li><li>更推荐使用第一种方式。</li></ol><h3 id="jQuery中的顶级对象"><a href="#jQuery中的顶级对象" class="headerlink" title="jQuery中的顶级对象$"></a>jQuery中的顶级对象$</h3><ol><li>$是 jQuery 的别称，在代码中可以使用 jQuery 代替，但一般为了方便，通常都直接使用 $ 。</li><li>$是jQuery的顶级对象，相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</li></ol><h3 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h3><p>​    使用 jQuery 方法和原生JS获取的元素是不一样的，总结如下 : </p><ol><li>用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 方法获取的元素就是 jQuery 对象。</li><li>jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）。</li></ol><blockquote><p>注意：</p><p>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p></blockquote><p><img src="/前端笔记/jquery-day01/jQuery%E5%AF%B9%E8%B1%A1%E5%92%8CDOM%E5%AF%B9%E8%B1%A1.png" alt="jQuery对象和DOM对象"></p><h3 id="jQuery-对象和-DOM-对象转换"><a href="#jQuery-对象和-DOM-对象转换" class="headerlink" title="jQuery 对象和 DOM 对象转换"></a>jQuery 对象和 DOM 对象转换</h3><p>​    DOM 对象与 jQuery 对象之间是可以相互转换的。因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span></span><br><span class="line"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'box'</span>);  <span class="hljs-comment">// 获取DOM对象</span></span><br><span class="line"><span class="hljs-keyword">var</span> jQueryObject = $(box);  <span class="hljs-comment">// 把DOM对象转换为 jQuery 对象</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span></span><br><span class="line"><span class="hljs-comment">//   2.1 jQuery对象[索引值]</span></span><br><span class="line"><span class="hljs-keyword">var</span> domObject1 = $(<span class="hljs-string">'div'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//   2.2 jQuery对象.get(索引值)</span></span><br><span class="line"><span class="hljs-keyword">var</span> domObject2 = $(<span class="hljs-string">'div'</span>).get(<span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>总结：实际开发比较常用的是把DOM对象转换为jQuery对象，这样能够调用功能更加强大的jQuery中的方法。</p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><p>​    原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"选择器"</span>)   <span class="hljs-comment">//  里面选择器直接写 CSS 选择器即可，但是要加引号</span></span><br></pre></td></tr></table></figure><p>​    <img src="/前端笔记/jquery-day01/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="基础选择器"></p><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p>​    层级选择器最常用的两个分别为：后代选择器和子代选择器。</p><p>​    <img src="/前端笔记/jquery-day01/%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="层级选择器"></p><p><strong>基础选择器和层级选择器案例代码</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;我是div&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div class="nav"&gt;我是nav div&lt;/</span>div&gt;</span><br><span class="line">    &lt;p&gt;我是p&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我是ul 的&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我是ul 的&lt;<span class="hljs-regexp">/li&gt;        </span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;我是ul 的&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">        $(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log($(".nav"));</span></span><br><span class="line"><span class="hljs-regexp">            console.log($("ul li"));</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h3><p>​    筛选选择器，顾名思义就是在所有的选项中选择满足条件的进行筛选选择。常见如下 :</p><p><img src="/前端笔记/jquery-day01/%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="筛选选择器"></p><p><strong>案例代码</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;ol&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>ol&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"ul li:first"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"red"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ul li:eq(2)"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"blue"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol li:odd"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"skyblue"</span>);</span><br><span class="line">            $(<span class="hljs-string">"ol li:even"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"pink"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>另:  jQuery中还有一些筛选方法，类似DOM中的通过一个节点找另外一个节点，父、子、兄以外有所加强。</p><p><img src="/前端笔记/jquery-day01/relation.png" alt="筛选方法"></p><p>偏重于记忆，演示代码略。</p><h3 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h3><ul><li>jQuery 设置样式</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'div'</span>).css(<span class="hljs-string">'属性'</span>, <span class="hljs-string">'值'</span>)</span><br></pre></td></tr></table></figure><ul><li>jQuery 里面的排他思想</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(“color”,”red”);</span><br><span class="line">$(<span class="hljs-keyword">this</span>).siblings(). css(“color”,””);</span><br></pre></td></tr></table></figure><ul><li>隐式迭代</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</span></span><br><span class="line"><span class="hljs-comment">// 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</span></span><br><span class="line">$(<span class="hljs-string">'div'</span>).hide();  <span class="hljs-comment">// 页面中所有的div全部隐藏，不用循环操作</span></span><br></pre></td></tr></table></figure><ul><li>链式编程</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 链式编程是为了节省代码量，看起来更优雅。</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>).sibling().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">''</span>);</span><br></pre></td></tr></table></figure><h3 id="案例：淘宝服饰精品案例"><a href="#案例：淘宝服饰精品案例" class="headerlink" title="案例：淘宝服饰精品案例"></a>案例：淘宝服饰精品案例</h3><blockquote><p>思路分析:<br>1.核心原理：鼠标经过左侧盒子某个小li，就让内容区盒子相对应图片显示，其余的图片隐藏。<br>2.需要得到当前小li 的索引号，就可以显示对应索引号的图片<br>3.jQuery 得到当前元素索引号 $(this).index()<br>4.中间对应的图片，可以通过  eq(index) 方法去选择<br>5.显示元素 show()   隐藏元素 hide()</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h2><p>​    jQuery中常用的样式操作有两种：css() 和 设置类样式方法</p><h3 id="方法1-操作-css-方法"><a href="#方法1-操作-css-方法" class="headerlink" title="方法1: 操作 css 方法"></a>方法1: 操作 css 方法</h3><p>​    jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p><p>​    常用以下三种形式 : </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.参数只写属性名，则是返回属性值</span></span><br><span class="line"><span class="hljs-keyword">var</span> strColor = $(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">'color'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.  参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(<span class="hljs-string">''</span>color<span class="hljs-string">''</span>, <span class="hljs-string">''</span>red<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.  参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号</span></span><br><span class="line">$(<span class="hljs-keyword">this</span>).css(&#123; <span class="hljs-string">"color"</span>:<span class="hljs-string">"white"</span>,<span class="hljs-string">"font-size"</span>:<span class="hljs-string">"20px"</span>&#125;);</span><br></pre></td></tr></table></figure><p>​    注意：css() 多用于样式少时操作，多了则不太方便。</p><h3 id="方法2-设置类样式方法"><a href="#方法2-设置类样式方法" class="headerlink" title="方法2: 设置类样式方法"></a>方法2: 设置类样式方法</h3><p>​    作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><p>​    常用的三种设置类样式方法：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1.添加类</span></span><br><span class="line">$(<span class="hljs-string">"div"</span>).addClass(<span class="hljs-string">"current"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.删除类</span></span><br><span class="line">$(<span class="hljs-string">"div"</span>).removeClass(<span class="hljs-string">"current"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.切换类</span></span><br><span class="line">$(<span class="hljs-string">"div"</span>).toggleClass(<span class="hljs-string">"current"</span>);</span><br></pre></td></tr></table></figure><p>​    注意：</p><ol><li>设置类样式方法比较适合样式多时操作，可以弥补css()的不足。</li><li>原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</li></ol><h3 id="案例：tab-栏切换"><a href="#案例：tab-栏切换" class="headerlink" title="案例：tab 栏切换"></a>案例：tab 栏切换</h3><blockquote><p>思路分析:<br>1.点击上部的li，当前li 添加current类，其余兄弟移除类。<br>2.点击的同时，得到当前li 的索引号<br>3.让下部里面相应索引号的item显示，其余的item隐藏</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="jQuery-效果"><a href="#jQuery-效果" class="headerlink" title="jQuery 效果"></a>jQuery 效果</h2><p>​    jQuery 给我们封装了很多动画效果，最为常见的如下：</p><ul><li>显示隐藏：show() / hide() / toggle() ;</li><li>划入画出：slideDown() / slideUp() / slideToggle() ; </li><li>淡入淡出：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </li><li>自定义动画：animate() ;</li></ul><blockquote><p>注意：</p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>jQuery为我们提供另一个方法，可以停止动画排队：stop() ;</p></blockquote><h3 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h3><p>​    显示隐藏动画，常见有三个方法：show() / hide() / toggle() ;</p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/show.png" alt="show"></p><p><img src="/前端笔记/jquery-day01/hide.png" alt="hide"></p><p><img src="/前端笔记/jquery-day01/toggle.png" alt="toggle"></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;隐藏&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;切换&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-string">"div"</span>).show(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="hljs-number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-string">"div"</span>).hide(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="hljs-number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              $(<span class="hljs-string">"div"</span>).toggle(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="滑入滑出"><a href="#滑入滑出" class="headerlink" title="滑入滑出"></a>滑入滑出</h3><p>​    滑入滑出动画，常见有三个方法：slideDown() / slideUp() / slideToggle() ; </p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/slideDown.png" alt="slideDown"></p><p><img src="/前端笔记/jquery-day01/slideUp.png" alt="slideUp"></p><p><img src="/前端笔记/jquery-day01/slideToggle.png" alt="slideToggle"></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;下拉滑动&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;上拉滑动&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;切换滑动&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 下滑动 slideDown()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).slideDown();</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 上滑动 slideUp()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).slideUp(<span class="hljs-number">500</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 滑动切换 slideToggle()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).slideToggle(<span class="hljs-number">500</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>小案例：下拉菜单略（详情参看源码）。</p></blockquote><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><p>​    淡入淡出动画，常见有四个方法：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/fadeIn.png" alt="fadeIn"></p><p><img src="/前端笔记/jquery-day01/fadeOut.png" alt="fadeOut"></p><p><img src="/前端笔记/jquery-day01/fadeToggle.png" alt="fadeToggle"></p><p><img src="/前端笔记/jquery-day01/fadeTo.png" alt="fadeTo"></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;淡入效果&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;淡出效果&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;淡入淡出切换&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button&gt;修改透明度&lt;/</span>button&gt;</span><br><span class="line">    &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 淡入 fadeIn()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeIn(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 淡出 fadeOut()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeOut(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// 淡入淡出切换 fadeToggle()</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeToggle(<span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).eq(<span class="hljs-number">3</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span><br><span class="line">                $(<span class="hljs-string">"div"</span>).fadeTo(<span class="hljs-number">1000</span>, <span class="hljs-number">0.5</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>​    自定义动画非常强大，通过参数的传递可以模拟以上所有动画，方法为：animate() ;</p><p>​    语法规范如下:</p><p><img src="/前端笔记/jquery-day01/animate.png" alt></p><p><strong>代码演示</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;动起来&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="hljs-string">"button"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="hljs-string">"div"</span>).animate(&#123;</span><br><span class="line">                    left: <span class="hljs-number">500</span>,</span><br><span class="line">                    top: <span class="hljs-number">300</span>,</span><br><span class="line">                    opacity: <span class="hljs-number">.4</span>,</span><br><span class="line">                    width: <span class="hljs-number">500</span></span><br><span class="line">                &#125;, <span class="hljs-number">500</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="停止动画排队"><a href="#停止动画排队" class="headerlink" title="停止动画排队"></a>停止动画排队</h3><p>​    动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>​    停止动画排队的方法为：stop() ; </p><ul><li>stop() 方法用于停止动画或效果。</li><li>stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li></ul><p>​        总结: 每次使用动画之前，先调用 stop() ,在调用动画。</p><h3 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h3><p>​    jQuery中为我们添加了一个新事件 hover() ; 功能类似 css 中的伪类 :hover 。介绍如下</p><p><strong>语法</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hover([over,]out)     <span class="hljs-comment">// 其中over和out为两个函数</span></span><br></pre></td></tr></table></figure><ul><li>over:鼠标移到元素上要触发的函数（相当于mouseenter）</li><li>out:鼠标移出元素要触发的函数（相当于mouseleave）</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><p><strong>hover事件和停止动画排列案例</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"nav"</span>&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="hljs-string">"#"</span>&gt;微博&lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;ul&gt;&lt;li&gt;&lt;a href=""&gt;私信&lt;/</span>a&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;a href="#"&gt;微博&lt;/</span>a&gt;</span><br><span class="line">            &lt;ul&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// 鼠标经过</span></span><br><span class="line">            <span class="hljs-comment">// $(".nav&gt;li").mouseover(function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     // $(this) jQuery 当前元素  this不要加引号</span></span><br><span class="line">            <span class="hljs-comment">//     // show() 显示元素  hide() 隐藏元素</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideDown(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            <span class="hljs-comment">// // 鼠标离开</span></span><br><span class="line">            <span class="hljs-comment">// $(".nav&gt;li").mouseout(function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideUp(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            <span class="hljs-comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span></span><br><span class="line">            <span class="hljs-comment">// $(".nav&gt;li").hover(function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideDown(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;, function() &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     $(this).children("ul").slideUp(200);</span></span><br><span class="line">            <span class="hljs-comment">// &#125;);</span></span><br><span class="line">            <span class="hljs-comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span></span><br><span class="line">            $(<span class="hljs-string">".nav&gt;li"</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">// stop 方法必须写到动画的前面</span></span><br><span class="line">                $(<span class="hljs-keyword">this</span>).children(<span class="hljs-string">"ul"</span>).stop().slideToggle();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.jQuery基础.认识jQuery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;img src=&quot;/前端笔记/jquery-day01/%E6%80%BB%E7%BB%93.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jQuery" scheme="http://www.itfool.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day07</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day07/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day07/</id>
    <published>2020-05-23T07:37:11.000Z</published>
    <updated>2020-05-23T07:50:29.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.移动端特效</p></blockquote><blockquote><p><strong>学习目标:</strong></p><p>能够写出移动端触屏事件<br>能够写出常见的移动端特效<br>能够使用移动端开发插件开发移动端特效<br>能够使用移动端开发框架开发移动端特效<br>能够写出 sessionStorage 数据的存储以及获取<br>能够写出 localStorage 数据的存储以及获取<br>能够说出它们两者的区别</p></blockquote> <a id="more"></a><h2 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h2><h3 id="触屏事件概述"><a href="#触屏事件概述" class="headerlink" title="触屏事件概述"></a>触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="/前端笔记/webapis-day07/%E5%9B%BE%E7%89%871.png" alt></p><h3 id="触摸事件对象（TouchEvent）"><a href="#触摸事件对象（TouchEvent）" class="headerlink" title="触摸事件对象（TouchEvent）"></a>触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/前端笔记/webapis-day07/%E5%9B%BE%E7%89%872.png" alt></p><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h3><ol><li>touchstart、touchmove、touchend 可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li><li>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</li></ol><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><blockquote><p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p></blockquote><h2 id="移动端常见特效"><a href="#移动端常见特效" class="headerlink" title="移动端常见特效"></a>移动端常见特效</h2><h3 id="案例-移动轮播图"><a href="#案例-移动轮播图" class="headerlink" title="案例: 移动轮播图"></a>案例: 移动轮播图</h3><p><code>移动端轮播图功能和基本PC端一致。</code></p><ol><li>可以自动播放图片</li><li>手指可以拖动播放轮播图</li></ol><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>自动播放功能</li><li>开启定时器</li><li>移动端移动，可以使用translate 移动</li><li>想要图片优雅的移动，请添加过渡效果<img src="/前端笔记/webapis-day07/images%5C1551795152(1).jpg" alt="1551795152(1)"></li></ol><ol><li><p>自动播放功能-无缝滚动</p></li><li><p>注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p></li><li><p>此时需要添加检测过渡完成事件  transitionend </p></li><li><p>判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p></li><li><p>此时图片，去掉过渡效果，然后移动</p></li><li><p>如果索引号小于0， 说明是倒着走， 索引号等于2 </p></li><li><p>此时图片，去掉过渡效果，然后移动</p><p><img src="/前端笔记/webapis-day07/1551795483(1).jpg" alt></p></li></ol><h2 id="classList-属性"><a href="#classList-属性" class="headerlink" title="classList 属性"></a>classList 属性</h2><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p><p><strong>添加类：</strong></p><p>element.classList.add（’类名’）；</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">focus.classList.add(<span class="hljs-string">'current'</span>);</span><br></pre></td></tr></table></figure><p><strong>移除类：</strong></p><p>element.classList.remove（’类名’）;</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">focus.classList.remove(<span class="hljs-string">'current'</span>);</span><br></pre></td></tr></table></figure><p><strong>切换类：</strong></p><p>element.classList.toggle（’类名’）;</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">focus.classList.toggle(<span class="hljs-string">'current'</span>);</span><br></pre></td></tr></table></figure><p><code>注意:以上方法里面，所有类名都不带点</code></p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>小圆点跟随变化效果</p></li><li><p>把ol里面li带有current类名的选出来去掉类名 remove</p></li><li><p>让当前索引号的小li 加上 current   add</p></li><li><p>但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里面</p><p><img src="/前端笔记/webapis-day07/1551796072(1).jpg" alt></p></li></ol><ol><li>手指滑动轮播图</li><li>本质就是ul跟随手指移动，简单说就是移动端拖动元素</li><li>触摸元素touchstart：  获取手指初始坐标</li><li>移动手指touchmove：  计算手指的滑动距离，并且移动盒子</li><li>离开手指touchend:   根据滑动的距离分不同的情况</li><li>如果移动距离小于某个像素  就回弹原来位置</li><li>如果移动距离大于某个像素就上一张下一张滑动。</li><li>滑动也分为左滑动和右滑动判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑 </li><li>如果是左滑就播放下一张 （index++）</li><li>如果是右滑就播放上一张  (index–)</li></ol><p><img src="/前端笔记/webapis-day07/1551796363(1).jpg" alt></p><p><img src="/前端笔记/webapis-day07/1551796502(1).jpg" alt></p><h3 id="案例：返回顶部"><a href="#案例：返回顶部" class="headerlink" title="案例：返回顶部"></a>案例：返回顶部</h3><p>当页面滚动某个地方，就显示，否则隐藏</p><p>点击可以返回顶部</p><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>滚动某个地方显示</li><li>事件：scroll页面滚动事件  </li><li>如果被卷去的头部（window.pageYOffset ）大于某个数值</li><li>点击，window.scroll(0,0) 返回顶部</li></ol><p><img src="/前端笔记/webapis-day07/1551797003(1).jpg" alt></p><h2 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h2><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><p>​    1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    2.利用touch事件自己封装这个事件解决300ms 延迟。 </p><p>​    原理就是：</p><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li>如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li></ol><p>代码如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//封装tap，解决click 300ms 延时</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tap</span> (<span class="hljs-params">obj, callback</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> isMove = <span class="hljs-literal">false</span>;</span><br><span class="line">        <span class="hljs-keyword">var</span> startTime = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录触摸时候的时间变量</span></span><br><span class="line">        obj.addEventListener(<span class="hljs-string">'touchstart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            startTime = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 记录触摸时间</span></span><br><span class="line">        &#125;);</span><br><span class="line">        obj.addEventListener(<span class="hljs-string">'touchmove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            isMove = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">        &#125;);</span><br><span class="line">        obj.addEventListener(<span class="hljs-string">'touchend'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!isMove &amp;&amp; (<span class="hljs-built_in">Date</span>.now() - startTime) &lt; <span class="hljs-number">150</span>) &#123;  <span class="hljs-comment">// 如果手指触摸和离开时间小于150ms 算点击</span></span><br><span class="line">                callback &amp;&amp; callback(); <span class="hljs-comment">// 执行回调函数</span></span><br><span class="line">            &#125;</span><br><span class="line">            isMove = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//  取反 重置</span></span><br><span class="line">            startTime = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//调用  </span></span><br><span class="line">  tap(div, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">// 执行代码  &#125;);</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用插件。fastclick 插件解决300ms 延迟。 </p><p><img src="/前端笔记/webapis-day07/1551797533(1).jpg" alt></p></li></ol><h2 id="移动端常用开发插件"><a href="#移动端常用开发插件" class="headerlink" title="移动端常用开发插件"></a>移动端常用开发插件</h2><h3 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p><p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>我们以前写的animate.js 也算一个最简单的插件</p><p>fastclick 插件解决 300ms 延迟。 使用延时</p><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">https://</a><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">github.com/ftlabs/fastclick</a></p><h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><ol><li><p>引入 js 插件文件。</p></li><li><p>按照规定语法使用。</p></li><li><p>fastclick 插件解决 300ms 延迟。 使用延时</p></li><li><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">https://github.com/ftlabs/fastclick</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">'addEventListener'</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">document</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                       FastClick.attach(<span class="hljs-built_in">document</span>.body);</span><br><span class="line">            &#125;, <span class="hljs-literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Swiper-插件的使用"><a href="#Swiper-插件的使用" class="headerlink" title="Swiper 插件的使用"></a>Swiper 插件的使用</h3><p>中文官网地址： <a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a> </p><ol><li>引入插件相关文件。</li><li>按照规定语法使用</li></ol><h3 id="其他移动端常见插件"><a href="#其他移动端常见插件" class="headerlink" title="其他移动端常见插件"></a>其他移动端常见插件</h3><p>lsuperslide： <a href="http://www.superslide2.com/" target="_blank" rel="noopener">http://www.superslide2.com/</a></p><p>l iscroll： <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">https://github.com/cubiq/iscroll</a></p><h3 id="插件的使用总结"><a href="#插件的使用总结" class="headerlink" title="插件的使用总结"></a>插件的使用总结</h3><p>1.确认插件实现的功能</p><p>2.去官网查看使用说明</p><p>3.下载插件</p><p>4.打开demo实例文件，查看需要引入的相关文件，并且引入</p><p>5.复制demo实例文件中的结构html，样式css以及js代码</p><h3 id="移动端视频插件-zy-media-js"><a href="#移动端视频插件-zy-media-js" class="headerlink" title="移动端视频插件 zy.media.js"></a>移动端视频插件 zy.media.js</h3><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</p><p>不同的视频格式文件，我们可以通过source解决。</p><p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</p><p>这个时候我们可以使用插件方式来制作。</p><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><h2 id="移动端常用开发框架"><a href="#移动端常用开发框架" class="headerlink" title="移动端常用开发框架"></a>移动端常用开发框架</h2><h3 id="移动端视频插件-zy-media-js-1"><a href="#移动端视频插件-zy-media-js-1" class="headerlink" title="移动端视频插件 zy.media.js"></a>移动端视频插件 zy.media.js</h3><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p><p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p><p>框架： 大而全，一整套解决方案</p><p>插件： 小而专一，某个功能的解决方案</p><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p><p>它能开发PC端，也能开发移动端 </p><p>Bootstrap JS插件使用步骤：</p><p>1.引入相关js 文件</p><p>2.复制HTML 结构</p><p>3.修改对应样式</p><p>4.修改相应JS 参数</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h3 id="本地存储特性"><a href="#本地存储特性" class="headerlink" title="本地存储特性"></a>本地存储特性</h3><p>1、数据存储在用户浏览器中</p><p>2、设置、读取方便、甚至页面刷新不丢失数据</p><p>3、容量较大，sessionStorage约5M、localStorage约20M</p><p>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p><h3 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(key, value)</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.getItem(key)</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(key)</span><br></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure><h3 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h3><p>1、声明周期永久生效，除非手动删除 否则关闭页面也会存在</p><p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p><ol start="3"><li>以键值对的形式存储使用</li></ol><p>存储数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(key, value)</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(key)</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(key)</span><br></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure><h3 id="案例：记住用户名"><a href="#案例：记住用户名" class="headerlink" title="案例：记住用户名"></a>案例：记住用户名</h3><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p><h4 id="案例分析-3"><a href="#案例分析-3" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li><p>把数据存起来，用到本地存储</p></li><li><p>关闭页面，也可以显示用户名，所以用到localStorage</p></li><li><p>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</p></li><li><p>当复选框发生改变的时候change事件</p></li><li><p>如果勾选，就存储，否则就移除</p><p><img src="/前端笔记/webapis-day07/1551800263(1).jpg" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.移动端特效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习目标:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够写出移动端触屏事件&lt;br&gt;能够写出常见的移动端特效&lt;br&gt;能够使用移动端开发插件开发移动端特效&lt;br&gt;能够使用移动端开发框架开发移动端特效&lt;br&gt;能够写出 sessionStorage 数据的存储以及获取&lt;br&gt;能够写出 localStorage 数据的存储以及获取&lt;br&gt;能够说出它们两者的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day06</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day06/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day06/</id>
    <published>2020-05-23T07:33:00.000Z</published>
    <updated>2020-05-23T07:50:52.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.函数封装</p></blockquote><blockquote><p><strong>学习目标:</strong></p><p>能够封装简单动画函数</p><p>能够理解缓动动画的封装</p><p>能够使用动画函数</p><p>能够写出网页轮播图案例</p><p>能够写出移动端触屏事件</p></blockquote><a id="more"></a><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><h3 id="缓动效果原理"><a href="#缓动效果原理" class="headerlink" title="缓动效果原理"></a>缓动效果原理</h3><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><p>思路：</p><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li>核心算法： (目标值 - 现在的位置)   /  10    做为每次移动的距离步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器  </li><li>注意步长值需要取整  </li></ol><h3 id="动画函数多个目标值之间移动"><a href="#动画函数多个目标值之间移动" class="headerlink" title="动画函数多个目标值之间移动"></a>动画函数多个目标值之间移动</h3><p>可以让动画函数从 800 移动到 500。</p><p>当我们点击按钮时候，判断步长是正值还是负值</p><p>​    1.如果是正值，则步长往大了取整</p><p>​    2.如果是负值，则步长 向小了取整</p><h3 id="动函数添加回调函数"><a href="#动函数添加回调函数" class="headerlink" title="动函数添加回调函数"></a>动函数添加回调函数</h3><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p><p>回调函数写的位置：定时器结束的位置。</p><h3 id="动画完整版代码"><a href="#动画完整版代码" class="headerlink" title="动画完整版代码:"></a>动画完整版代码:</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 步长值写到定时器的里面</span></span><br><span class="line">        <span class="hljs-comment">// 把我们步长值改为整数 不要出现小数的问题</span></span><br><span class="line">        <span class="hljs-comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line">        <span class="hljs-keyword">var</span> step = (target - obj.offsetLeft) / <span class="hljs-number">10</span>;</span><br><span class="line">        step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.ceil(step) : <span class="hljs-built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="hljs-keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line">            <span class="hljs-comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="hljs-comment">// 回调函数写到定时器结束里面</span></span><br><span class="line">            <span class="hljs-comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="hljs-comment">//     // 调用函数</span></span><br><span class="line">            <span class="hljs-comment">//     callback();</span></span><br><span class="line">            <span class="hljs-comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span><br><span class="line">        obj.style.left = obj.offsetLeft + step + <span class="hljs-string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="hljs-number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见网页特效案例"><a href="#常见网页特效案例" class="headerlink" title="常见网页特效案例"></a>常见网页特效案例</h2><h3 id="案例：网页轮播图"><a href="#案例：网页轮播图" class="headerlink" title="案例：网页轮播图"></a>案例：网页轮播图</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p><p>功能需求：</p><p>​    1.鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</p><p>​    2.点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</p><p>​    3.图片播放的同时，下面小圆圈模块跟随一起变化。</p><p>​    4.点击小圆圈，可以播放相应图片。</p><p>​    5.鼠标不经过轮播图，轮播图也会自动播放图片。</p><p>​    6.鼠标经过，轮播图模块， 自动播放停止。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;load&apos;, function() &#123;</span><br><span class="line">    // 1. 获取元素</span><br><span class="line">    var arrow_l = document.querySelector(&apos;.arrow-l&apos;);</span><br><span class="line">    var arrow_r = document.querySelector(&apos;.arrow-r&apos;);</span><br><span class="line">    var focus = document.querySelector(&apos;.focus&apos;);</span><br><span class="line">    var focusWidth = focus.offsetWidth;</span><br><span class="line">    // 2. 鼠标经过focus 就显示隐藏左右按钮</span><br><span class="line">    focus.addEventListener(&apos;mouseenter&apos;, function() &#123;</span><br><span class="line">        arrow_l.style.display = &apos;block&apos;;</span><br><span class="line">        arrow_r.style.display = &apos;block&apos;;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = null; // 清除定时器变量</span><br><span class="line">    &#125;);</span><br><span class="line">    focus.addEventListener(&apos;mouseleave&apos;, function() &#123;</span><br><span class="line">        arrow_l.style.display = &apos;none&apos;;</span><br><span class="line">        arrow_r.style.display = &apos;none&apos;;</span><br><span class="line">        timer = setInterval(function() &#123;</span><br><span class="line">            //手动调用点击事件</span><br><span class="line">            arrow_r.click();</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 3. 动态生成小圆圈  有几张图片，我就生成几个小圆圈</span><br><span class="line">    var ul = focus.querySelector(&apos;ul&apos;);</span><br><span class="line">    var ol = focus.querySelector(&apos;.circle&apos;);</span><br><span class="line">    // console.log(ul.children.length);</span><br><span class="line">    for (var i = 0; i &lt; ul.children.length; i++) &#123;</span><br><span class="line">        // 创建一个小li </span><br><span class="line">        var li = document.createElement(&apos;li&apos;);</span><br><span class="line">        // 记录当前小圆圈的索引号 通过自定义属性来做 </span><br><span class="line">        li.setAttribute(&apos;index&apos;, i);</span><br><span class="line">        // 把小li插入到ol 里面</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">        // 4. 小圆圈的排他思想 我们可以直接在生成小圆圈的同时直接绑定点击事件</span><br><span class="line">        li.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">            // 干掉所有人 把所有的小li 清除 current 类名</span><br><span class="line">            for (var i = 0; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">                ol.children[i].className = &apos;&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            // 留下我自己  当前的小li 设置current 类名</span><br><span class="line">            this.className = &apos;current&apos;;</span><br><span class="line">            // 5. 点击小圆圈，移动图片 当然移动的是 ul </span><br><span class="line">            // ul 的移动距离 小圆圈的索引号 乘以 图片的宽度 注意是负值</span><br><span class="line">            // 当我们点击了某个小li 就拿到当前小li 的索引号</span><br><span class="line">            var index = this.getAttribute(&apos;index&apos;);</span><br><span class="line">            // 当我们点击了某个小li 就要把这个li 的索引号给 num  </span><br><span class="line">            num = index;</span><br><span class="line">            // 当我们点击了某个小li 就要把这个li 的索引号给 circle  </span><br><span class="line">            circle = index;</span><br><span class="line">            // num = circle = index;</span><br><span class="line">            console.log(focusWidth);</span><br><span class="line">            console.log(index);</span><br><span class="line"></span><br><span class="line">            animate(ul, -index * focusWidth);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 把ol里面的第一个小li设置类名为 current</span><br><span class="line">    ol.children[0].className = &apos;current&apos;;</span><br><span class="line">    // 6. 克隆第一张图片(li)放到ul 最后面</span><br><span class="line">    var first = ul.children[0].cloneNode(true);</span><br><span class="line">    ul.appendChild(first);</span><br><span class="line">    // 7. 点击右侧按钮， 图片滚动一张</span><br><span class="line">    var num = 0;</span><br><span class="line">    // circle 控制小圆圈的播放</span><br><span class="line">    var circle = 0;</span><br><span class="line">    // flag 节流阀</span><br><span class="line">    var flag = true;</span><br><span class="line">    arrow_r.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            flag = false; // 关闭节流阀</span><br><span class="line">            // 如果走到了最后复制的一张图片，此时 我们的ul 要快速复原 left 改为 0</span><br><span class="line">            if (num == ul.children.length - 1) &#123;</span><br><span class="line">                ul.style.left = 0;</span><br><span class="line">                num = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">            animate(ul, -num * focusWidth, function() &#123;</span><br><span class="line">                flag = true; // 打开节流阀</span><br><span class="line">            &#125;);</span><br><span class="line">            // 8. 点击右侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br><span class="line">            circle++;</span><br><span class="line">            // 如果circle == 4 说明走到最后我们克隆的这张图片了 我们就复原</span><br><span class="line">            if (circle == ol.children.length) &#123;</span><br><span class="line">                circle = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            // 调用函数</span><br><span class="line">            circleChange();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 9. 左侧按钮做法</span><br><span class="line">    arrow_l.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">            if (num == 0) &#123;</span><br><span class="line">                num = ul.children.length - 1;</span><br><span class="line">                ul.style.left = -num * focusWidth + &apos;px&apos;;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            num--;</span><br><span class="line">            animate(ul, -num * focusWidth, function() &#123;</span><br><span class="line">                flag = true;</span><br><span class="line">            &#125;);</span><br><span class="line">            // 点击左侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br><span class="line">            circle--;</span><br><span class="line">            // 如果circle &lt; 0  说明第一张图片，则小圆圈要改为第4个小圆圈（3）</span><br><span class="line">            // if (circle &lt; 0) &#123;</span><br><span class="line">            //     circle = ol.children.length - 1;</span><br><span class="line">            // &#125;</span><br><span class="line">            circle = circle &lt; 0 ? ol.children.length - 1 : circle;</span><br><span class="line">            // 调用函数</span><br><span class="line">            circleChange();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function circleChange() &#123;</span><br><span class="line">        // 先清除其余小圆圈的current类名</span><br><span class="line">        for (var i = 0; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">            ol.children[i].className = &apos;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        // 留下当前的小圆圈的current类名</span><br><span class="line">        ol.children[circle].className = &apos;current&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    // 10. 自动播放轮播图</span><br><span class="line">    var timer = setInterval(function() &#123;</span><br><span class="line">        //手动调用点击事件</span><br><span class="line">        arrow_r.click();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h3><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</p><p> 开始设置一个变量var flag= true;</p><p>If(flag){flag = false; do something}       关闭水龙头</p><p>利用回调函数动画执行完毕， flag = true     打开水龙头</p><h3 id="案例：返回顶部"><a href="#案例：返回顶部" class="headerlink" title="案例：返回顶部"></a>案例：返回顶部</h3><ol><li>带有动画的返回顶部</li><li>此时可以继续使用我们封装的动画函数</li><li>只需要把所有的left 相关的值改为 跟 页面垂直滚动距离相关就可以了</li><li>页面滚动了多少，可以通过 window.pageYOffset 得到</li><li>最后是页面滚动，使用 window.scroll(x,y) </li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1. 获取元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.slider-bar'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.banner'</span>);</span><br><span class="line">      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span><br><span class="line">      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop</span><br><span class="line">          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;</span><br><span class="line">      <span class="hljs-comment">// 获取main 主体元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.main'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.goBack'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;</span><br><span class="line">      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">              <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">              <span class="hljs-comment">// console.log(window.pageYOffset);</span></span><br><span class="line">              <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;</span><br><span class="line">                  sliderbar.style.position = <span class="hljs-string">'fixed'</span>;</span><br><span class="line">                  sliderbar.style.top = sliderbarTop + <span class="hljs-string">'px'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  sliderbar.style.position = <span class="hljs-string">'absolute'</span>;</span><br><span class="line">                  sliderbar.style.top = <span class="hljs-string">'300px'</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;</span><br><span class="line">                  goBack.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  goBack.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="hljs-comment">// 3. 当我们点击了返回顶部模块，就让窗口滚动的页面的最上方</span></span><br><span class="line">      goBack.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 里面的x和y 不跟单位的 直接写数字即可</span></span><br><span class="line">          <span class="hljs-comment">// window.scroll(0, 0);</span></span><br><span class="line">          <span class="hljs-comment">// 因为是窗口滚动 所以对象是window</span></span><br><span class="line">          animate(<span class="hljs-built_in">window</span>, <span class="hljs-number">0</span>);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="案例：筋头云案例"><a href="#案例：筋头云案例" class="headerlink" title="案例：筋头云案例"></a>案例：筋头云案例</h3><ol><li>利用动画函数做动画效果</li><li>原先筋斗云的起始位置是0</li><li>鼠标经过某个小li，把当前小li的offsetLeft 位置做为目标值即可</li><li>鼠标离开某个小li，就把目标值设为 0</li><li>如果点击了某个小li， 就把li当前的位置存储起来，做为筋斗云的起始位置</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">           <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">           <span class="hljs-keyword">var</span> cloud = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.cloud'</span>);</span><br><span class="line">           <span class="hljs-keyword">var</span> c_nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.c-nav'</span>);</span><br><span class="line">           <span class="hljs-keyword">var</span> lis = c_nav.querySelectorAll(<span class="hljs-string">'li'</span>);</span><br><span class="line">           <span class="hljs-comment">// 2. 给所有的小li绑定事件 </span></span><br><span class="line">           <span class="hljs-comment">// 这个current 做为筋斗云的起始位置</span></span><br><span class="line">           <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span>;</span><br><span class="line">           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">               <span class="hljs-comment">// (1) 鼠标经过把当前小li 的位置做为目标值</span></span><br><span class="line">               lis[i].addEventListener(<span class="hljs-string">'mouseenter'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                   animate(cloud, <span class="hljs-keyword">this</span>.offsetLeft);</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="hljs-comment">// (2) 鼠标离开就回到起始的位置 </span></span><br><span class="line">               lis[i].addEventListener(<span class="hljs-string">'mouseleave'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                   animate(cloud, current);</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="hljs-comment">// (3) 当我们鼠标点击，就把当前位置做为目标值</span></span><br><span class="line">               lis[i].addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                   current = <span class="hljs-keyword">this</span>.offsetLeft;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h2 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h2><h3 id="触屏事件概述"><a href="#触屏事件概述" class="headerlink" title="触屏事件概述"></a>触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android和 IOS 都有。</p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="/前端笔记/webapis-day06/%E5%9B%BE%E7%89%871.png" alt></p><h3 id="触摸事件对象（TouchEvent）"><a href="#触摸事件对象（TouchEvent）" class="headerlink" title="触摸事件对象（TouchEvent）"></a>触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/前端笔记/webapis-day06/%E5%9B%BE%E7%89%872(1).png" alt></p><blockquote><p><code>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</code></p></blockquote><h3 id="案例：移动端拖动元素"><a href="#案例：移动端拖动元素" class="headerlink" title="案例：移动端拖动元素"></a>案例：移动端拖动元素</h3><ol><li><p>touchstart、touchmove、touchend可以实现拖动元素</p></li><li><p>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </p></li><li><p>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</p></li><li><p>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</p><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><p><code>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.函数封装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习目标:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够封装简单动画函数&lt;/p&gt;
&lt;p&gt;能够理解缓动动画的封装&lt;/p&gt;
&lt;p&gt;能够使用动画函数&lt;/p&gt;
&lt;p&gt;能够写出网页轮播图案例&lt;/p&gt;
&lt;p&gt;能够写出移动端触屏事件&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day05</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day05/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day05/</id>
    <published>2020-05-23T07:21:44.000Z</published>
    <updated>2020-05-23T07:51:00.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.偏移</p></blockquote><blockquote><p><strong>学习目标:</strong></p><p>能够说出常见 offset 系列属性的作用</p><p>能够说出常见 client 系列属性的作用</p><p>能够说出常见 scroll 系列属性的作用</p><p>能够封装简单动画函数</p></blockquote><a id="more"></a><h2 id="元素偏移量-offset-系列"><a href="#元素偏移量-offset-系列" class="headerlink" title="元素偏移量 offset 系列"></a>元素偏移量 offset 系列</h2><h3 id="offset-概述"><a href="#offset-概述" class="headerlink" title="offset 概述"></a>offset 概述</h3><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ol><li><p>获得元素距离带有定位父元素的位置</p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意：返回的数值都不带单位</p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%871.png" alt></p></li></ol><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%872.png" alt></p><h3 id="offset-与-style-区别"><a href="#offset-与-style-区别" class="headerlink" title="offset 与 style 区别"></a>offset 与 style 区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ul><li><p>offset 可以得到任意样式表中的样式值</p></li><li><p>offset 系列获得的数值是没有单位的</p></li><li><p>offsetWidth 包含padding+border+width</p></li><li><p>offsetWidth 等属性是只读属性，只能获取不能赋值</p></li><li><blockquote><p>所以，我们想要获取元素大小位置，用offset更合适</p></blockquote></li></ul><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><p>style 只能得到行内样式表中的样式值</p></li><li><p>style.width 获得的是带有单位的字符串</p></li><li><p>style.width 获得不包含padding和border 的值</p></li><li><p>style.width 是可读写属性，可以获取也可以赋值</p></li><li><blockquote><p>所以，我们想要给元素更改值，则需要用style改变</p></blockquote></li></ul><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="案例：获取鼠标在盒子内的坐标"><a href="#案例：获取鼠标在盒子内的坐标" class="headerlink" title="案例：获取鼠标在盒子内的坐标"></a>案例：获取鼠标在盒子内的坐标</h3><ol><li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li><li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li><li>其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)</li><li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标</li><li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.box'</span>);</span><br><span class="line">box.addEventListener(<span class="hljs-string">'mousemove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-keyword">this</span>.offsetLeft;</span><br><span class="line"><span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-keyword">this</span>.offsetTop;</span><br><span class="line"><span class="hljs-keyword">this</span>.innerHTML = <span class="hljs-string">'x坐标是'</span> + x + <span class="hljs-string">' y坐标是'</span> + y;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="案例：模态框拖拽"><a href="#案例：模态框拖拽" class="headerlink" title="案例：模态框拖拽"></a>案例：模态框拖拽</h3><p>弹出框，我们也称为模态框。</p><p>​    1.点击弹出层，会弹出模态框， 并且显示灰色半透明的遮挡层。</p><p>​    2.点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</p><p>​    3.鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</p><p>​    4.鼠标松开，可以停止拖动模态框移动</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li><li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li><li>在页面中拖拽的原理：鼠标按下并且移动， 之后松开鼠标</li><li>触发事件是鼠标按下mousedown，鼠标移动mousemove 鼠标松开 mouseup</li><li>拖拽过程:  鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li><li>鼠标按下触发的事件源是最上面一行，就是  id 为 title </li><li>鼠标的坐标减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li><li>鼠标按下，我们要得到鼠标在盒子的坐标。</li><li>鼠标移动，就让模态框的坐标  设置为  ：鼠标坐标 减去盒子坐标即可，注意移动事件写到按下事件里面。</li><li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除  </li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 获取元素</span></span><br><span class="line">       <span class="hljs-keyword">var</span> login = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.login'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.login-bg'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#link'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> closeBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#closeBtn'</span>);</span><br><span class="line">       <span class="hljs-keyword">var</span> title = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#title'</span>);</span><br><span class="line">       <span class="hljs-comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span></span><br><span class="line">       link.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               mask.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">               login.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="hljs-comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span></span><br><span class="line">       closeBtn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               mask.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">               login.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="hljs-comment">// 4. 开始拖拽</span></span><br><span class="line">           <span class="hljs-comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span></span><br><span class="line">       title.addEventListener(<span class="hljs-string">'mousedown'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">           <span class="hljs-keyword">var</span> x = e.pageX - login.offsetLeft;</span><br><span class="line">           <span class="hljs-keyword">var</span> y = e.pageY - login.offsetTop;</span><br><span class="line">           <span class="hljs-comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span></span><br><span class="line">           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'mousemove'</span>, move)</span><br><span class="line"></span><br><span class="line">           <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">               login.style.left = e.pageX - x + <span class="hljs-string">'px'</span>;</span><br><span class="line">               login.style.top = e.pageY - y + <span class="hljs-string">'px'</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="hljs-comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span><br><span class="line">           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'mouseup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">'mousemove'</span>, move);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h3 id="案例：仿京东放大镜"><a href="#案例：仿京东放大镜" class="headerlink" title="案例：仿京东放大镜"></a>案例：仿京东放大镜</h3><ol><li>整个案例可以分为三个功能模块</li><li>鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能</li><li>黄色的遮挡层跟随鼠标功能。 </li><li>移动黄色遮挡层，大图片跟随移动功能。</li></ol><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>黄色的遮挡层跟随鼠标功能。</li><li>把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。</li><li>首先是获得鼠标在盒子的坐标。 </li><li>之后把数值给遮挡层做为left 和top值。</li><li>此时用到鼠标移动事件，但是还是在小图片盒子内移动。</li><li>发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。</li><li>遮挡层不能超出小图片盒子范围。</li><li>如果小于零，就把坐标设置为0</li><li>如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离</li><li>遮挡层的最大移动距离：小图片盒子宽度 减去 遮挡层盒子宽度</li></ol><p><img src="/前端笔记/webapis-day05/image-20200523152952410.png" alt></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> preview_img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.preview_img'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.mask'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> big = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.big'</span>);</span><br><span class="line">    <span class="hljs-comment">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span></span><br><span class="line">    preview_img.addEventListener(<span class="hljs-string">'mouseover'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        mask.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">        big.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    preview_img.addEventListener(<span class="hljs-string">'mouseout'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            mask.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">            big.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="hljs-comment">// 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span></span><br><span class="line">    preview_img.addEventListener(<span class="hljs-string">'mousemove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// (1). 先计算出鼠标在盒子内的坐标</span></span><br><span class="line">        <span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-keyword">this</span>.offsetLeft;</span><br><span class="line">        <span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-keyword">this</span>.offsetTop;</span><br><span class="line">        <span class="hljs-comment">// console.log(x, y);</span></span><br><span class="line">        <span class="hljs-comment">// (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span></span><br><span class="line">        <span class="hljs-comment">// (3) 我们mask 移动的距离</span></span><br><span class="line">        <span class="hljs-keyword">var</span> maskX = x - mask.offsetWidth / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">var</span> maskY = y - mask.offsetHeight / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-comment">// (4) 如果x 坐标小于了0 就让他停在0 的位置</span></span><br><span class="line">        <span class="hljs-comment">// 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="hljs-keyword">var</span> maskMax = preview_img.offsetWidth - mask.offsetWidth;</span><br><span class="line">        <span class="hljs-keyword">if</span> (maskX &lt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            maskX = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskX &gt;= maskMax) &#123;</span><br><span class="line">            maskX = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (maskY &lt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            maskY = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskY &gt;= maskMax) &#123;</span><br><span class="line">            maskY = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        mask.style.left = maskX + <span class="hljs-string">'px'</span>;</span><br><span class="line">        mask.style.top = maskY + <span class="hljs-string">'px'</span>;</span><br><span class="line">        <span class="hljs-comment">// 3. 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="hljs-comment">// 大图</span></span><br><span class="line">        <span class="hljs-keyword">var</span> bigIMg = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.bigImg'</span>);</span><br><span class="line">        <span class="hljs-comment">// 大图片最大移动距离</span></span><br><span class="line">        <span class="hljs-keyword">var</span> bigMax = bigIMg.offsetWidth - big.offsetWidth;</span><br><span class="line">        <span class="hljs-comment">// 大图片的移动距离 X Y</span></span><br><span class="line">        <span class="hljs-keyword">var</span> bigX = maskX * bigMax / maskMax;</span><br><span class="line">        <span class="hljs-keyword">var</span> bigY = maskY * bigMax / maskMax;</span><br><span class="line">        bigIMg.style.left = -bigX + <span class="hljs-string">'px'</span>;</span><br><span class="line">        bigIMg.style.top = -bigY + <span class="hljs-string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="元素可视区-client-系列"><a href="#元素可视区-client-系列" class="headerlink" title="元素可视区 client 系列"></a>元素可视区 client 系列</h2><h3 id="client概述"><a href="#client概述" class="headerlink" title="client概述"></a>client概述</h3><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><h3 id="淘宝-flexible-js-源码分析"><a href="#淘宝-flexible-js-源码分析" class="headerlink" title="淘宝 flexible.js 源码分析"></a>淘宝 flexible.js 源码分析</h3><p>立即执行函数 (function(){})()  或者 (function(){}())</p><p>主要作用： 创建一个独立的作用域。 避免了命名冲突问题</p><p>下面三种情况都会刷新页面都会触发 load 事件。</p><p>1.a标签的超链接</p><p>2.F5或者刷新按钮（强制刷新）</p><p>3.前进后退按钮</p><p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。</p><p>所以此时后退按钮不能刷新页面。</p><p>此时可以使用 pageshow事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件</p><p><code>注意这个事件给window添加。</code></p><h2 id="元素滚动-scroll-系列"><a href="#元素滚动-scroll-系列" class="headerlink" title="元素滚动 scroll 系列"></a>元素滚动 scroll 系列</h2><h3 id="scroll-概述"><a href="#scroll-概述" class="headerlink" title="scroll 概述"></a>scroll 概述</h3><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%875.png" alt></p><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%876.png" alt></p><h3 id="页面被卷去的头部"><a href="#页面被卷去的头部" class="headerlink" title="页面被卷去的头部"></a>页面被卷去的头部</h3><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件。</p><h3 id="案例：仿淘宝固定右侧侧边栏"><a href="#案例：仿淘宝固定右侧侧边栏" class="headerlink" title="案例：仿淘宝固定右侧侧边栏"></a>案例：仿淘宝固定右侧侧边栏</h3><ol><li>原先侧边栏是绝对定位</li><li>当页面滚动到一定位置，侧边栏改为固定定位</li><li>页面继续滚动，会让 返回顶部显示出来</li></ol><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol><li>需要用到页面滚动事件 scroll  因为是页面滚动，所以事件源是document</li><li>滚动到某个位置，就是判断页面被卷去的上部值。</li><li>页面被卷去的头部：可以通过window.pageYOffset 获得  如果是被卷去的左侧window.pageXOffset</li><li>注意，元素被卷去的头部是element.scrollTop  , 如果是页面被卷去的头部 则是 window.pageYOffset</li><li>其实这个值 可以通过盒子的 offsetTop可以得到，如果大于等于这个值，就可以让盒子固定定位了</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//1. 获取元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.slider-bar'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.banner'</span>);</span><br><span class="line">      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span><br><span class="line">      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop</span><br><span class="line">          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line">      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;</span><br><span class="line">      <span class="hljs-comment">// 获取main 主体元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.main'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.goBack'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;</span><br><span class="line">      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// console.log(11);</span></span><br><span class="line">          <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">          <span class="hljs-comment">// console.log(window.pageYOffset);</span></span><br><span class="line">          <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;</span><br><span class="line">              sliderbar.style.position = <span class="hljs-string">'fixed'</span>;</span><br><span class="line">              sliderbar.style.top = sliderbarTop + <span class="hljs-string">'px'</span>;</span><br><span class="line">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">              sliderbar.style.position = <span class="hljs-string">'absolute'</span>;</span><br><span class="line">              sliderbar.style.top = <span class="hljs-string">'300px'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;</span><br><span class="line">              goBack.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">              goBack.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h3 id="页面被卷去的头部兼容性解决方案"><a href="#页面被卷去的头部兼容性解决方案" class="headerlink" title="页面被卷去的头部兼容性解决方案"></a>页面被卷去的头部兼容性解决方案</h3><p>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</p><ol><li>声明了 DTD，使用 document.documentElement.scrollTop</li><li>未声明 DTD，使用  document.body.scrollTop</li><li>新方法 window.pageYOffset和 window.pageXOffset，IE9 开始支持</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScroll</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      left: <span class="hljs-built_in">window</span>.pageXOffset || <span class="hljs-built_in">document</span>.documentElement.scrollLeft || <span class="hljs-built_in">document</span>.body.scrollLeft||<span class="hljs-number">0</span>,</span><br><span class="line">      top: <span class="hljs-built_in">window</span>.pageYOffset || <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"> &#125; </span><br><span class="line">使用的时候  getScroll().left</span><br></pre></td></tr></table></figure><h2 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h2><p><img src="/前端笔记/webapis-day05/%E5%9B%BE%E7%89%877.png" alt></p><p>他们主要用法：</p><p>1.offset系列 经常用于获得元素位置    offsetLeft  offsetTop</p><p>2.client经常用于获取元素大小  clientWidth clientHeight</p><p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p><p>4.注意页面滚动的距离通过 window.pageXOffset  获得</p><h2 id="mouseenter-和mouseover的区别"><a href="#mouseenter-和mouseover的区别" class="headerlink" title="mouseenter 和mouseover的区别"></a>mouseenter 和mouseover的区别</h2><ul><li>当鼠标移动到元素上时就会触发mouseenter 事件</li><li>类似 mouseover，它们两者之间的差别是</li><li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</li><li>之所以这样，就是因为mouseenter不会冒泡</li><li>跟mouseenter搭配鼠标离开 mouseleave  同样不会冒泡</li></ul><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><h3 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h3><blockquote><p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p></blockquote><p>实现步骤：</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h3 id="动画函数给不同元素记录不同定时器"><a href="#动画函数给不同元素记录不同定时器" class="headerlink" title="动画函数给不同元素记录不同定时器"></a>动画函数给不同元素记录不同定时器</h3><p>如果多个元素都使用这个动画函数，每次都要var 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><blockquote><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target</span>) </span>&#123;</span><br><span class="line">           <span class="hljs-comment">// 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</span></span><br><span class="line">           <span class="hljs-comment">// 解决方案就是 让我们元素只有一个定时器执行</span></span><br><span class="line">           <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">           clearInterval(obj.timer);</span><br><span class="line">           obj.timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">               <span class="hljs-keyword">if</span> (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">                   <span class="hljs-comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">                   clearInterval(obj.timer);</span><br><span class="line">               &#125;</span><br><span class="line">               obj.style.left = obj.offsetLeft + <span class="hljs-number">1</span> + <span class="hljs-string">'px'</span>;</span><br><span class="line"></span><br><span class="line">           &#125;, <span class="hljs-number">30</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.偏移&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习目标:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够说出常见 offset 系列属性的作用&lt;/p&gt;
&lt;p&gt;能够说出常见 client 系列属性的作用&lt;/p&gt;
&lt;p&gt;能够说出常见 scroll 系列属性的作用&lt;/p&gt;
&lt;p&gt;能够封装简单动画函数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebAPIs-Day04</title>
    <link href="http://www.itfool.cn/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/webapis-day04/"/>
    <id>http://www.itfool.cn/前端笔记/webapis-day04/</id>
    <published>2020-05-23T07:13:23.000Z</published>
    <updated>2020-05-23T07:32:09.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第03阶段.JavaScript基础.键盘事件</p></blockquote><blockquote><p>学习目标：</p><p>能够说出常用的3-5个键盘事件</p><p>能够知道如何获取当前键盘按下的是哪个键</p><p>能够知道浏览器的顶级对象window</p><p>能够使用window.onload事件</p><p>能够使用window.onresize事件</p><p>能够说出两种定时器的区别</p><p>能够使用location对象的href属性完成页面之间的跳转</p><p>能够使用location对象获取url中的参数部分</p><p>能够使用history提供的方法实现页面刷新</p></blockquote><a id="more"></a><h2 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h2><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><img src="/前端笔记/webapis-day04/1551318122855.png" alt></p><p><img src="/前端笔记/webapis-day04/1551318160371.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 常用的键盘事件</span></span><br><span class="line">    <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我弹起了'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我按下了press'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keydown'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我按下了down'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h3><p><img src="/前端笔记/webapis-day04/1551318355505.png" alt></p><p><img src="/前端笔记/webapis-day04/1551318404238.png" alt></p><p><strong>使用keyCode属性判断用户按下哪个键</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'up:'</span> + e.keyCode);</span><br><span class="line">        <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;</span><br><span class="line">            alert(<span class="hljs-string">'您按下的a键'</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="hljs-string">'您没有按下a键'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// console.log(e);</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'press:'</span> + e.keyCode);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：模拟京东按键输入内容"><a href="#案例：模拟京东按键输入内容" class="headerlink" title="案例：模拟京东按键输入内容"></a>案例：模拟京东按键输入内容</h3><p>当我们按下 s 键， 光标就定位到搜索框（文本框获得焦点）。</p><p><img src="/前端笔记/webapis-day04/1551318669520.png" alt></p><blockquote><p>注意：触发获得焦点事件，可以使用 元素对象.focus()</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;input type=<span class="hljs-string">"text"</span>&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 获取输入框</span></span><br><span class="line">      <span class="hljs-keyword">var</span> search = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'input'</span>);</span><br><span class="line"><span class="hljs-comment">// 给document注册keyup事件</span></span><br><span class="line">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 判断keyCode的值</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">83</span>) &#123;</span><br><span class="line">              <span class="hljs-comment">// 触发输入框的获得焦点事件</span></span><br><span class="line">              search.focus();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：模拟京东快递单号查询"><a href="#案例：模拟京东快递单号查询" class="headerlink" title="案例：模拟京东快递单号查询"></a>案例：模拟京东快递单号查询</h3><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p><p><img src="/前端笔记/webapis-day04/1551318882189.png" alt="1551318882189"></p><p><img src="/前端笔记/webapis-day04/1551318909264.png" alt="1551318909264"></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"search"</span>&gt;</span><br><span class="line">      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"con"</span>&gt;<span class="hljs-number">123</span>&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;input type="text" placeholder="请输入您的快递单号" class="jd"&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 获取要操作的元素</span></span><br><span class="line">      <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.con'</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.jd'</span>);</span><br><span class="line"><span class="hljs-comment">// 给输入框注册keyup事件</span></span><br><span class="line">      jd_input.addEventListener(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 判断输入框内容是否为空</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value == <span class="hljs-string">''</span>) &#123;</span><br><span class="line">                  <span class="hljs-comment">// 为空，隐藏放大提示盒子</span></span><br><span class="line">                  con.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  <span class="hljs-comment">// 不为空，显示放大提示盒子，设置盒子的内容</span></span><br><span class="line">                  con.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">                  con.innerText = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      <span class="hljs-comment">// 给输入框注册失去焦点事件，隐藏放大提示盒子</span></span><br><span class="line">      jd_input.addEventListener(<span class="hljs-string">'blur'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              con.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">      <span class="hljs-comment">// 给输入框注册获得焦点事件</span></span><br><span class="line">      jd_input.addEventListener(<span class="hljs-string">'focus'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 判断输入框内容是否为空</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value !== <span class="hljs-string">''</span>) &#123;</span><br><span class="line">              <span class="hljs-comment">// 不为空则显示提示盒子</span></span><br><span class="line">              con.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h3><p>​    BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。</p><p>​    BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><p>​    BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p><p><img src="/前端笔记/webapis-day04/1551319264407.png" alt></p><h3 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h3><p>BOM 比 DOM 更大，它包含 DOM。</p><p><img src="/前端笔记/webapis-day04/1551319344183.png" alt></p><h3 id="顶级对象window"><a href="#顶级对象window" class="headerlink" title="顶级对象window"></a>顶级对象window</h3><p><img src="/前端笔记/webapis-day04/1551319372909.png" alt></p><h3 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h3><h4 id="页面（窗口）加载事件（2种）"><a href="#页面（窗口）加载事件（2种）" class="headerlink" title="页面（窗口）加载事件（2种）"></a>页面（窗口）加载事件（2种）</h4><p><strong>第1种</strong></p><p><img src="/前端笔记/webapis-day04/1551319525109.png" alt></p><p>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p><p><img src="/前端笔记/webapis-day04/1551319600263.png" alt></p><p><strong>第2种</strong></p><p><img src="/前端笔记/webapis-day04/1551319620299.png" alt></p><p>​    DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p><p>​    IE9以上才支持！！！</p><p>​    如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">        btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="hljs-string">'点击我'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">22</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-number">33</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><p><img src="/前端笔记/webapis-day04/1551319803117.png" alt></p><p>​    window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p><p>注意：</p><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件。</p></li><li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p></li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 注册页面加载事件</span></span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    <span class="hljs-comment">// 注册调整窗口大小事件</span></span><br><span class="line">        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">// window.innerWidth 获取窗口大小</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'变化了'</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.innerWidth &lt;= <span class="hljs-number">800</span>) &#123;</span><br><span class="line">                div.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                div.style.display = <span class="hljs-string">'block'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="定时器（两种）"><a href="#定时器（两种）" class="headerlink" title="定时器（两种）"></a>定时器（两种）</h3><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p><ul><li><p>setTimeout() </p></li><li><p>setInterval()  </p></li></ul><h4 id="setTimeout-炸弹定时器"><a href="#setTimeout-炸弹定时器" class="headerlink" title="setTimeout() 炸弹定时器"></a>setTimeout() 炸弹定时器</h4><h5 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/前端笔记/webapis-day04/1551320279307.png" alt></p><p><img src="/前端笔记/webapis-day04/1551320408854.png" alt></p><p><img src="/前端笔记/webapis-day04/1551320298981.png" alt></p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 普通函数是按照代码顺序直接调用。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</span><br><span class="line">&gt; 例如：定时器中的调用函数，事件处理函数，也是回调函数。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 以前我们讲的   element.onclick = function()&#123;&#125;   或者  element.addEventListener(“click”, fn);   里面的 函数也是回调函数。</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-comment">// 回调函数是一个匿名函数</span></span><br><span class="line">       setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'时间到了'</span>);</span><br><span class="line"></span><br><span class="line">       &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'爆炸了'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="hljs-comment">// 回调函数是一个有名函数</span></span><br><span class="line">      <span class="hljs-keyword">var</span> timer1 = setTimeout(callback, <span class="hljs-number">3000</span>);</span><br><span class="line">      <span class="hljs-keyword">var</span> timer2 = setTimeout(callback, <span class="hljs-number">5000</span>);</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="案例：5秒后关闭广告"><a href="#案例：5秒后关闭广告" class="headerlink" title="案例：5秒后关闭广告"></a>案例：5秒后关闭广告</h5><p><img src="/前端笔记/webapis-day04/1551320924828.png" alt></p><p><img src="/前端笔记/webapis-day04/1551320959756.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"images/ad.jpg"</span> alt=<span class="hljs-string">""</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"ad"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="hljs-comment">// 获取要操作的元素</span></span><br><span class="line">        <span class="hljs-keyword">var</span> ad = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.ad'</span>);</span><br><span class="line"><span class="hljs-comment">// 开启定时器</span></span><br><span class="line">        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            ad.style.display = <span class="hljs-string">'none'</span>;</span><br><span class="line">        &#125;, <span class="hljs-number">5000</span>);</span><br><span class="line">    &lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h5 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/前端笔记/webapis-day04/1551321051001.png" alt></p><p><img src="/前端笔记/webapis-day04/1551321064154.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button&gt;点击停止定时器&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">      var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 开启定时器</span></span><br><span class="line"><span class="hljs-regexp">      var timer = setTimeout(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">          console.log('爆炸了');</span></span><br><span class="line"><span class="hljs-regexp">      &#125;, 5000);</span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 给按钮注册单击事件</span></span><br><span class="line"><span class="hljs-regexp">      btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">          /</span><span class="hljs-regexp">/ 停止定时器</span></span><br><span class="line"><span class="hljs-regexp">          clearTimeout(timer);</span></span><br><span class="line"><span class="hljs-regexp">      &#125;)</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="setInterval-闹钟定时器"><a href="#setInterval-闹钟定时器" class="headerlink" title="setInterval() 闹钟定时器"></a>setInterval() 闹钟定时器</h4><h5 id="开启定时器-1"><a href="#开启定时器-1" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/前端笔记/webapis-day04/1551321162158.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. setInterval </span></span><br><span class="line">    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'继续输出'</span>);</span><br><span class="line">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h5><p><img src="/前端笔记/webapis-day04/1551321298787.png" alt></p><p><img src="/前端笔记/webapis-day04/1551321322188.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"hour"</span>&gt;<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;span class="minute"&gt;2&lt;/</span>span&gt;</span><br><span class="line">    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"second"</span>&gt;<span class="hljs-number">3</span>&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 1. 获取元素（时分秒盒子） </span></span><br><span class="line">    <span class="hljs-keyword">var</span> hour = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.hour'</span>); <span class="hljs-comment">// 小时的黑色盒子</span></span><br><span class="line">    <span class="hljs-keyword">var</span> minute = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.minute'</span>); <span class="hljs-comment">// 分钟的黑色盒子</span></span><br><span class="line">    <span class="hljs-keyword">var</span> second = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.second'</span>); <span class="hljs-comment">// 秒数的黑色盒子</span></span><br><span class="line">    <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2019-5-1 18:00:00'</span>); <span class="hljs-comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line"></span><br><span class="line">    countDown(); <span class="hljs-comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 2. 开启定时器</span></span><br><span class="line">    setInterval(countDown, <span class="hljs-number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">        <span class="hljs-keyword">var</span> times = (inputTime - nowTime) / <span class="hljs-number">1000</span>; <span class="hljs-comment">// times是剩余时间总的秒数 </span></span><br><span class="line">        <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>); <span class="hljs-comment">//时</span></span><br><span class="line">        h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + h : h;</span><br><span class="line">        hour.innerHTML = h; <span class="hljs-comment">// 把剩余的小时给 小时黑色盒子</span></span><br><span class="line">        <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>); <span class="hljs-comment">// 分</span></span><br><span class="line">        m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + m : m;</span><br><span class="line">        minute.innerHTML = m;</span><br><span class="line">        <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>); <span class="hljs-comment">// 当前的秒</span></span><br><span class="line">        s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + s : s;</span><br><span class="line">        second.innerHTML = s;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="停止定时器-1"><a href="#停止定时器-1" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/前端笔记/webapis-day04/1551321444559.png" alt></p><h4 id="案例：发送短信倒计时"><a href="#案例：发送短信倒计时" class="headerlink" title="案例：发送短信倒计时"></a>案例：发送短信倒计时</h4><p>​    点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信。</p><p><img src="/前端笔记/webapis-day04/1551321540676.png" alt></p><p><img src="/前端笔记/webapis-day04/1551321564247.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  手机号码： &lt;input type=<span class="hljs-string">"number"</span>&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line"><span class="hljs-comment">// 全局变量，定义剩下的秒数</span></span><br><span class="line">      <span class="hljs-keyword">var</span> time = <span class="hljs-number">3</span>; </span><br><span class="line"><span class="hljs-comment">// 注册单击事件</span></span><br><span class="line">      btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// 禁用按钮</span></span><br><span class="line">          btn.disabled = <span class="hljs-literal">true</span>;</span><br><span class="line">          <span class="hljs-comment">// 开启定时器</span></span><br><span class="line">          <span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">              <span class="hljs-comment">// 判断剩余秒数</span></span><br><span class="line">              <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                  <span class="hljs-comment">// 清除定时器和复原按钮</span></span><br><span class="line">                  clearInterval(timer);</span><br><span class="line">                  btn.disabled = <span class="hljs-literal">false</span>;</span><br><span class="line">                  btn.innerHTML = <span class="hljs-string">'发送'</span>;</span><br><span class="line">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                  btn.innerHTML = <span class="hljs-string">'还剩下'</span> + time + <span class="hljs-string">'秒'</span>;</span><br><span class="line">                  time--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><p>​    this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象。</p><p>现阶段，我们先了解一下几个this指向</p><ol><li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p></li><li><p>方法调用中谁调用this指向谁</p></li><li><p>构造函数中this指向构造函数的实例</p></li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span><br><span class="line"><span class="hljs-regexp">    console.log(this);</span></span><br><span class="line"><span class="hljs-regexp">    function fn() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    window.fn();</span></span><br><span class="line"><span class="hljs-regexp">    window.setTimeout(function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;, 1000);</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 2. 方法调用中谁调用this指向谁</span></span><br><span class="line"><span class="hljs-regexp">    var o = &#123;</span></span><br><span class="line"><span class="hljs-regexp">        sayHi: function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log(this); /</span><span class="hljs-regexp">/ this指向的是 o 这个对象</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    o.sayHi();</span></span><br><span class="line"><span class="hljs-regexp">    var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">    btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            console.log(this); /</span><span class="hljs-regexp">/ 事件处理函数中的this指向的是btn这个按钮对象</span></span><br><span class="line"><span class="hljs-regexp">        &#125;)</span></span><br><span class="line"><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 3. 构造函数中this指向构造函数的实例</span></span><br><span class="line"><span class="hljs-regexp">    function Fun() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log(this); /</span><span class="hljs-regexp">/ this 指向的是fun 实例对象</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    var fun = new Fun();</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><h4 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h4><p><img src="/前端笔记/webapis-day04/1551322091638.png" alt></p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><img src="/前端笔记/webapis-day04/1551322373704.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322387201.png" alt></p><h4 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h4><p><img src="/前端笔记/webapis-day04/1551322416716.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322438200.png" alt></p><h4 id="案例：5分钟自动跳转页面"><a href="#案例：5分钟自动跳转页面" class="headerlink" title="案例：5分钟自动跳转页面"></a>案例：5分钟自动跳转页面</h4><p><img src="/前端笔记/webapis-day04/1551322496871.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322517605.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">    btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// console.log(location.href);</span></span><br><span class="line">        location.href = <span class="hljs-string">'http://www.itcast.cn'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-keyword">var</span> timer = <span class="hljs-number">5</span>;</span><br><span class="line">    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (timer == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            location.href = <span class="hljs-string">'http://www.itcast.cn'</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            div.innerHTML = <span class="hljs-string">'您将在'</span> + timer + <span class="hljs-string">'秒钟之后跳转到首页'</span>;</span><br><span class="line">            timer--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例：获取URL参数"><a href="#案例：获取URL参数" class="headerlink" title="案例：获取URL参数"></a>案例：获取URL参数</h4><p><img src="/前端笔记/webapis-day04/1551322622640.png" alt></p><p><img src="/前端笔记/webapis-day04/1551322639241.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(location.search); <span class="hljs-comment">// ?uname=andy</span></span><br><span class="line">       <span class="hljs-comment">// 1.先去掉？  substr('起始的位置'，截取几个字符);</span></span><br><span class="line">       <span class="hljs-keyword">var</span> params = location.search.substr(<span class="hljs-number">1</span>); <span class="hljs-comment">// uname=andy</span></span><br><span class="line">       <span class="hljs-built_in">console</span>.log(params);</span><br><span class="line">       <span class="hljs-comment">// 2. 利用=把字符串分割为数组 split('=');</span></span><br><span class="line">       <span class="hljs-keyword">var</span> arr = params.split(<span class="hljs-string">'='</span>);</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// ["uname", "ANDY"]</span></span><br><span class="line">       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="line">       <span class="hljs-comment">// 3.把数据写入div中</span></span><br><span class="line">       div.innerHTML = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">'欢迎您'</span>;</span><br><span class="line">   &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="location对象的常见方法"><a href="#location对象的常见方法" class="headerlink" title="location对象的常见方法"></a>location对象的常见方法</h4><p><img src="/前端笔记/webapis-day04/1551322750241.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    var btn = document.querySelector('button');</span></span><br><span class="line"><span class="hljs-regexp">    btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 记录浏览历史，所以可以实现后退功能</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ location.assign('http:/</span><span class="hljs-regexp">/www.itcast.cn');</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 不记录浏览历史，所以不可以实现后退功能</span></span><br><span class="line"><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ location.replace('http:/</span><span class="hljs-regexp">/www.itcast.cn');</span></span><br><span class="line"><span class="hljs-regexp">        location.reload(true);</span></span><br><span class="line"><span class="hljs-regexp">    &#125;)</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p>​    navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p><p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>((navigator.userAgent.match(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">""</span>;     <span class="hljs-comment">//手机</span></span><br><span class="line"> &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">""</span>;     <span class="hljs-comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>​    window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><p><img src="/前端笔记/webapis-day04/1551322885216.png" alt></p><p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p><p><img src="/前端笔记/webapis-day04/1551322959148.png" alt></p><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><p>以下代码执行的结果是什么？</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);</span><br><span class="line">&#125;, <span class="hljs-number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure><p>以下代码执行的结果是什么？</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);</span><br><span class="line">&#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="JS-是单线程"><a href="#JS-是单线程" class="headerlink" title="JS 是单线程"></a>JS 是单线程</h3><p><img src="/前端笔记/webapis-day04/1551415019322.png" alt></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span><br><span class="line">这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</span><br></pre></td></tr></table></figure><h3 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h3><p>​    单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p><p>​    为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​    你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p><img src="/前端笔记/webapis-day04/1551434295074.png" alt></p><blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; JS中所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 同步任务指的是：</span><br><span class="line">&gt; 在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</span><br><span class="line">&gt; 异步任务指的是：</span><br><span class="line">&gt; 不进入主线程、而进入”任务队列”的任务，当主线程中的任务运行完了，才会从”任务队列”取出异步任务放入主线程执行。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/前端笔记/webapis-day04/1551434972778.png" alt></p><h3 id="JS执行机制（事件循环）"><a href="#JS执行机制（事件循环）" class="headerlink" title="JS执行机制（事件循环）"></a>JS执行机制（事件循环）</h3><p><img src="/前端笔记/webapis-day04/1551435335464.png" alt></p><p><img src="/前端笔记/webapis-day04/1551435398306.png" alt></p><p><img src="/前端笔记/webapis-day04/1551435449634.png" alt></p><h3 id="代码思考题"><a href="#代码思考题" class="headerlink" title="代码思考题"></a>代码思考题</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'click'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)</span><br><span class="line">&#125;, <span class="hljs-number">3000</span>)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第03阶段.JavaScript基础.键盘事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;学习目标：&lt;/p&gt;
&lt;p&gt;能够说出常用的3-5个键盘事件&lt;/p&gt;
&lt;p&gt;能够知道如何获取当前键盘按下的是哪个键&lt;/p&gt;
&lt;p&gt;能够知道浏览器的顶级对象window&lt;/p&gt;
&lt;p&gt;能够使用window.onload事件&lt;/p&gt;
&lt;p&gt;能够使用window.onresize事件&lt;/p&gt;
&lt;p&gt;能够说出两种定时器的区别&lt;/p&gt;
&lt;p&gt;能够使用location对象的href属性完成页面之间的跳转&lt;/p&gt;
&lt;p&gt;能够使用location对象获取url中的参数部分&lt;/p&gt;
&lt;p&gt;能够使用history提供的方法实现页面刷新&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://www.itfool.cn/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.itfool.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
